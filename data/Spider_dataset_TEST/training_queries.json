[
    {
        "question": "Find the names of all the catalog entries.",
        "query": "SELECT distinct(catalog_entry_name) FROM catalog_contents",
        "query_toks": [
            "SELECT",
            "distinct",
            "(",
            "catalog_entry_name",
            ")",
            "FROM",
            "catalog_contents"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "What are all the catalog entry names?",
        "query": "SELECT distinct(catalog_entry_name) FROM catalog_contents",
        "query_toks": [
            "SELECT",
            "distinct",
            "(",
            "catalog_entry_name",
            ")",
            "FROM",
            "catalog_contents"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "Find the list of attribute data types possessed by more than 3 attribute definitions.",
        "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3",
        "query_toks": [
            "SELECT",
            "attribute_data_type",
            "FROM",
            "Attribute_Definitions",
            "GROUP",
            "BY",
            "attribute_data_type",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "What are the attribute data types with more than 3 attribute definitions?",
        "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3",
        "query_toks": [
            "SELECT",
            "attribute_data_type",
            "FROM",
            "Attribute_Definitions",
            "GROUP",
            "BY",
            "attribute_data_type",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "What is the attribute data type of the attribute with name \"Green\"?",
        "query": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\"",
        "query_toks": [
            "SELECT",
            "attribute_data_type",
            "FROM",
            "Attribute_Definitions",
            "WHERE",
            "attribute_name",
            "=",
            "``",
            "Green",
            "''"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "Find the attribute data type for the attribute named \"Green\".",
        "query": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\"",
        "query_toks": [
            "SELECT",
            "attribute_data_type",
            "FROM",
            "Attribute_Definitions",
            "WHERE",
            "attribute_name",
            "=",
            "``",
            "Green",
            "''"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "Find the name and level of catalog structure with level between 5 and 10.",
        "query": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
        "query_toks": [
            "SELECT",
            "catalog_level_name",
            ",",
            "catalog_level_number",
            "FROM",
            "Catalog_Structure",
            "WHERE",
            "catalog_level_number",
            "BETWEEN",
            "5",
            "AND",
            "10"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "What are the name and level of catalog structure with level number between 5 and 10",
        "query": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
        "query_toks": [
            "SELECT",
            "catalog_level_name",
            ",",
            "catalog_level_number",
            "FROM",
            "Catalog_Structure",
            "WHERE",
            "catalog_level_number",
            "BETWEEN",
            "5",
            "AND",
            "10"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "Find all the catalog publishers whose name contains \"Murray\"",
        "query": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
        "query_toks": [
            "SELECT",
            "distinct",
            "(",
            "catalog_publisher",
            ")",
            "FROM",
            "catalogs",
            "WHERE",
            "catalog_publisher",
            "LIKE",
            "``",
            "%",
            "Murray",
            "%",
            "''"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "Which catalog publishers have substring \"Murray\" in their names?",
        "query": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
        "query_toks": [
            "SELECT",
            "distinct",
            "(",
            "catalog_publisher",
            ")",
            "FROM",
            "catalogs",
            "WHERE",
            "catalog_publisher",
            "LIKE",
            "``",
            "%",
            "Murray",
            "%",
            "''"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "Which catalog publisher has published the most catalogs?",
        "query": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "catalog_publisher",
            "FROM",
            "catalogs",
            "GROUP",
            "BY",
            "catalog_publisher",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "Find the catalog publisher that has the most catalogs.",
        "query": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "catalog_publisher",
            "FROM",
            "catalogs",
            "GROUP",
            "BY",
            "catalog_publisher",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "Find the names and publication dates of all catalogs that have catalog level number greater than 5.",
        "query": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5",
        "query_toks": [
            "SELECT",
            "t1.catalog_name",
            ",",
            "t1.date_of_publication",
            "FROM",
            "catalogs",
            "AS",
            "t1",
            "JOIN",
            "catalog_structure",
            "AS",
            "t2",
            "ON",
            "t1.catalog_id",
            "=",
            "t2.catalog_id",
            "WHERE",
            "catalog_level_number",
            ">",
            "5"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "What are the name and publication date of the catalogs with catalog level number above 5?",
        "query": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5",
        "query_toks": [
            "SELECT",
            "t1.catalog_name",
            ",",
            "t1.date_of_publication",
            "FROM",
            "catalogs",
            "AS",
            "t1",
            "JOIN",
            "catalog_structure",
            "AS",
            "t2",
            "ON",
            "t1.catalog_id",
            "=",
            "t2.catalog_id",
            "WHERE",
            "catalog_level_number",
            ">",
            "5"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "What are the entry names of catalog with the attribute possessed by most entries.",
        "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)",
        "query_toks": [
            "SELECT",
            "t1.catalog_entry_name",
            "FROM",
            "Catalog_Contents",
            "AS",
            "t1",
            "JOIN",
            "Catalog_Contents_Additional_Attributes",
            "AS",
            "t2",
            "ON",
            "t1.catalog_entry_id",
            "=",
            "t2.catalog_entry_id",
            "WHERE",
            "t2.attribute_value",
            "=",
            "(",
            "SELECT",
            "attribute_value",
            "FROM",
            "Catalog_Contents_Additional_Attributes",
            "GROUP",
            "BY",
            "attribute_value",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ")"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "Find the entry names of the catalog with the attribute that have the most entries.",
        "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)",
        "query_toks": [
            "SELECT",
            "t1.catalog_entry_name",
            "FROM",
            "Catalog_Contents",
            "AS",
            "t1",
            "JOIN",
            "Catalog_Contents_Additional_Attributes",
            "AS",
            "t2",
            "ON",
            "t1.catalog_entry_id",
            "=",
            "t2.catalog_entry_id",
            "WHERE",
            "t2.attribute_value",
            "=",
            "(",
            "SELECT",
            "attribute_value",
            "FROM",
            "Catalog_Contents_Additional_Attributes",
            "GROUP",
            "BY",
            "attribute_value",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ")"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "What is the entry name of the most expensive catalog (in USD)?",
        "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "catalog_entry_name",
            "FROM",
            "catalog_contents",
            "ORDER",
            "BY",
            "price_in_dollars",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "Find the entry name of the catalog with the highest price (in USD).",
        "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "catalog_entry_name",
            "FROM",
            "catalog_contents",
            "ORDER",
            "BY",
            "price_in_dollars",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "What is the level name of the cheapest catalog (in USD)?",
        "query": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
        "query_toks": [
            "SELECT",
            "t2.catalog_level_name",
            "FROM",
            "catalog_contents",
            "AS",
            "t1",
            "JOIN",
            "catalog_structure",
            "AS",
            "t2",
            "ON",
            "t1.catalog_level_number",
            "=",
            "t2.catalog_level_number",
            "ORDER",
            "BY",
            "t1.price_in_dollars",
            "LIMIT",
            "1"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "Find the level name of the catalog with the lowest price (in USD).",
        "query": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
        "query_toks": [
            "SELECT",
            "t2.catalog_level_name",
            "FROM",
            "catalog_contents",
            "AS",
            "t1",
            "JOIN",
            "catalog_structure",
            "AS",
            "t2",
            "ON",
            "t1.catalog_level_number",
            "=",
            "t2.catalog_level_number",
            "ORDER",
            "BY",
            "t1.price_in_dollars",
            "LIMIT",
            "1"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "What are the average and minimum price (in Euro) of all products?",
        "query": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "price_in_euros",
            ")",
            ",",
            "min",
            "(",
            "price_in_euros",
            ")",
            "FROM",
            "catalog_contents"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "query": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "price_in_euros",
            ")",
            ",",
            "min",
            "(",
            "price_in_euros",
            ")",
            "FROM",
            "catalog_contents"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "What is the product with the highest height? Give me the catalog entry name.",
        "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "catalog_entry_name",
            "FROM",
            "catalog_contents",
            "ORDER",
            "BY",
            "height",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "Which catalog content has the highest height? Give me the catalog entry name.",
        "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "catalog_entry_name",
            "FROM",
            "catalog_contents",
            "ORDER",
            "BY",
            "height",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "Find the name of the product that has the smallest capacity.",
        "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "catalog_entry_name",
            "FROM",
            "catalog_contents",
            "ORDER",
            "BY",
            "capacity",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "Which catalog content has the smallest capacity? Return the catalog entry name.",
        "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "catalog_entry_name",
            "FROM",
            "catalog_contents",
            "ORDER",
            "BY",
            "capacity",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "Find the names of all the products whose stock number starts with \"2\".",
        "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
        "query_toks": [
            "SELECT",
            "catalog_entry_name",
            "FROM",
            "catalog_contents",
            "WHERE",
            "product_stock_number",
            "LIKE",
            "``",
            "2",
            "%",
            "''"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names.",
        "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
        "query_toks": [
            "SELECT",
            "catalog_entry_name",
            "FROM",
            "catalog_contents",
            "WHERE",
            "product_stock_number",
            "LIKE",
            "``",
            "2",
            "%",
            "''"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "Find the names of catalog entries with level number 8.",
        "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
        "query_toks": [
            "SELECT",
            "t1.catalog_entry_name",
            "FROM",
            "Catalog_Contents",
            "AS",
            "t1",
            "JOIN",
            "Catalog_Contents_Additional_Attributes",
            "AS",
            "t2",
            "ON",
            "t1.catalog_entry_id",
            "=",
            "t2.catalog_entry_id",
            "WHERE",
            "t2.catalog_level_number",
            "=",
            "``",
            "8",
            "''"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "What are the names of catalog entries with level number 8?",
        "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
        "query_toks": [
            "SELECT",
            "t1.catalog_entry_name",
            "FROM",
            "Catalog_Contents",
            "AS",
            "t1",
            "JOIN",
            "Catalog_Contents_Additional_Attributes",
            "AS",
            "t2",
            "ON",
            "t1.catalog_entry_id",
            "=",
            "t2.catalog_entry_id",
            "WHERE",
            "t2.catalog_level_number",
            "=",
            "``",
            "8",
            "''"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "Find the names of the products with length smaller than 3 or height greater than 5.",
        "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "query_toks": [
            "SELECT",
            "catalog_entry_name",
            "FROM",
            "catalog_contents",
            "WHERE",
            "LENGTH",
            "<",
            "3",
            "OR",
            "width",
            ">",
            "5"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "Which catalog contents have length below 3 or above 5? Find the catalog entry names.",
        "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "query_toks": [
            "SELECT",
            "catalog_entry_name",
            "FROM",
            "catalog_contents",
            "WHERE",
            "LENGTH",
            "<",
            "3",
            "OR",
            "width",
            ">",
            "5"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "Find the name and attribute ID of the attribute definitions with attribute value 0.",
        "query": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",
        "query_toks": [
            "SELECT",
            "t1.attribute_name",
            ",",
            "t1.attribute_id",
            "FROM",
            "Attribute_Definitions",
            "AS",
            "t1",
            "JOIN",
            "Catalog_Contents_Additional_Attributes",
            "AS",
            "t2",
            "ON",
            "t1.attribute_id",
            "=",
            "t2.attribute_id",
            "WHERE",
            "t2.attribute_value",
            "=",
            "0"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.",
        "query": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",
        "query_toks": [
            "SELECT",
            "t1.attribute_name",
            ",",
            "t1.attribute_id",
            "FROM",
            "Attribute_Definitions",
            "AS",
            "t1",
            "JOIN",
            "Catalog_Contents_Additional_Attributes",
            "AS",
            "t2",
            "ON",
            "t1.attribute_id",
            "=",
            "t2.attribute_id",
            "WHERE",
            "t2.attribute_value",
            "=",
            "0"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "Find the name and capacity of products with price greater than 700 (in USD).",
        "query": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query_toks": [
            "SELECT",
            "catalog_entry_name",
            ",",
            "capacity",
            "FROM",
            "Catalog_Contents",
            "WHERE",
            "price_in_dollars",
            ">",
            "700"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "query_toks": [
            "SELECT",
            "catalog_entry_name",
            ",",
            "capacity",
            "FROM",
            "Catalog_Contents",
            "WHERE",
            "price_in_dollars",
            ">",
            "700"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "Find the dates on which more than one revisions were made.",
        "query": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1",
        "query_toks": [
            "SELECT",
            "date_of_latest_revision",
            "FROM",
            "Catalogs",
            "GROUP",
            "BY",
            "date_of_latest_revision",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "On which days more than one revisions were made on catalogs.",
        "query": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1",
        "query_toks": [
            "SELECT",
            "date_of_latest_revision",
            "FROM",
            "Catalogs",
            "GROUP",
            "BY",
            "date_of_latest_revision",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "How many products are there in the records?",
        "query": "SELECT count(*) FROM catalog_contents",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "catalog_contents"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "Find the total number of catalog contents.",
        "query": "SELECT count(*) FROM catalog_contents",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "catalog_contents"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "Name all the products with next entry ID greater than 8.",
        "query": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
        "query_toks": [
            "SELECT",
            "catalog_entry_name",
            "FROM",
            "catalog_contents",
            "WHERE",
            "next_entry_id",
            ">",
            "8"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "What are the catalog entry names of the products with next entry ID above 8?",
        "query": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
        "query_toks": [
            "SELECT",
            "catalog_entry_name",
            "FROM",
            "catalog_contents",
            "WHERE",
            "next_entry_id",
            ">",
            "8"
        ],
        "db_id": "product_catalog"
    },
    {
        "question": "How many aircrafts do we have?",
        "query": "SELECT count(*) FROM Aircraft",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Aircraft"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "How many aircrafts exist in the database?",
        "query": "SELECT count(*) FROM Aircraft",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Aircraft"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show name and distance for all aircrafts.",
        "query": "SELECT name ,  distance FROM Aircraft",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "distance",
            "FROM",
            "Aircraft"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What are the names and distances for all airplanes?",
        "query": "SELECT name ,  distance FROM Aircraft",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "distance",
            "FROM",
            "Aircraft"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show ids for all aircrafts with more than 1000 distance.",
        "query": "SELECT aid FROM Aircraft WHERE distance  >  1000",
        "query_toks": [
            "SELECT",
            "aid",
            "FROM",
            "Aircraft",
            "WHERE",
            "distance",
            ">",
            "1000"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What are the ids of all aircrafts that can cover a distance of more than 1000?",
        "query": "SELECT aid FROM Aircraft WHERE distance  >  1000",
        "query_toks": [
            "SELECT",
            "aid",
            "FROM",
            "Aircraft",
            "WHERE",
            "distance",
            ">",
            "1000"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "How many aircrafts have distance between 1000 and 5000?",
        "query": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Aircraft",
            "WHERE",
            "distance",
            "BETWEEN",
            "1000",
            "AND",
            "5000"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the count of aircrafts that have a distance between 1000 and 5000?",
        "query": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Aircraft",
            "WHERE",
            "distance",
            "BETWEEN",
            "1000",
            "AND",
            "5000"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the name and distance for aircraft with id 12?",
        "query": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "distance",
            "FROM",
            "Aircraft",
            "WHERE",
            "aid",
            "=",
            "12"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the name and distance for the aircraft that has an id of 12?",
        "query": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "distance",
            "FROM",
            "Aircraft",
            "WHERE",
            "aid",
            "=",
            "12"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the minimum, average, and maximum distance of all aircrafts.",
        "query": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft",
        "query_toks": [
            "SELECT",
            "min",
            "(",
            "distance",
            ")",
            ",",
            "avg",
            "(",
            "distance",
            ")",
            ",",
            "max",
            "(",
            "distance",
            ")",
            "FROM",
            "Aircraft"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Return the minimum, average and maximum distances traveled across all aircrafts.",
        "query": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft",
        "query_toks": [
            "SELECT",
            "min",
            "(",
            "distance",
            ")",
            ",",
            "avg",
            "(",
            "distance",
            ")",
            ",",
            "max",
            "(",
            "distance",
            ")",
            "FROM",
            "Aircraft"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show the id and name of the aircraft with the maximum distance.",
        "query": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "aid",
            ",",
            "name",
            "FROM",
            "Aircraft",
            "ORDER",
            "BY",
            "distance",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the id and name of the aircraft that can cover the maximum distance?",
        "query": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "aid",
            ",",
            "name",
            "FROM",
            "Aircraft",
            "ORDER",
            "BY",
            "distance",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show the name of aircrafts with top three lowest distances.",
        "query": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "Aircraft",
            "ORDER",
            "BY",
            "distance",
            "LIMIT",
            "3"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What are the aircrafts with top 3 shortest lengthes? List their names.",
        "query": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "Aircraft",
            "ORDER",
            "BY",
            "distance",
            "LIMIT",
            "3"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show names for all aircrafts with distances more than the average.",
        "query": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "Aircraft",
            "WHERE",
            "distance",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "distance",
            ")",
            "FROM",
            "Aircraft",
            ")"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What are the names of all aircrafts that can cover more distances than average?",
        "query": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "Aircraft",
            "WHERE",
            "distance",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "distance",
            ")",
            "FROM",
            "Aircraft",
            ")"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "How many employees do we have?",
        "query": "SELECT count(*) FROM Employee",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Employee"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the number of employees?",
        "query": "SELECT count(*) FROM Employee",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Employee"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show name and salary for all employees sorted by salary.",
        "query": "SELECT name ,  salary FROM Employee ORDER BY salary",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "salary",
            "FROM",
            "Employee",
            "ORDER",
            "BY",
            "salary"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the name and salary of all employees in order of salary?",
        "query": "SELECT name ,  salary FROM Employee ORDER BY salary",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "salary",
            "FROM",
            "Employee",
            "ORDER",
            "BY",
            "salary"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show ids for all employees with at least 100000 salary.",
        "query": "SELECT eid FROM Employee WHERE salary  >  100000",
        "query_toks": [
            "SELECT",
            "eid",
            "FROM",
            "Employee",
            "WHERE",
            "salary",
            ">",
            "100000"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the id of every employee who has at least a salary of  100000?",
        "query": "SELECT eid FROM Employee WHERE salary  >  100000",
        "query_toks": [
            "SELECT",
            "eid",
            "FROM",
            "Employee",
            "WHERE",
            "salary",
            ">",
            "100000"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "How many employees have salary between 100000 and 200000?",
        "query": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Employee",
            "WHERE",
            "salary",
            "BETWEEN",
            "100000",
            "AND",
            "200000"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the number of employees that have a salary between 100000 and 200000?",
        "query": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Employee",
            "WHERE",
            "salary",
            "BETWEEN",
            "100000",
            "AND",
            "200000"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the name and salary for employee with id 242518965?",
        "query": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "salary",
            "FROM",
            "Employee",
            "WHERE",
            "eid",
            "=",
            "242518965"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the name and salary of the employee with the id 242518965?",
        "query": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "salary",
            "FROM",
            "Employee",
            "WHERE",
            "eid",
            "=",
            "242518965"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is average and maximum salary of all employees.",
        "query": "SELECT avg(salary) ,  max(salary) FROM Employee",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "salary",
            ")",
            ",",
            "max",
            "(",
            "salary",
            ")",
            "FROM",
            "Employee"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the average and largest salary of all employees?",
        "query": "SELECT avg(salary) ,  max(salary) FROM Employee",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "salary",
            ")",
            ",",
            "max",
            "(",
            "salary",
            ")",
            "FROM",
            "Employee"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show the id and name of the employee with maximum salary.",
        "query": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "eid",
            ",",
            "name",
            "FROM",
            "Employee",
            "ORDER",
            "BY",
            "salary",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the id and name of the employee with the highest salary?",
        "query": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "eid",
            ",",
            "name",
            "FROM",
            "Employee",
            "ORDER",
            "BY",
            "salary",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show the name of employees with three lowest salaries.",
        "query": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "Employee",
            "ORDER",
            "BY",
            "salary",
            "ASC",
            "LIMIT",
            "3"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the name of the 3 employees who get paid the least?",
        "query": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "Employee",
            "ORDER",
            "BY",
            "salary",
            "ASC",
            "LIMIT",
            "3"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show names for all employees with salary more than the average.",
        "query": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "Employee",
            "WHERE",
            "salary",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "salary",
            ")",
            "FROM",
            "Employee",
            ")"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What are the names of all employees who have a salary higher than average?",
        "query": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "Employee",
            "WHERE",
            "salary",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "salary",
            ")",
            "FROM",
            "Employee",
            ")"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show the id and salary of Mark Young.",
        "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
        "query_toks": [
            "SELECT",
            "eid",
            ",",
            "salary",
            "FROM",
            "Employee",
            "WHERE",
            "name",
            "=",
            "'Mark",
            "Young",
            "'"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the id and salary of the employee named Mark Young?",
        "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
        "query_toks": [
            "SELECT",
            "eid",
            ",",
            "salary",
            "FROM",
            "Employee",
            "WHERE",
            "name",
            "=",
            "'Mark",
            "Young",
            "'"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "How many flights do we have?",
        "query": "SELECT count(*) FROM Flight",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Flight"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the number of flights?",
        "query": "SELECT count(*) FROM Flight",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Flight"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.",
        "query": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin",
        "query_toks": [
            "SELECT",
            "flno",
            ",",
            "origin",
            ",",
            "destination",
            "FROM",
            "Flight",
            "ORDER",
            "BY",
            "origin"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?",
        "query": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin",
        "query_toks": [
            "SELECT",
            "flno",
            ",",
            "origin",
            ",",
            "destination",
            "FROM",
            "Flight",
            "ORDER",
            "BY",
            "origin"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show all flight number from Los Angeles.",
        "query": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"",
        "query_toks": [
            "SELECT",
            "flno",
            "FROM",
            "Flight",
            "WHERE",
            "origin",
            "=",
            "``",
            "Los",
            "Angeles",
            "''"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What are the numbers of all flights coming from Los Angeles?",
        "query": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"",
        "query_toks": [
            "SELECT",
            "flno",
            "FROM",
            "Flight",
            "WHERE",
            "origin",
            "=",
            "``",
            "Los",
            "Angeles",
            "''"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show origins of all flights with destination Honolulu.",
        "query": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"",
        "query_toks": [
            "SELECT",
            "origin",
            "FROM",
            "Flight",
            "WHERE",
            "destination",
            "=",
            "``",
            "Honolulu",
            "''"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What are the origins of all flights that are headed to Honolulu?",
        "query": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"",
        "query_toks": [
            "SELECT",
            "origin",
            "FROM",
            "Flight",
            "WHERE",
            "destination",
            "=",
            "``",
            "Honolulu",
            "''"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.",
        "query": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "query_toks": [
            "SELECT",
            "departure_date",
            ",",
            "arrival_date",
            "FROM",
            "Flight",
            "WHERE",
            "origin",
            "=",
            "``",
            "Los",
            "Angeles",
            "''",
            "AND",
            "destination",
            "=",
            "``",
            "Honolulu",
            "''"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What are the departure and arrival dates of all flights from LA to Honolulu?",
        "query": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "query_toks": [
            "SELECT",
            "departure_date",
            ",",
            "arrival_date",
            "FROM",
            "Flight",
            "WHERE",
            "origin",
            "=",
            "``",
            "Los",
            "Angeles",
            "''",
            "AND",
            "destination",
            "=",
            "``",
            "Honolulu",
            "''"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show flight number for all flights with more than 2000 distance.",
        "query": "SELECT flno FROM Flight WHERE distance  >  2000",
        "query_toks": [
            "SELECT",
            "flno",
            "FROM",
            "Flight",
            "WHERE",
            "distance",
            ">",
            "2000"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What are the numbers of all flights that can cover a distance of more than 2000?",
        "query": "SELECT flno FROM Flight WHERE distance  >  2000",
        "query_toks": [
            "SELECT",
            "flno",
            "FROM",
            "Flight",
            "WHERE",
            "distance",
            ">",
            "2000"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the average price for flights from Los Angeles to Honolulu.",
        "query": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "price",
            ")",
            "FROM",
            "Flight",
            "WHERE",
            "origin",
            "=",
            "``",
            "Los",
            "Angeles",
            "''",
            "AND",
            "destination",
            "=",
            "``",
            "Honolulu",
            "''"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the average price for flights from LA to Honolulu?",
        "query": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "price",
            ")",
            "FROM",
            "Flight",
            "WHERE",
            "origin",
            "=",
            "``",
            "Los",
            "Angeles",
            "''",
            "AND",
            "destination",
            "=",
            "``",
            "Honolulu",
            "''"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show origin and destination for flights with price higher than 300.",
        "query": "SELECT origin ,  destination FROM Flight WHERE price  >  300",
        "query_toks": [
            "SELECT",
            "origin",
            ",",
            "destination",
            "FROM",
            "Flight",
            "WHERE",
            "price",
            ">",
            "300"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the origin and destination for all flights whose price is higher than 300?",
        "query": "SELECT origin ,  destination FROM Flight WHERE price  >  300",
        "query_toks": [
            "SELECT",
            "origin",
            ",",
            "destination",
            "FROM",
            "Flight",
            "WHERE",
            "price",
            ">",
            "300"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show the flight number and distance of the flight with maximum price.",
        "query": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "flno",
            ",",
            "distance",
            "FROM",
            "Flight",
            "ORDER",
            "BY",
            "price",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the flight number and its distance for the one with the maximum price?",
        "query": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "flno",
            ",",
            "distance",
            "FROM",
            "Flight",
            "ORDER",
            "BY",
            "price",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show the flight number of flights with three lowest distances.",
        "query": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
        "query_toks": [
            "SELECT",
            "flno",
            "FROM",
            "Flight",
            "ORDER",
            "BY",
            "distance",
            "ASC",
            "LIMIT",
            "3"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What are the numbers of the shortest flights?",
        "query": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
        "query_toks": [
            "SELECT",
            "flno",
            "FROM",
            "Flight",
            "ORDER",
            "BY",
            "distance",
            "ASC",
            "LIMIT",
            "3"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the average distance and average price for flights from Los Angeles.",
        "query": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "distance",
            ")",
            ",",
            "avg",
            "(",
            "price",
            ")",
            "FROM",
            "Flight",
            "WHERE",
            "origin",
            "=",
            "``",
            "Los",
            "Angeles",
            "''"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the average distance and price for all flights from LA?",
        "query": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "distance",
            ")",
            ",",
            "avg",
            "(",
            "price",
            ")",
            "FROM",
            "Flight",
            "WHERE",
            "origin",
            "=",
            "``",
            "Los",
            "Angeles",
            "''"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show all origins and the number of flights from each origin.",
        "query": "SELECT origin ,  count(*) FROM Flight GROUP BY origin",
        "query_toks": [
            "SELECT",
            "origin",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Flight",
            "GROUP",
            "BY",
            "origin"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "For each origin, how many flights came from there?",
        "query": "SELECT origin ,  count(*) FROM Flight GROUP BY origin",
        "query_toks": [
            "SELECT",
            "origin",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Flight",
            "GROUP",
            "BY",
            "origin"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show all destinations and the number of flights to each destination.",
        "query": "SELECT destination ,  count(*) FROM Flight GROUP BY destination",
        "query_toks": [
            "SELECT",
            "destination",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Flight",
            "GROUP",
            "BY",
            "destination"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What are the destinations and number of flights to each one?",
        "query": "SELECT destination ,  count(*) FROM Flight GROUP BY destination",
        "query_toks": [
            "SELECT",
            "destination",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Flight",
            "GROUP",
            "BY",
            "destination"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Which origin has most number of flights?",
        "query": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "origin",
            "FROM",
            "Flight",
            "GROUP",
            "BY",
            "origin",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What place has the most flights coming from there?",
        "query": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "origin",
            "FROM",
            "Flight",
            "GROUP",
            "BY",
            "origin",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Which destination has least number of flights?",
        "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "query_toks": [
            "SELECT",
            "destination",
            "FROM",
            "Flight",
            "GROUP",
            "BY",
            "destination",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "LIMIT",
            "1"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What destination has the fewest number of flights?",
        "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "query_toks": [
            "SELECT",
            "destination",
            "FROM",
            "Flight",
            "GROUP",
            "BY",
            "destination",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "LIMIT",
            "1"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the aircraft name for the flight with number 99",
        "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "Flight",
            "AS",
            "T1",
            "JOIN",
            "Aircraft",
            "AS",
            "T2",
            "ON",
            "T1.aid",
            "=",
            "T2.aid",
            "WHERE",
            "T1.flno",
            "=",
            "99"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the name of the aircraft that was on flight number 99?",
        "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "Flight",
            "AS",
            "T1",
            "JOIN",
            "Aircraft",
            "AS",
            "T2",
            "ON",
            "T1.aid",
            "=",
            "T2.aid",
            "WHERE",
            "T1.flno",
            "=",
            "99"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show all flight numbers with aircraft Airbus A340-300.",
        "query": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"",
        "query_toks": [
            "SELECT",
            "T1.flno",
            "FROM",
            "Flight",
            "AS",
            "T1",
            "JOIN",
            "Aircraft",
            "AS",
            "T2",
            "ON",
            "T1.aid",
            "=",
            "T2.aid",
            "WHERE",
            "T2.name",
            "=",
            "``",
            "Airbus",
            "A340-300",
            "''"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What are the flight numbers for the aircraft Airbus A340-300?",
        "query": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"",
        "query_toks": [
            "SELECT",
            "T1.flno",
            "FROM",
            "Flight",
            "AS",
            "T1",
            "JOIN",
            "Aircraft",
            "AS",
            "T2",
            "ON",
            "T1.aid",
            "=",
            "T2.aid",
            "WHERE",
            "T2.name",
            "=",
            "``",
            "Airbus",
            "A340-300",
            "''"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show aircraft names and number of flights for each aircraft.",
        "query": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",
        "query_toks": [
            "SELECT",
            "T2.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Flight",
            "AS",
            "T1",
            "JOIN",
            "Aircraft",
            "AS",
            "T2",
            "ON",
            "T1.aid",
            "=",
            "T2.aid",
            "GROUP",
            "BY",
            "T1.aid"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the name of each aircraft and how many flights does each one complete?",
        "query": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",
        "query_toks": [
            "SELECT",
            "T2.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Flight",
            "AS",
            "T1",
            "JOIN",
            "Aircraft",
            "AS",
            "T2",
            "ON",
            "T1.aid",
            "=",
            "T2.aid",
            "GROUP",
            "BY",
            "T1.aid"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show names for all aircraft with at least two flights.",
        "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "Flight",
            "AS",
            "T1",
            "JOIN",
            "Aircraft",
            "AS",
            "T2",
            "ON",
            "T1.aid",
            "=",
            "T2.aid",
            "GROUP",
            "BY",
            "T1.aid",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What are the names for all aircrafts with at least 2 flights?",
        "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "Flight",
            "AS",
            "T1",
            "JOIN",
            "Aircraft",
            "AS",
            "T2",
            "ON",
            "T1.aid",
            "=",
            "T2.aid",
            "GROUP",
            "BY",
            "T1.aid",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "How many employees have certificate.",
        "query": "SELECT count(DISTINCT eid) FROM Certificate",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "eid",
            ")",
            "FROM",
            "Certificate"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the count of distinct employees with certificates?",
        "query": "SELECT count(DISTINCT eid) FROM Certificate",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "eid",
            ")",
            "FROM",
            "Certificate"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show ids for all employees who don't have a certificate.",
        "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
        "query_toks": [
            "SELECT",
            "eid",
            "FROM",
            "Employee",
            "EXCEPT",
            "SELECT",
            "eid",
            "FROM",
            "Certificate"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What are the ids of all employees that don't have certificates?",
        "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
        "query_toks": [
            "SELECT",
            "eid",
            "FROM",
            "Employee",
            "EXCEPT",
            "SELECT",
            "eid",
            "FROM",
            "Certificate"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show names for all aircrafts of which John Williams has certificates.",
        "query": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"",
        "query_toks": [
            "SELECT",
            "T3.name",
            "FROM",
            "Employee",
            "AS",
            "T1",
            "JOIN",
            "Certificate",
            "AS",
            "T2",
            "ON",
            "T1.eid",
            "=",
            "T2.eid",
            "JOIN",
            "Aircraft",
            "AS",
            "T3",
            "ON",
            "T3.aid",
            "=",
            "T2.aid",
            "WHERE",
            "T1.name",
            "=",
            "``",
            "John",
            "Williams",
            "''"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What are the names of all aircrafts that John Williams have certificates to be able to fly?",
        "query": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"",
        "query_toks": [
            "SELECT",
            "T3.name",
            "FROM",
            "Employee",
            "AS",
            "T1",
            "JOIN",
            "Certificate",
            "AS",
            "T2",
            "ON",
            "T1.eid",
            "=",
            "T2.eid",
            "JOIN",
            "Aircraft",
            "AS",
            "T3",
            "ON",
            "T3.aid",
            "=",
            "T2.aid",
            "WHERE",
            "T1.name",
            "=",
            "``",
            "John",
            "Williams",
            "''"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show names for all employees who have certificate of Boeing 737-800.",
        "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "Employee",
            "AS",
            "T1",
            "JOIN",
            "Certificate",
            "AS",
            "T2",
            "ON",
            "T1.eid",
            "=",
            "T2.eid",
            "JOIN",
            "Aircraft",
            "AS",
            "T3",
            "ON",
            "T3.aid",
            "=",
            "T2.aid",
            "WHERE",
            "T3.name",
            "=",
            "``",
            "Boeing",
            "737-800",
            "''"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What are the names of all employees who have a certificate to fly Boeing 737-800?",
        "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "Employee",
            "AS",
            "T1",
            "JOIN",
            "Certificate",
            "AS",
            "T2",
            "ON",
            "T1.eid",
            "=",
            "T2.eid",
            "JOIN",
            "Aircraft",
            "AS",
            "T3",
            "ON",
            "T3.aid",
            "=",
            "T2.aid",
            "WHERE",
            "T3.name",
            "=",
            "``",
            "Boeing",
            "737-800",
            "''"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.",
        "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Airbus A340-300\"",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "Employee",
            "AS",
            "T1",
            "JOIN",
            "Certificate",
            "AS",
            "T2",
            "ON",
            "T1.eid",
            "=",
            "T2.eid",
            "JOIN",
            "Aircraft",
            "AS",
            "T3",
            "ON",
            "T3.aid",
            "=",
            "T2.aid",
            "WHERE",
            "T3.name",
            "=",
            "``",
            "Boeing",
            "737-800",
            "''",
            "INTERSECT",
            "SELECT",
            "T1.name",
            "FROM",
            "Employee",
            "AS",
            "T1",
            "JOIN",
            "Certificate",
            "AS",
            "T2",
            "ON",
            "T1.eid",
            "=",
            "T2.eid",
            "JOIN",
            "Aircraft",
            "AS",
            "T3",
            "ON",
            "T3.aid",
            "=",
            "T2.aid",
            "WHERE",
            "T3.name",
            "=",
            "``",
            "Airbus",
            "A340-300",
            "''"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300?",
        "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Airbus A340-300\"",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "Employee",
            "AS",
            "T1",
            "JOIN",
            "Certificate",
            "AS",
            "T2",
            "ON",
            "T1.eid",
            "=",
            "T2.eid",
            "JOIN",
            "Aircraft",
            "AS",
            "T3",
            "ON",
            "T3.aid",
            "=",
            "T2.aid",
            "WHERE",
            "T3.name",
            "=",
            "``",
            "Boeing",
            "737-800",
            "''",
            "INTERSECT",
            "SELECT",
            "T1.name",
            "FROM",
            "Employee",
            "AS",
            "T1",
            "JOIN",
            "Certificate",
            "AS",
            "T2",
            "ON",
            "T1.eid",
            "=",
            "T2.eid",
            "JOIN",
            "Aircraft",
            "AS",
            "T3",
            "ON",
            "T3.aid",
            "=",
            "T2.aid",
            "WHERE",
            "T3.name",
            "=",
            "``",
            "Airbus",
            "A340-300",
            "''"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show names for all employees who do not have certificate of Boeing 737-800.",
        "query": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "Employee",
            "EXCEPT",
            "SELECT",
            "T1.name",
            "FROM",
            "Employee",
            "AS",
            "T1",
            "JOIN",
            "Certificate",
            "AS",
            "T2",
            "ON",
            "T1.eid",
            "=",
            "T2.eid",
            "JOIN",
            "Aircraft",
            "AS",
            "T3",
            "ON",
            "T3.aid",
            "=",
            "T2.aid",
            "WHERE",
            "T3.name",
            "=",
            "``",
            "Boeing",
            "737-800",
            "''"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What are the names of all employees who are not certified to fly Boeing 737-800s?",
        "query": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "Employee",
            "EXCEPT",
            "SELECT",
            "T1.name",
            "FROM",
            "Employee",
            "AS",
            "T1",
            "JOIN",
            "Certificate",
            "AS",
            "T2",
            "ON",
            "T1.eid",
            "=",
            "T2.eid",
            "JOIN",
            "Aircraft",
            "AS",
            "T3",
            "ON",
            "T3.aid",
            "=",
            "T2.aid",
            "WHERE",
            "T3.name",
            "=",
            "``",
            "Boeing",
            "737-800",
            "''"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show the name of aircraft which fewest people have its certificate.",
        "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "Certificate",
            "AS",
            "T1",
            "JOIN",
            "Aircraft",
            "AS",
            "T2",
            "ON",
            "T2.aid",
            "=",
            "T1.aid",
            "GROUP",
            "BY",
            "T1.aid",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What are the names of the aircraft that the least people are certified to fly?",
        "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "Certificate",
            "AS",
            "T1",
            "JOIN",
            "Aircraft",
            "AS",
            "T2",
            "ON",
            "T2.aid",
            "=",
            "T1.aid",
            "GROUP",
            "BY",
            "T1.aid",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.",
        "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "Certificate",
            "AS",
            "T1",
            "JOIN",
            "Aircraft",
            "AS",
            "T2",
            "ON",
            "T2.aid",
            "=",
            "T1.aid",
            "WHERE",
            "T2.distance",
            ">",
            "5000",
            "GROUP",
            "BY",
            "T1.aid",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "5"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?",
        "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "Certificate",
            "AS",
            "T1",
            "JOIN",
            "Aircraft",
            "AS",
            "T2",
            "ON",
            "T2.aid",
            "=",
            "T1.aid",
            "WHERE",
            "T2.distance",
            ">",
            "5000",
            "GROUP",
            "BY",
            "T1.aid",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "5"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "what is the salary and name of the employee who has the most number of aircraft certificates?",
        "query": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.name",
            ",",
            "T1.salary",
            "FROM",
            "Employee",
            "AS",
            "T1",
            "JOIN",
            "Certificate",
            "AS",
            "T2",
            "ON",
            "T1.eid",
            "=",
            "T2.eid",
            "GROUP",
            "BY",
            "T1.eid",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the salaray and name of the employee that is certified to fly the most planes?",
        "query": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.name",
            ",",
            "T1.salary",
            "FROM",
            "Employee",
            "AS",
            "T1",
            "JOIN",
            "Certificate",
            "AS",
            "T2",
            "ON",
            "T1.eid",
            "=",
            "T2.eid",
            "GROUP",
            "BY",
            "T1.eid",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?",
        "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "Employee",
            "AS",
            "T1",
            "JOIN",
            "Certificate",
            "AS",
            "T2",
            "ON",
            "T1.eid",
            "=",
            "T2.eid",
            "JOIN",
            "Aircraft",
            "AS",
            "T3",
            "ON",
            "T3.aid",
            "=",
            "T2.aid",
            "WHERE",
            "T3.distance",
            ">",
            "5000",
            "GROUP",
            "BY",
            "T1.eid",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "What is the salaray and name of the employee with the most certificates to fly planes more than 5000?",
        "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "Employee",
            "AS",
            "T1",
            "JOIN",
            "Certificate",
            "AS",
            "T2",
            "ON",
            "T1.eid",
            "=",
            "T2.eid",
            "JOIN",
            "Aircraft",
            "AS",
            "T3",
            "ON",
            "T3.aid",
            "=",
            "T2.aid",
            "WHERE",
            "T3.distance",
            ">",
            "5000",
            "GROUP",
            "BY",
            "T1.eid",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "flight_1"
    },
    {
        "question": "A list of the top 5 countries by number of invoices. List country name and number of invoices.",
        "query": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;",
        "query_toks": [
            "SELECT",
            "billing_country",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "invoices",
            "GROUP",
            "BY",
            "billing_country",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "5",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What are the top 5 countries by number of invoices and how many do they have?",
        "query": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;",
        "query_toks": [
            "SELECT",
            "billing_country",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "invoices",
            "GROUP",
            "BY",
            "billing_country",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "5",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.",
        "query": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;",
        "query_toks": [
            "SELECT",
            "billing_country",
            ",",
            "SUM",
            "(",
            "total",
            ")",
            "FROM",
            "invoices",
            "GROUP",
            "BY",
            "billing_country",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "total",
            ")",
            "DESC",
            "LIMIT",
            "8",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What are the names of the top 8 countries by total invoice size and what are those sizes?",
        "query": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;",
        "query_toks": [
            "SELECT",
            "billing_country",
            ",",
            "SUM",
            "(",
            "total",
            ")",
            "FROM",
            "invoices",
            "GROUP",
            "BY",
            "billing_country",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "total",
            ")",
            "DESC",
            "LIMIT",
            "8",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "A list of the top 10 countries by average invoice size. List country name and average invoice size.",
        "query": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;",
        "query_toks": [
            "SELECT",
            "billing_country",
            ",",
            "AVG",
            "(",
            "total",
            ")",
            "FROM",
            "invoices",
            "GROUP",
            "BY",
            "billing_country",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "total",
            ")",
            "DESC",
            "LIMIT",
            "10",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What are the names of the countries and average invoice size of the top countries by size?",
        "query": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;",
        "query_toks": [
            "SELECT",
            "billing_country",
            ",",
            "AVG",
            "(",
            "total",
            ")",
            "FROM",
            "invoices",
            "GROUP",
            "BY",
            "billing_country",
            "ORDER",
            "BY",
            "AVG",
            "(",
            "total",
            ")",
            "DESC",
            "LIMIT",
            "10",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "Find out 5 customers who most recently purchased something. List customers' first and last name.",
        "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T1.last_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "invoices",
            "AS",
            "T2",
            "ON",
            "T2.customer_id",
            "=",
            "T1.id",
            "ORDER",
            "BY",
            "T2.invoice_date",
            "DESC",
            "LIMIT",
            "5",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What are the first and last names of the 5 customers who purchased something most recently?",
        "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T1.last_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "invoices",
            "AS",
            "T2",
            "ON",
            "T2.customer_id",
            "=",
            "T1.id",
            "ORDER",
            "BY",
            "T2.invoice_date",
            "DESC",
            "LIMIT",
            "5",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.",
        "query": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T1.last_name",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "invoices",
            "AS",
            "T2",
            "ON",
            "T2.customer_id",
            "=",
            "T1.id",
            "GROUP",
            "BY",
            "T1.id",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "10",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What are the top 10 customers' first and last names by total number of orders and how many orders did they make?",
        "query": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T1.last_name",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "invoices",
            "AS",
            "T2",
            "ON",
            "T2.customer_id",
            "=",
            "T1.id",
            "GROUP",
            "BY",
            "T1.id",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "10",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.",
        "query": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T1.last_name",
            ",",
            "SUM",
            "(",
            "T2.total",
            ")",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "invoices",
            "AS",
            "T2",
            "ON",
            "T2.customer_id",
            "=",
            "T1.id",
            "GROUP",
            "BY",
            "T1.id",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "T2.total",
            ")",
            "DESC",
            "LIMIT",
            "10",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What are the top 10 customers' first and last names with the highest gross sales, and also what are the sales?",
        "query": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T1.last_name",
            ",",
            "SUM",
            "(",
            "T2.total",
            ")",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "invoices",
            "AS",
            "T2",
            "ON",
            "T2.customer_id",
            "=",
            "T1.id",
            "GROUP",
            "BY",
            "T1.id",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "T2.total",
            ")",
            "DESC",
            "LIMIT",
            "10",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "List the top 5 genres by number of tracks. List genres name and total tracks.",
        "query": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;",
        "query_toks": [
            "SELECT",
            "T1.name",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "genres",
            "AS",
            "T1",
            "JOIN",
            "tracks",
            "AS",
            "T2",
            "ON",
            "T2.genre_id",
            "=",
            "T1.id",
            "GROUP",
            "BY",
            "T1.id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "5",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "How many tracks does each genre have and what are the names of the top 5?",
        "query": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;",
        "query_toks": [
            "SELECT",
            "T1.name",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "genres",
            "AS",
            "T1",
            "JOIN",
            "tracks",
            "AS",
            "T2",
            "ON",
            "T2.genre_id",
            "=",
            "T1.id",
            "GROUP",
            "BY",
            "T1.id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "5",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "List every album's title.",
        "query": "SELECT title FROM albums;",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "albums",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What are the titles of all the albums?",
        "query": "SELECT title FROM albums;",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "albums",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "List every album ordered by album title in ascending order.",
        "query": "SELECT title FROM albums ORDER BY title;",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "albums",
            "ORDER",
            "BY",
            "title",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What are the titles of all the albums alphabetically ascending?",
        "query": "SELECT title FROM albums ORDER BY title;",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "albums",
            "ORDER",
            "BY",
            "title",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "List every album whose title starts with A in alphabetical order.",
        "query": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "albums",
            "WHERE",
            "title",
            "LIKE",
            "'A",
            "%",
            "'",
            "ORDER",
            "BY",
            "title",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What are the titles of all albums that start with A in alphabetical order?",
        "query": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "albums",
            "WHERE",
            "title",
            "LIKE",
            "'A",
            "%",
            "'",
            "ORDER",
            "BY",
            "title",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "List the customers first and last name of 10 least expensive invoices.",
        "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T1.last_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "invoices",
            "AS",
            "T2",
            "ON",
            "T2.customer_id",
            "=",
            "T1.id",
            "ORDER",
            "BY",
            "total",
            "LIMIT",
            "10",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What are the first and last names of the customers with the 10 cheapest invoices?",
        "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T1.last_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "invoices",
            "AS",
            "T2",
            "ON",
            "T2.customer_id",
            "=",
            "T1.id",
            "ORDER",
            "BY",
            "total",
            "LIMIT",
            "10",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "List total amount of  invoice from Chicago, IL.",
        "query": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "total",
            ")",
            "FROM",
            "invoices",
            "WHERE",
            "billing_city",
            "=",
            "``",
            "Chicago",
            "''",
            "AND",
            "billing_state",
            "=",
            "``",
            "IL",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What are the total amount of money in the invoices billed from Chicago, Illinois?",
        "query": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "total",
            ")",
            "FROM",
            "invoices",
            "WHERE",
            "billing_city",
            "=",
            "``",
            "Chicago",
            "''",
            "AND",
            "billing_state",
            "=",
            "``",
            "IL",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "List the number of invoices from Chicago, IL.",
        "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "invoices",
            "WHERE",
            "billing_city",
            "=",
            "``",
            "Chicago",
            "''",
            "AND",
            "billing_state",
            "=",
            "``",
            "IL",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "How many invoices were billed from Chicago, IL?",
        "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "invoices",
            "WHERE",
            "billing_city",
            "=",
            "``",
            "Chicago",
            "''",
            "AND",
            "billing_state",
            "=",
            "``",
            "IL",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "List the number of invoices from the US, grouped by state.",
        "query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;",
        "query_toks": [
            "SELECT",
            "billing_state",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "invoices",
            "WHERE",
            "billing_country",
            "=",
            "``",
            "USA",
            "''",
            "GROUP",
            "BY",
            "billing_state",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "How many invoices were billed from each state?",
        "query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;",
        "query_toks": [
            "SELECT",
            "billing_state",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "invoices",
            "WHERE",
            "billing_country",
            "=",
            "``",
            "USA",
            "''",
            "GROUP",
            "BY",
            "billing_state",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "List the state in the US with the most invoices.",
        "query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "billing_state",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "invoices",
            "WHERE",
            "billing_country",
            "=",
            "``",
            "USA",
            "''",
            "GROUP",
            "BY",
            "billing_state",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What are the states with the most invoices?",
        "query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "billing_state",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "invoices",
            "WHERE",
            "billing_country",
            "=",
            "``",
            "USA",
            "''",
            "GROUP",
            "BY",
            "billing_state",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "List the number of invoices and the invoice total from California.",
        "query": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";",
        "query_toks": [
            "SELECT",
            "billing_state",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            ",",
            "SUM",
            "(",
            "total",
            ")",
            "FROM",
            "invoices",
            "WHERE",
            "billing_state",
            "=",
            "``",
            "CA",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What is the number of invoices and total money billed in them from CA?",
        "query": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";",
        "query_toks": [
            "SELECT",
            "billing_state",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            ",",
            "SUM",
            "(",
            "total",
            ")",
            "FROM",
            "invoices",
            "WHERE",
            "billing_state",
            "=",
            "``",
            "CA",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "List Aerosmith's albums.",
        "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
        "query_toks": [
            "SELECT",
            "T1.title",
            "FROM",
            "albums",
            "AS",
            "T1",
            "JOIN",
            "artists",
            "AS",
            "T2",
            "ON",
            "T1.artist_id",
            "=",
            "T2.id",
            "WHERE",
            "T2.name",
            "=",
            "``",
            "Aerosmith",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What are the titles of all the Aerosmith albums?",
        "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";",
        "query_toks": [
            "SELECT",
            "T1.title",
            "FROM",
            "albums",
            "AS",
            "T1",
            "JOIN",
            "artists",
            "AS",
            "T2",
            "ON",
            "T1.artist_id",
            "=",
            "T2.id",
            "WHERE",
            "T2.name",
            "=",
            "``",
            "Aerosmith",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "How many albums does Billy Cobham has?",
        "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "albums",
            "AS",
            "T1",
            "JOIN",
            "artists",
            "AS",
            "T2",
            "ON",
            "T1.artist_id",
            "=",
            "T2.id",
            "WHERE",
            "T2.name",
            "=",
            "``",
            "Billy",
            "Cobham",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "How many albums has Billy Cobam released?",
        "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "albums",
            "AS",
            "T1",
            "JOIN",
            "artists",
            "AS",
            "T2",
            "ON",
            "T1.artist_id",
            "=",
            "T2.id",
            "WHERE",
            "T2.name",
            "=",
            "``",
            "Billy",
            "Cobham",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "Eduardo Martins is a customer at which company?",
        "query": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";",
        "query_toks": [
            "SELECT",
            "company",
            "FROM",
            "customers",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Eduardo",
            "''",
            "AND",
            "last_name",
            "=",
            "``",
            "Martins",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What is the company where Eduardo Martins is a customer?",
        "query": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";",
        "query_toks": [
            "SELECT",
            "company",
            "FROM",
            "customers",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Eduardo",
            "''",
            "AND",
            "last_name",
            "=",
            "``",
            "Martins",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What is Astrid Gruber's email and phone number?",
        "query": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";",
        "query_toks": [
            "SELECT",
            "email",
            ",",
            "phone",
            "FROM",
            "customers",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Astrid",
            "''",
            "AND",
            "last_name",
            "=",
            "``",
            "Gruber",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What is the email and phone number of Astrid Gruber the customer?",
        "query": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";",
        "query_toks": [
            "SELECT",
            "email",
            ",",
            "phone",
            "FROM",
            "customers",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Astrid",
            "''",
            "AND",
            "last_name",
            "=",
            "``",
            "Gruber",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "How many customers live in Prague city?",
        "query": "SELECT count(*) FROM customers WHERE city = \"Prague\";",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "customers",
            "WHERE",
            "city",
            "=",
            "``",
            "Prague",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "How many customers live in the city of Prague?",
        "query": "SELECT count(*) FROM customers WHERE city = \"Prague\";",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "customers",
            "WHERE",
            "city",
            "=",
            "``",
            "Prague",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "How many customers in state of CA?",
        "query": "SELECT count(*) FROM customers WHERE state = \"CA\";",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "customers",
            "WHERE",
            "state",
            "=",
            "``",
            "CA",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "How many customers are from California?",
        "query": "SELECT count(*) FROM customers WHERE state = \"CA\";",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "customers",
            "WHERE",
            "state",
            "=",
            "``",
            "CA",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What country does Roberto Almeida live?",
        "query": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";",
        "query_toks": [
            "SELECT",
            "country",
            "FROM",
            "customers",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Roberto",
            "''",
            "AND",
            "last_name",
            "=",
            "``",
            "Almeida",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "In which country does Roberto Almeida?",
        "query": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";",
        "query_toks": [
            "SELECT",
            "country",
            "FROM",
            "customers",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Roberto",
            "''",
            "AND",
            "last_name",
            "=",
            "``",
            "Almeida",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "List the name of albums that are released by aritist whose name has 'Led'",
        "query": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'",
        "query_toks": [
            "SELECT",
            "T2.title",
            "FROM",
            "artists",
            "AS",
            "T1",
            "JOIN",
            "albums",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.artist_id",
            "WHERE",
            "T1.name",
            "LIKE",
            "'",
            "%",
            "Led",
            "%",
            "'"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What is the title of the album that was released by the artist whose name has the phrase 'Led'?",
        "query": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'",
        "query_toks": [
            "SELECT",
            "T2.title",
            "FROM",
            "artists",
            "AS",
            "T1",
            "JOIN",
            "albums",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.artist_id",
            "WHERE",
            "T1.name",
            "LIKE",
            "'",
            "%",
            "Led",
            "%",
            "'"
        ],
        "db_id": "store_1"
    },
    {
        "question": "How many customers does Steve Johnson support?",
        "query": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "customers",
            "AS",
            "T2",
            "ON",
            "T2.support_rep_id",
            "=",
            "T1.id",
            "WHERE",
            "T1.first_name",
            "=",
            "``",
            "Steve",
            "''",
            "AND",
            "T1.last_name",
            "=",
            "``",
            "Johnson",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What is the count of customers that Steve Johnson supports?",
        "query": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "customers",
            "AS",
            "T2",
            "ON",
            "T2.support_rep_id",
            "=",
            "T1.id",
            "WHERE",
            "T1.first_name",
            "=",
            "``",
            "Steve",
            "''",
            "AND",
            "T1.last_name",
            "=",
            "``",
            "Johnson",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What is the title, phone and hire date of Nancy Edwards?",
        "query": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
        "query_toks": [
            "SELECT",
            "title",
            ",",
            "phone",
            ",",
            "hire_date",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Nancy",
            "''",
            "AND",
            "last_name",
            "=",
            "``",
            "Edwards",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What is the title, phone number and hire date for the employee named Nancy Edwards?",
        "query": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
        "query_toks": [
            "SELECT",
            "title",
            ",",
            "phone",
            ",",
            "hire_date",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Nancy",
            "''",
            "AND",
            "last_name",
            "=",
            "``",
            "Edwards",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "find the full name of employees who report to Nancy Edwards?",
        "query": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";",
        "query_toks": [
            "SELECT",
            "T2.first_name",
            ",",
            "T2.last_name",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "employees",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.reports_to",
            "WHERE",
            "T1.first_name",
            "=",
            "``",
            "Nancy",
            "''",
            "AND",
            "T1.last_name",
            "=",
            "``",
            "Edwards",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What is the first and last name of the employee who reports to Nancy Edwards?",
        "query": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";",
        "query_toks": [
            "SELECT",
            "T2.first_name",
            ",",
            "T2.last_name",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "employees",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.reports_to",
            "WHERE",
            "T1.first_name",
            "=",
            "``",
            "Nancy",
            "''",
            "AND",
            "T1.last_name",
            "=",
            "``",
            "Edwards",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What is the address of employee Nancy Edwards?",
        "query": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
        "query_toks": [
            "SELECT",
            "address",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Nancy",
            "''",
            "AND",
            "last_name",
            "=",
            "``",
            "Edwards",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What is Nancy Edwards's address?",
        "query": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
        "query_toks": [
            "SELECT",
            "address",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Nancy",
            "''",
            "AND",
            "last_name",
            "=",
            "``",
            "Edwards",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "Find the full name of employee who supported the most number of customers.",
        "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T1.last_name",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "customers",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.support_rep_id",
            "GROUP",
            "BY",
            "T1.id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What is the full name of the employee who has the most customers?",
        "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T1.last_name",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "customers",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.support_rep_id",
            "GROUP",
            "BY",
            "T1.id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "store_1"
    },
    {
        "question": "How many employees are living in Canada?",
        "query": "SELECT count(*) FROM employees WHERE country = \"Canada\";",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "country",
            "=",
            "``",
            "Canada",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "How many employees live in Canada?",
        "query": "SELECT count(*) FROM employees WHERE country = \"Canada\";",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "country",
            "=",
            "``",
            "Canada",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What is employee Nancy Edwards's phone number?",
        "query": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
        "query_toks": [
            "SELECT",
            "phone",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Nancy",
            "''",
            "AND",
            "last_name",
            "=",
            "``",
            "Edwards",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What is the the phone number of Nancy Edwards?",
        "query": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
        "query_toks": [
            "SELECT",
            "phone",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Nancy",
            "''",
            "AND",
            "last_name",
            "=",
            "``",
            "Edwards",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "Who is the youngest employee in the company? List employee's first and last name.",
        "query": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            "FROM",
            "employees",
            "ORDER",
            "BY",
            "birth_date",
            "DESC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What si the youngest employee's first and last name?",
        "query": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            "FROM",
            "employees",
            "ORDER",
            "BY",
            "birth_date",
            "DESC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "List top 10 employee work longest in the company. List employee's first and last name.",
        "query": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            "FROM",
            "employees",
            "ORDER",
            "BY",
            "hire_date",
            "ASC",
            "LIMIT",
            "10",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What are the first and last names of the top 10 longest-serving employees?",
        "query": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            "FROM",
            "employees",
            "ORDER",
            "BY",
            "hire_date",
            "ASC",
            "LIMIT",
            "10",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "Find the number of employees whose title is IT Staff from each city?",
        "query": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "city",
            "FROM",
            "employees",
            "WHERE",
            "title",
            "=",
            "'IT",
            "Staff",
            "'",
            "GROUP",
            "BY",
            "city"
        ],
        "db_id": "store_1"
    },
    {
        "question": "How many employees who are IT staff are from each city?",
        "query": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "city",
            "FROM",
            "employees",
            "WHERE",
            "title",
            "=",
            "'IT",
            "Staff",
            "'",
            "GROUP",
            "BY",
            "city"
        ],
        "db_id": "store_1"
    },
    {
        "question": "Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee.",
        "query": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "T2.first_name",
            ",",
            "T2.last_name",
            ",",
            "count",
            "(",
            "T1.reports_to",
            ")",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "employees",
            "AS",
            "T2",
            "ON",
            "T1.reports_to",
            "=",
            "T2.id",
            "GROUP",
            "BY",
            "T1.reports_to",
            "ORDER",
            "BY",
            "count",
            "(",
            "T1.reports_to",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What are the first and last names of all the employees and how many people report to them?",
        "query": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "T2.first_name",
            ",",
            "T2.last_name",
            ",",
            "count",
            "(",
            "T1.reports_to",
            ")",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "employees",
            "AS",
            "T2",
            "ON",
            "T1.reports_to",
            "=",
            "T2.id",
            "GROUP",
            "BY",
            "T1.reports_to",
            "ORDER",
            "BY",
            "count",
            "(",
            "T1.reports_to",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "How many orders does Lucas Mancini has?",
        "query": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "invoices",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T1.first_name",
            "=",
            "``",
            "Lucas",
            "''",
            "AND",
            "T1.last_name",
            "=",
            "``",
            "Mancini",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "How many orders does Luca Mancini have in his invoices?",
        "query": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "invoices",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T1.first_name",
            "=",
            "``",
            "Lucas",
            "''",
            "AND",
            "T1.last_name",
            "=",
            "``",
            "Mancini",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What is the total amount of money spent by Lucas Mancini?",
        "query": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "T2.total",
            ")",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "invoices",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T1.first_name",
            "=",
            "``",
            "Lucas",
            "''",
            "AND",
            "T1.last_name",
            "=",
            "``",
            "Mancini",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "How much money did Lucas Mancini spend?",
        "query": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "T2.total",
            ")",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "invoices",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T1.first_name",
            "=",
            "``",
            "Lucas",
            "''",
            "AND",
            "T1.last_name",
            "=",
            "``",
            "Mancini",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "List all media types.",
        "query": "SELECT name FROM media_types;",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "media_types",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What are the names of all the media types?",
        "query": "SELECT name FROM media_types;",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "media_types",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "List all different genre types.",
        "query": "SELECT DISTINCT name FROM genres;",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "name",
            "FROM",
            "genres",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What are the different names of the genres?",
        "query": "SELECT DISTINCT name FROM genres;",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "name",
            "FROM",
            "genres",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "List the name of all playlist.",
        "query": "SELECT name FROM playlists;",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "playlists",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What are the names of all the playlists?",
        "query": "SELECT name FROM playlists;",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "playlists",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "Who is the composer of track Fast As a Shark?",
        "query": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";",
        "query_toks": [
            "SELECT",
            "composer",
            "FROM",
            "tracks",
            "WHERE",
            "name",
            "=",
            "``",
            "Fast",
            "As",
            "a",
            "Shark",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What is the composer who created the track \"Fast As a Shark\"?",
        "query": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";",
        "query_toks": [
            "SELECT",
            "composer",
            "FROM",
            "tracks",
            "WHERE",
            "name",
            "=",
            "``",
            "Fast",
            "As",
            "a",
            "Shark",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "How long does track Fast As a Shark has?",
        "query": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";",
        "query_toks": [
            "SELECT",
            "milliseconds",
            "FROM",
            "tracks",
            "WHERE",
            "name",
            "=",
            "``",
            "Fast",
            "As",
            "a",
            "Shark",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "How many milliseconds long is Fast As a Shark?",
        "query": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";",
        "query_toks": [
            "SELECT",
            "milliseconds",
            "FROM",
            "tracks",
            "WHERE",
            "name",
            "=",
            "``",
            "Fast",
            "As",
            "a",
            "Shark",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What is the name of tracks whose genre is Rock?",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "genres",
            "AS",
            "T1",
            "JOIN",
            "tracks",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.genre_id",
            "WHERE",
            "T1.name",
            "=",
            "``",
            "Rock",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What is the name of all tracks in the Rock genre?",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "genres",
            "AS",
            "T1",
            "JOIN",
            "tracks",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.genre_id",
            "WHERE",
            "T1.name",
            "=",
            "``",
            "Rock",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What is title of album which track Balls to the Wall belongs to?",
        "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";",
        "query_toks": [
            "SELECT",
            "T1.title",
            "FROM",
            "albums",
            "AS",
            "T1",
            "JOIN",
            "tracks",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.genre_id",
            "WHERE",
            "T2.name",
            "=",
            "``",
            "Balls",
            "to",
            "the",
            "Wall",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What is the name of the album that has the track Ball to the Wall?",
        "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";",
        "query_toks": [
            "SELECT",
            "T1.title",
            "FROM",
            "albums",
            "AS",
            "T1",
            "JOIN",
            "tracks",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.genre_id",
            "WHERE",
            "T2.name",
            "=",
            "``",
            "Balls",
            "to",
            "the",
            "Wall",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "List name of all tracks in Balls to the Wall.",
        "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "albums",
            "AS",
            "T1",
            "JOIN",
            "tracks",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.genre_id",
            "WHERE",
            "T1.title",
            "=",
            "``",
            "Balls",
            "to",
            "the",
            "Wall",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What is the name of all tracks in the album named Balls to the Wall?",
        "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "albums",
            "AS",
            "T1",
            "JOIN",
            "tracks",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.genre_id",
            "WHERE",
            "T1.title",
            "=",
            "``",
            "Balls",
            "to",
            "the",
            "Wall",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "List title of albums have the number of tracks greater than 10.",
        "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;",
        "query_toks": [
            "SELECT",
            "T1.title",
            "FROM",
            "albums",
            "AS",
            "T1",
            "JOIN",
            "tracks",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.album_id",
            "GROUP",
            "BY",
            "T1.id",
            "HAVING",
            "count",
            "(",
            "T1.id",
            ")",
            ">",
            "10",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What are the names of the albums that have more than 10 tracks?",
        "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;",
        "query_toks": [
            "SELECT",
            "T1.title",
            "FROM",
            "albums",
            "AS",
            "T1",
            "JOIN",
            "tracks",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.album_id",
            "GROUP",
            "BY",
            "T1.id",
            "HAVING",
            "count",
            "(",
            "T1.id",
            ")",
            ">",
            "10",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "genres",
            "AS",
            "T1",
            "JOIN",
            "tracks",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.genre_id",
            "JOIN",
            "media_types",
            "AS",
            "T3",
            "ON",
            "T3.id",
            "=",
            "T2.media_type_id",
            "WHERE",
            "T1.name",
            "=",
            "``",
            "Rock",
            "''",
            "AND",
            "T3.name",
            "=",
            "``",
            "MPEG",
            "audio",
            "file",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What are the names of all Rock tracks that are stored on MPEG audio files?",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "genres",
            "AS",
            "T1",
            "JOIN",
            "tracks",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.genre_id",
            "JOIN",
            "media_types",
            "AS",
            "T3",
            "ON",
            "T3.id",
            "=",
            "T2.media_type_id",
            "WHERE",
            "T1.name",
            "=",
            "``",
            "Rock",
            "''",
            "AND",
            "T3.name",
            "=",
            "``",
            "MPEG",
            "audio",
            "file",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "List the name of tracks belongs to genre Rock or media type is MPEG audio file.",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "genres",
            "AS",
            "T1",
            "JOIN",
            "tracks",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.genre_id",
            "JOIN",
            "media_types",
            "AS",
            "T3",
            "ON",
            "T3.id",
            "=",
            "T2.media_type_id",
            "WHERE",
            "T1.name",
            "=",
            "``",
            "Rock",
            "''",
            "OR",
            "T3.name",
            "=",
            "``",
            "MPEG",
            "audio",
            "file",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "genres",
            "AS",
            "T1",
            "JOIN",
            "tracks",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.genre_id",
            "JOIN",
            "media_types",
            "AS",
            "T3",
            "ON",
            "T3.id",
            "=",
            "T2.media_type_id",
            "WHERE",
            "T1.name",
            "=",
            "``",
            "Rock",
            "''",
            "OR",
            "T3.name",
            "=",
            "``",
            "MPEG",
            "audio",
            "file",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "List the name of tracks belongs to genre Rock or genre Jazz.",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "genres",
            "AS",
            "T1",
            "JOIN",
            "tracks",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.genre_id",
            "WHERE",
            "T1.name",
            "=",
            "``",
            "Rock",
            "''",
            "OR",
            "T1.name",
            "=",
            "``",
            "Jazz",
            "''"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What are the names of the tracks that are Rock or Jazz songs?",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "genres",
            "AS",
            "T1",
            "JOIN",
            "tracks",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.genre_id",
            "WHERE",
            "T1.name",
            "=",
            "``",
            "Rock",
            "''",
            "OR",
            "T1.name",
            "=",
            "``",
            "Jazz",
            "''"
        ],
        "db_id": "store_1"
    },
    {
        "question": "List the name of all tracks in the playlists of Movies.",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "tracks",
            "AS",
            "T1",
            "JOIN",
            "playlist_tracks",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.track_id",
            "JOIN",
            "playlists",
            "AS",
            "T3",
            "ON",
            "T3.id",
            "=",
            "T2.playlist_id",
            "WHERE",
            "T3.name",
            "=",
            "``",
            "Movies",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What are the names of all tracks that are on playlists titled Movies?",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "tracks",
            "AS",
            "T1",
            "JOIN",
            "playlist_tracks",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.track_id",
            "JOIN",
            "playlists",
            "AS",
            "T3",
            "ON",
            "T3.id",
            "=",
            "T2.playlist_id",
            "WHERE",
            "T3.name",
            "=",
            "``",
            "Movies",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "List the name of playlist which has number of tracks greater than 100.",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "playlist_tracks",
            "AS",
            "T1",
            "JOIN",
            "playlists",
            "AS",
            "T2",
            "ON",
            "T2.id",
            "=",
            "T1.playlist_id",
            "GROUP",
            "BY",
            "T1.playlist_id",
            "HAVING",
            "count",
            "(",
            "T1.track_id",
            ")",
            ">",
            "100",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What are the names of all playlists that have more than 100 tracks?",
        "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "playlist_tracks",
            "AS",
            "T1",
            "JOIN",
            "playlists",
            "AS",
            "T2",
            "ON",
            "T2.id",
            "=",
            "T1.playlist_id",
            "GROUP",
            "BY",
            "T1.playlist_id",
            "HAVING",
            "count",
            "(",
            "T1.track_id",
            ")",
            ">",
            "100",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "List all tracks bought by customer Daan Peeters.",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "tracks",
            "AS",
            "T1",
            "JOIN",
            "invoice_lines",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.track_id",
            "JOIN",
            "invoices",
            "AS",
            "T3",
            "ON",
            "T3.id",
            "=",
            "T2.invoice_id",
            "JOIN",
            "customers",
            "AS",
            "T4",
            "ON",
            "T4.id",
            "=",
            "T3.customer_id",
            "WHERE",
            "T4.first_name",
            "=",
            "``",
            "Daan",
            "''",
            "AND",
            "T4.last_name",
            "=",
            "``",
            "Peeters",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What are the tracks that Dean Peeters bought?",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "tracks",
            "AS",
            "T1",
            "JOIN",
            "invoice_lines",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.track_id",
            "JOIN",
            "invoices",
            "AS",
            "T3",
            "ON",
            "T3.id",
            "=",
            "T2.invoice_id",
            "JOIN",
            "customers",
            "AS",
            "T4",
            "ON",
            "T4.id",
            "=",
            "T3.customer_id",
            "WHERE",
            "T4.first_name",
            "=",
            "``",
            "Daan",
            "''",
            "AND",
            "T4.last_name",
            "=",
            "``",
            "Peeters",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "How much is the track Fast As a Shark?",
        "query": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";",
        "query_toks": [
            "SELECT",
            "unit_price",
            "FROM",
            "tracks",
            "WHERE",
            "name",
            "=",
            "``",
            "Fast",
            "As",
            "a",
            "Shark",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What is the unit price of the tune \"Fast As a Shark\"?",
        "query": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";",
        "query_toks": [
            "SELECT",
            "unit_price",
            "FROM",
            "tracks",
            "WHERE",
            "name",
            "=",
            "``",
            "Fast",
            "As",
            "a",
            "Shark",
            "''",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "Find the name of tracks which are in Movies playlist but not in music playlist.",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "tracks",
            "AS",
            "T1",
            "JOIN",
            "playlist_tracks",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.track_id",
            "JOIN",
            "playlists",
            "AS",
            "T3",
            "ON",
            "T2.playlist_id",
            "=",
            "T3.id",
            "WHERE",
            "T3.name",
            "=",
            "'Movies",
            "'",
            "EXCEPT",
            "SELECT",
            "T1.name",
            "FROM",
            "tracks",
            "AS",
            "T1",
            "JOIN",
            "playlist_tracks",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.track_id",
            "JOIN",
            "playlists",
            "AS",
            "T3",
            "ON",
            "T2.playlist_id",
            "=",
            "T3.id",
            "WHERE",
            "T3.name",
            "=",
            "'Music",
            "'"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What are the names of all tracks that are on the Movies playlist but not in the music playlist?",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "tracks",
            "AS",
            "T1",
            "JOIN",
            "playlist_tracks",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.track_id",
            "JOIN",
            "playlists",
            "AS",
            "T3",
            "ON",
            "T2.playlist_id",
            "=",
            "T3.id",
            "WHERE",
            "T3.name",
            "=",
            "'Movies",
            "'",
            "EXCEPT",
            "SELECT",
            "T1.name",
            "FROM",
            "tracks",
            "AS",
            "T1",
            "JOIN",
            "playlist_tracks",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.track_id",
            "JOIN",
            "playlists",
            "AS",
            "T3",
            "ON",
            "T2.playlist_id",
            "=",
            "T3.id",
            "WHERE",
            "T3.name",
            "=",
            "'Music",
            "'"
        ],
        "db_id": "store_1"
    },
    {
        "question": "Find the name of tracks which are in both Movies and music playlists.",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "tracks",
            "AS",
            "T1",
            "JOIN",
            "playlist_tracks",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.track_id",
            "JOIN",
            "playlists",
            "AS",
            "T3",
            "ON",
            "T2.playlist_id",
            "=",
            "T3.id",
            "WHERE",
            "T3.name",
            "=",
            "'Movies",
            "'",
            "INTERSECT",
            "SELECT",
            "T1.name",
            "FROM",
            "tracks",
            "AS",
            "T1",
            "JOIN",
            "playlist_tracks",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.track_id",
            "JOIN",
            "playlists",
            "AS",
            "T3",
            "ON",
            "T2.playlist_id",
            "=",
            "T3.id",
            "WHERE",
            "T3.name",
            "=",
            "'Music",
            "'"
        ],
        "db_id": "store_1"
    },
    {
        "question": "What are the names of all the tracks that are in both the Movies and music playlists?",
        "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "tracks",
            "AS",
            "T1",
            "JOIN",
            "playlist_tracks",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.track_id",
            "JOIN",
            "playlists",
            "AS",
            "T3",
            "ON",
            "T2.playlist_id",
            "=",
            "T3.id",
            "WHERE",
            "T3.name",
            "=",
            "'Movies",
            "'",
            "INTERSECT",
            "SELECT",
            "T1.name",
            "FROM",
            "tracks",
            "AS",
            "T1",
            "JOIN",
            "playlist_tracks",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.track_id",
            "JOIN",
            "playlists",
            "AS",
            "T3",
            "ON",
            "T2.playlist_id",
            "=",
            "T3.id",
            "WHERE",
            "T3.name",
            "=",
            "'Music",
            "'"
        ],
        "db_id": "store_1"
    },
    {
        "question": "Find number of tracks in each genre?",
        "query": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "T1.name",
            "FROM",
            "genres",
            "AS",
            "T1",
            "JOIN",
            "tracks",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.genre_id",
            "GROUP",
            "BY",
            "T1.name",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "How many tracks are in each genre?",
        "query": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "T1.name",
            "FROM",
            "genres",
            "AS",
            "T1",
            "JOIN",
            "tracks",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.genre_id",
            "GROUP",
            "BY",
            "T1.name",
            ";"
        ],
        "db_id": "store_1"
    },
    {
        "question": "How many accounts do we have?",
        "query": "SELECT count(*) FROM Accounts",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Accounts"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Count the number of accounts.",
        "query": "SELECT count(*) FROM Accounts",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Accounts"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show ids, customer ids, names for all accounts.",
        "query": "SELECT account_id ,  customer_id ,  account_name FROM Accounts",
        "query_toks": [
            "SELECT",
            "account_id",
            ",",
            "customer_id",
            ",",
            "account_name",
            "FROM",
            "Accounts"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What are the account ids, customer ids, and account names for all the accounts?",
        "query": "SELECT account_id ,  customer_id ,  account_name FROM Accounts",
        "query_toks": [
            "SELECT",
            "account_id",
            ",",
            "customer_id",
            ",",
            "account_name",
            "FROM",
            "Accounts"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show other account details for account with name 338.",
        "query": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"",
        "query_toks": [
            "SELECT",
            "other_account_details",
            "FROM",
            "Accounts",
            "WHERE",
            "account_name",
            "=",
            "``",
            "338",
            "''"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What are the other account details for the account with the name 338?",
        "query": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"",
        "query_toks": [
            "SELECT",
            "other_account_details",
            "FROM",
            "Accounts",
            "WHERE",
            "account_name",
            "=",
            "``",
            "338",
            "''"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What is the first name, last name, and phone of the customer with account name 162?",
        "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"",
        "query_toks": [
            "SELECT",
            "T2.customer_first_name",
            ",",
            "T2.customer_last_name",
            ",",
            "T2.customer_phone",
            "FROM",
            "Accounts",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T1.account_name",
            "=",
            "``",
            "162",
            "''"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Give the full name and phone of the customer who has the account name 162.",
        "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"",
        "query_toks": [
            "SELECT",
            "T2.customer_first_name",
            ",",
            "T2.customer_last_name",
            ",",
            "T2.customer_phone",
            "FROM",
            "Accounts",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T1.account_name",
            "=",
            "``",
            "162",
            "''"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "How many accounts does the customer with first name Art and last name Turcotte have?",
        "query": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Accounts",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.customer_first_name",
            "=",
            "``",
            "Art",
            "''",
            "AND",
            "T2.customer_last_name",
            "=",
            "``",
            "Turcotte",
            "''"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Return the number of accounts that the customer with the first name Art and last name Turcotte has.",
        "query": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Accounts",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.customer_first_name",
            "=",
            "``",
            "Art",
            "''",
            "AND",
            "T2.customer_last_name",
            "=",
            "``",
            "Turcotte",
            "''"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show all customer ids and the number of accounts for each customer.",
        "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id",
        "query_toks": [
            "SELECT",
            "customer_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Accounts",
            "GROUP",
            "BY",
            "customer_id"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "How many accounts are there for each customer id?",
        "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id",
        "query_toks": [
            "SELECT",
            "customer_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Accounts",
            "GROUP",
            "BY",
            "customer_id"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show the customer id and number of accounts with most accounts.",
        "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "customer_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Accounts",
            "GROUP",
            "BY",
            "customer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What is the customer id of the customer with the most accounts, and how many accounts does this person have?",
        "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "customer_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Accounts",
            "GROUP",
            "BY",
            "customer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What is the customer first, last name and id with least number of accounts.",
        "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.customer_first_name",
            ",",
            "T2.customer_last_name",
            ",",
            "T1.customer_id",
            "FROM",
            "Accounts",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Give the full name and customer id of the customer with the fewest accounts.",
        "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.customer_first_name",
            ",",
            "T2.customer_last_name",
            ",",
            "T1.customer_id",
            "FROM",
            "Accounts",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show the number of all customers without an account.",
        "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers",
            "WHERE",
            "customer_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "customer_id",
            "FROM",
            "Accounts",
            ")"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "How many customers do not have an account?",
        "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers",
            "WHERE",
            "customer_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "customer_id",
            "FROM",
            "Accounts",
            ")"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show the first names and last names of customers without any account.",
        "query": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "query_toks": [
            "SELECT",
            "customer_first_name",
            ",",
            "customer_last_name",
            "FROM",
            "Customers",
            "EXCEPT",
            "SELECT",
            "T1.customer_first_name",
            ",",
            "T1.customer_last_name",
            "FROM",
            "Customers",
            "AS",
            "T1",
            "JOIN",
            "Accounts",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What are the full names of customers who do not have any accounts?",
        "query": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "query_toks": [
            "SELECT",
            "customer_first_name",
            ",",
            "customer_last_name",
            "FROM",
            "Customers",
            "EXCEPT",
            "SELECT",
            "T1.customer_first_name",
            ",",
            "T1.customer_last_name",
            "FROM",
            "Customers",
            "AS",
            "T1",
            "JOIN",
            "Accounts",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show distinct first and last names for all customers with an account.",
        "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.customer_first_name",
            ",",
            "T1.customer_last_name",
            "FROM",
            "Customers",
            "AS",
            "T1",
            "JOIN",
            "Accounts",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What are the full names of customers who have accounts?",
        "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.customer_first_name",
            ",",
            "T1.customer_last_name",
            "FROM",
            "Customers",
            "AS",
            "T1",
            "JOIN",
            "Accounts",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "How many customers have an account?",
        "query": "SELECT count(DISTINCT customer_id) FROM Accounts",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "customer_id",
            ")",
            "FROM",
            "Accounts"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Count the number of customers who hold an account.",
        "query": "SELECT count(DISTINCT customer_id) FROM Accounts",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "customer_id",
            ")",
            "FROM",
            "Accounts"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "How many customers do we have?",
        "query": "SELECT count(*) FROM Customers",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Count the number of customers.",
        "query": "SELECT count(*) FROM Customers",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show ids, first names, last names, and phones for all customers.",
        "query": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers",
        "query_toks": [
            "SELECT",
            "customer_id",
            ",",
            "customer_first_name",
            ",",
            "customer_last_name",
            ",",
            "customer_phone",
            "FROM",
            "Customers"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What are the ids, full names, and phones of each customer?",
        "query": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers",
        "query_toks": [
            "SELECT",
            "customer_id",
            ",",
            "customer_first_name",
            ",",
            "customer_last_name",
            ",",
            "customer_phone",
            "FROM",
            "Customers"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What is the phone and email for customer with first name Aniyah and last name Feest?",
        "query": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"",
        "query_toks": [
            "SELECT",
            "customer_phone",
            ",",
            "customer_email",
            "FROM",
            "Customers",
            "WHERE",
            "customer_first_name",
            "=",
            "``",
            "Aniyah",
            "''",
            "AND",
            "customer_last_name",
            "=",
            "``",
            "Feest",
            "''"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Return the phone and email of the customer with the first name Aniyah and last name Feest.",
        "query": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"",
        "query_toks": [
            "SELECT",
            "customer_phone",
            ",",
            "customer_email",
            "FROM",
            "Customers",
            "WHERE",
            "customer_first_name",
            "=",
            "``",
            "Aniyah",
            "''",
            "AND",
            "customer_last_name",
            "=",
            "``",
            "Feest",
            "''"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show the number of customer cards.",
        "query": "SELECT count(*) FROM Customers_cards",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers_cards"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "How many customer cards are there?",
        "query": "SELECT count(*) FROM Customers_cards",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers_cards"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show ids, customer ids, card type codes, card numbers for all cards.",
        "query": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards",
        "query_toks": [
            "SELECT",
            "card_id",
            ",",
            "customer_id",
            ",",
            "card_type_code",
            ",",
            "card_number",
            "FROM",
            "Customers_cards"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What are card ids, customer ids, card types, and card numbers for each customer card?",
        "query": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards",
        "query_toks": [
            "SELECT",
            "card_id",
            ",",
            "customer_id",
            ",",
            "card_type_code",
            ",",
            "card_number",
            "FROM",
            "Customers_cards"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show the date valid from and the date valid to for the card with card number '4560596484842'.",
        "query": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"",
        "query_toks": [
            "SELECT",
            "date_valid_from",
            ",",
            "date_valid_to",
            "FROM",
            "Customers_cards",
            "WHERE",
            "card_number",
            "=",
            "``",
            "4560596484842",
            "''"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What are the valid from and valid to dates for the card with the number 4560596484842?",
        "query": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"",
        "query_toks": [
            "SELECT",
            "date_valid_from",
            ",",
            "date_valid_to",
            "FROM",
            "Customers_cards",
            "WHERE",
            "card_number",
            "=",
            "``",
            "4560596484842",
            "''"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What is the first name, last name, and phone of the customer with card 4560596484842.",
        "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"",
        "query_toks": [
            "SELECT",
            "T2.customer_first_name",
            ",",
            "T2.customer_last_name",
            ",",
            "T2.customer_phone",
            "FROM",
            "Customers_cards",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T1.card_number",
            "=",
            "``",
            "4560596484842",
            "''"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Return the full name and phone of the customer who has card number 4560596484842.",
        "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"",
        "query_toks": [
            "SELECT",
            "T2.customer_first_name",
            ",",
            "T2.customer_last_name",
            ",",
            "T2.customer_phone",
            "FROM",
            "Customers_cards",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T1.card_number",
            "=",
            "``",
            "4560596484842",
            "''"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "How many cards does customer Art Turcotte have?",
        "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers_cards",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.customer_first_name",
            "=",
            "``",
            "Art",
            "''",
            "AND",
            "T2.customer_last_name",
            "=",
            "``",
            "Turcotte",
            "''"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Count the number of cards the customer with the first name Art and last name Turcotte has.",
        "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers_cards",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.customer_first_name",
            "=",
            "``",
            "Art",
            "''",
            "AND",
            "T2.customer_last_name",
            "=",
            "``",
            "Turcotte",
            "''"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "How many debit cards do we have?",
        "query": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers_cards",
            "WHERE",
            "card_type_code",
            "=",
            "``",
            "Debit",
            "''"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Count the number of customer cards of the type Debit.",
        "query": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers_cards",
            "WHERE",
            "card_type_code",
            "=",
            "``",
            "Debit",
            "''"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "How many credit cards does customer Blanche Huels have?",
        "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers_cards",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.customer_first_name",
            "=",
            "``",
            "Blanche",
            "''",
            "AND",
            "T2.customer_last_name",
            "=",
            "``",
            "Huels",
            "''",
            "AND",
            "T1.card_type_code",
            "=",
            "``",
            "Credit",
            "''"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Count the number of credit cards that the customer with first name Blanche and last name Huels has.",
        "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers_cards",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.customer_first_name",
            "=",
            "``",
            "Blanche",
            "''",
            "AND",
            "T2.customer_last_name",
            "=",
            "``",
            "Huels",
            "''",
            "AND",
            "T1.card_type_code",
            "=",
            "``",
            "Credit",
            "''"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show all customer ids and the number of cards owned by each customer.",
        "query": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id",
        "query_toks": [
            "SELECT",
            "customer_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers_cards",
            "GROUP",
            "BY",
            "customer_id"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What are the different customer ids, and how many cards does each one hold?",
        "query": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id",
        "query_toks": [
            "SELECT",
            "customer_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers_cards",
            "GROUP",
            "BY",
            "customer_id"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What is the customer id with most number of cards, and how many does he have?",
        "query": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "customer_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers_cards",
            "GROUP",
            "BY",
            "customer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Return the id of the customer who has the most cards, as well as the number of cards.",
        "query": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "customer_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers_cards",
            "GROUP",
            "BY",
            "customer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show id, first and last names for all customers with at least two cards.",
        "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "query_toks": [
            "SELECT",
            "T1.customer_id",
            ",",
            "T2.customer_first_name",
            ",",
            "T2.customer_last_name",
            "FROM",
            "Customers_cards",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What are the ids and full names of customers who hold two or more cards?",
        "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "query_toks": [
            "SELECT",
            "T1.customer_id",
            ",",
            "T2.customer_first_name",
            ",",
            "T2.customer_last_name",
            "FROM",
            "Customers_cards",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What is the customer id, first and last name with least number of accounts.",
        "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.customer_id",
            ",",
            "T2.customer_first_name",
            ",",
            "T2.customer_last_name",
            "FROM",
            "Customers_cards",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Return the id and full name of the customer who has the fewest accounts.",
        "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.customer_id",
            ",",
            "T2.customer_first_name",
            ",",
            "T2.customer_last_name",
            "FROM",
            "Customers_cards",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show all card type codes and the number of cards in each type.",
        "query": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code",
        "query_toks": [
            "SELECT",
            "card_type_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers_cards",
            "GROUP",
            "BY",
            "card_type_code"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What are the different card types, and how many cards are there of each?",
        "query": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code",
        "query_toks": [
            "SELECT",
            "card_type_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers_cards",
            "GROUP",
            "BY",
            "card_type_code"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What is the card type code with most number of cards?",
        "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "card_type_code",
            "FROM",
            "Customers_cards",
            "GROUP",
            "BY",
            "card_type_code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Return the code of the card type that is most common.",
        "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "card_type_code",
            "FROM",
            "Customers_cards",
            "GROUP",
            "BY",
            "card_type_code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show card type codes with at least 5 cards.",
        "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
        "query_toks": [
            "SELECT",
            "card_type_code",
            "FROM",
            "Customers_cards",
            "GROUP",
            "BY",
            "card_type_code",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "5"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What are the codes of card types that have 5 or more cards?",
        "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
        "query_toks": [
            "SELECT",
            "card_type_code",
            "FROM",
            "Customers_cards",
            "GROUP",
            "BY",
            "card_type_code",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "5"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show all card type codes and the number of customers holding cards in each type.",
        "query": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
        "query_toks": [
            "SELECT",
            "card_type_code",
            ",",
            "count",
            "(",
            "DISTINCT",
            "customer_id",
            ")",
            "FROM",
            "Customers_cards",
            "GROUP",
            "BY",
            "card_type_code"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What are the different card type codes, and how many different customers hold each type?",
        "query": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
        "query_toks": [
            "SELECT",
            "card_type_code",
            ",",
            "count",
            "(",
            "DISTINCT",
            "customer_id",
            ")",
            "FROM",
            "Customers_cards",
            "GROUP",
            "BY",
            "card_type_code"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show the customer ids and firstname without a credit card.",
        "query": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"",
        "query_toks": [
            "SELECT",
            "customer_id",
            ",",
            "customer_first_name",
            "FROM",
            "Customers",
            "EXCEPT",
            "SELECT",
            "T1.customer_id",
            ",",
            "T2.customer_first_name",
            "FROM",
            "Customers_cards",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "card_type_code",
            "=",
            "``",
            "Credit",
            "''"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What are the ids and first names of customers who do not hold a credit card?",
        "query": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"",
        "query_toks": [
            "SELECT",
            "customer_id",
            ",",
            "customer_first_name",
            "FROM",
            "Customers",
            "EXCEPT",
            "SELECT",
            "T1.customer_id",
            ",",
            "T2.customer_first_name",
            "FROM",
            "Customers_cards",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "card_type_code",
            "=",
            "``",
            "Credit",
            "''"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show all card type codes.",
        "query": "SELECT DISTINCT card_type_code FROM Customers_Cards",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "card_type_code",
            "FROM",
            "Customers_Cards"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What are the different card type codes?",
        "query": "SELECT DISTINCT card_type_code FROM Customers_Cards",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "card_type_code",
            "FROM",
            "Customers_Cards"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show the number of card types.",
        "query": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "card_type_code",
            ")",
            "FROM",
            "Customers_Cards"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "How many different card types are there?",
        "query": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "card_type_code",
            ")",
            "FROM",
            "Customers_Cards"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show all transaction types.",
        "query": "SELECT DISTINCT transaction_type FROM Financial_Transactions",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "transaction_type",
            "FROM",
            "Financial_Transactions"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What are the different types of transactions?",
        "query": "SELECT DISTINCT transaction_type FROM Financial_Transactions",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "transaction_type",
            "FROM",
            "Financial_Transactions"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show the number of transaction types.",
        "query": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "transaction_type",
            ")",
            "FROM",
            "Financial_Transactions"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "How many different types of transactions are there?",
        "query": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "transaction_type",
            ")",
            "FROM",
            "Financial_Transactions"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What is the average and total transaction amount?",
        "query": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "transaction_amount",
            ")",
            ",",
            "sum",
            "(",
            "transaction_amount",
            ")",
            "FROM",
            "Financial_transactions"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Return the average transaction amount, as well as the total amount of all transactions.",
        "query": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "transaction_amount",
            ")",
            ",",
            "sum",
            "(",
            "transaction_amount",
            ")",
            "FROM",
            "Financial_transactions"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show the card type codes and the number of transactions.",
        "query": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code",
        "query_toks": [
            "SELECT",
            "T2.card_type_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Financial_transactions",
            "AS",
            "T1",
            "JOIN",
            "Customers_cards",
            "AS",
            "T2",
            "ON",
            "T1.card_id",
            "=",
            "T2.card_id",
            "GROUP",
            "BY",
            "T2.card_type_code"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What are the different card types, and how many transactions have been made with each?",
        "query": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code",
        "query_toks": [
            "SELECT",
            "T2.card_type_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Financial_transactions",
            "AS",
            "T1",
            "JOIN",
            "Customers_cards",
            "AS",
            "T2",
            "ON",
            "T1.card_id",
            "=",
            "T2.card_id",
            "GROUP",
            "BY",
            "T2.card_type_code"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show the transaction type and the number of transactions.",
        "query": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type",
        "query_toks": [
            "SELECT",
            "transaction_type",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Financial_transactions",
            "GROUP",
            "BY",
            "transaction_type"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What are the different transaction types, and how many transactions of each have taken place?",
        "query": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type",
        "query_toks": [
            "SELECT",
            "transaction_type",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Financial_transactions",
            "GROUP",
            "BY",
            "transaction_type"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What is the transaction type that has processed the greatest total amount in transactions?",
        "query": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "transaction_type",
            "FROM",
            "Financial_transactions",
            "GROUP",
            "BY",
            "transaction_type",
            "ORDER",
            "BY",
            "sum",
            "(",
            "transaction_amount",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Return the type of transaction with the highest total amount.",
        "query": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "transaction_type",
            "FROM",
            "Financial_transactions",
            "GROUP",
            "BY",
            "transaction_type",
            "ORDER",
            "BY",
            "sum",
            "(",
            "transaction_amount",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "Show the account id and the number of transactions for each account",
        "query": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id",
        "query_toks": [
            "SELECT",
            "account_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Financial_transactions",
            "GROUP",
            "BY",
            "account_id"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "What are the different account ids that have made financial transactions, as well as how many transactions correspond to each?",
        "query": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id",
        "query_toks": [
            "SELECT",
            "account_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Financial_transactions",
            "GROUP",
            "BY",
            "account_id"
        ],
        "db_id": "customers_card_transactions"
    },
    {
        "question": "How many albums are there?",
        "query": "SELECT count(*) FROM ALBUM",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "ALBUM"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find the number of albums.",
        "query": "SELECT count(*) FROM ALBUM",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "ALBUM"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "List the names of all music genres.",
        "query": "SELECT Name FROM GENRE",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "GENRE"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What are the names of different music genres?",
        "query": "SELECT Name FROM GENRE",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "GENRE"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find all the customer information in state NY.",
        "query": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\"",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "CUSTOMER",
            "WHERE",
            "State",
            "=",
            "``",
            "NY",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What is all the customer information for customers in NY state?",
        "query": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\"",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "CUSTOMER",
            "WHERE",
            "State",
            "=",
            "``",
            "NY",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What are the first names and last names of the employees who live in Calgary city.",
        "query": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"",
        "query_toks": [
            "SELECT",
            "FirstName",
            ",",
            "LastName",
            "FROM",
            "EMPLOYEE",
            "WHERE",
            "City",
            "=",
            "``",
            "Calgary",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find the full names of employees living in the city of Calgary.",
        "query": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"",
        "query_toks": [
            "SELECT",
            "FirstName",
            ",",
            "LastName",
            "FROM",
            "EMPLOYEE",
            "WHERE",
            "City",
            "=",
            "``",
            "Calgary",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What are the distinct billing countries of the invoices?",
        "query": "SELECT distinct(BillingCountry) FROM INVOICE",
        "query_toks": [
            "SELECT",
            "distinct",
            "(",
            "BillingCountry",
            ")",
            "FROM",
            "INVOICE"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find the different billing countries for all invoices.",
        "query": "SELECT distinct(BillingCountry) FROM INVOICE",
        "query_toks": [
            "SELECT",
            "distinct",
            "(",
            "BillingCountry",
            ")",
            "FROM",
            "INVOICE"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find the names of all artists that have \"a\" in their names.",
        "query": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "ARTIST",
            "WHERE",
            "Name",
            "LIKE",
            "``",
            "%",
            "a",
            "%",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What are the names of artist who have the letter 'a' in their names?",
        "query": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "ARTIST",
            "WHERE",
            "Name",
            "LIKE",
            "``",
            "%",
            "a",
            "%",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find the title of all the albums of the artist \"AC/DC\".",
        "query": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"",
        "query_toks": [
            "SELECT",
            "Title",
            "FROM",
            "ALBUM",
            "AS",
            "T1",
            "JOIN",
            "ARTIST",
            "AS",
            "T2",
            "ON",
            "T1.ArtistId",
            "=",
            "T2.ArtistId",
            "WHERE",
            "T2.Name",
            "=",
            "``",
            "AC/DC",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What are the titles of albums by the artist \"AC/DC\"?",
        "query": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"",
        "query_toks": [
            "SELECT",
            "Title",
            "FROM",
            "ALBUM",
            "AS",
            "T1",
            "JOIN",
            "ARTIST",
            "AS",
            "T2",
            "ON",
            "T1.ArtistId",
            "=",
            "T2.ArtistId",
            "WHERE",
            "T2.Name",
            "=",
            "``",
            "AC/DC",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Hom many albums does the artist \"Metallica\" have?",
        "query": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "ALBUM",
            "AS",
            "T1",
            "JOIN",
            "ARTIST",
            "AS",
            "T2",
            "ON",
            "T1.ArtistId",
            "=",
            "T2.ArtistId",
            "WHERE",
            "T2.Name",
            "=",
            "``",
            "Metallica",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find the number of albums by the artist \"Metallica\".",
        "query": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "ALBUM",
            "AS",
            "T1",
            "JOIN",
            "ARTIST",
            "AS",
            "T2",
            "ON",
            "T1.ArtistId",
            "=",
            "T2.ArtistId",
            "WHERE",
            "T2.Name",
            "=",
            "``",
            "Metallica",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Which artist does the album \"Balls to the Wall\" belong to?",
        "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"",
        "query_toks": [
            "SELECT",
            "T2.Name",
            "FROM",
            "ALBUM",
            "AS",
            "T1",
            "JOIN",
            "ARTIST",
            "AS",
            "T2",
            "ON",
            "T1.ArtistId",
            "=",
            "T2.ArtistId",
            "WHERE",
            "T1.Title",
            "=",
            "``",
            "Balls",
            "to",
            "the",
            "Wall",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find the name of the artist who made the album \"Balls to the Wall\".",
        "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"",
        "query_toks": [
            "SELECT",
            "T2.Name",
            "FROM",
            "ALBUM",
            "AS",
            "T1",
            "JOIN",
            "ARTIST",
            "AS",
            "T2",
            "ON",
            "T1.ArtistId",
            "=",
            "T2.ArtistId",
            "WHERE",
            "T1.Title",
            "=",
            "``",
            "Balls",
            "to",
            "the",
            "Wall",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Which artist has the most albums?",
        "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.Name",
            "FROM",
            "ALBUM",
            "AS",
            "T1",
            "JOIN",
            "ARTIST",
            "AS",
            "T2",
            "ON",
            "T1.ArtistId",
            "=",
            "T2.ArtistId",
            "GROUP",
            "BY",
            "T2.Name",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What is the name of the artist with the greatest number of albums?",
        "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.Name",
            "FROM",
            "ALBUM",
            "AS",
            "T1",
            "JOIN",
            "ARTIST",
            "AS",
            "T2",
            "ON",
            "T1.ArtistId",
            "=",
            "T2.ArtistId",
            "GROUP",
            "BY",
            "T2.Name",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find the names of all the tracks that contain the word \"you\".",
        "query": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "TRACK",
            "WHERE",
            "Name",
            "LIKE",
            "'",
            "%",
            "you",
            "%",
            "'"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What are the names of tracks that contain the the word you in them?",
        "query": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "TRACK",
            "WHERE",
            "Name",
            "LIKE",
            "'",
            "%",
            "you",
            "%",
            "'"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What is the average unit price of all the tracks?",
        "query": "SELECT AVG(UnitPrice) FROM TRACK",
        "query_toks": [
            "SELECT",
            "AVG",
            "(",
            "UnitPrice",
            ")",
            "FROM",
            "TRACK"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find the average unit price for a track.",
        "query": "SELECT AVG(UnitPrice) FROM TRACK",
        "query_toks": [
            "SELECT",
            "AVG",
            "(",
            "UnitPrice",
            ")",
            "FROM",
            "TRACK"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What are the durations of the longest and the shortest tracks in milliseconds?",
        "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "Milliseconds",
            ")",
            ",",
            "min",
            "(",
            "Milliseconds",
            ")",
            "FROM",
            "TRACK"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find the maximum and minimum durations of tracks in milliseconds.",
        "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "Milliseconds",
            ")",
            ",",
            "min",
            "(",
            "Milliseconds",
            ")",
            "FROM",
            "TRACK"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Show the album names, ids and the number of tracks for each album.",
        "query": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID",
        "query_toks": [
            "SELECT",
            "T1.Title",
            ",",
            "T2.AlbumID",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "ALBUM",
            "AS",
            "T1",
            "JOIN",
            "TRACK",
            "AS",
            "T2",
            "ON",
            "T1.AlbumId",
            "=",
            "T2.AlbumId",
            "GROUP",
            "BY",
            "T2.AlbumID"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What are the names and ids of the different albums, and how many tracks are on each?",
        "query": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID",
        "query_toks": [
            "SELECT",
            "T1.Title",
            ",",
            "T2.AlbumID",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "ALBUM",
            "AS",
            "T1",
            "JOIN",
            "TRACK",
            "AS",
            "T2",
            "ON",
            "T1.AlbumId",
            "=",
            "T2.AlbumId",
            "GROUP",
            "BY",
            "T2.AlbumID"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What is the name of the most common genre in all tracks?",
        "query": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.Name",
            "FROM",
            "GENRE",
            "AS",
            "T1",
            "JOIN",
            "TRACK",
            "AS",
            "T2",
            "ON",
            "T1.GenreId",
            "=",
            "T2.GenreId",
            "GROUP",
            "BY",
            "T2.GenreId",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find the name of the genre that is most frequent across all tracks.",
        "query": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.Name",
            "FROM",
            "GENRE",
            "AS",
            "T1",
            "JOIN",
            "TRACK",
            "AS",
            "T2",
            "ON",
            "T1.GenreId",
            "=",
            "T2.GenreId",
            "GROUP",
            "BY",
            "T2.GenreId",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What is the least common media type in all tracks?",
        "query": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.Name",
            "FROM",
            "MEDIATYPE",
            "AS",
            "T1",
            "JOIN",
            "TRACK",
            "AS",
            "T2",
            "ON",
            "T1.MediaTypeId",
            "=",
            "T2.MediaTypeId",
            "GROUP",
            "BY",
            "T2.MediaTypeId",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What is the name of the media type that is least common across all tracks?",
        "query": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.Name",
            "FROM",
            "MEDIATYPE",
            "AS",
            "T1",
            "JOIN",
            "TRACK",
            "AS",
            "T2",
            "ON",
            "T1.MediaTypeId",
            "=",
            "T2.MediaTypeId",
            "GROUP",
            "BY",
            "T2.MediaTypeId",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Show the album names and ids for albums that contain tracks with unit price bigger than 1.",
        "query": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID",
        "query_toks": [
            "SELECT",
            "T1.Title",
            ",",
            "T2.AlbumID",
            "FROM",
            "ALBUM",
            "AS",
            "T1",
            "JOIN",
            "TRACK",
            "AS",
            "T2",
            "ON",
            "T1.AlbumId",
            "=",
            "T2.AlbumId",
            "WHERE",
            "T2.UnitPrice",
            ">",
            "1",
            "GROUP",
            "BY",
            "T2.AlbumID"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What are the titles and ids for albums containing tracks with unit price greater than 1?",
        "query": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID",
        "query_toks": [
            "SELECT",
            "T1.Title",
            ",",
            "T2.AlbumID",
            "FROM",
            "ALBUM",
            "AS",
            "T1",
            "JOIN",
            "TRACK",
            "AS",
            "T2",
            "ON",
            "T1.AlbumId",
            "=",
            "T2.AlbumId",
            "WHERE",
            "T2.UnitPrice",
            ">",
            "1",
            "GROUP",
            "BY",
            "T2.AlbumID"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "How many tracks belong to rock genre?",
        "query": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "GENRE",
            "AS",
            "T1",
            "JOIN",
            "TRACK",
            "AS",
            "T2",
            "ON",
            "T1.GenreId",
            "=",
            "T2.GenreId",
            "WHERE",
            "T1.Name",
            "=",
            "``",
            "Rock",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Count the number of tracks that are part of the rock genre.",
        "query": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "GENRE",
            "AS",
            "T1",
            "JOIN",
            "TRACK",
            "AS",
            "T2",
            "ON",
            "T1.GenreId",
            "=",
            "T2.GenreId",
            "WHERE",
            "T1.Name",
            "=",
            "``",
            "Rock",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What is the average unit price of tracks that belong to Jazz genre?",
        "query": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
        "query_toks": [
            "SELECT",
            "AVG",
            "(",
            "UnitPrice",
            ")",
            "FROM",
            "GENRE",
            "AS",
            "T1",
            "JOIN",
            "TRACK",
            "AS",
            "T2",
            "ON",
            "T1.GenreId",
            "=",
            "T2.GenreId",
            "WHERE",
            "T1.Name",
            "=",
            "``",
            "Jazz",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find the average unit price of jazz tracks.",
        "query": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
        "query_toks": [
            "SELECT",
            "AVG",
            "(",
            "UnitPrice",
            ")",
            "FROM",
            "GENRE",
            "AS",
            "T1",
            "JOIN",
            "TRACK",
            "AS",
            "T2",
            "ON",
            "T1.GenreId",
            "=",
            "T2.GenreId",
            "WHERE",
            "T1.Name",
            "=",
            "``",
            "Jazz",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What is the first name and last name of the customer that has email \"luisg@embraer.com.br\"?",
        "query": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"",
        "query_toks": [
            "SELECT",
            "FirstName",
            ",",
            "LastName",
            "FROM",
            "CUSTOMER",
            "WHERE",
            "Email",
            "=",
            "``",
            "luisg",
            "@",
            "embraer.com.br",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find the full name of the customer with the email \"luisg@embraer.com.br\".",
        "query": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"",
        "query_toks": [
            "SELECT",
            "FirstName",
            ",",
            "LastName",
            "FROM",
            "CUSTOMER",
            "WHERE",
            "Email",
            "=",
            "``",
            "luisg",
            "@",
            "embraer.com.br",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "How many customers have email that contains \"gmail.com\"?",
        "query": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "CUSTOMER",
            "WHERE",
            "Email",
            "LIKE",
            "``",
            "%",
            "gmail.com",
            "%",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Count the number of customers that have an email containing \"gmail.com\".",
        "query": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "CUSTOMER",
            "WHERE",
            "Email",
            "LIKE",
            "``",
            "%",
            "gmail.com",
            "%",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What is the first name and last name employee helps the customer with first name Leonie?",
        "query": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\"",
        "query_toks": [
            "SELECT",
            "T2.FirstName",
            ",",
            "T2.LastName",
            "FROM",
            "CUSTOMER",
            "AS",
            "T1",
            "JOIN",
            "EMPLOYEE",
            "AS",
            "T2",
            "ON",
            "T1.SupportRepId",
            "=",
            "T2.EmployeeId",
            "WHERE",
            "T1.FirstName",
            "=",
            "``",
            "Leonie",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find the full names of employees who help customers with the first name Leonie.",
        "query": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\"",
        "query_toks": [
            "SELECT",
            "T2.FirstName",
            ",",
            "T2.LastName",
            "FROM",
            "CUSTOMER",
            "AS",
            "T1",
            "JOIN",
            "EMPLOYEE",
            "AS",
            "T2",
            "ON",
            "T1.SupportRepId",
            "=",
            "T2.EmployeeId",
            "WHERE",
            "T1.FirstName",
            "=",
            "``",
            "Leonie",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What city does the employee who helps the customer with postal code 70174 live in?",
        "query": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"",
        "query_toks": [
            "SELECT",
            "T2.City",
            "FROM",
            "CUSTOMER",
            "AS",
            "T1",
            "JOIN",
            "EMPLOYEE",
            "AS",
            "T2",
            "ON",
            "T1.SupportRepId",
            "=",
            "T2.EmployeeId",
            "WHERE",
            "T1.PostalCode",
            "=",
            "``",
            "70174",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find the cities corresponding to employees who help customers with the postal code 70174.",
        "query": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"",
        "query_toks": [
            "SELECT",
            "T2.City",
            "FROM",
            "CUSTOMER",
            "AS",
            "T1",
            "JOIN",
            "EMPLOYEE",
            "AS",
            "T2",
            "ON",
            "T1.SupportRepId",
            "=",
            "T2.EmployeeId",
            "WHERE",
            "T1.PostalCode",
            "=",
            "``",
            "70174",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "How many distinct cities does the employees live in?",
        "query": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "DISTINCT",
            "city",
            ")",
            "FROM",
            "EMPLOYEE"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find the number of different cities that employees live in.",
        "query": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "DISTINCT",
            "city",
            ")",
            "FROM",
            "EMPLOYEE"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find all invoice dates corresponding to customers with first name Astrid and last name Gruber.",
        "query": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\"",
        "query_toks": [
            "SELECT",
            "T2.InvoiceDate",
            "FROM",
            "CUSTOMER",
            "AS",
            "T1",
            "JOIN",
            "INVOICE",
            "AS",
            "T2",
            "ON",
            "T1.CustomerId",
            "=",
            "T2.CustomerId",
            "WHERE",
            "T1.FirstName",
            "=",
            "``",
            "Astrid",
            "''",
            "AND",
            "LastName",
            "=",
            "``",
            "Gruber",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What are the invoice dates for customers with the first name Astrid and the last name Gruber?",
        "query": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\"",
        "query_toks": [
            "SELECT",
            "T2.InvoiceDate",
            "FROM",
            "CUSTOMER",
            "AS",
            "T1",
            "JOIN",
            "INVOICE",
            "AS",
            "T2",
            "ON",
            "T1.CustomerId",
            "=",
            "T2.CustomerId",
            "WHERE",
            "T1.FirstName",
            "=",
            "``",
            "Astrid",
            "''",
            "AND",
            "LastName",
            "=",
            "``",
            "Gruber",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find all the customer last names that do not have invoice totals larger than 20.",
        "query": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20",
        "query_toks": [
            "SELECT",
            "LastName",
            "FROM",
            "CUSTOMER",
            "EXCEPT",
            "SELECT",
            "T1.LastName",
            "FROM",
            "CUSTOMER",
            "AS",
            "T1",
            "JOIN",
            "Invoice",
            "AS",
            "T2",
            "ON",
            "T1.CustomerId",
            "=",
            "T2.CustomerId",
            "WHERE",
            "T2.total",
            ">",
            "20"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What are the last names of customers without invoice totals exceeding 20?",
        "query": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20",
        "query_toks": [
            "SELECT",
            "LastName",
            "FROM",
            "CUSTOMER",
            "EXCEPT",
            "SELECT",
            "T1.LastName",
            "FROM",
            "CUSTOMER",
            "AS",
            "T1",
            "JOIN",
            "Invoice",
            "AS",
            "T2",
            "ON",
            "T1.CustomerId",
            "=",
            "T2.CustomerId",
            "WHERE",
            "T2.total",
            ">",
            "20"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find the first names of all customers that live in Brazil and have an invoice.",
        "query": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.FirstName",
            "FROM",
            "CUSTOMER",
            "AS",
            "T1",
            "JOIN",
            "INVOICE",
            "AS",
            "T2",
            "ON",
            "T1.CustomerId",
            "=",
            "T2.CustomerId",
            "WHERE",
            "T1.country",
            "=",
            "``",
            "Brazil",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What are the different first names for customers from Brazil who have also had an invoice?",
        "query": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.FirstName",
            "FROM",
            "CUSTOMER",
            "AS",
            "T1",
            "JOIN",
            "INVOICE",
            "AS",
            "T2",
            "ON",
            "T1.CustomerId",
            "=",
            "T2.CustomerId",
            "WHERE",
            "T1.country",
            "=",
            "``",
            "Brazil",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find the address of all customers that live in Germany and have invoice.",
        "query": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.Address",
            "FROM",
            "CUSTOMER",
            "AS",
            "T1",
            "JOIN",
            "INVOICE",
            "AS",
            "T2",
            "ON",
            "T1.CustomerId",
            "=",
            "T2.CustomerId",
            "WHERE",
            "T1.country",
            "=",
            "``",
            "Germany",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What are the addresses of customers living in Germany who have had an invoice?",
        "query": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.Address",
            "FROM",
            "CUSTOMER",
            "AS",
            "T1",
            "JOIN",
            "INVOICE",
            "AS",
            "T2",
            "ON",
            "T1.CustomerId",
            "=",
            "T2.CustomerId",
            "WHERE",
            "T1.country",
            "=",
            "``",
            "Germany",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "List the phone numbers of all employees.",
        "query": "SELECT Phone FROM EMPLOYEE",
        "query_toks": [
            "SELECT",
            "Phone",
            "FROM",
            "EMPLOYEE"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What are the phone numbers for each employee?",
        "query": "SELECT Phone FROM EMPLOYEE",
        "query_toks": [
            "SELECT",
            "Phone",
            "FROM",
            "EMPLOYEE"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "How many tracks are in the AAC audio file media type?",
        "query": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "MEDIATYPE",
            "AS",
            "T1",
            "JOIN",
            "TRACK",
            "AS",
            "T2",
            "ON",
            "T1.MediaTypeId",
            "=",
            "T2.MediaTypeId",
            "WHERE",
            "T1.Name",
            "=",
            "``",
            "AAC",
            "audio",
            "file",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Count the number of tracks that are of the media type \"AAC audio file\".",
        "query": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "MEDIATYPE",
            "AS",
            "T1",
            "JOIN",
            "TRACK",
            "AS",
            "T2",
            "ON",
            "T1.MediaTypeId",
            "=",
            "T2.MediaTypeId",
            "WHERE",
            "T1.Name",
            "=",
            "``",
            "AAC",
            "audio",
            "file",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?",
        "query": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"",
        "query_toks": [
            "SELECT",
            "AVG",
            "(",
            "Milliseconds",
            ")",
            "FROM",
            "GENRE",
            "AS",
            "T1",
            "JOIN",
            "TRACK",
            "AS",
            "T2",
            "ON",
            "T1.GenreId",
            "=",
            "T2.GenreId",
            "WHERE",
            "T1.Name",
            "=",
            "``",
            "Latin",
            "''",
            "OR",
            "T1.Name",
            "=",
            "``",
            "Pop",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find the average millisecond length of Latin and Pop tracks.",
        "query": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"",
        "query_toks": [
            "SELECT",
            "AVG",
            "(",
            "Milliseconds",
            ")",
            "FROM",
            "GENRE",
            "AS",
            "T1",
            "JOIN",
            "TRACK",
            "AS",
            "T2",
            "ON",
            "T1.GenreId",
            "=",
            "T2.GenreId",
            "WHERE",
            "T1.Name",
            "=",
            "``",
            "Latin",
            "''",
            "OR",
            "T1.Name",
            "=",
            "``",
            "Pop",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Please show the employee first names and ids of employees who serve at least 10 customers.",
        "query": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
        "query_toks": [
            "SELECT",
            "T1.FirstName",
            ",",
            "T1.SupportRepId",
            "FROM",
            "CUSTOMER",
            "AS",
            "T1",
            "JOIN",
            "EMPLOYEE",
            "AS",
            "T2",
            "ON",
            "T1.SupportRepId",
            "=",
            "T2.EmployeeId",
            "GROUP",
            "BY",
            "T1.SupportRepId",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "=",
            "10"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What are the first names and support rep ids for employees serving 10 or more customers?",
        "query": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
        "query_toks": [
            "SELECT",
            "T1.FirstName",
            ",",
            "T1.SupportRepId",
            "FROM",
            "CUSTOMER",
            "AS",
            "T1",
            "JOIN",
            "EMPLOYEE",
            "AS",
            "T2",
            "ON",
            "T1.SupportRepId",
            "=",
            "T2.EmployeeId",
            "GROUP",
            "BY",
            "T1.SupportRepId",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "=",
            "10"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Please show the employee last names that serves no more than 20 customers.",
        "query": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "query_toks": [
            "SELECT",
            "T1.LastName",
            "FROM",
            "CUSTOMER",
            "AS",
            "T1",
            "JOIN",
            "EMPLOYEE",
            "AS",
            "T2",
            "ON",
            "T1.SupportRepId",
            "=",
            "T2.EmployeeId",
            "GROUP",
            "BY",
            "T1.SupportRepId",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "<",
            "=",
            "20"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What are the last names of employees who serve at most 20 customers?",
        "query": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "query_toks": [
            "SELECT",
            "T1.LastName",
            "FROM",
            "CUSTOMER",
            "AS",
            "T1",
            "JOIN",
            "EMPLOYEE",
            "AS",
            "T2",
            "ON",
            "T1.SupportRepId",
            "=",
            "T2.EmployeeId",
            "GROUP",
            "BY",
            "T1.SupportRepId",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            "<",
            "=",
            "20"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Please list all album titles in alphabetical order.",
        "query": "SELECT Title FROM ALBUM ORDER BY Title",
        "query_toks": [
            "SELECT",
            "Title",
            "FROM",
            "ALBUM",
            "ORDER",
            "BY",
            "Title"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What are all the album titles, in alphabetical order?",
        "query": "SELECT Title FROM ALBUM ORDER BY Title",
        "query_toks": [
            "SELECT",
            "Title",
            "FROM",
            "ALBUM",
            "ORDER",
            "BY",
            "Title"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.",
        "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "query_toks": [
            "SELECT",
            "T2.Name",
            ",",
            "T1.ArtistId",
            "FROM",
            "ALBUM",
            "AS",
            "T1",
            "JOIN",
            "ARTIST",
            "AS",
            "T2",
            "ON",
            "T1.ArtistId",
            "=",
            "T2.ArtistID",
            "GROUP",
            "BY",
            "T1.ArtistId",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "=",
            "3",
            "ORDER",
            "BY",
            "T2.Name"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What are the names and ids of artists with 3 or more albums, listed in alphabetical order?",
        "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "query_toks": [
            "SELECT",
            "T2.Name",
            ",",
            "T1.ArtistId",
            "FROM",
            "ALBUM",
            "AS",
            "T1",
            "JOIN",
            "ARTIST",
            "AS",
            "T2",
            "ON",
            "T1.ArtistId",
            "=",
            "T2.ArtistID",
            "GROUP",
            "BY",
            "T1.ArtistId",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "=",
            "3",
            "ORDER",
            "BY",
            "T2.Name"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find the names of artists that do not have any albums.",
        "query": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "ARTIST",
            "EXCEPT",
            "SELECT",
            "T2.Name",
            "FROM",
            "ALBUM",
            "AS",
            "T1",
            "JOIN",
            "ARTIST",
            "AS",
            "T2",
            "ON",
            "T1.ArtistId",
            "=",
            "T2.ArtistId"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What are the names of artists who have not released any albums?",
        "query": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "ARTIST",
            "EXCEPT",
            "SELECT",
            "T2.Name",
            "FROM",
            "ALBUM",
            "AS",
            "T1",
            "JOIN",
            "ARTIST",
            "AS",
            "T2",
            "ON",
            "T1.ArtistId",
            "=",
            "T2.ArtistId"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What is the average unit price of rock tracks?",
        "query": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "query_toks": [
            "SELECT",
            "AVG",
            "(",
            "T2.UnitPrice",
            ")",
            "FROM",
            "GENRE",
            "AS",
            "T1",
            "JOIN",
            "TRACK",
            "AS",
            "T2",
            "ON",
            "T1.GenreId",
            "=",
            "T2.GenreId",
            "WHERE",
            "T1.Name",
            "=",
            "``",
            "Rock",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find the average unit price of tracks from the Rock genre.",
        "query": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "query_toks": [
            "SELECT",
            "AVG",
            "(",
            "T2.UnitPrice",
            ")",
            "FROM",
            "GENRE",
            "AS",
            "T1",
            "JOIN",
            "TRACK",
            "AS",
            "T2",
            "ON",
            "T1.GenreId",
            "=",
            "T2.GenreId",
            "WHERE",
            "T1.Name",
            "=",
            "``",
            "Rock",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What are the duration of the longest and shortest pop tracks in milliseconds?",
        "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "Milliseconds",
            ")",
            ",",
            "min",
            "(",
            "Milliseconds",
            ")",
            "FROM",
            "GENRE",
            "AS",
            "T1",
            "JOIN",
            "TRACK",
            "AS",
            "T2",
            "ON",
            "T1.GenreId",
            "=",
            "T2.GenreId",
            "WHERE",
            "T1.Name",
            "=",
            "``",
            "Pop",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find the maximum and minimum millisecond lengths of pop tracks.",
        "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "Milliseconds",
            ")",
            ",",
            "min",
            "(",
            "Milliseconds",
            ")",
            "FROM",
            "GENRE",
            "AS",
            "T1",
            "JOIN",
            "TRACK",
            "AS",
            "T2",
            "ON",
            "T1.GenreId",
            "=",
            "T2.GenreId",
            "WHERE",
            "T1.Name",
            "=",
            "``",
            "Pop",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What are the birth dates of employees living in Edmonton?",
        "query": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\"",
        "query_toks": [
            "SELECT",
            "BirthDate",
            "FROM",
            "EMPLOYEE",
            "WHERE",
            "City",
            "=",
            "``",
            "Edmonton",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find the birth dates corresponding to employees who live in the city of Edmonton.",
        "query": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\"",
        "query_toks": [
            "SELECT",
            "BirthDate",
            "FROM",
            "EMPLOYEE",
            "WHERE",
            "City",
            "=",
            "``",
            "Edmonton",
            "''"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What are the distinct unit prices of all tracks?",
        "query": "SELECT distinct(UnitPrice) FROM TRACK",
        "query_toks": [
            "SELECT",
            "distinct",
            "(",
            "UnitPrice",
            ")",
            "FROM",
            "TRACK"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find the distinct unit prices for tracks.",
        "query": "SELECT distinct(UnitPrice) FROM TRACK",
        "query_toks": [
            "SELECT",
            "distinct",
            "(",
            "UnitPrice",
            ")",
            "FROM",
            "TRACK"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "How many artists do not have any album?",
        "query": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "ARTIST",
            "WHERE",
            "artistid",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "artistid",
            "FROM",
            "ALBUM",
            ")"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Cound the number of artists who have not released an album.",
        "query": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "ARTIST",
            "WHERE",
            "artistid",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "artistid",
            "FROM",
            "ALBUM",
            ")"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?",
        "query": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'",
        "query_toks": [
            "SELECT",
            "T1.Title",
            "FROM",
            "Album",
            "AS",
            "T1",
            "JOIN",
            "Track",
            "AS",
            "T2",
            "ON",
            "T1.AlbumId",
            "=",
            "T2.AlbumId",
            "JOIN",
            "Genre",
            "AS",
            "T3",
            "ON",
            "T2.GenreID",
            "=",
            "T3.GenreID",
            "WHERE",
            "T3.Name",
            "=",
            "'Reggae",
            "'",
            "INTERSECT",
            "SELECT",
            "T1.Title",
            "FROM",
            "Album",
            "AS",
            "T1",
            "JOIN",
            "Track",
            "AS",
            "T2",
            "ON",
            "T1.AlbumId",
            "=",
            "T2.AlbumId",
            "JOIN",
            "Genre",
            "AS",
            "T3",
            "ON",
            "T2.GenreID",
            "=",
            "T3.GenreID",
            "WHERE",
            "T3.Name",
            "=",
            "'Rock",
            "'"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find the titles of albums that contain tracks of both the Reggae and Rock genres.",
        "query": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'",
        "query_toks": [
            "SELECT",
            "T1.Title",
            "FROM",
            "Album",
            "AS",
            "T1",
            "JOIN",
            "Track",
            "AS",
            "T2",
            "ON",
            "T1.AlbumId",
            "=",
            "T2.AlbumId",
            "JOIN",
            "Genre",
            "AS",
            "T3",
            "ON",
            "T2.GenreID",
            "=",
            "T3.GenreID",
            "WHERE",
            "T3.Name",
            "=",
            "'Reggae",
            "'",
            "INTERSECT",
            "SELECT",
            "T1.Title",
            "FROM",
            "Album",
            "AS",
            "T1",
            "JOIN",
            "Track",
            "AS",
            "T2",
            "ON",
            "T1.AlbumId",
            "=",
            "T2.AlbumId",
            "JOIN",
            "Genre",
            "AS",
            "T3",
            "ON",
            "T2.GenreID",
            "=",
            "T3.GenreID",
            "WHERE",
            "T3.Name",
            "=",
            "'Rock",
            "'"
        ],
        "db_id": "chinook_1"
    },
    {
        "question": "Find all the phone numbers.",
        "query": "SELECT customer_phone FROM available_policies",
        "query_toks": [
            "SELECT",
            "customer_phone",
            "FROM",
            "available_policies"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "What are all the phone numbers?",
        "query": "SELECT customer_phone FROM available_policies",
        "query_toks": [
            "SELECT",
            "customer_phone",
            "FROM",
            "available_policies"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "What are the customer phone numbers under the policy \"Life Insurance\"?",
        "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"",
        "query_toks": [
            "SELECT",
            "customer_phone",
            "FROM",
            "available_policies",
            "WHERE",
            "policy_type_code",
            "=",
            "``",
            "Life",
            "Insurance",
            "''"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "What are the phone numbers of customers using the policy with the code \"Life Insurance\"?",
        "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"",
        "query_toks": [
            "SELECT",
            "customer_phone",
            "FROM",
            "available_policies",
            "WHERE",
            "policy_type_code",
            "=",
            "``",
            "Life",
            "Insurance",
            "''"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "Which policy type has the most records in the database?",
        "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "policy_type_code",
            "FROM",
            "available_policies",
            "GROUP",
            "BY",
            "policy_type_code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "Which policy type appears most frequently in the available policies?",
        "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "policy_type_code",
            "FROM",
            "available_policies",
            "GROUP",
            "BY",
            "policy_type_code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "What are all the customer phone numbers under the most popular policy type?",
        "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)",
        "query_toks": [
            "SELECT",
            "customer_phone",
            "FROM",
            "available_policies",
            "WHERE",
            "policy_type_code",
            "=",
            "(",
            "SELECT",
            "policy_type_code",
            "FROM",
            "available_policies",
            "GROUP",
            "BY",
            "policy_type_code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ")"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "Find the phone numbers of customers using the most common policy type among the available policies.",
        "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)",
        "query_toks": [
            "SELECT",
            "customer_phone",
            "FROM",
            "available_policies",
            "WHERE",
            "policy_type_code",
            "=",
            "(",
            "SELECT",
            "policy_type_code",
            "FROM",
            "available_policies",
            "GROUP",
            "BY",
            "policy_type_code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ")"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "Find the policy type used by more than 4 customers.",
        "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4",
        "query_toks": [
            "SELECT",
            "policy_type_code",
            "FROM",
            "available_policies",
            "GROUP",
            "BY",
            "policy_type_code",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "4"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "Find the policy types more than 4 customers use. Show their type code.",
        "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4",
        "query_toks": [
            "SELECT",
            "policy_type_code",
            "FROM",
            "available_policies",
            "GROUP",
            "BY",
            "policy_type_code",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "4"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "Find the total and average amount of settlements.",
        "query": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "settlement_amount",
            ")",
            ",",
            "avg",
            "(",
            "settlement_amount",
            ")",
            "FROM",
            "settlements"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "Return the sum and average of all settlement amounts.",
        "query": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "settlement_amount",
            ")",
            ",",
            "avg",
            "(",
            "settlement_amount",
            ")",
            "FROM",
            "settlements"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "Find the name of services that have been used for more than 2 times in first notification of loss.",
        "query": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2",
        "query_toks": [
            "SELECT",
            "t2.service_name",
            "FROM",
            "first_notification_of_loss",
            "AS",
            "t1",
            "JOIN",
            "services",
            "AS",
            "t2",
            "ON",
            "t1.service_id",
            "=",
            "t2.service_id",
            "GROUP",
            "BY",
            "t1.service_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "Which services have been used more than twice in first notification of loss? Return the service name.",
        "query": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2",
        "query_toks": [
            "SELECT",
            "t2.service_name",
            "FROM",
            "first_notification_of_loss",
            "AS",
            "t1",
            "JOIN",
            "services",
            "AS",
            "t2",
            "ON",
            "t1.service_id",
            "=",
            "t2.service_id",
            "GROUP",
            "BY",
            "t1.service_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "What is the effective date of the claim that has the largest amount of total settlement?",
        "query": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t1.Effective_Date",
            "FROM",
            "claims",
            "AS",
            "t1",
            "JOIN",
            "settlements",
            "AS",
            "t2",
            "ON",
            "t1.claim_id",
            "=",
            "t2.claim_id",
            "GROUP",
            "BY",
            "t1.claim_id",
            "ORDER",
            "BY",
            "sum",
            "(",
            "t2.settlement_amount",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "Find the claim that has the largest total settlement amount. Return the effective date of the claim.",
        "query": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t1.Effective_Date",
            "FROM",
            "claims",
            "AS",
            "t1",
            "JOIN",
            "settlements",
            "AS",
            "t2",
            "ON",
            "t1.claim_id",
            "=",
            "t2.claim_id",
            "GROUP",
            "BY",
            "t1.claim_id",
            "ORDER",
            "BY",
            "sum",
            "(",
            "t2.settlement_amount",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "How many policies are listed for the customer named \"Dayana Robel\"?",
        "query": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customers_policies",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "WHERE",
            "t1.customer_name",
            "=",
            "``",
            "Dayana",
            "Robel",
            "''"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "Count the total number of policies used by the customer named \"Dayana Robel\".",
        "query": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customers_policies",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "WHERE",
            "t1.customer_name",
            "=",
            "``",
            "Dayana",
            "Robel",
            "''"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "What is the name of the customer who has the most policies listed?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customers_policies",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "GROUP",
            "BY",
            "t1.customer_name",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "Which customer uses the most policies? Give me the customer name.",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customers_policies",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "GROUP",
            "BY",
            "t1.customer_name",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "What are all the policy types of the customer named \"Dayana Robel\"?",
        "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "t3.policy_type_code",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customers_policies",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "available_policies",
            "AS",
            "t3",
            "ON",
            "t2.policy_id",
            "=",
            "t3.policy_id",
            "WHERE",
            "t1.customer_name",
            "=",
            "``",
            "Dayana",
            "Robel",
            "''"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "Tell me the types of the policy used by the customer named \"Dayana Robel\".",
        "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "t3.policy_type_code",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customers_policies",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "available_policies",
            "AS",
            "t3",
            "ON",
            "t2.policy_id",
            "=",
            "t3.policy_id",
            "WHERE",
            "t1.customer_name",
            "=",
            "``",
            "Dayana",
            "Robel",
            "''"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "What are all the policy types of the customer that has the most policies listed?",
        "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "t3.policy_type_code",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customers_policies",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "available_policies",
            "AS",
            "t3",
            "ON",
            "t2.policy_id",
            "=",
            "t3.policy_id",
            "WHERE",
            "t1.customer_name",
            "=",
            "(",
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customers_policies",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "GROUP",
            "BY",
            "t1.customer_name",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ")"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "List all the policy types used by the customer enrolled in the most policies.",
        "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "t3.policy_type_code",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customers_policies",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "available_policies",
            "AS",
            "t3",
            "ON",
            "t2.policy_id",
            "=",
            "t3.policy_id",
            "WHERE",
            "t1.customer_name",
            "=",
            "(",
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customers_policies",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "GROUP",
            "BY",
            "t1.customer_name",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ")"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "List all the services in the alphabetical order.",
        "query": "SELECT service_name FROM services ORDER BY service_name",
        "query_toks": [
            "SELECT",
            "service_name",
            "FROM",
            "services",
            "ORDER",
            "BY",
            "service_name"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "Give me a list of all the service names sorted alphabetically.",
        "query": "SELECT service_name FROM services ORDER BY service_name",
        "query_toks": [
            "SELECT",
            "service_name",
            "FROM",
            "services",
            "ORDER",
            "BY",
            "service_name"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "How many services are there?",
        "query": "SELECT count(*) FROM services",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "services"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "Count the total number of available services.",
        "query": "SELECT count(*) FROM services",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "services"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "Find the names of users who do not have a first notification of loss record.",
        "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id",
        "query_toks": [
            "SELECT",
            "customer_name",
            "FROM",
            "customers",
            "EXCEPT",
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "first_notification_of_loss",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "Which customers do not have a first notification of loss record? Give me the customer names.",
        "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id",
        "query_toks": [
            "SELECT",
            "customer_name",
            "FROM",
            "customers",
            "EXCEPT",
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "first_notification_of_loss",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\".",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"",
        "query_toks": [
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "first_notification_of_loss",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "services",
            "AS",
            "t3",
            "ON",
            "t2.service_id",
            "=",
            "t3.service_id",
            "WHERE",
            "t3.service_name",
            "=",
            "``",
            "Close",
            "a",
            "policy",
            "''",
            "OR",
            "t3.service_name",
            "=",
            "``",
            "Upgrade",
            "a",
            "policy",
            "''"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names.",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"",
        "query_toks": [
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "first_notification_of_loss",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "services",
            "AS",
            "t3",
            "ON",
            "t2.service_id",
            "=",
            "t3.service_id",
            "WHERE",
            "t3.service_name",
            "=",
            "``",
            "Close",
            "a",
            "policy",
            "''",
            "OR",
            "t3.service_name",
            "=",
            "``",
            "Upgrade",
            "a",
            "policy",
            "''"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "Find the names of customers who have used both the service \"Close a policy\" and the service \"New policy application\".",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"",
        "query_toks": [
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "first_notification_of_loss",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "services",
            "AS",
            "t3",
            "ON",
            "t2.service_id",
            "=",
            "t3.service_id",
            "WHERE",
            "t3.service_name",
            "=",
            "``",
            "Close",
            "a",
            "policy",
            "''",
            "INTERSECT",
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "first_notification_of_loss",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "services",
            "AS",
            "t3",
            "ON",
            "t2.service_id",
            "=",
            "t3.service_id",
            "WHERE",
            "t3.service_name",
            "=",
            "``",
            "New",
            "policy",
            "application",
            "''"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "Which customers have used both the service named \"Close a policy\" and the service named \"Upgrade a policy\"? Give me the customer names.",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"",
        "query_toks": [
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "first_notification_of_loss",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "services",
            "AS",
            "t3",
            "ON",
            "t2.service_id",
            "=",
            "t3.service_id",
            "WHERE",
            "t3.service_name",
            "=",
            "``",
            "Close",
            "a",
            "policy",
            "''",
            "INTERSECT",
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "first_notification_of_loss",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "services",
            "AS",
            "t3",
            "ON",
            "t2.service_id",
            "=",
            "t3.service_id",
            "WHERE",
            "t3.service_name",
            "=",
            "``",
            "New",
            "policy",
            "application",
            "''"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "Find the IDs of customers whose name contains \"Diana\".",
        "query": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"",
        "query_toks": [
            "SELECT",
            "customer_id",
            "FROM",
            "customers",
            "WHERE",
            "customer_name",
            "LIKE",
            "``",
            "%",
            "Diana",
            "%",
            "''"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "What are the IDs of customers who have \"Diana\" in part of their names?",
        "query": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"",
        "query_toks": [
            "SELECT",
            "customer_id",
            "FROM",
            "customers",
            "WHERE",
            "customer_name",
            "LIKE",
            "``",
            "%",
            "Diana",
            "%",
            "''"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "What are the maximum and minimum settlement amount on record?",
        "query": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "settlement_amount",
            ")",
            ",",
            "min",
            "(",
            "settlement_amount",
            ")",
            "FROM",
            "settlements"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "Find the maximum and minimum settlement amount.",
        "query": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "settlement_amount",
            ")",
            ",",
            "min",
            "(",
            "settlement_amount",
            ")",
            "FROM",
            "settlements"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "List all the customers in increasing order of IDs.",
        "query": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC",
        "query_toks": [
            "SELECT",
            "customer_id",
            ",",
            "customer_name",
            "FROM",
            "customers",
            "ORDER",
            "BY",
            "customer_id",
            "ASC"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "What is the ordered list of customer ids?",
        "query": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC",
        "query_toks": [
            "SELECT",
            "customer_id",
            ",",
            "customer_name",
            "FROM",
            "customers",
            "ORDER",
            "BY",
            "customer_id",
            "ASC"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "Retrieve the open and close dates of all the policies associated with the customer whose name contains \"Diana\"",
        "query": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"",
        "query_toks": [
            "SELECT",
            "t2.date_opened",
            ",",
            "t2.date_closed",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customers_policies",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "WHERE",
            "t1.customer_name",
            "LIKE",
            "``",
            "%",
            "Diana",
            "%",
            "''"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "What are the open and close dates of all the policies used by the customer who have \"Diana\" in part of their names?",
        "query": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"",
        "query_toks": [
            "SELECT",
            "t2.date_opened",
            ",",
            "t2.date_closed",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customers_policies",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "WHERE",
            "t1.customer_name",
            "LIKE",
            "``",
            "%",
            "Diana",
            "%",
            "''"
        ],
        "db_id": "insurance_fnol"
    },
    {
        "question": "Find the buildings which have rooms with capacity more than 50.",
        "query": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "building",
            "FROM",
            "classroom",
            "WHERE",
            "capacity",
            ">",
            "50"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the distinct buildings with capacities of greater than 50?",
        "query": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "building",
            "FROM",
            "classroom",
            "WHERE",
            "capacity",
            ">",
            "50"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Count the number of rooms that are not in the Lamberton building.",
        "query": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "classroom",
            "WHERE",
            "building",
            "!",
            "=",
            "'Lamberton",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "How many classrooms are not in Lamberton?",
        "query": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "classroom",
            "WHERE",
            "building",
            "!",
            "=",
            "'Lamberton",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What is the name and building of the departments whose budget is more than the average budget?",
        "query": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
        "query_toks": [
            "SELECT",
            "dept_name",
            ",",
            "building",
            "FROM",
            "department",
            "WHERE",
            "budget",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "budget",
            ")",
            "FROM",
            "department",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Give the name and building of the departments with greater than average budget.",
        "query": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
        "query_toks": [
            "SELECT",
            "dept_name",
            ",",
            "building",
            "FROM",
            "department",
            "WHERE",
            "budget",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "budget",
            ")",
            "FROM",
            "department",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the room number of the rooms which can sit 50 to 100 students and their buildings.",
        "query": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
        "query_toks": [
            "SELECT",
            "building",
            ",",
            "room_number",
            "FROM",
            "classroom",
            "WHERE",
            "capacity",
            "BETWEEN",
            "50",
            "AND",
            "100"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students?",
        "query": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
        "query_toks": [
            "SELECT",
            "building",
            ",",
            "room_number",
            "FROM",
            "classroom",
            "WHERE",
            "capacity",
            "BETWEEN",
            "50",
            "AND",
            "100"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the name and building of the department with the highest budget.",
        "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "dept_name",
            ",",
            "building",
            "FROM",
            "department",
            "ORDER",
            "BY",
            "budget",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What is the department name and corresponding building for the department with the greatest budget?",
        "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "dept_name",
            ",",
            "building",
            "FROM",
            "department",
            "ORDER",
            "BY",
            "budget",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What is the name of the student who has the highest total credits in the History department.",
        "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "student",
            "WHERE",
            "dept_name",
            "=",
            "'History",
            "'",
            "ORDER",
            "BY",
            "tot_cred",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Give the name of the student in the History department with the most credits.",
        "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "student",
            "WHERE",
            "dept_name",
            "=",
            "'History",
            "'",
            "ORDER",
            "BY",
            "tot_cred",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "How many rooms does the Lamberton building have?",
        "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "classroom",
            "WHERE",
            "building",
            "=",
            "'Lamberton",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Count the number of classrooms in Lamberton.",
        "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "classroom",
            "WHERE",
            "building",
            "=",
            "'Lamberton",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "How many students have advisors?",
        "query": "SELECT count(DISTINCT s_id) FROM advisor",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "s_id",
            ")",
            "FROM",
            "advisor"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Count the number of students who have advisors.",
        "query": "SELECT count(DISTINCT s_id) FROM advisor",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "s_id",
            ")",
            "FROM",
            "advisor"
        ],
        "db_id": "college_2"
    },
    {
        "question": "How many departments offer courses?",
        "query": "SELECT count(DISTINCT dept_name) FROM course",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "dept_name",
            ")",
            "FROM",
            "course"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Count the number of departments which offer courses.",
        "query": "SELECT count(DISTINCT dept_name) FROM course",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "dept_name",
            ")",
            "FROM",
            "course"
        ],
        "db_id": "college_2"
    },
    {
        "question": "How many different courses offered by Physics department?",
        "query": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "course_id",
            ")",
            "FROM",
            "course",
            "WHERE",
            "dept_name",
            "=",
            "'Physics",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Count the number of courses in the Physics department.",
        "query": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "course_id",
            ")",
            "FROM",
            "course",
            "WHERE",
            "dept_name",
            "=",
            "'Physics",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the title of courses that have two prerequisites?",
        "query": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2",
        "query_toks": [
            "SELECT",
            "T1.title",
            "FROM",
            "course",
            "AS",
            "T1",
            "JOIN",
            "prereq",
            "AS",
            "T2",
            "ON",
            "T1.course_id",
            "=",
            "T2.course_id",
            "GROUP",
            "BY",
            "T2.course_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "2"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the titles for courses with two prerequisites?",
        "query": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2",
        "query_toks": [
            "SELECT",
            "T1.title",
            "FROM",
            "course",
            "AS",
            "T1",
            "JOIN",
            "prereq",
            "AS",
            "T2",
            "ON",
            "T1.course_id",
            "=",
            "T2.course_id",
            "GROUP",
            "BY",
            "T2.course_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "2"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the title, credit, and department name of courses that have more than one prerequisites?",
        "query": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1",
        "query_toks": [
            "SELECT",
            "T1.title",
            ",",
            "T1.credits",
            ",",
            "T1.dept_name",
            "FROM",
            "course",
            "AS",
            "T1",
            "JOIN",
            "prereq",
            "AS",
            "T2",
            "ON",
            "T1.course_id",
            "=",
            "T2.course_id",
            "GROUP",
            "BY",
            "T2.course_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What is the title, credit value, and department name for courses with more than one prerequisite?",
        "query": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1",
        "query_toks": [
            "SELECT",
            "T1.title",
            ",",
            "T1.credits",
            ",",
            "T1.dept_name",
            "FROM",
            "course",
            "AS",
            "T1",
            "JOIN",
            "prereq",
            "AS",
            "T2",
            "ON",
            "T1.course_id",
            "=",
            "T2.course_id",
            "GROUP",
            "BY",
            "T2.course_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "How many courses that do not have prerequisite?",
        "query": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "course",
            "WHERE",
            "course_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "course_id",
            "FROM",
            "prereq",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Count the number of courses without prerequisites.",
        "query": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "course",
            "WHERE",
            "course_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "course_id",
            "FROM",
            "prereq",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the name of the courses that do not have any prerequisite?",
        "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "course",
            "WHERE",
            "course_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "course_id",
            "FROM",
            "prereq",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the titles of courses without prerequisites?",
        "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "course",
            "WHERE",
            "course_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "course_id",
            "FROM",
            "prereq",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "How many different instructors have taught some course?",
        "query": "SELECT COUNT (DISTINCT id) FROM teaches",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "DISTINCT",
            "id",
            ")",
            "FROM",
            "teaches"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Count the number of distinct instructors who have taught a course.",
        "query": "SELECT COUNT (DISTINCT id) FROM teaches",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "DISTINCT",
            "id",
            ")",
            "FROM",
            "teaches"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the total budgets of the Marketing or Finance department.",
        "query": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "budget",
            ")",
            "FROM",
            "department",
            "WHERE",
            "dept_name",
            "=",
            "'Marketing",
            "'",
            "OR",
            "dept_name",
            "=",
            "'Finance",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What is the sum of budgets of the Marketing and Finance departments?",
        "query": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "budget",
            ")",
            "FROM",
            "department",
            "WHERE",
            "dept_name",
            "=",
            "'Marketing",
            "'",
            "OR",
            "dept_name",
            "=",
            "'Finance",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the department name of the instructor whose name contains 'Soisalon'.",
        "query": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'",
        "query_toks": [
            "SELECT",
            "dept_name",
            "FROM",
            "instructor",
            "WHERE",
            "name",
            "LIKE",
            "'",
            "%",
            "Soisalon",
            "%",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What is the name of the department with an instructure who has a name like 'Soisalon'?",
        "query": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'",
        "query_toks": [
            "SELECT",
            "dept_name",
            "FROM",
            "instructor",
            "WHERE",
            "name",
            "LIKE",
            "'",
            "%",
            "Soisalon",
            "%",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "How many rooms whose capacity is less than 50 does the Lamberton building have?",
        "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "classroom",
            "WHERE",
            "building",
            "=",
            "'Lamberton",
            "'",
            "AND",
            "capacity",
            "<",
            "50"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Count the number of rooms in Lamberton with capacity lower than 50.",
        "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "classroom",
            "WHERE",
            "building",
            "=",
            "'Lamberton",
            "'",
            "AND",
            "capacity",
            "<",
            "50"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the name and budget of departments whose budgets are more than the average budget.",
        "query": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
        "query_toks": [
            "SELECT",
            "dept_name",
            ",",
            "budget",
            "FROM",
            "department",
            "WHERE",
            "budget",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "budget",
            ")",
            "FROM",
            "department",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the names and budgets of departments with budgets greater than the average?",
        "query": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
        "query_toks": [
            "SELECT",
            "dept_name",
            ",",
            "budget",
            "FROM",
            "department",
            "WHERE",
            "budget",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "budget",
            ")",
            "FROM",
            "department",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "what is the name of the instructor who is in Statistics department and earns the lowest salary?",
        "query": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "instructor",
            "WHERE",
            "dept_name",
            "=",
            "'Statistics",
            "'",
            "ORDER",
            "BY",
            "salary",
            "LIMIT",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Give the name of the lowest earning instructor in the Statistics department.",
        "query": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "instructor",
            "WHERE",
            "dept_name",
            "=",
            "'Statistics",
            "'",
            "ORDER",
            "BY",
            "salary",
            "LIMIT",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the title of course that is provided by both Statistics and Psychology departments.",
        "query": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "course",
            "WHERE",
            "dept_name",
            "=",
            "'Statistics",
            "'",
            "INTERSECT",
            "SELECT",
            "title",
            "FROM",
            "course",
            "WHERE",
            "dept_name",
            "=",
            "'Psychology",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What is the title of a course that is listed in both the Statistics and Psychology departments?",
        "query": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "course",
            "WHERE",
            "dept_name",
            "=",
            "'Statistics",
            "'",
            "INTERSECT",
            "SELECT",
            "title",
            "FROM",
            "course",
            "WHERE",
            "dept_name",
            "=",
            "'Psychology",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the title of course that is provided by Statistics but not Psychology departments.",
        "query": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "course",
            "WHERE",
            "dept_name",
            "=",
            "'Statistics",
            "'",
            "EXCEPT",
            "SELECT",
            "title",
            "FROM",
            "course",
            "WHERE",
            "dept_name",
            "=",
            "'Psychology",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the titles of courses that are in the Statistics department but not the Psychology department?",
        "query": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "course",
            "WHERE",
            "dept_name",
            "=",
            "'Statistics",
            "'",
            "EXCEPT",
            "SELECT",
            "title",
            "FROM",
            "course",
            "WHERE",
            "dept_name",
            "=",
            "'Psychology",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010.",
        "query": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query_toks": [
            "SELECT",
            "id",
            "FROM",
            "teaches",
            "WHERE",
            "semester",
            "=",
            "'Fall",
            "'",
            "AND",
            "YEAR",
            "=",
            "2009",
            "EXCEPT",
            "SELECT",
            "id",
            "FROM",
            "teaches",
            "WHERE",
            "semester",
            "=",
            "'Spring",
            "'",
            "AND",
            "YEAR",
            "=",
            "2010"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?",
        "query": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query_toks": [
            "SELECT",
            "id",
            "FROM",
            "teaches",
            "WHERE",
            "semester",
            "=",
            "'Fall",
            "'",
            "AND",
            "YEAR",
            "=",
            "2009",
            "EXCEPT",
            "SELECT",
            "id",
            "FROM",
            "teaches",
            "WHERE",
            "semester",
            "=",
            "'Spring",
            "'",
            "AND",
            "YEAR",
            "=",
            "2010"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the name of students who took any class in the years of 2009 and 2010.",
        "query": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.name",
            "FROM",
            "student",
            "AS",
            "T1",
            "JOIN",
            "takes",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.id",
            "WHERE",
            "YEAR",
            "=",
            "2009",
            "OR",
            "YEAR",
            "=",
            "2010"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the names of the students who took classes in 2009 or 2010?",
        "query": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.name",
            "FROM",
            "student",
            "AS",
            "T1",
            "JOIN",
            "takes",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.id",
            "WHERE",
            "YEAR",
            "=",
            "2009",
            "OR",
            "YEAR",
            "=",
            "2010"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the names of the top 3 departments that provide the largest amount of courses?",
        "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3",
        "query_toks": [
            "SELECT",
            "dept_name",
            "FROM",
            "course",
            "GROUP",
            "BY",
            "dept_name",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "3"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the names of the 3 departments with the most courses?",
        "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3",
        "query_toks": [
            "SELECT",
            "dept_name",
            "FROM",
            "course",
            "GROUP",
            "BY",
            "dept_name",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "3"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the name of the department that offers the highest total credits?",
        "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "dept_name",
            "FROM",
            "course",
            "GROUP",
            "BY",
            "dept_name",
            "ORDER",
            "BY",
            "sum",
            "(",
            "credits",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What is the name of the department with the most credits?",
        "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "dept_name",
            "FROM",
            "course",
            "GROUP",
            "BY",
            "dept_name",
            "ORDER",
            "BY",
            "sum",
            "(",
            "credits",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "List the names of all courses ordered by their titles and credits.",
        "query": "SELECT title FROM course ORDER BY title ,  credits",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "course",
            "ORDER",
            "BY",
            "title",
            ",",
            "credits"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Given the titles of all courses, in order of titles and credits.",
        "query": "SELECT title FROM course ORDER BY title ,  credits",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "course",
            "ORDER",
            "BY",
            "title",
            ",",
            "credits"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Which department has the lowest budget?",
        "query": "SELECT dept_name FROM department ORDER BY budget LIMIT 1",
        "query_toks": [
            "SELECT",
            "dept_name",
            "FROM",
            "department",
            "ORDER",
            "BY",
            "budget",
            "LIMIT",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Give the name of the department with the lowest budget.",
        "query": "SELECT dept_name FROM department ORDER BY budget LIMIT 1",
        "query_toks": [
            "SELECT",
            "dept_name",
            "FROM",
            "department",
            "ORDER",
            "BY",
            "budget",
            "LIMIT",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "List the names and buildings of all departments sorted by the budget from large to small.",
        "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC",
        "query_toks": [
            "SELECT",
            "dept_name",
            ",",
            "building",
            "FROM",
            "department",
            "ORDER",
            "BY",
            "budget",
            "DESC"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the names and buildings of the deparments, sorted by budget descending?",
        "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC",
        "query_toks": [
            "SELECT",
            "dept_name",
            ",",
            "building",
            "FROM",
            "department",
            "ORDER",
            "BY",
            "budget",
            "DESC"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Who is the instructor with the highest salary?",
        "query": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "instructor",
            "ORDER",
            "BY",
            "salary",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Give the name of the highest paid instructor.",
        "query": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "instructor",
            "ORDER",
            "BY",
            "salary",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "List the information of all instructors ordered by their salary in ascending order.",
        "query": "SELECT * FROM instructor ORDER BY salary",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "instructor",
            "ORDER",
            "BY",
            "salary"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Give all information regarding instructors, in order of salary from least to greatest.",
        "query": "SELECT * FROM instructor ORDER BY salary",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "instructor",
            "ORDER",
            "BY",
            "salary"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the name of the students and their department names sorted by their total credits in ascending order.",
        "query": "SELECT name ,  dept_name FROM student ORDER BY tot_cred",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "dept_name",
            "FROM",
            "student",
            "ORDER",
            "BY",
            "tot_cred"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the names of students and their respective departments, ordered by number of credits from least to greatest?",
        "query": "SELECT name ,  dept_name FROM student ORDER BY tot_cred",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "dept_name",
            "FROM",
            "student",
            "ORDER",
            "BY",
            "tot_cred"
        ],
        "db_id": "college_2"
    },
    {
        "question": "list in alphabetic order all course names and their instructors' names in year 2008.",
        "query": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title",
        "query_toks": [
            "SELECT",
            "T1.title",
            ",",
            "T3.name",
            "FROM",
            "course",
            "AS",
            "T1",
            "JOIN",
            "teaches",
            "AS",
            "T2",
            "ON",
            "T1.course_id",
            "=",
            "T2.course_id",
            "JOIN",
            "instructor",
            "AS",
            "T3",
            "ON",
            "T2.id",
            "=",
            "T3.id",
            "WHERE",
            "YEAR",
            "=",
            "2008",
            "ORDER",
            "BY",
            "T1.title"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Show all titles and their instructors' names for courses in 2008, in alphabetical order by title.",
        "query": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title",
        "query_toks": [
            "SELECT",
            "T1.title",
            ",",
            "T3.name",
            "FROM",
            "course",
            "AS",
            "T1",
            "JOIN",
            "teaches",
            "AS",
            "T2",
            "ON",
            "T1.course_id",
            "=",
            "T2.course_id",
            "JOIN",
            "instructor",
            "AS",
            "T3",
            "ON",
            "T2.id",
            "=",
            "T3.id",
            "WHERE",
            "YEAR",
            "=",
            "2008",
            "ORDER",
            "BY",
            "T1.title"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the name of instructors who are advising more than one student.",
        "query": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "instructor",
            "AS",
            "T1",
            "JOIN",
            "advisor",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.i_id",
            "GROUP",
            "BY",
            "T2.i_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the names of instructors who advise more than one student?",
        "query": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "instructor",
            "AS",
            "T1",
            "JOIN",
            "advisor",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.i_id",
            "GROUP",
            "BY",
            "T2.i_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the name of the students who have more than one advisor?",
        "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "student",
            "AS",
            "T1",
            "JOIN",
            "advisor",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.s_id",
            "GROUP",
            "BY",
            "T2.s_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the names of students who have more than one advisor?",
        "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "student",
            "AS",
            "T1",
            "JOIN",
            "advisor",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.s_id",
            "GROUP",
            "BY",
            "T2.s_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the number of rooms with more than 50 capacity for each building.",
        "query": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "building",
            "FROM",
            "classroom",
            "WHERE",
            "capacity",
            ">",
            "50",
            "GROUP",
            "BY",
            "building"
        ],
        "db_id": "college_2"
    },
    {
        "question": "How many rooms in each building have a capacity of over 50?",
        "query": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "building",
            "FROM",
            "classroom",
            "WHERE",
            "capacity",
            ">",
            "50",
            "GROUP",
            "BY",
            "building"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the maximum and average capacity among rooms in each building.",
        "query": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "capacity",
            ")",
            ",",
            "avg",
            "(",
            "capacity",
            ")",
            ",",
            "building",
            "FROM",
            "classroom",
            "GROUP",
            "BY",
            "building"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the greatest and average capacity for rooms in each building?",
        "query": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "capacity",
            ")",
            ",",
            "avg",
            "(",
            "capacity",
            ")",
            ",",
            "building",
            "FROM",
            "classroom",
            "GROUP",
            "BY",
            "building"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the title of the course that is offered by more than one department.",
        "query": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "course",
            "GROUP",
            "BY",
            "title",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the titles of courses that are offered in more than one department?",
        "query": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "course",
            "GROUP",
            "BY",
            "title",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the total credits of courses provided by different department.",
        "query": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "credits",
            ")",
            ",",
            "dept_name",
            "FROM",
            "course",
            "GROUP",
            "BY",
            "dept_name"
        ],
        "db_id": "college_2"
    },
    {
        "question": "How many total credits are offered by each department?",
        "query": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "credits",
            ")",
            ",",
            "dept_name",
            "FROM",
            "course",
            "GROUP",
            "BY",
            "dept_name"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors.",
        "query": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)",
        "query_toks": [
            "SELECT",
            "min",
            "(",
            "salary",
            ")",
            ",",
            "dept_name",
            "FROM",
            "instructor",
            "GROUP",
            "BY",
            "dept_name",
            "HAVING",
            "avg",
            "(",
            "salary",
            ")",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "salary",
            ")",
            "FROM",
            "instructor",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What is the lowest salary in departments with average salary greater than the overall average.",
        "query": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)",
        "query_toks": [
            "SELECT",
            "min",
            "(",
            "salary",
            ")",
            ",",
            "dept_name",
            "FROM",
            "instructor",
            "GROUP",
            "BY",
            "dept_name",
            "HAVING",
            "avg",
            "(",
            "salary",
            ")",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "salary",
            ")",
            "FROM",
            "instructor",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the number of courses provided in each semester and year.",
        "query": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "semester",
            ",",
            "YEAR",
            "FROM",
            "SECTION",
            "GROUP",
            "BY",
            "semester",
            ",",
            "YEAR"
        ],
        "db_id": "college_2"
    },
    {
        "question": "How many courses are provided in each semester and year?",
        "query": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "semester",
            ",",
            "YEAR",
            "FROM",
            "SECTION",
            "GROUP",
            "BY",
            "semester",
            ",",
            "YEAR"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the year which offers the largest number of courses.",
        "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "YEAR",
            "FROM",
            "SECTION",
            "GROUP",
            "BY",
            "YEAR",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Which year had the greatest number of courses?",
        "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "YEAR",
            "FROM",
            "SECTION",
            "GROUP",
            "BY",
            "YEAR",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the year and semester when offers the largest number of courses.",
        "query": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "semester",
            ",",
            "YEAR",
            "FROM",
            "SECTION",
            "GROUP",
            "BY",
            "semester",
            ",",
            "YEAR",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What is the year and semester with the most courses?",
        "query": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "semester",
            ",",
            "YEAR",
            "FROM",
            "SECTION",
            "GROUP",
            "BY",
            "semester",
            ",",
            "YEAR",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the name of department has the highest amount of students?",
        "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "dept_name",
            "FROM",
            "student",
            "GROUP",
            "BY",
            "dept_name",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What is the name of the deparment with the highest enrollment?",
        "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "dept_name",
            "FROM",
            "student",
            "GROUP",
            "BY",
            "dept_name",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the total number of students in each department.",
        "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "dept_name",
            "FROM",
            "student",
            "GROUP",
            "BY",
            "dept_name"
        ],
        "db_id": "college_2"
    },
    {
        "question": "How many students are in each department?",
        "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "dept_name",
            "FROM",
            "student",
            "GROUP",
            "BY",
            "dept_name"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the semester and year which has the least number of student taking any class.",
        "query": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1",
        "query_toks": [
            "SELECT",
            "semester",
            ",",
            "YEAR",
            "FROM",
            "takes",
            "GROUP",
            "BY",
            "semester",
            ",",
            "YEAR",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "LIMIT",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Which semeseter and year had the fewest students?",
        "query": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1",
        "query_toks": [
            "SELECT",
            "semester",
            ",",
            "YEAR",
            "FROM",
            "takes",
            "GROUP",
            "BY",
            "semester",
            ",",
            "YEAR",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "LIMIT",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What is the id of the instructor who advises of all students from History department?",
        "query": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'",
        "query_toks": [
            "SELECT",
            "i_id",
            "FROM",
            "advisor",
            "AS",
            "T1",
            "JOIN",
            "student",
            "AS",
            "T2",
            "ON",
            "T1.s_id",
            "=",
            "T2.id",
            "WHERE",
            "T2.dept_name",
            "=",
            "'History",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Give id of the instructor who advises students in the History department.",
        "query": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'",
        "query_toks": [
            "SELECT",
            "i_id",
            "FROM",
            "advisor",
            "AS",
            "T1",
            "JOIN",
            "student",
            "AS",
            "T2",
            "ON",
            "T1.s_id",
            "=",
            "T2.id",
            "WHERE",
            "T2.dept_name",
            "=",
            "'History",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the name and salary of the instructors who are advisors of any student from History department?",
        "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'",
        "query_toks": [
            "SELECT",
            "T2.name",
            ",",
            "T2.salary",
            "FROM",
            "advisor",
            "AS",
            "T1",
            "JOIN",
            "instructor",
            "AS",
            "T2",
            "ON",
            "T1.i_id",
            "=",
            "T2.id",
            "JOIN",
            "student",
            "AS",
            "T3",
            "ON",
            "T1.s_id",
            "=",
            "T3.id",
            "WHERE",
            "T3.dept_name",
            "=",
            "'History",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the names and salaries of instructors who advises students in the History department?",
        "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'",
        "query_toks": [
            "SELECT",
            "T2.name",
            ",",
            "T2.salary",
            "FROM",
            "advisor",
            "AS",
            "T1",
            "JOIN",
            "instructor",
            "AS",
            "T2",
            "ON",
            "T1.i_id",
            "=",
            "T2.id",
            "JOIN",
            "student",
            "AS",
            "T3",
            "ON",
            "T1.s_id",
            "=",
            "T3.id",
            "WHERE",
            "T3.dept_name",
            "=",
            "'History",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the id of the courses that do not have any prerequisite?",
        "query": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
        "query_toks": [
            "SELECT",
            "course_id",
            "FROM",
            "course",
            "EXCEPT",
            "SELECT",
            "course_id",
            "FROM",
            "prereq"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the ids of courses without prerequisites?",
        "query": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
        "query_toks": [
            "SELECT",
            "course_id",
            "FROM",
            "course",
            "EXCEPT",
            "SELECT",
            "course_id",
            "FROM",
            "prereq"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the name of the courses that do not have any prerequisite?",
        "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "course",
            "WHERE",
            "course_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "course_id",
            "FROM",
            "prereq",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the names of courses without prerequisites?",
        "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "course",
            "WHERE",
            "course_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "course_id",
            "FROM",
            "prereq",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What is the title of the prerequisite class of International Finance course?",
        "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "course",
            "WHERE",
            "course_id",
            "IN",
            "(",
            "SELECT",
            "T1.prereq_id",
            "FROM",
            "prereq",
            "AS",
            "T1",
            "JOIN",
            "course",
            "AS",
            "T2",
            "ON",
            "T1.course_id",
            "=",
            "T2.course_id",
            "WHERE",
            "T2.title",
            "=",
            "'International",
            "Finance",
            "'",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Give the title of the prerequisite to the course International Finance.",
        "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "course",
            "WHERE",
            "course_id",
            "IN",
            "(",
            "SELECT",
            "T1.prereq_id",
            "FROM",
            "prereq",
            "AS",
            "T1",
            "JOIN",
            "course",
            "AS",
            "T2",
            "ON",
            "T1.course_id",
            "=",
            "T2.course_id",
            "WHERE",
            "T2.title",
            "=",
            "'International",
            "Finance",
            "'",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the title of course whose prerequisite is course Differential Geometry.",
        "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "course",
            "WHERE",
            "course_id",
            "IN",
            "(",
            "SELECT",
            "T1.course_id",
            "FROM",
            "prereq",
            "AS",
            "T1",
            "JOIN",
            "course",
            "AS",
            "T2",
            "ON",
            "T1.prereq_id",
            "=",
            "T2.course_id",
            "WHERE",
            "T2.title",
            "=",
            "'Differential",
            "Geometry",
            "'",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What is the title of the course with Differential Geometry as a prerequisite?",
        "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "course",
            "WHERE",
            "course_id",
            "IN",
            "(",
            "SELECT",
            "T1.course_id",
            "FROM",
            "prereq",
            "AS",
            "T1",
            "JOIN",
            "course",
            "AS",
            "T2",
            "ON",
            "T1.prereq_id",
            "=",
            "T2.course_id",
            "WHERE",
            "T2.title",
            "=",
            "'Differential",
            "Geometry",
            "'",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the names of students who have taken any course in the fall semester of year 2003.",
        "query": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "student",
            "WHERE",
            "id",
            "IN",
            "(",
            "SELECT",
            "id",
            "FROM",
            "takes",
            "WHERE",
            "semester",
            "=",
            "'Fall",
            "'",
            "AND",
            "YEAR",
            "=",
            "2003",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the names of students who took a course in the Fall of 2003?",
        "query": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "student",
            "WHERE",
            "id",
            "IN",
            "(",
            "SELECT",
            "id",
            "FROM",
            "takes",
            "WHERE",
            "semester",
            "=",
            "'Fall",
            "'",
            "AND",
            "YEAR",
            "=",
            "2003",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?",
        "query": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010",
        "query_toks": [
            "SELECT",
            "T1.title",
            "FROM",
            "course",
            "AS",
            "T1",
            "JOIN",
            "SECTION",
            "AS",
            "T2",
            "ON",
            "T1.course_id",
            "=",
            "T2.course_id",
            "WHERE",
            "building",
            "=",
            "'Chandler",
            "'",
            "AND",
            "semester",
            "=",
            "'Fall",
            "'",
            "AND",
            "YEAR",
            "=",
            "2010"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Give the title of the course offered in Chandler during the Fall of 2010.",
        "query": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010",
        "query_toks": [
            "SELECT",
            "T1.title",
            "FROM",
            "course",
            "AS",
            "T1",
            "JOIN",
            "SECTION",
            "AS",
            "T2",
            "ON",
            "T1.course_id",
            "=",
            "T2.course_id",
            "WHERE",
            "building",
            "=",
            "'Chandler",
            "'",
            "AND",
            "semester",
            "=",
            "'Fall",
            "'",
            "AND",
            "YEAR",
            "=",
            "2010"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the name of the instructors who taught C Programming course before.",
        "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "instructor",
            "AS",
            "T1",
            "JOIN",
            "teaches",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.id",
            "JOIN",
            "course",
            "AS",
            "T3",
            "ON",
            "T2.course_id",
            "=",
            "T3.course_id",
            "WHERE",
            "T3.title",
            "=",
            "'C",
            "Programming",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the names of instructors who have taught C Programming courses?",
        "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "instructor",
            "AS",
            "T1",
            "JOIN",
            "teaches",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.id",
            "JOIN",
            "course",
            "AS",
            "T3",
            "ON",
            "T2.course_id",
            "=",
            "T3.course_id",
            "WHERE",
            "T3.title",
            "=",
            "'C",
            "Programming",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the name and salary of instructors who are advisors of the students from the Math department.",
        "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'",
        "query_toks": [
            "SELECT",
            "T2.name",
            ",",
            "T2.salary",
            "FROM",
            "advisor",
            "AS",
            "T1",
            "JOIN",
            "instructor",
            "AS",
            "T2",
            "ON",
            "T1.i_id",
            "=",
            "T2.id",
            "JOIN",
            "student",
            "AS",
            "T3",
            "ON",
            "T1.s_id",
            "=",
            "T3.id",
            "WHERE",
            "T3.dept_name",
            "=",
            "'Math",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the names and salaries of instructors who advise students in the Math department?",
        "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'",
        "query_toks": [
            "SELECT",
            "T2.name",
            ",",
            "T2.salary",
            "FROM",
            "advisor",
            "AS",
            "T1",
            "JOIN",
            "instructor",
            "AS",
            "T2",
            "ON",
            "T1.i_id",
            "=",
            "T2.id",
            "JOIN",
            "student",
            "AS",
            "T3",
            "ON",
            "T1.s_id",
            "=",
            "T3.id",
            "WHERE",
            "T3.dept_name",
            "=",
            "'Math",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.",
        "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "advisor",
            "AS",
            "T1",
            "JOIN",
            "instructor",
            "AS",
            "T2",
            "ON",
            "T1.i_id",
            "=",
            "T2.id",
            "JOIN",
            "student",
            "AS",
            "T3",
            "ON",
            "T1.s_id",
            "=",
            "T3.id",
            "WHERE",
            "T3.dept_name",
            "=",
            "'Math",
            "'",
            "ORDER",
            "BY",
            "T3.tot_cred"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the names of all instructors who advise students in the math depart sorted by total credits of the student.",
        "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "advisor",
            "AS",
            "T1",
            "JOIN",
            "instructor",
            "AS",
            "T2",
            "ON",
            "T1.i_id",
            "=",
            "T2.id",
            "JOIN",
            "student",
            "AS",
            "T3",
            "ON",
            "T1.s_id",
            "=",
            "T3.id",
            "WHERE",
            "T3.dept_name",
            "=",
            "'Math",
            "'",
            "ORDER",
            "BY",
            "T3.tot_cred"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What is the course title of the prerequisite of course Mobile Computing?",
        "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "course",
            "WHERE",
            "course_id",
            "IN",
            "(",
            "SELECT",
            "T1.prereq_id",
            "FROM",
            "prereq",
            "AS",
            "T1",
            "JOIN",
            "course",
            "AS",
            "T2",
            "ON",
            "T1.course_id",
            "=",
            "T2.course_id",
            "WHERE",
            "T2.title",
            "=",
            "'Mobile",
            "Computing",
            "'",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What is the title of the course that is a prerequisite for Mobile Computing?",
        "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "course",
            "WHERE",
            "course_id",
            "IN",
            "(",
            "SELECT",
            "T1.prereq_id",
            "FROM",
            "prereq",
            "AS",
            "T1",
            "JOIN",
            "course",
            "AS",
            "T2",
            "ON",
            "T1.course_id",
            "=",
            "T2.course_id",
            "WHERE",
            "T2.title",
            "=",
            "'Mobile",
            "Computing",
            "'",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the name of instructor who is the advisor of the student who has the highest number of total credits.",
        "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "advisor",
            "AS",
            "T1",
            "JOIN",
            "instructor",
            "AS",
            "T2",
            "ON",
            "T1.i_id",
            "=",
            "T2.id",
            "JOIN",
            "student",
            "AS",
            "T3",
            "ON",
            "T1.s_id",
            "=",
            "T3.id",
            "ORDER",
            "BY",
            "T3.tot_cred",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What is the name of the instructor who advises the student with the greatest number of total credits?",
        "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "advisor",
            "AS",
            "T1",
            "JOIN",
            "instructor",
            "AS",
            "T2",
            "ON",
            "T1.i_id",
            "=",
            "T2.id",
            "JOIN",
            "student",
            "AS",
            "T3",
            "ON",
            "T1.s_id",
            "=",
            "T3.id",
            "ORDER",
            "BY",
            "T3.tot_cred",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the name of instructors who didn't teach any courses?",
        "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "instructor",
            "WHERE",
            "id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "id",
            "FROM",
            "teaches",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the names of instructors who didn't teach?",
        "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "instructor",
            "WHERE",
            "id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "id",
            "FROM",
            "teaches",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the id of instructors who didn't teach any courses?",
        "query": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
        "query_toks": [
            "SELECT",
            "id",
            "FROM",
            "instructor",
            "EXCEPT",
            "SELECT",
            "id",
            "FROM",
            "teaches"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the ids of instructors who didnt' teach?",
        "query": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
        "query_toks": [
            "SELECT",
            "id",
            "FROM",
            "instructor",
            "EXCEPT",
            "SELECT",
            "id",
            "FROM",
            "teaches"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the names of instructors who didn't each any courses in any Spring semester.",
        "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "instructor",
            "WHERE",
            "id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "id",
            "FROM",
            "teaches",
            "WHERE",
            "semester",
            "=",
            "'Spring",
            "'",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the names of instructors who didn't teach courses in the Spring?",
        "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "instructor",
            "WHERE",
            "id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "id",
            "FROM",
            "teaches",
            "WHERE",
            "semester",
            "=",
            "'Spring",
            "'",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the name of the department which has the highest average salary of professors.",
        "query": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "dept_name",
            "FROM",
            "instructor",
            "GROUP",
            "BY",
            "dept_name",
            "ORDER",
            "BY",
            "avg",
            "(",
            "salary",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Which department has the highest average instructor salary?",
        "query": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "dept_name",
            "FROM",
            "instructor",
            "GROUP",
            "BY",
            "dept_name",
            "ORDER",
            "BY",
            "avg",
            "(",
            "salary",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the number and averaged salary of all instructors who are in the department with the highest budget.",
        "query": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "T1.salary",
            ")",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "instructor",
            "AS",
            "T1",
            "JOIN",
            "department",
            "AS",
            "T2",
            "ON",
            "T1.dept_name",
            "=",
            "T2.dept_name",
            "ORDER",
            "BY",
            "T2.budget",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "How many instructors are in the department with the highest budget, and what is their average salary?",
        "query": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "T1.salary",
            ")",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "instructor",
            "AS",
            "T1",
            "JOIN",
            "department",
            "AS",
            "T2",
            "ON",
            "T1.dept_name",
            "=",
            "T2.dept_name",
            "ORDER",
            "BY",
            "T2.budget",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What is the title and credits of the course that is taught in the largest classroom (with the highest capacity)?",
        "query": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)",
        "query_toks": [
            "SELECT",
            "T3.title",
            ",",
            "T3.credits",
            "FROM",
            "classroom",
            "AS",
            "T1",
            "JOIN",
            "SECTION",
            "AS",
            "T2",
            "ON",
            "T1.building",
            "=",
            "T2.building",
            "AND",
            "T1.room_number",
            "=",
            "T2.room_number",
            "JOIN",
            "course",
            "AS",
            "T3",
            "ON",
            "T2.course_id",
            "=",
            "T3.course_id",
            "WHERE",
            "T1.capacity",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "capacity",
            ")",
            "FROM",
            "classroom",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Give the title and credits for the course that is taught in the classroom with the greatest capacity.",
        "query": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)",
        "query_toks": [
            "SELECT",
            "T3.title",
            ",",
            "T3.credits",
            "FROM",
            "classroom",
            "AS",
            "T1",
            "JOIN",
            "SECTION",
            "AS",
            "T2",
            "ON",
            "T1.building",
            "=",
            "T2.building",
            "AND",
            "T1.room_number",
            "=",
            "T2.room_number",
            "JOIN",
            "course",
            "AS",
            "T3",
            "ON",
            "T2.course_id",
            "=",
            "T3.course_id",
            "WHERE",
            "T1.capacity",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "capacity",
            ")",
            "FROM",
            "classroom",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the name of students who didn't take any course from Biology department.",
        "query": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "student",
            "WHERE",
            "id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "T1.id",
            "FROM",
            "takes",
            "AS",
            "T1",
            "JOIN",
            "course",
            "AS",
            "T2",
            "ON",
            "T1.course_id",
            "=",
            "T2.course_id",
            "WHERE",
            "T2.dept_name",
            "=",
            "'Biology",
            "'",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the names of students who haven't taken any Biology courses?",
        "query": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "student",
            "WHERE",
            "id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "T1.id",
            "FROM",
            "takes",
            "AS",
            "T1",
            "JOIN",
            "course",
            "AS",
            "T2",
            "ON",
            "T1.course_id",
            "=",
            "T2.course_id",
            "WHERE",
            "T2.dept_name",
            "=",
            "'Biology",
            "'",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the total number of students and total number of instructors for each department.",
        "query": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "T2.id",
            ")",
            ",",
            "count",
            "(",
            "DISTINCT",
            "T3.id",
            ")",
            ",",
            "T3.dept_name",
            "FROM",
            "department",
            "AS",
            "T1",
            "JOIN",
            "student",
            "AS",
            "T2",
            "ON",
            "T1.dept_name",
            "=",
            "T2.dept_name",
            "JOIN",
            "instructor",
            "AS",
            "T3",
            "ON",
            "T1.dept_name",
            "=",
            "T3.dept_name",
            "GROUP",
            "BY",
            "T3.dept_name"
        ],
        "db_id": "college_2"
    },
    {
        "question": "How many students and instructors are in each department?",
        "query": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "T2.id",
            ")",
            ",",
            "count",
            "(",
            "DISTINCT",
            "T3.id",
            ")",
            ",",
            "T3.dept_name",
            "FROM",
            "department",
            "AS",
            "T1",
            "JOIN",
            "student",
            "AS",
            "T2",
            "ON",
            "T1.dept_name",
            "=",
            "T2.dept_name",
            "JOIN",
            "instructor",
            "AS",
            "T3",
            "ON",
            "T1.dept_name",
            "=",
            "T3.dept_name",
            "GROUP",
            "BY",
            "T3.dept_name"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the name of students who have taken the prerequisite course of the course with title International Finance.",
        "query": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "student",
            "AS",
            "T1",
            "JOIN",
            "takes",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.id",
            "WHERE",
            "T2.course_id",
            "IN",
            "(",
            "SELECT",
            "T4.prereq_id",
            "FROM",
            "course",
            "AS",
            "T3",
            "JOIN",
            "prereq",
            "AS",
            "T4",
            "ON",
            "T3.course_id",
            "=",
            "T4.course_id",
            "WHERE",
            "T3.title",
            "=",
            "'International",
            "Finance",
            "'",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the names of students who have taken the prerequisite for the course International Finance?",
        "query": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "student",
            "AS",
            "T1",
            "JOIN",
            "takes",
            "AS",
            "T2",
            "ON",
            "T1.id",
            "=",
            "T2.id",
            "WHERE",
            "T2.course_id",
            "IN",
            "(",
            "SELECT",
            "T4.prereq_id",
            "FROM",
            "course",
            "AS",
            "T3",
            "JOIN",
            "prereq",
            "AS",
            "T4",
            "ON",
            "T3.course_id",
            "=",
            "T4.course_id",
            "WHERE",
            "T3.title",
            "=",
            "'International",
            "Finance",
            "'",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.",
        "query": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "salary",
            "FROM",
            "instructor",
            "WHERE",
            "salary",
            "<",
            "(",
            "SELECT",
            "avg",
            "(",
            "salary",
            ")",
            "FROM",
            "instructor",
            "WHERE",
            "dept_name",
            "=",
            "'Physics",
            "'",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?",
        "query": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "salary",
            "FROM",
            "instructor",
            "WHERE",
            "salary",
            "<",
            "(",
            "SELECT",
            "avg",
            "(",
            "salary",
            ")",
            "FROM",
            "instructor",
            "WHERE",
            "dept_name",
            "=",
            "'Physics",
            "'",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the name of students who took some course offered by Statistics department.",
        "query": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'",
        "query_toks": [
            "SELECT",
            "T3.name",
            "FROM",
            "course",
            "AS",
            "T1",
            "JOIN",
            "takes",
            "AS",
            "T2",
            "ON",
            "T1.course_id",
            "=",
            "T2.course_id",
            "JOIN",
            "student",
            "AS",
            "T3",
            "ON",
            "T2.id",
            "=",
            "T3.id",
            "WHERE",
            "T1.dept_name",
            "=",
            "'Statistics",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the names of students who have taken Statistics courses?",
        "query": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'",
        "query_toks": [
            "SELECT",
            "T3.name",
            "FROM",
            "course",
            "AS",
            "T1",
            "JOIN",
            "takes",
            "AS",
            "T2",
            "ON",
            "T1.course_id",
            "=",
            "T2.course_id",
            "JOIN",
            "student",
            "AS",
            "T3",
            "ON",
            "T2.id",
            "=",
            "T3.id",
            "WHERE",
            "T1.dept_name",
            "=",
            "'Statistics",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.",
        "query": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title",
        "query_toks": [
            "SELECT",
            "T2.building",
            ",",
            "T2.room_number",
            ",",
            "T2.semester",
            ",",
            "T2.year",
            "FROM",
            "course",
            "AS",
            "T1",
            "JOIN",
            "SECTION",
            "AS",
            "T2",
            "ON",
            "T1.course_id",
            "=",
            "T2.course_id",
            "WHERE",
            "T1.dept_name",
            "=",
            "'Psychology",
            "'",
            "ORDER",
            "BY",
            "T1.title"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?",
        "query": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title",
        "query_toks": [
            "SELECT",
            "T2.building",
            ",",
            "T2.room_number",
            ",",
            "T2.semester",
            ",",
            "T2.year",
            "FROM",
            "course",
            "AS",
            "T1",
            "JOIN",
            "SECTION",
            "AS",
            "T2",
            "ON",
            "T1.course_id",
            "=",
            "T2.course_id",
            "WHERE",
            "T1.dept_name",
            "=",
            "'Psychology",
            "'",
            "ORDER",
            "BY",
            "T1.title"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the names of all instructors in computer science department",
        "query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "instructor",
            "WHERE",
            "dept_name",
            "=",
            "'Comp",
            ".",
            "Sci",
            ".",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the names of all instructors in the Comp. Sci. department?",
        "query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "instructor",
            "WHERE",
            "dept_name",
            "=",
            "'Comp",
            ".",
            "Sci",
            ".",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the names of all instructors in Comp. Sci. department with salary > 80000.",
        "query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "instructor",
            "WHERE",
            "dept_name",
            "=",
            "'Comp",
            ".",
            "Sci",
            ".",
            "'",
            "AND",
            "salary",
            ">",
            "80000"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the names of the instructors in the Comp. Sci. department who earn more than 80000?",
        "query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "instructor",
            "WHERE",
            "dept_name",
            "=",
            "'Comp",
            ".",
            "Sci",
            ".",
            "'",
            "AND",
            "salary",
            ">",
            "80000"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the names of all instructors who have taught some course and the course_id.",
        "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "course_id",
            "FROM",
            "instructor",
            "AS",
            "T1",
            "JOIN",
            "teaches",
            "AS",
            "T2",
            "ON",
            "T1.ID",
            "=",
            "T2.ID"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the names of all instructors who have taught a course, as well as the corresponding course id?",
        "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "course_id",
            "FROM",
            "instructor",
            "AS",
            "T1",
            "JOIN",
            "teaches",
            "AS",
            "T2",
            "ON",
            "T1.ID",
            "=",
            "T2.ID"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the names of all instructors in the Art department who have taught some course and the course_id.",
        "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "course_id",
            "FROM",
            "instructor",
            "AS",
            "T1",
            "JOIN",
            "teaches",
            "AS",
            "T2",
            "ON",
            "T1.ID",
            "=",
            "T2.ID",
            "WHERE",
            "T1.dept_name",
            "=",
            "'Art",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the names of Art instructors who have taught a course, and the corresponding course id?",
        "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "course_id",
            "FROM",
            "instructor",
            "AS",
            "T1",
            "JOIN",
            "teaches",
            "AS",
            "T2",
            "ON",
            "T1.ID",
            "=",
            "T2.ID",
            "WHERE",
            "T1.dept_name",
            "=",
            "'Art",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the names of all instructors whose name includes the substring “dar”.",
        "query": "SELECT name FROM instructor WHERE name LIKE '%dar%'",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "instructor",
            "WHERE",
            "name",
            "LIKE",
            "'",
            "%",
            "dar",
            "%",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the names of all instructors with names that include \"dar\"?",
        "query": "SELECT name FROM instructor WHERE name LIKE '%dar%'",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "instructor",
            "WHERE",
            "name",
            "LIKE",
            "'",
            "%",
            "dar",
            "%",
            "'"
        ],
        "db_id": "college_2"
    },
    {
        "question": "List in alphabetic order the names of all distinct instructors.",
        "query": "SELECT DISTINCT name FROM  instructor ORDER BY name",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "name",
            "FROM",
            "instructor",
            "ORDER",
            "BY",
            "name"
        ],
        "db_id": "college_2"
    },
    {
        "question": "List the distinct names of the instructors, ordered by name.",
        "query": "SELECT DISTINCT name FROM  instructor ORDER BY name",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "name",
            "FROM",
            "instructor",
            "ORDER",
            "BY",
            "name"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find courses that ran in Fall 2009 or in Spring 2010.",
        "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query_toks": [
            "SELECT",
            "course_id",
            "FROM",
            "SECTION",
            "WHERE",
            "semester",
            "=",
            "'Fall",
            "'",
            "AND",
            "YEAR",
            "=",
            "2009",
            "UNION",
            "SELECT",
            "course_id",
            "FROM",
            "SECTION",
            "WHERE",
            "semester",
            "=",
            "'Spring",
            "'",
            "AND",
            "YEAR",
            "=",
            "2010"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the ids for courses in the Fall of 2009 or the Spring of 2010?",
        "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query_toks": [
            "SELECT",
            "course_id",
            "FROM",
            "SECTION",
            "WHERE",
            "semester",
            "=",
            "'Fall",
            "'",
            "AND",
            "YEAR",
            "=",
            "2009",
            "UNION",
            "SELECT",
            "course_id",
            "FROM",
            "SECTION",
            "WHERE",
            "semester",
            "=",
            "'Spring",
            "'",
            "AND",
            "YEAR",
            "=",
            "2010"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find courses that ran in Fall 2009 and in Spring 2010.",
        "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query_toks": [
            "SELECT",
            "course_id",
            "FROM",
            "SECTION",
            "WHERE",
            "semester",
            "=",
            "'Fall",
            "'",
            "AND",
            "YEAR",
            "=",
            "2009",
            "INTERSECT",
            "SELECT",
            "course_id",
            "FROM",
            "SECTION",
            "WHERE",
            "semester",
            "=",
            "'Spring",
            "'",
            "AND",
            "YEAR",
            "=",
            "2010"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?",
        "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query_toks": [
            "SELECT",
            "course_id",
            "FROM",
            "SECTION",
            "WHERE",
            "semester",
            "=",
            "'Fall",
            "'",
            "AND",
            "YEAR",
            "=",
            "2009",
            "INTERSECT",
            "SELECT",
            "course_id",
            "FROM",
            "SECTION",
            "WHERE",
            "semester",
            "=",
            "'Spring",
            "'",
            "AND",
            "YEAR",
            "=",
            "2010"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find courses that ran in Fall 2009 but not in Spring 2010.",
        "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query_toks": [
            "SELECT",
            "course_id",
            "FROM",
            "SECTION",
            "WHERE",
            "semester",
            "=",
            "'Fall",
            "'",
            "AND",
            "YEAR",
            "=",
            "2009",
            "EXCEPT",
            "SELECT",
            "course_id",
            "FROM",
            "SECTION",
            "WHERE",
            "semester",
            "=",
            "'Spring",
            "'",
            "AND",
            "YEAR",
            "=",
            "2010"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?",
        "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query_toks": [
            "SELECT",
            "course_id",
            "FROM",
            "SECTION",
            "WHERE",
            "semester",
            "=",
            "'Fall",
            "'",
            "AND",
            "YEAR",
            "=",
            "2009",
            "EXCEPT",
            "SELECT",
            "course_id",
            "FROM",
            "SECTION",
            "WHERE",
            "semester",
            "=",
            "'Spring",
            "'",
            "AND",
            "YEAR",
            "=",
            "2010"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the salaries of all distinct instructors that are less than the largest salary.",
        "query": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "salary",
            "FROM",
            "instructor",
            "WHERE",
            "salary",
            "<",
            "(",
            "SELECT",
            "max",
            "(",
            "salary",
            ")",
            "FROM",
            "instructor",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the distinct salaries of all instructors who earned less than the maximum salary?",
        "query": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "salary",
            "FROM",
            "instructor",
            "WHERE",
            "salary",
            "<",
            "(",
            "SELECT",
            "max",
            "(",
            "salary",
            ")",
            "FROM",
            "instructor",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the total number of instructors who teach a course in the Spring 2010 semester.",
        "query": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "DISTINCT",
            "ID",
            ")",
            "FROM",
            "teaches",
            "WHERE",
            "semester",
            "=",
            "'Spring",
            "'",
            "AND",
            "YEAR",
            "=",
            "2010"
        ],
        "db_id": "college_2"
    },
    {
        "question": "How many instructors teach a course in the Spring of 2010?",
        "query": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "DISTINCT",
            "ID",
            ")",
            "FROM",
            "teaches",
            "WHERE",
            "semester",
            "=",
            "'Spring",
            "'",
            "AND",
            "YEAR",
            "=",
            "2010"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the names and average salaries of all departments whose average salary is greater than 42000.",
        "query": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000",
        "query_toks": [
            "SELECT",
            "dept_name",
            ",",
            "AVG",
            "(",
            "salary",
            ")",
            "FROM",
            "instructor",
            "GROUP",
            "BY",
            "dept_name",
            "HAVING",
            "AVG",
            "(",
            "salary",
            ")",
            ">",
            "42000"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the names and average salaries for departments with average salary higher than 42000?",
        "query": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000",
        "query_toks": [
            "SELECT",
            "dept_name",
            ",",
            "AVG",
            "(",
            "salary",
            ")",
            "FROM",
            "instructor",
            "GROUP",
            "BY",
            "dept_name",
            "HAVING",
            "AVG",
            "(",
            "salary",
            ")",
            ">",
            "42000"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.",
        "query": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "instructor",
            "WHERE",
            "salary",
            ">",
            "(",
            "SELECT",
            "min",
            "(",
            "salary",
            ")",
            "FROM",
            "instructor",
            "WHERE",
            "dept_name",
            "=",
            "'Biology",
            "'",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the names of instructors who earn more than at least one instructor from the Biology department?",
        "query": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "instructor",
            "WHERE",
            "salary",
            ">",
            "(",
            "SELECT",
            "min",
            "(",
            "salary",
            ")",
            "FROM",
            "instructor",
            "WHERE",
            "dept_name",
            "=",
            "'Biology",
            "'",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.",
        "query": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "instructor",
            "WHERE",
            "salary",
            ">",
            "(",
            "SELECT",
            "max",
            "(",
            "salary",
            ")",
            "FROM",
            "instructor",
            "WHERE",
            "dept_name",
            "=",
            "'Biology",
            "'",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "What are the names of all instructors with a higher salary than any of the instructors in the Biology department?",
        "query": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "instructor",
            "WHERE",
            "salary",
            ">",
            "(",
            "SELECT",
            "max",
            "(",
            "salary",
            ")",
            "FROM",
            "instructor",
            "WHERE",
            "dept_name",
            "=",
            "'Biology",
            "'",
            ")"
        ],
        "db_id": "college_2"
    },
    {
        "question": "List the names of all the customers in alphabetical order.",
        "query": "SELECT customer_details FROM customers ORDER BY customer_details",
        "query_toks": [
            "SELECT",
            "customer_details",
            "FROM",
            "customers",
            "ORDER",
            "BY",
            "customer_details"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Sort the customer names in alphabetical order.",
        "query": "SELECT customer_details FROM customers ORDER BY customer_details",
        "query_toks": [
            "SELECT",
            "customer_details",
            "FROM",
            "customers",
            "ORDER",
            "BY",
            "customer_details"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Find all the policy type codes associated with the customer \"Dayana Robel\"",
        "query": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"",
        "query_toks": [
            "SELECT",
            "policy_type_code",
            "FROM",
            "policies",
            "AS",
            "t1",
            "JOIN",
            "customers",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "WHERE",
            "t2.customer_details",
            "=",
            "``",
            "Dayana",
            "Robel",
            "''"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "What are the type codes of the policies used by the customer \"Dayana Robel\"?",
        "query": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"",
        "query_toks": [
            "SELECT",
            "policy_type_code",
            "FROM",
            "policies",
            "AS",
            "t1",
            "JOIN",
            "customers",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "WHERE",
            "t2.customer_details",
            "=",
            "``",
            "Dayana",
            "Robel",
            "''"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Which type of policy is most frequently used? Give me the policy type code.",
        "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "policy_type_code",
            "FROM",
            "policies",
            "GROUP",
            "BY",
            "policy_type_code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Find the type code of the most frequently used policy.",
        "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "policy_type_code",
            "FROM",
            "policies",
            "GROUP",
            "BY",
            "policy_type_code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Find all the policy types that are used by more than 2 customers.",
        "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2",
        "query_toks": [
            "SELECT",
            "policy_type_code",
            "FROM",
            "policies",
            "GROUP",
            "BY",
            "policy_type_code",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Which types of policy are chosen by more than 2 customers? Give me the policy type codes.",
        "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2",
        "query_toks": [
            "SELECT",
            "policy_type_code",
            "FROM",
            "policies",
            "GROUP",
            "BY",
            "policy_type_code",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Find the total and average amount paid in claim headers.",
        "query": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "amount_piad",
            ")",
            ",",
            "avg",
            "(",
            "amount_piad",
            ")",
            "FROM",
            "claim_headers"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "What are the total amount and average amount paid in claim headers?",
        "query": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "amount_piad",
            ")",
            ",",
            "avg",
            "(",
            "amount_piad",
            ")",
            "FROM",
            "claim_headers"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Find the total amount claimed in the most recently created document.",
        "query": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "t1.amount_claimed",
            ")",
            "FROM",
            "claim_headers",
            "AS",
            "t1",
            "JOIN",
            "claims_documents",
            "AS",
            "t2",
            "ON",
            "t1.claim_header_id",
            "=",
            "t2.claim_id",
            "WHERE",
            "t2.created_date",
            "=",
            "(",
            "SELECT",
            "created_date",
            "FROM",
            "claims_documents",
            "ORDER",
            "BY",
            "created_date",
            "LIMIT",
            "1",
            ")"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "How much amount in total were claimed in the most recently created document?",
        "query": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "t1.amount_claimed",
            ")",
            "FROM",
            "claim_headers",
            "AS",
            "t1",
            "JOIN",
            "claims_documents",
            "AS",
            "t2",
            "ON",
            "t1.claim_header_id",
            "=",
            "t2.claim_id",
            "WHERE",
            "t2.created_date",
            "=",
            "(",
            "SELECT",
            "created_date",
            "FROM",
            "claims_documents",
            "ORDER",
            "BY",
            "created_date",
            "LIMIT",
            "1",
            ")"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "What is the name of the customer who has made the largest amount of claim in a single claim?",
        "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)",
        "query_toks": [
            "SELECT",
            "t3.customer_details",
            "FROM",
            "claim_headers",
            "AS",
            "t1",
            "JOIN",
            "policies",
            "AS",
            "t2",
            "ON",
            "t1.policy_id",
            "=",
            "t2.policy_id",
            "JOIN",
            "customers",
            "AS",
            "t3",
            "ON",
            "t2.customer_id",
            "=",
            "t3.customer_id",
            "WHERE",
            "t1.amount_claimed",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "amount_claimed",
            ")",
            "FROM",
            "claim_headers",
            ")"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Which customer made the largest amount of claim in a single claim? Return the customer details.",
        "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)",
        "query_toks": [
            "SELECT",
            "t3.customer_details",
            "FROM",
            "claim_headers",
            "AS",
            "t1",
            "JOIN",
            "policies",
            "AS",
            "t2",
            "ON",
            "t1.policy_id",
            "=",
            "t2.policy_id",
            "JOIN",
            "customers",
            "AS",
            "t3",
            "ON",
            "t2.customer_id",
            "=",
            "t3.customer_id",
            "WHERE",
            "t1.amount_claimed",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "amount_claimed",
            ")",
            "FROM",
            "claim_headers",
            ")"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "What is the name of the customer who has made the minimum amount of payment in one claim?",
        "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)",
        "query_toks": [
            "SELECT",
            "t3.customer_details",
            "FROM",
            "claim_headers",
            "AS",
            "t1",
            "JOIN",
            "policies",
            "AS",
            "t2",
            "ON",
            "t1.policy_id",
            "=",
            "t2.policy_id",
            "JOIN",
            "customers",
            "AS",
            "t3",
            "ON",
            "t2.customer_id",
            "=",
            "t3.customer_id",
            "WHERE",
            "t1.amount_piad",
            "=",
            "(",
            "SELECT",
            "min",
            "(",
            "amount_piad",
            ")",
            "FROM",
            "claim_headers",
            ")"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Which customer made the smallest amount of claim in one claim? Return the customer details.",
        "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)",
        "query_toks": [
            "SELECT",
            "t3.customer_details",
            "FROM",
            "claim_headers",
            "AS",
            "t1",
            "JOIN",
            "policies",
            "AS",
            "t2",
            "ON",
            "t1.policy_id",
            "=",
            "t2.policy_id",
            "JOIN",
            "customers",
            "AS",
            "t3",
            "ON",
            "t2.customer_id",
            "=",
            "t3.customer_id",
            "WHERE",
            "t1.amount_piad",
            "=",
            "(",
            "SELECT",
            "min",
            "(",
            "amount_piad",
            ")",
            "FROM",
            "claim_headers",
            ")"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Find the names of customers who have no policies associated.",
        "query": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
        "query_toks": [
            "SELECT",
            "customer_details",
            "FROM",
            "customers",
            "EXCEPT",
            "SELECT",
            "t2.customer_details",
            "FROM",
            "policies",
            "AS",
            "t1",
            "JOIN",
            "customers",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "What are the names of customers who do not have any policies?",
        "query": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
        "query_toks": [
            "SELECT",
            "customer_details",
            "FROM",
            "customers",
            "EXCEPT",
            "SELECT",
            "t2.customer_details",
            "FROM",
            "policies",
            "AS",
            "t1",
            "JOIN",
            "customers",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "How many claim processing stages are there in total?",
        "query": "SELECT count(*) FROM claims_processing_stages",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "claims_processing_stages"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Find the number of distinct stages in claim processing.",
        "query": "SELECT count(*) FROM claims_processing_stages",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "claims_processing_stages"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "What is the name of the claim processing stage that most of the claims are on?",
        "query": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t2.claim_status_name",
            "FROM",
            "claims_processing",
            "AS",
            "t1",
            "JOIN",
            "claims_processing_stages",
            "AS",
            "t2",
            "ON",
            "t1.claim_stage_id",
            "=",
            "t2.claim_stage_id",
            "GROUP",
            "BY",
            "t1.claim_stage_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Which claim processing stage has the most claims? Show the claim status name.",
        "query": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t2.claim_status_name",
            "FROM",
            "claims_processing",
            "AS",
            "t1",
            "JOIN",
            "claims_processing_stages",
            "AS",
            "t2",
            "ON",
            "t1.claim_stage_id",
            "=",
            "t2.claim_stage_id",
            "GROUP",
            "BY",
            "t1.claim_stage_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Find the names of customers whose name contains \"Diana\".",
        "query": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"",
        "query_toks": [
            "SELECT",
            "customer_details",
            "FROM",
            "customers",
            "WHERE",
            "customer_details",
            "LIKE",
            "``",
            "%",
            "Diana",
            "%",
            "''"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Which customers have the substring \"Diana\" in their names? Return the customer details.",
        "query": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"",
        "query_toks": [
            "SELECT",
            "customer_details",
            "FROM",
            "customers",
            "WHERE",
            "customer_details",
            "LIKE",
            "``",
            "%",
            "Diana",
            "%",
            "''"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Find the names of the customers who have an deputy policy.",
        "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\"",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "t2.customer_details",
            "FROM",
            "policies",
            "AS",
            "t1",
            "JOIN",
            "customers",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "WHERE",
            "t1.policy_type_code",
            "=",
            "``",
            "Deputy",
            "''"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Which customers have an insurance policy with the type code \"Deputy\"? Give me the customer details.",
        "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\"",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "t2.customer_details",
            "FROM",
            "policies",
            "AS",
            "t1",
            "JOIN",
            "customers",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "WHERE",
            "t1.policy_type_code",
            "=",
            "``",
            "Deputy",
            "''"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Find the names of customers who either have an deputy policy or uniformed policy.",
        "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "t2.customer_details",
            "FROM",
            "policies",
            "AS",
            "t1",
            "JOIN",
            "customers",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "WHERE",
            "t1.policy_type_code",
            "=",
            "``",
            "Deputy",
            "''",
            "OR",
            "t1.policy_type_code",
            "=",
            "``",
            "Uniform",
            "''"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Which customers have an insurance policy with the type code \"Deputy\" or \"Uniform\"? Return the customer details.",
        "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "t2.customer_details",
            "FROM",
            "policies",
            "AS",
            "t1",
            "JOIN",
            "customers",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "WHERE",
            "t1.policy_type_code",
            "=",
            "``",
            "Deputy",
            "''",
            "OR",
            "t1.policy_type_code",
            "=",
            "``",
            "Uniform",
            "''"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Find the names of all the customers and staff members.",
        "query": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff",
        "query_toks": [
            "SELECT",
            "customer_details",
            "FROM",
            "customers",
            "UNION",
            "SELECT",
            "staff_details",
            "FROM",
            "staff"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "What are the names of the customers and staff members?",
        "query": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff",
        "query_toks": [
            "SELECT",
            "customer_details",
            "FROM",
            "customers",
            "UNION",
            "SELECT",
            "staff_details",
            "FROM",
            "staff"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Find the number of records of each policy type and its type code.",
        "query": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code",
        "query_toks": [
            "SELECT",
            "policy_type_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "policies",
            "GROUP",
            "BY",
            "policy_type_code"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "For each policy type, return its type code and its count in the record.",
        "query": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code",
        "query_toks": [
            "SELECT",
            "policy_type_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "policies",
            "GROUP",
            "BY",
            "policy_type_code"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Find the name of the customer that has been involved in the most policies.",
        "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t2.customer_details",
            "FROM",
            "policies",
            "AS",
            "t1",
            "JOIN",
            "customers",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "GROUP",
            "BY",
            "t2.customer_details",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Which customer have the most policies? Give me the customer details.",
        "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t2.customer_details",
            "FROM",
            "policies",
            "AS",
            "t1",
            "JOIN",
            "customers",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "GROUP",
            "BY",
            "t2.customer_details",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "What is the description of the claim status \"Open\"?",
        "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
        "query_toks": [
            "SELECT",
            "claim_status_description",
            "FROM",
            "claims_processing_stages",
            "WHERE",
            "claim_status_name",
            "=",
            "``",
            "Open",
            "''"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Find the description of the claim status \"Open\".",
        "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
        "query_toks": [
            "SELECT",
            "claim_status_description",
            "FROM",
            "claims_processing_stages",
            "WHERE",
            "claim_status_name",
            "=",
            "``",
            "Open",
            "''"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "How many distinct claim outcome codes are there?",
        "query": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "claim_outcome_code",
            ")",
            "FROM",
            "claims_processing"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Count the number of distinct claim outcome codes.",
        "query": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "claim_outcome_code",
            ")",
            "FROM",
            "claims_processing"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Which customer is associated with the latest policy?",
        "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)",
        "query_toks": [
            "SELECT",
            "t2.customer_details",
            "FROM",
            "policies",
            "AS",
            "t1",
            "JOIN",
            "customers",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "WHERE",
            "t1.start_date",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "start_date",
            ")",
            "FROM",
            "policies",
            ")"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Find the customer who started a policy most recently.",
        "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)",
        "query_toks": [
            "SELECT",
            "t2.customer_details",
            "FROM",
            "policies",
            "AS",
            "t1",
            "JOIN",
            "customers",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "WHERE",
            "t1.start_date",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "start_date",
            ")",
            "FROM",
            "policies",
            ")"
        ],
        "db_id": "insurance_and_eClaims"
    },
    {
        "question": "Show the number of accounts.",
        "query": "SELECT count(*) FROM Accounts",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Accounts"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "How many accounts are there?",
        "query": "SELECT count(*) FROM Accounts",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Accounts"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "How many customers have opened an account?",
        "query": "SELECT count(DISTINCT customer_id) FROM Accounts",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "customer_id",
            ")",
            "FROM",
            "Accounts"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Count the number of customers who have an account.",
        "query": "SELECT count(DISTINCT customer_id) FROM Accounts",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "customer_id",
            ")",
            "FROM",
            "Accounts"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the id, the date of account opened, the account name, and other account detail for all accounts.",
        "query": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts",
        "query_toks": [
            "SELECT",
            "account_id",
            ",",
            "date_account_opened",
            ",",
            "account_name",
            ",",
            "other_account_details",
            "FROM",
            "Accounts"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What are the ids, date opened, name, and other details for all accounts?",
        "query": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts",
        "query_toks": [
            "SELECT",
            "account_id",
            ",",
            "date_account_opened",
            ",",
            "account_name",
            ",",
            "other_account_details",
            "FROM",
            "Accounts"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.",
        "query": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'",
        "query_toks": [
            "SELECT",
            "T1.account_id",
            ",",
            "T1.date_account_opened",
            ",",
            "T1.account_name",
            ",",
            "T1.other_account_details",
            "FROM",
            "Accounts",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.customer_first_name",
            "=",
            "'Meaghan",
            "'"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What are the ids, names, dates of opening, and other details for accounts corresponding to the customer with the first name \"Meaghan\"?",
        "query": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'",
        "query_toks": [
            "SELECT",
            "T1.account_id",
            ",",
            "T1.date_account_opened",
            ",",
            "T1.account_name",
            ",",
            "T1.other_account_details",
            "FROM",
            "Accounts",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.customer_first_name",
            "=",
            "'Meaghan",
            "'"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling.",
        "query": "SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Meaghan\" AND T2.customer_last_name  =  \"Keeling\"",
        "query_toks": [
            "SELECT",
            "T1.account_name",
            ",",
            "T1.other_account_details",
            "FROM",
            "Accounts",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.customer_first_name",
            "=",
            "``",
            "Meaghan",
            "''",
            "AND",
            "T2.customer_last_name",
            "=",
            "``",
            "Keeling",
            "''"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What are the names and other details for accounts corresponding to the customer named Meaghan Keeling?",
        "query": "SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Meaghan\" AND T2.customer_last_name  =  \"Keeling\"",
        "query_toks": [
            "SELECT",
            "T1.account_name",
            ",",
            "T1.other_account_details",
            "FROM",
            "Accounts",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.customer_first_name",
            "=",
            "``",
            "Meaghan",
            "''",
            "AND",
            "T2.customer_last_name",
            "=",
            "``",
            "Keeling",
            "''"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the first name and last name for the customer with account name 900.",
        "query": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\"",
        "query_toks": [
            "SELECT",
            "T2.customer_first_name",
            ",",
            "T2.customer_last_name",
            "FROM",
            "Accounts",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T1.account_name",
            "=",
            "``",
            "900",
            "''"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What are the full names of customers with the account name 900?",
        "query": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\"",
        "query_toks": [
            "SELECT",
            "T2.customer_first_name",
            ",",
            "T2.customer_last_name",
            "FROM",
            "Accounts",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T1.account_name",
            "=",
            "``",
            "900",
            "''"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "How many customers don't have an account?",
        "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers",
            "WHERE",
            "customer_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "customer_id",
            "FROM",
            "Accounts",
            ")"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Count the number of customers who do not have an account.",
        "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers",
            "WHERE",
            "customer_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "customer_id",
            "FROM",
            "Accounts",
            ")"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the unique first names, last names, and phone numbers for all customers with any account.",
        "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.customer_first_name",
            ",",
            "T1.customer_last_name",
            ",",
            "T1.phone_number",
            "FROM",
            "Customers",
            "AS",
            "T1",
            "JOIN",
            "Accounts",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What are the distinct first names, last names, and phone numbers for customers with accounts?",
        "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.customer_first_name",
            ",",
            "T1.customer_last_name",
            ",",
            "T1.phone_number",
            "FROM",
            "Customers",
            "AS",
            "T1",
            "JOIN",
            "Accounts",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show customer ids who don't have an account.",
        "query": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts",
        "query_toks": [
            "SELECT",
            "customer_id",
            "FROM",
            "Customers",
            "EXCEPT",
            "SELECT",
            "customer_id",
            "FROM",
            "Accounts"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What are the customer ids for customers who do not have an account?",
        "query": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts",
        "query_toks": [
            "SELECT",
            "customer_id",
            "FROM",
            "Customers",
            "EXCEPT",
            "SELECT",
            "customer_id",
            "FROM",
            "Accounts"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "How many accounts does each customer have? List the number and customer id.",
        "query": "SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "customer_id",
            "FROM",
            "Accounts",
            "GROUP",
            "BY",
            "customer_id"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Count the number of accounts corresponding to each customer id.",
        "query": "SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "customer_id",
            "FROM",
            "Accounts",
            "GROUP",
            "BY",
            "customer_id"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What is the customer id, first and last name with most number of accounts.",
        "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.customer_id",
            ",",
            "T2.customer_first_name",
            ",",
            "T2.customer_last_name",
            "FROM",
            "Accounts",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Return the id and full name of the customer with the most accounts.",
        "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.customer_id",
            ",",
            "T2.customer_first_name",
            ",",
            "T2.customer_last_name",
            "FROM",
            "Accounts",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show id, first name and last name for all customers and the number of accounts.",
        "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
        "query_toks": [
            "SELECT",
            "T1.customer_id",
            ",",
            "T2.customer_first_name",
            ",",
            "T2.customer_last_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Accounts",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What are the the full names and ids for all customers, and how many accounts does each have?",
        "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
        "query_toks": [
            "SELECT",
            "T1.customer_id",
            ",",
            "T2.customer_first_name",
            ",",
            "T2.customer_last_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Accounts",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show first name and id for all customers with at least 2 accounts.",
        "query": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "query_toks": [
            "SELECT",
            "T2.customer_first_name",
            ",",
            "T1.customer_id",
            "FROM",
            "Accounts",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What are the first names and ids for customers who have two or more accounts?",
        "query": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "query_toks": [
            "SELECT",
            "T2.customer_first_name",
            ",",
            "T1.customer_id",
            "FROM",
            "Accounts",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the number of customers.",
        "query": "SELECT count(*) FROM Customers",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Count the number of customers.",
        "query": "SELECT count(*) FROM Customers",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the number of customers for each gender.",
        "query": "SELECT gender ,  count(*) FROM Customers GROUP BY gender",
        "query_toks": [
            "SELECT",
            "gender",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers",
            "GROUP",
            "BY",
            "gender"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "How many customers are there of each gender?",
        "query": "SELECT gender ,  count(*) FROM Customers GROUP BY gender",
        "query_toks": [
            "SELECT",
            "gender",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers",
            "GROUP",
            "BY",
            "gender"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "How many transactions do we have?",
        "query": "SELECT count(*) FROM Financial_transactions",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Financial_transactions"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Count the number of transactions.",
        "query": "SELECT count(*) FROM Financial_transactions",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Financial_transactions"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "How many transaction does each account have? Show the number and account id.",
        "query": "SELECT count(*) ,  account_id FROM Financial_transactions",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "account_id",
            "FROM",
            "Financial_transactions"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Count the number of financial transactions that correspond to each account id.",
        "query": "SELECT count(*) ,  account_id FROM Financial_transactions",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "account_id",
            "FROM",
            "Financial_transactions"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "How many transaction does account with name 337 have?",
        "query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Financial_transactions",
            "AS",
            "T1",
            "JOIN",
            "Accounts",
            "AS",
            "T2",
            "ON",
            "T1.account_id",
            "=",
            "T2.account_id",
            "WHERE",
            "T2.account_name",
            "=",
            "``",
            "337",
            "''"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Count the number of financial transactions that the account with the name 337 has.",
        "query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Financial_transactions",
            "AS",
            "T1",
            "JOIN",
            "Accounts",
            "AS",
            "T2",
            "ON",
            "T1.account_id",
            "=",
            "T2.account_id",
            "WHERE",
            "T2.account_name",
            "=",
            "``",
            "337",
            "''"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What is the average, minimum, maximum, and total transaction amount?",
        "query": "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "transaction_amount",
            ")",
            ",",
            "min",
            "(",
            "transaction_amount",
            ")",
            ",",
            "max",
            "(",
            "transaction_amount",
            ")",
            ",",
            "sum",
            "(",
            "transaction_amount",
            ")",
            "FROM",
            "Financial_transactions"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Return the average, minimum, maximum, and total transaction amounts.",
        "query": "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "transaction_amount",
            ")",
            ",",
            "min",
            "(",
            "transaction_amount",
            ")",
            ",",
            "max",
            "(",
            "transaction_amount",
            ")",
            ",",
            "sum",
            "(",
            "transaction_amount",
            ")",
            "FROM",
            "Financial_transactions"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show ids for all transactions whose amounts are greater than the average.",
        "query": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)",
        "query_toks": [
            "SELECT",
            "transaction_id",
            "FROM",
            "Financial_transactions",
            "WHERE",
            "transaction_amount",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "transaction_amount",
            ")",
            "FROM",
            "Financial_transactions",
            ")"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What are the ids for transactions that have an amount greater than the average amount of a transaction?",
        "query": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)",
        "query_toks": [
            "SELECT",
            "transaction_id",
            "FROM",
            "Financial_transactions",
            "WHERE",
            "transaction_amount",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "transaction_amount",
            ")",
            "FROM",
            "Financial_transactions",
            ")"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the transaction types and the total amount of transactions.",
        "query": "SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",
        "query_toks": [
            "SELECT",
            "transaction_type",
            ",",
            "sum",
            "(",
            "transaction_amount",
            ")",
            "FROM",
            "Financial_transactions",
            "GROUP",
            "BY",
            "transaction_type"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What are total transaction amounts for each transaction type?",
        "query": "SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",
        "query_toks": [
            "SELECT",
            "transaction_type",
            ",",
            "sum",
            "(",
            "transaction_amount",
            ")",
            "FROM",
            "Financial_transactions",
            "GROUP",
            "BY",
            "transaction_type"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the account name, id and the number of transactions for each account.",
        "query": "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id",
        "query_toks": [
            "SELECT",
            "T2.account_name",
            ",",
            "T1.account_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Financial_transactions",
            "AS",
            "T1",
            "JOIN",
            "Accounts",
            "AS",
            "T2",
            "ON",
            "T1.account_id",
            "=",
            "T2.account_id",
            "GROUP",
            "BY",
            "T1.account_id"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Return the names and ids of each account, as well as the number of transactions.",
        "query": "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id",
        "query_toks": [
            "SELECT",
            "T2.account_name",
            ",",
            "T1.account_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Financial_transactions",
            "AS",
            "T1",
            "JOIN",
            "Accounts",
            "AS",
            "T2",
            "ON",
            "T1.account_id",
            "=",
            "T2.account_id",
            "GROUP",
            "BY",
            "T1.account_id"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the account id with most number of transactions.",
        "query": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "account_id",
            "FROM",
            "Financial_transactions",
            "GROUP",
            "BY",
            "account_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What is the id of the account with the most transactions?",
        "query": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "account_id",
            "FROM",
            "Financial_transactions",
            "GROUP",
            "BY",
            "account_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the account id and name with at least 4 transactions.",
        "query": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4",
        "query_toks": [
            "SELECT",
            "T1.account_id",
            ",",
            "T2.account_name",
            "FROM",
            "Financial_transactions",
            "AS",
            "T1",
            "JOIN",
            "Accounts",
            "AS",
            "T2",
            "ON",
            "T1.account_id",
            "=",
            "T2.account_id",
            "GROUP",
            "BY",
            "T1.account_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "4"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What are the ids and names of accounts with 4 or more transactions?",
        "query": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4",
        "query_toks": [
            "SELECT",
            "T1.account_id",
            ",",
            "T2.account_name",
            "FROM",
            "Financial_transactions",
            "AS",
            "T1",
            "JOIN",
            "Accounts",
            "AS",
            "T2",
            "ON",
            "T1.account_id",
            "=",
            "T2.account_id",
            "GROUP",
            "BY",
            "T1.account_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "4"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show all product sizes.",
        "query": "SELECT DISTINCT product_size FROM Products",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "product_size",
            "FROM",
            "Products"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What are the different product sizes?",
        "query": "SELECT DISTINCT product_size FROM Products",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "product_size",
            "FROM",
            "Products"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show all product colors.",
        "query": "SELECT DISTINCT product_color FROM Products",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "product_color",
            "FROM",
            "Products"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What are the different product colors?",
        "query": "SELECT DISTINCT product_color FROM Products",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "product_color",
            "FROM",
            "Products"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the invoice number and the number of transactions for each invoice.",
        "query": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number",
        "query_toks": [
            "SELECT",
            "invoice_number",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Financial_transactions",
            "GROUP",
            "BY",
            "invoice_number"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "How many transactions correspond to each invoice number?",
        "query": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number",
        "query_toks": [
            "SELECT",
            "invoice_number",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Financial_transactions",
            "GROUP",
            "BY",
            "invoice_number"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What is the invoice number and invoice date for the invoice with most number of transactions?",
        "query": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.invoice_number",
            ",",
            "T2.invoice_date",
            "FROM",
            "Financial_transactions",
            "AS",
            "T1",
            "JOIN",
            "Invoices",
            "AS",
            "T2",
            "ON",
            "T1.invoice_number",
            "=",
            "T2.invoice_number",
            "GROUP",
            "BY",
            "T1.invoice_number",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions?",
        "query": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.invoice_number",
            ",",
            "T2.invoice_date",
            "FROM",
            "Financial_transactions",
            "AS",
            "T1",
            "JOIN",
            "Invoices",
            "AS",
            "T2",
            "ON",
            "T1.invoice_number",
            "=",
            "T2.invoice_number",
            "GROUP",
            "BY",
            "T1.invoice_number",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "How many invoices do we have?",
        "query": "SELECT count(*) FROM Invoices",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Invoices"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Count the number of invoices.",
        "query": "SELECT count(*) FROM Invoices",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Invoices"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show invoice dates and order id and details for all invoices.",
        "query": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id",
        "query_toks": [
            "SELECT",
            "T1.invoice_date",
            ",",
            "T1.order_id",
            ",",
            "T2.order_details",
            "FROM",
            "Invoices",
            "AS",
            "T1",
            "JOIN",
            "Orders",
            "AS",
            "T2",
            "ON",
            "T1.order_id",
            "=",
            "T2.order_id"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What are the invoice dates, order ids, and order details for all invoices?",
        "query": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id",
        "query_toks": [
            "SELECT",
            "T1.invoice_date",
            ",",
            "T1.order_id",
            ",",
            "T2.order_details",
            "FROM",
            "Invoices",
            "AS",
            "T1",
            "JOIN",
            "Orders",
            "AS",
            "T2",
            "ON",
            "T1.order_id",
            "=",
            "T2.order_id"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the order ids and the number of invoices for each order.",
        "query": "SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id",
        "query_toks": [
            "SELECT",
            "order_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Invoices",
            "GROUP",
            "BY",
            "order_id"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "How many invoices correspond to each order id?",
        "query": "SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id",
        "query_toks": [
            "SELECT",
            "order_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Invoices",
            "GROUP",
            "BY",
            "order_id"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What is the order id and order details for the order more than two invoices.",
        "query": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2",
        "query_toks": [
            "SELECT",
            "T2.order_id",
            ",",
            "T2.order_details",
            "FROM",
            "Invoices",
            "AS",
            "T1",
            "JOIN",
            "Orders",
            "AS",
            "T2",
            "ON",
            "T1.order_id",
            "=",
            "T2.order_id",
            "GROUP",
            "BY",
            "T2.order_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Return the order ids and details for orderes with two or more invoices.",
        "query": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2",
        "query_toks": [
            "SELECT",
            "T2.order_id",
            ",",
            "T2.order_details",
            "FROM",
            "Invoices",
            "AS",
            "T1",
            "JOIN",
            "Orders",
            "AS",
            "T2",
            "ON",
            "T1.order_id",
            "=",
            "T2.order_id",
            "GROUP",
            "BY",
            "T2.order_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What is the customer last name, id and phone number with most number of orders?",
        "query": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.customer_last_name",
            ",",
            "T1.customer_id",
            ",",
            "T2.phone_number",
            "FROM",
            "Orders",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Return the last name, id and phone number of the customer who has made the greatest number of orders.",
        "query": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.customer_last_name",
            ",",
            "T1.customer_id",
            ",",
            "T2.phone_number",
            "FROM",
            "Orders",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show all product names without an order.",
        "query": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "query_toks": [
            "SELECT",
            "product_name",
            "FROM",
            "Products",
            "EXCEPT",
            "SELECT",
            "T1.product_name",
            "FROM",
            "Products",
            "AS",
            "T1",
            "JOIN",
            "Order_items",
            "AS",
            "T2",
            "ON",
            "T1.product_id",
            "=",
            "T2.product_id"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What are the names of products that have never been ordered?",
        "query": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
        "query_toks": [
            "SELECT",
            "product_name",
            "FROM",
            "Products",
            "EXCEPT",
            "SELECT",
            "T1.product_name",
            "FROM",
            "Products",
            "AS",
            "T1",
            "JOIN",
            "Order_items",
            "AS",
            "T2",
            "ON",
            "T1.product_id",
            "=",
            "T2.product_id"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show all product names and the total quantity ordered for each product name.",
        "query": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name",
        "query_toks": [
            "SELECT",
            "T2.product_name",
            ",",
            "sum",
            "(",
            "T1.product_quantity",
            ")",
            "FROM",
            "Order_items",
            "AS",
            "T1",
            "JOIN",
            "Products",
            "AS",
            "T2",
            "ON",
            "T1.product_id",
            "=",
            "T2.product_id",
            "GROUP",
            "BY",
            "T2.product_name"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What are the different product names, and what is the sum of quantity ordered for each product?",
        "query": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name",
        "query_toks": [
            "SELECT",
            "T2.product_name",
            ",",
            "sum",
            "(",
            "T1.product_quantity",
            ")",
            "FROM",
            "Order_items",
            "AS",
            "T1",
            "JOIN",
            "Products",
            "AS",
            "T2",
            "ON",
            "T1.product_id",
            "=",
            "T2.product_id",
            "GROUP",
            "BY",
            "T2.product_name"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the order ids and the number of items in each order.",
        "query": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id",
        "query_toks": [
            "SELECT",
            "order_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Order_items",
            "GROUP",
            "BY",
            "order_id"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "How many order items correspond to each order id?",
        "query": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id",
        "query_toks": [
            "SELECT",
            "order_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Order_items",
            "GROUP",
            "BY",
            "order_id"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show the product ids and the number of unique orders containing each product.",
        "query": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id",
        "query_toks": [
            "SELECT",
            "product_id",
            ",",
            "count",
            "(",
            "DISTINCT",
            "order_id",
            ")",
            "FROM",
            "Order_items",
            "GROUP",
            "BY",
            "product_id"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "How many distinct order ids correspond to each product?",
        "query": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id",
        "query_toks": [
            "SELECT",
            "product_id",
            ",",
            "count",
            "(",
            "DISTINCT",
            "order_id",
            ")",
            "FROM",
            "Order_items",
            "GROUP",
            "BY",
            "product_id"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show all product names and the number of customers having an order on each product.",
        "query": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",
        "query_toks": [
            "SELECT",
            "T2.product_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Order_items",
            "AS",
            "T1",
            "JOIN",
            "Products",
            "AS",
            "T2",
            "ON",
            "T1.product_id",
            "=",
            "T2.product_id",
            "JOIN",
            "Orders",
            "AS",
            "T3",
            "ON",
            "T3.order_id",
            "=",
            "T1.order_id",
            "GROUP",
            "BY",
            "T2.product_name"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "What are teh names of the different products, as well as the number of customers who have ordered each product.",
        "query": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",
        "query_toks": [
            "SELECT",
            "T2.product_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Order_items",
            "AS",
            "T1",
            "JOIN",
            "Products",
            "AS",
            "T2",
            "ON",
            "T1.product_id",
            "=",
            "T2.product_id",
            "JOIN",
            "Orders",
            "AS",
            "T3",
            "ON",
            "T3.order_id",
            "=",
            "T1.order_id",
            "GROUP",
            "BY",
            "T2.product_name"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show order ids and the number of products in each order.",
        "query": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id",
        "query_toks": [
            "SELECT",
            "order_id",
            ",",
            "count",
            "(",
            "DISTINCT",
            "product_id",
            ")",
            "FROM",
            "Order_items",
            "GROUP",
            "BY",
            "order_id"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "How many different products correspond to each order id?",
        "query": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id",
        "query_toks": [
            "SELECT",
            "order_id",
            ",",
            "count",
            "(",
            "DISTINCT",
            "product_id",
            ")",
            "FROM",
            "Order_items",
            "GROUP",
            "BY",
            "order_id"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Show order ids and the total quantity in each order.",
        "query": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id",
        "query_toks": [
            "SELECT",
            "order_id",
            ",",
            "sum",
            "(",
            "product_quantity",
            ")",
            "FROM",
            "Order_items",
            "GROUP",
            "BY",
            "order_id"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Give the order ids for all orders, as well as the total product quantity in each.",
        "query": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id",
        "query_toks": [
            "SELECT",
            "order_id",
            ",",
            "sum",
            "(",
            "product_quantity",
            ")",
            "FROM",
            "Order_items",
            "GROUP",
            "BY",
            "order_id"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "How many products were not included in any order?",
        "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "products",
            "WHERE",
            "product_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "product_id",
            "FROM",
            "Order_items",
            ")"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Count the number of products that were never ordered.",
        "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "products",
            "WHERE",
            "product_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "product_id",
            "FROM",
            "Order_items",
            ")"
        ],
        "db_id": "customers_and_invoices"
    },
    {
        "question": "Find the total savings balance of all accounts except the account with name ‘Brown’.",
        "query": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "T2.balance",
            ")",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "savings",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "WHERE",
            "T1.name",
            "!",
            "=",
            "'Brown",
            "'"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "What is the total balance of savings accounts not belonging to someone with the name Brown?",
        "query": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "T2.balance",
            ")",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "savings",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "WHERE",
            "T1.name",
            "!",
            "=",
            "'Brown",
            "'"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "How many accounts are there in total?",
        "query": "SELECT count(*) FROM accounts",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "accounts"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "Count the number of accounts.",
        "query": "SELECT count(*) FROM accounts",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "accounts"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "What is the total checking balance in all accounts?",
        "query": "SELECT sum(balance) FROM checking",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "balance",
            ")",
            "FROM",
            "checking"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the total balance across checking accounts.",
        "query": "SELECT sum(balance) FROM checking",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "balance",
            ")",
            "FROM",
            "checking"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the average checking balance.",
        "query": "SELECT avg(balance) FROM checking",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "balance",
            ")",
            "FROM",
            "checking"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "What is the average balance in checking accounts?",
        "query": "SELECT avg(balance) FROM checking",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "balance",
            ")",
            "FROM",
            "checking"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "How many accounts have a savings balance above the average savings balance?",
        "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "savings",
            "WHERE",
            "balance",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "balance",
            ")",
            "FROM",
            "savings",
            ")"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the number of accounts with a savings balance that is higher than the average savings balance.",
        "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "savings",
            "WHERE",
            "balance",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "balance",
            ")",
            "FROM",
            "savings",
            ")"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the name and id of accounts whose checking balance is below the maximum checking balance.",
        "query": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)",
        "query_toks": [
            "SELECT",
            "T1.custid",
            ",",
            "T1.name",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "WHERE",
            "T2.balance",
            "<",
            "(",
            "SELECT",
            "max",
            "(",
            "balance",
            ")",
            "FROM",
            "checking",
            ")"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance?",
        "query": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)",
        "query_toks": [
            "SELECT",
            "T1.custid",
            ",",
            "T1.name",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "WHERE",
            "T2.balance",
            "<",
            "(",
            "SELECT",
            "max",
            "(",
            "balance",
            ")",
            "FROM",
            "checking",
            ")"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "What is the checking balance of the account whose owner’s name contains the substring ‘ee’?",
        "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'",
        "query_toks": [
            "SELECT",
            "T2.balance",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "WHERE",
            "T1.name",
            "LIKE",
            "'",
            "%",
            "ee",
            "%",
            "'"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the balance of the checking account belonging to an owner whose name contains 'ee'.",
        "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'",
        "query_toks": [
            "SELECT",
            "T2.balance",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "WHERE",
            "T1.name",
            "LIKE",
            "'",
            "%",
            "ee",
            "%",
            "'"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the checking balance and saving balance in the Brown’s account.",
        "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "query_toks": [
            "SELECT",
            "T2.balance",
            ",",
            "T3.balance",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "JOIN",
            "savings",
            "AS",
            "T3",
            "ON",
            "T1.custid",
            "=",
            "T3.custid",
            "WHERE",
            "T1.name",
            "=",
            "'Brown",
            "'"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "What are the checking and savings balances in accounts belonging to Brown?",
        "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "query_toks": [
            "SELECT",
            "T2.balance",
            ",",
            "T3.balance",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "JOIN",
            "savings",
            "AS",
            "T3",
            "ON",
            "T1.custid",
            "=",
            "T3.custid",
            "WHERE",
            "T1.name",
            "=",
            "'Brown",
            "'"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance.",
        "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "WHERE",
            "T2.balance",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "balance",
            ")",
            "FROM",
            "checking",
            ")",
            "INTERSECT",
            "SELECT",
            "T1.name",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "savings",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "WHERE",
            "T2.balance",
            "<",
            "(",
            "SELECT",
            "avg",
            "(",
            "balance",
            ")",
            "FROM",
            "savings",
            ")"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "What are the names of accounts with checking balances greater than the average checking balance and savings balances below the average savings balance?",
        "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "WHERE",
            "T2.balance",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "balance",
            ")",
            "FROM",
            "checking",
            ")",
            "INTERSECT",
            "SELECT",
            "T1.name",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "savings",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "WHERE",
            "T2.balance",
            "<",
            "(",
            "SELECT",
            "avg",
            "(",
            "balance",
            ")",
            "FROM",
            "savings",
            ")"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance.",
        "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))",
        "query_toks": [
            "SELECT",
            "T2.balance",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "WHERE",
            "T1.name",
            "IN",
            "(",
            "SELECT",
            "T1.name",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "savings",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "WHERE",
            "T2.balance",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "balance",
            ")",
            "FROM",
            "savings",
            ")",
            ")"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance?",
        "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))",
        "query_toks": [
            "SELECT",
            "T2.balance",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "WHERE",
            "T1.name",
            "IN",
            "(",
            "SELECT",
            "T1.name",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "savings",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "WHERE",
            "T2.balance",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "balance",
            ")",
            "FROM",
            "savings",
            ")",
            ")"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "List all customers’ names in the alphabetical order.",
        "query": "SELECT name FROM accounts ORDER BY name",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "accounts",
            "ORDER",
            "BY",
            "name"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "What are the names of all the customers in alphabetical order?",
        "query": "SELECT name FROM accounts ORDER BY name",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "accounts",
            "ORDER",
            "BY",
            "name"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the name of account that has the lowest total checking and saving balance.",
        "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "JOIN",
            "savings",
            "AS",
            "T3",
            "ON",
            "T1.custid",
            "=",
            "T3.custid",
            "ORDER",
            "BY",
            "T2.balance",
            "+",
            "T3.balance",
            "LIMIT",
            "1"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "What is the name corresponding to the accoung with the lowest sum of checking and savings balances?",
        "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "JOIN",
            "savings",
            "AS",
            "T3",
            "ON",
            "T1.custid",
            "=",
            "T3.custid",
            "ORDER",
            "BY",
            "T2.balance",
            "+",
            "T3.balance",
            "LIMIT",
            "1"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance.",
        "query": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)",
        "query_toks": [
            "SELECT",
            "T1.name",
            ",",
            "T2.balance",
            "+",
            "T3.balance",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "JOIN",
            "savings",
            "AS",
            "T3",
            "ON",
            "T1.custid",
            "=",
            "T3.custid",
            "WHERE",
            "T3.balance",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "balance",
            ")",
            "FROM",
            "savings",
            ")"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "What are the names and sum of checking and savings balances for accounts with savings balances higher than the average savings balance?",
        "query": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)",
        "query_toks": [
            "SELECT",
            "T1.name",
            ",",
            "T2.balance",
            "+",
            "T3.balance",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "JOIN",
            "savings",
            "AS",
            "T3",
            "ON",
            "T1.custid",
            "=",
            "T3.custid",
            "WHERE",
            "T3.balance",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "balance",
            ")",
            "FROM",
            "savings",
            ")"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the name and checking balance of the account with the lowest savings balance.",
        "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.name",
            ",",
            "T2.balance",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "JOIN",
            "savings",
            "AS",
            "T3",
            "ON",
            "T1.custid",
            "=",
            "T3.custid",
            "ORDER",
            "BY",
            "T3.balance",
            "LIMIT",
            "1"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "What are the names and balances of checking accounts belonging to the customer with the lowest savings balance?",
        "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.name",
            ",",
            "T2.balance",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "JOIN",
            "savings",
            "AS",
            "T3",
            "ON",
            "T1.custid",
            "=",
            "T3.custid",
            "ORDER",
            "BY",
            "T3.balance",
            "LIMIT",
            "1"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the number of checking accounts for each account name.",
        "query": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "T1.name",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "GROUP",
            "BY",
            "T1.name"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "What are the names of customers with accounts, and how many checking accounts do each of them have?",
        "query": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "T1.name",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "GROUP",
            "BY",
            "T1.name"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the total saving balance for each account name.",
        "query": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "T2.balance",
            ")",
            ",",
            "T1.name",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "savings",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "GROUP",
            "BY",
            "T1.name"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "What are the names of customers with accounts, and what are the total savings balances for each?",
        "query": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "T2.balance",
            ")",
            ",",
            "T1.name",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "savings",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "GROUP",
            "BY",
            "T1.name"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the name of accounts whose checking balance is below the average checking balance.",
        "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "WHERE",
            "T2.balance",
            "<",
            "(",
            "SELECT",
            "avg",
            "(",
            "balance",
            ")",
            "FROM",
            "checking",
            ")"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "What are the names of customers with checking balances lower than the average checking balance?",
        "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "WHERE",
            "T2.balance",
            "<",
            "(",
            "SELECT",
            "avg",
            "(",
            "balance",
            ")",
            "FROM",
            "checking",
            ")"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the saving balance of the account with the highest checking balance.",
        "query": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T3.balance",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "JOIN",
            "savings",
            "AS",
            "T3",
            "ON",
            "T1.custid",
            "=",
            "T3.custid",
            "ORDER",
            "BY",
            "T2.balance",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "What is the savings balance of the account belonging to the customer with the highest checking balance?",
        "query": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T3.balance",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "JOIN",
            "savings",
            "AS",
            "T3",
            "ON",
            "T1.custid",
            "=",
            "T3.custid",
            "ORDER",
            "BY",
            "T2.balance",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the total checking and saving balance of all accounts sorted by the total balance in ascending order.",
        "query": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance",
        "query_toks": [
            "SELECT",
            "T1.balance",
            "+",
            "T2.balance",
            "FROM",
            "checking",
            "AS",
            "T1",
            "JOIN",
            "savings",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "ORDER",
            "BY",
            "T1.balance",
            "+",
            "T2.balance"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "What is the sum of checking and savings balances for all customers, ordered by the total balance?",
        "query": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance",
        "query_toks": [
            "SELECT",
            "T1.balance",
            "+",
            "T2.balance",
            "FROM",
            "checking",
            "AS",
            "T1",
            "JOIN",
            "savings",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "ORDER",
            "BY",
            "T1.balance",
            "+",
            "T2.balance"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the name and checking balance of the account with the lowest saving balance.",
        "query": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.balance",
            ",",
            "T1.name",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "JOIN",
            "savings",
            "AS",
            "T3",
            "ON",
            "T1.custid",
            "=",
            "T3.custid",
            "ORDER",
            "BY",
            "T3.balance",
            "LIMIT",
            "1"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "What is the name and checking balance of the account which has the lowest savings balance?",
        "query": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.balance",
            ",",
            "T1.name",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "JOIN",
            "savings",
            "AS",
            "T3",
            "ON",
            "T1.custid",
            "=",
            "T3.custid",
            "ORDER",
            "BY",
            "T3.balance",
            "LIMIT",
            "1"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the name, checking balance and saving balance of all accounts in the bank.",
        "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
        "query_toks": [
            "SELECT",
            "T2.balance",
            ",",
            "T3.balance",
            ",",
            "T1.name",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "JOIN",
            "savings",
            "AS",
            "T3",
            "ON",
            "T1.custid",
            "=",
            "T3.custid"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "What are the names, checking balances, and savings balances for all customers?",
        "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
        "query_toks": [
            "SELECT",
            "T2.balance",
            ",",
            "T3.balance",
            ",",
            "T1.name",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "JOIN",
            "savings",
            "AS",
            "T3",
            "ON",
            "T1.custid",
            "=",
            "T3.custid"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.",
        "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC",
        "query_toks": [
            "SELECT",
            "T2.balance",
            ",",
            "T3.balance",
            ",",
            "T1.name",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "JOIN",
            "savings",
            "AS",
            "T3",
            "ON",
            "T1.custid",
            "=",
            "T3.custid",
            "ORDER",
            "BY",
            "T2.balance",
            "+",
            "T3.balance",
            "DESC"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "What are the names, checking balances, and savings balances of customers, ordered by the total of checking and savings balances descending?",
        "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC",
        "query_toks": [
            "SELECT",
            "T2.balance",
            ",",
            "T3.balance",
            ",",
            "T1.name",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "JOIN",
            "savings",
            "AS",
            "T3",
            "ON",
            "T1.custid",
            "=",
            "T3.custid",
            "ORDER",
            "BY",
            "T2.balance",
            "+",
            "T3.balance",
            "DESC"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the name of accounts whose checking balance is higher than corresponding saving balance.",
        "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "JOIN",
            "savings",
            "AS",
            "T3",
            "ON",
            "T1.custid",
            "=",
            "T3.custid",
            "WHERE",
            "T2.balance",
            ">",
            "T3.balance"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "What are the names of customers with a higher checking balance than savings balance?",
        "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "JOIN",
            "savings",
            "AS",
            "T3",
            "ON",
            "T1.custid",
            "=",
            "T3.custid",
            "WHERE",
            "T2.balance",
            ">",
            "T3.balance"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.",
        "query": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "query_toks": [
            "SELECT",
            "T1.name",
            ",",
            "T3.balance",
            "+",
            "T2.balance",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "JOIN",
            "savings",
            "AS",
            "T3",
            "ON",
            "T1.custid",
            "=",
            "T3.custid",
            "WHERE",
            "T3.balance",
            "<",
            "T2.balance"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?",
        "query": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "query_toks": [
            "SELECT",
            "T1.name",
            ",",
            "T3.balance",
            "+",
            "T2.balance",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "checking",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "JOIN",
            "savings",
            "AS",
            "T3",
            "ON",
            "T1.custid",
            "=",
            "T3.custid",
            "WHERE",
            "T3.balance",
            "<",
            "T2.balance"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.",
        "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3",
        "query_toks": [
            "SELECT",
            "T1.name",
            ",",
            "T2.balance",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "savings",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "ORDER",
            "BY",
            "T2.balance",
            "DESC",
            "LIMIT",
            "3"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "What are names and savings balances of the three accounts with the highest savings balances?",
        "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3",
        "query_toks": [
            "SELECT",
            "T1.name",
            ",",
            "T2.balance",
            "FROM",
            "accounts",
            "AS",
            "T1",
            "JOIN",
            "savings",
            "AS",
            "T2",
            "ON",
            "T1.custid",
            "=",
            "T2.custid",
            "ORDER",
            "BY",
            "T2.balance",
            "DESC",
            "LIMIT",
            "3"
        ],
        "db_id": "small_bank_1"
    },
    {
        "question": "Are the customers holding coupons with amount 500 bad or good?",
        "query": "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.coupon_amount  =  500",
        "query_toks": [
            "SELECT",
            "T1.good_or_bad_customer",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "discount_coupons",
            "AS",
            "T2",
            "ON",
            "T1.coupon_id",
            "=",
            "T2.coupon_id",
            "WHERE",
            "T2.coupon_amount",
            "=",
            "500"
        ],
        "db_id": "products_for_hire"
    },
    {
        "question": "How many bookings did each customer make? List the customer id, first name, and the count.",
        "query": "SELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
        "query_toks": [
            "SELECT",
            "T1.customer_id",
            ",",
            "T1.first_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers",
            "AS",
            "T1",
            "JOIN",
            "bookings",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id"
        ],
        "db_id": "products_for_hire"
    },
    {
        "question": "What is the maximum total amount paid by a customer? List the customer id and amount.",
        "query": "SELECT customer_id ,  sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "customer_id",
            ",",
            "sum",
            "(",
            "amount_paid",
            ")",
            "FROM",
            "Payments",
            "GROUP",
            "BY",
            "customer_id",
            "ORDER",
            "BY",
            "sum",
            "(",
            "amount_paid",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "products_for_hire"
    },
    {
        "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?",
        "query": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.booking_id",
            ",",
            "T1.amount_of_refund",
            "FROM",
            "Bookings",
            "AS",
            "T1",
            "JOIN",
            "Payments",
            "AS",
            "T2",
            "ON",
            "T1.booking_id",
            "=",
            "T2.booking_id",
            "GROUP",
            "BY",
            "T1.booking_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "products_for_hire"
    },
    {
        "question": "What is the id of the product that is booked for 3 times?",
        "query": "SELECT product_id FROM products_booked GROUP BY product_id HAVING count(*)  =  3",
        "query_toks": [
            "SELECT",
            "product_id",
            "FROM",
            "products_booked",
            "GROUP",
            "BY",
            "product_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "3"
        ],
        "db_id": "products_for_hire"
    },
    {
        "question": "What is the product description of the product booked with an amount of 102.76?",
        "query": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76",
        "query_toks": [
            "SELECT",
            "T2.product_description",
            "FROM",
            "products_booked",
            "AS",
            "T1",
            "JOIN",
            "products_for_hire",
            "AS",
            "T2",
            "ON",
            "T1.product_id",
            "=",
            "T2.product_id",
            "WHERE",
            "T1.booked_amount",
            "=",
            "102.76"
        ],
        "db_id": "products_for_hire"
    },
    {
        "question": "What are the start date and end date of the booking that has booked the product named 'Book collection A'?",
        "query": "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'",
        "query_toks": [
            "SELECT",
            "T3.booking_start_date",
            ",",
            "T3.booking_end_date",
            "FROM",
            "Products_for_hire",
            "AS",
            "T1",
            "JOIN",
            "products_booked",
            "AS",
            "T2",
            "ON",
            "T1.product_id",
            "=",
            "T2.product_id",
            "JOIN",
            "bookings",
            "AS",
            "T3",
            "ON",
            "T2.booking_id",
            "=",
            "T3.booking_id",
            "WHERE",
            "T1.product_name",
            "=",
            "'Book",
            "collection",
            "A",
            "'"
        ],
        "db_id": "products_for_hire"
    },
    {
        "question": "What are the names of products whose availability equals to 1?",
        "query": "SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.available_yn  =  1",
        "query_toks": [
            "SELECT",
            "T2.product_name",
            "FROM",
            "view_product_availability",
            "AS",
            "T1",
            "JOIN",
            "products_for_hire",
            "AS",
            "T2",
            "ON",
            "T1.product_id",
            "=",
            "T2.product_id",
            "WHERE",
            "T1.available_yn",
            "=",
            "1"
        ],
        "db_id": "products_for_hire"
    },
    {
        "question": "How many different product types are there?",
        "query": "SELECT count(DISTINCT product_type_code) FROM products_for_hire",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "product_type_code",
            ")",
            "FROM",
            "products_for_hire"
        ],
        "db_id": "products_for_hire"
    },
    {
        "question": "What are the first name, last name, and gender of all the good customers? Order by their last name.",
        "query": "SELECT first_name ,  last_name ,  gender_mf FROM customers WHERE good_or_bad_customer  =  'good' ORDER BY last_name",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "gender_mf",
            "FROM",
            "customers",
            "WHERE",
            "good_or_bad_customer",
            "=",
            "'good",
            "'",
            "ORDER",
            "BY",
            "last_name"
        ],
        "db_id": "products_for_hire"
    },
    {
        "question": "What is the average amount due for all the payments?",
        "query": "SELECT avg(amount_due) FROM payments",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "amount_due",
            ")",
            "FROM",
            "payments"
        ],
        "db_id": "products_for_hire"
    },
    {
        "question": "What are the maximum, minimum, and average booked count for the products booked?",
        "query": "SELECT max(booked_count) ,  min(booked_count) ,  avg(booked_count) FROM products_booked",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "booked_count",
            ")",
            ",",
            "min",
            "(",
            "booked_count",
            ")",
            ",",
            "avg",
            "(",
            "booked_count",
            ")",
            "FROM",
            "products_booked"
        ],
        "db_id": "products_for_hire"
    },
    {
        "question": "What are all the distinct payment types?",
        "query": "SELECT DISTINCT payment_type_code FROM payments",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "payment_type_code",
            "FROM",
            "payments"
        ],
        "db_id": "products_for_hire"
    },
    {
        "question": "What are the daily hire costs for the products with substring 'Book' in its name?",
        "query": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'",
        "query_toks": [
            "SELECT",
            "daily_hire_cost",
            "FROM",
            "Products_for_hire",
            "WHERE",
            "product_name",
            "LIKE",
            "'",
            "%",
            "Book",
            "%",
            "'"
        ],
        "db_id": "products_for_hire"
    },
    {
        "question": "How many products are never booked with amount higher than 200?",
        "query": "SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount  >  200 )",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Products_for_hire",
            "WHERE",
            "product_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "product_id",
            "FROM",
            "products_booked",
            "WHERE",
            "booked_amount",
            ">",
            "200",
            ")"
        ],
        "db_id": "products_for_hire"
    },
    {
        "question": "What are the coupon amount of the coupons owned by both good and bad customers?",
        "query": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'",
        "query_toks": [
            "SELECT",
            "T1.coupon_amount",
            "FROM",
            "Discount_Coupons",
            "AS",
            "T1",
            "JOIN",
            "customers",
            "AS",
            "T2",
            "ON",
            "T1.coupon_id",
            "=",
            "T2.coupon_id",
            "WHERE",
            "T2.good_or_bad_customer",
            "=",
            "'good",
            "'",
            "INTERSECT",
            "SELECT",
            "T1.coupon_amount",
            "FROM",
            "Discount_Coupons",
            "AS",
            "T1",
            "JOIN",
            "customers",
            "AS",
            "T2",
            "ON",
            "T1.coupon_id",
            "=",
            "T2.coupon_id",
            "WHERE",
            "T2.good_or_bad_customer",
            "=",
            "'bad",
            "'"
        ],
        "db_id": "products_for_hire"
    },
    {
        "question": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'",
        "query": "SELECT payment_date FROM payments WHERE amount_paid  >  300 OR payment_type_code  =  'Check'",
        "query_toks": [
            "SELECT",
            "payment_date",
            "FROM",
            "payments",
            "WHERE",
            "amount_paid",
            ">",
            "300",
            "OR",
            "payment_type_code",
            "=",
            "'Check",
            "'"
        ],
        "db_id": "products_for_hire"
    },
    {
        "question": "What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?",
        "query": "SELECT product_name ,  product_description FROM products_for_hire WHERE product_type_code  =  'Cutlery' AND daily_hire_cost  <  20",
        "query_toks": [
            "SELECT",
            "product_name",
            ",",
            "product_description",
            "FROM",
            "products_for_hire",
            "WHERE",
            "product_type_code",
            "=",
            "'Cutlery",
            "'",
            "AND",
            "daily_hire_cost",
            "<",
            "20"
        ],
        "db_id": "products_for_hire"
    },
    {
        "question": "How many phones are there?",
        "query": "SELECT count(*) FROM phone",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "phone"
        ],
        "db_id": "phone_market"
    },
    {
        "question": "List the names of phones in ascending order of price.",
        "query": "SELECT Name FROM phone ORDER BY Price ASC",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "phone",
            "ORDER",
            "BY",
            "Price",
            "ASC"
        ],
        "db_id": "phone_market"
    },
    {
        "question": "What are the memories and carriers of phones?",
        "query": "SELECT Memory_in_G ,  Carrier FROM phone",
        "query_toks": [
            "SELECT",
            "Memory_in_G",
            ",",
            "Carrier",
            "FROM",
            "phone"
        ],
        "db_id": "phone_market"
    },
    {
        "question": "List the distinct carriers of phones with memories bigger than 32.",
        "query": "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  32",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "Carrier",
            "FROM",
            "phone",
            "WHERE",
            "Memory_in_G",
            ">",
            "32"
        ],
        "db_id": "phone_market"
    },
    {
        "question": "Show the names of phones with carrier either \"Sprint\" or \"TMobile\".",
        "query": "SELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\"",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "phone",
            "WHERE",
            "Carrier",
            "=",
            "``",
            "Sprint",
            "''",
            "OR",
            "Carrier",
            "=",
            "``",
            "TMobile",
            "''"
        ],
        "db_id": "phone_market"
    },
    {
        "question": "What is the carrier of the most expensive phone?",
        "query": "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Carrier",
            "FROM",
            "phone",
            "ORDER",
            "BY",
            "Price",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "phone_market"
    },
    {
        "question": "Show different carriers of phones together with the number of phones with each carrier.",
        "query": "SELECT Carrier ,  COUNT(*) FROM phone GROUP BY Carrier",
        "query_toks": [
            "SELECT",
            "Carrier",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "phone",
            "GROUP",
            "BY",
            "Carrier"
        ],
        "db_id": "phone_market"
    },
    {
        "question": "Show the most frequently used carrier of the phones.",
        "query": "SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Carrier",
            "FROM",
            "phone",
            "GROUP",
            "BY",
            "Carrier",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "phone_market"
    },
    {
        "question": "Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64.",
        "query": "SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64",
        "query_toks": [
            "SELECT",
            "Carrier",
            "FROM",
            "phone",
            "WHERE",
            "Memory_in_G",
            "<",
            "32",
            "INTERSECT",
            "SELECT",
            "Carrier",
            "FROM",
            "phone",
            "WHERE",
            "Memory_in_G",
            ">",
            "64"
        ],
        "db_id": "phone_market"
    },
    {
        "question": "Show the names of phones and the districts of markets they are on.",
        "query": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID",
        "query_toks": [
            "SELECT",
            "T3.Name",
            ",",
            "T2.District",
            "FROM",
            "phone_market",
            "AS",
            "T1",
            "JOIN",
            "market",
            "AS",
            "T2",
            "ON",
            "T1.Market_ID",
            "=",
            "T2.Market_ID",
            "JOIN",
            "phone",
            "AS",
            "T3",
            "ON",
            "T1.Phone_ID",
            "=",
            "T3.Phone_ID"
        ],
        "db_id": "phone_market"
    },
    {
        "question": "Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market.",
        "query": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID ORDER BY T2.Ranking",
        "query_toks": [
            "SELECT",
            "T3.Name",
            ",",
            "T2.District",
            "FROM",
            "phone_market",
            "AS",
            "T1",
            "JOIN",
            "market",
            "AS",
            "T2",
            "ON",
            "T1.Market_ID",
            "=",
            "T2.Market_ID",
            "JOIN",
            "phone",
            "AS",
            "T3",
            "ON",
            "T1.Phone_ID",
            "=",
            "T3.Phone_ID",
            "ORDER",
            "BY",
            "T2.Ranking"
        ],
        "db_id": "phone_market"
    },
    {
        "question": "Show the names of phones that are on market with number of shops greater than 50.",
        "query": "SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID WHERE T2.Num_of_shops  >  50",
        "query_toks": [
            "SELECT",
            "T3.Name",
            "FROM",
            "phone_market",
            "AS",
            "T1",
            "JOIN",
            "market",
            "AS",
            "T2",
            "ON",
            "T1.Market_ID",
            "=",
            "T2.Market_ID",
            "JOIN",
            "phone",
            "AS",
            "T3",
            "ON",
            "T1.Phone_ID",
            "=",
            "T3.Phone_ID",
            "WHERE",
            "T2.Num_of_shops",
            ">",
            "50"
        ],
        "db_id": "phone_market"
    },
    {
        "question": "For each phone, show its names and total number of stocks.",
        "query": "SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name",
        "query_toks": [
            "SELECT",
            "T2.Name",
            ",",
            "sum",
            "(",
            "T1.Num_of_stock",
            ")",
            "FROM",
            "phone_market",
            "AS",
            "T1",
            "JOIN",
            "phone",
            "AS",
            "T2",
            "ON",
            "T1.Phone_ID",
            "=",
            "T2.Phone_ID",
            "GROUP",
            "BY",
            "T2.Name"
        ],
        "db_id": "phone_market"
    },
    {
        "question": "Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.",
        "query": "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC",
        "query_toks": [
            "SELECT",
            "T2.Name",
            "FROM",
            "phone_market",
            "AS",
            "T1",
            "JOIN",
            "phone",
            "AS",
            "T2",
            "ON",
            "T1.Phone_ID",
            "=",
            "T2.Phone_ID",
            "GROUP",
            "BY",
            "T2.Name",
            "HAVING",
            "sum",
            "(",
            "T1.Num_of_stock",
            ")",
            ">",
            "=",
            "2000",
            "ORDER",
            "BY",
            "sum",
            "(",
            "T1.Num_of_stock",
            ")",
            "DESC"
        ],
        "db_id": "phone_market"
    },
    {
        "question": "List the names of phones that are not on any market.",
        "query": "SELECT Name FROM phone WHERE Phone_id NOT IN (SELECT Phone_ID FROM phone_market)",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "phone",
            "WHERE",
            "Phone_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "Phone_ID",
            "FROM",
            "phone_market",
            ")"
        ],
        "db_id": "phone_market"
    },
    {
        "question": "How many gas companies are there?",
        "query": "SELECT count(*) FROM company",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "company"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "What is the total number of companies?",
        "query": "SELECT count(*) FROM company",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "company"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "List the company name and rank for all companies in the decreasing order of their sales.",
        "query": "SELECT company ,  rank FROM company ORDER BY Sales_billion DESC",
        "query_toks": [
            "SELECT",
            "company",
            ",",
            "rank",
            "FROM",
            "company",
            "ORDER",
            "BY",
            "Sales_billion",
            "DESC"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "What is the name and rank of every company ordered by descending number of sales?",
        "query": "SELECT company ,  rank FROM company ORDER BY Sales_billion DESC",
        "query_toks": [
            "SELECT",
            "company",
            ",",
            "rank",
            "FROM",
            "company",
            "ORDER",
            "BY",
            "Sales_billion",
            "DESC"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "Show the company name and the main industry for all companies whose headquarters are not from USA.",
        "query": "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'",
        "query_toks": [
            "SELECT",
            "company",
            ",",
            "main_industry",
            "FROM",
            "company",
            "WHERE",
            "headquarters",
            "!",
            "=",
            "'USA",
            "'"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "What are the companies and main industries of all companies that are not headquartered in the United States?",
        "query": "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'",
        "query_toks": [
            "SELECT",
            "company",
            ",",
            "main_industry",
            "FROM",
            "company",
            "WHERE",
            "headquarters",
            "!",
            "=",
            "'USA",
            "'"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "Show all company names and headquarters in the descending order of market value.",
        "query": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC",
        "query_toks": [
            "SELECT",
            "company",
            ",",
            "headquarters",
            "FROM",
            "company",
            "ORDER",
            "BY",
            "market_value",
            "DESC"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "What are the names and headquarters of all companies ordered by descending market value?",
        "query": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC",
        "query_toks": [
            "SELECT",
            "company",
            ",",
            "headquarters",
            "FROM",
            "company",
            "ORDER",
            "BY",
            "market_value",
            "DESC"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "Show minimum, maximum, and average market value for all companies.",
        "query": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company",
        "query_toks": [
            "SELECT",
            "min",
            "(",
            "market_value",
            ")",
            ",",
            "max",
            "(",
            "market_value",
            ")",
            ",",
            "avg",
            "(",
            "market_value",
            ")",
            "FROM",
            "company"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "What is the minimum, maximum, and average market value for every company?",
        "query": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company",
        "query_toks": [
            "SELECT",
            "min",
            "(",
            "market_value",
            ")",
            ",",
            "max",
            "(",
            "market_value",
            ")",
            ",",
            "avg",
            "(",
            "market_value",
            ")",
            "FROM",
            "company"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "Show all main industry for all companies.",
        "query": "SELECT DISTINCT main_industry FROM company",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "main_industry",
            "FROM",
            "company"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "What are the different main industries for all companies?",
        "query": "SELECT DISTINCT main_industry FROM company",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "main_industry",
            "FROM",
            "company"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "List all headquarters and the number of companies in each headquarter.",
        "query": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters",
        "query_toks": [
            "SELECT",
            "headquarters",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "company",
            "GROUP",
            "BY",
            "headquarters"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "For each headquarter, what are the headquarter and how many companies are centered there?",
        "query": "SELECT headquarters ,  count(*) FROM company GROUP BY headquarters",
        "query_toks": [
            "SELECT",
            "headquarters",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "company",
            "GROUP",
            "BY",
            "headquarters"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "Show all main industry and total market value in each industry.",
        "query": "SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry",
        "query_toks": [
            "SELECT",
            "main_industry",
            ",",
            "sum",
            "(",
            "market_value",
            ")",
            "FROM",
            "company",
            "GROUP",
            "BY",
            "main_industry"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "What are the main indstries and total market value for each industry?",
        "query": "SELECT main_industry ,  sum(market_value) FROM company GROUP BY main_industry",
        "query_toks": [
            "SELECT",
            "main_industry",
            ",",
            "sum",
            "(",
            "market_value",
            ")",
            "FROM",
            "company",
            "GROUP",
            "BY",
            "main_industry"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "List the main industry with highest total market value and its number of companies.",
        "query": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "main_industry",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "company",
            "GROUP",
            "BY",
            "main_industry",
            "ORDER",
            "BY",
            "sum",
            "(",
            "market_value",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "For each main industry, what is the total number of companies for the industry with the highest total market value?",
        "query": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "main_industry",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "company",
            "GROUP",
            "BY",
            "main_industry",
            "ORDER",
            "BY",
            "sum",
            "(",
            "market_value",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "Show headquarters with at least two companies in the banking industry.",
        "query": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2",
        "query_toks": [
            "SELECT",
            "headquarters",
            "FROM",
            "company",
            "WHERE",
            "main_industry",
            "=",
            "'Banking",
            "'",
            "GROUP",
            "BY",
            "headquarters",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "What are the headquarters with at least two companies in the banking industry?",
        "query": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2",
        "query_toks": [
            "SELECT",
            "headquarters",
            "FROM",
            "company",
            "WHERE",
            "main_industry",
            "=",
            "'Banking",
            "'",
            "GROUP",
            "BY",
            "headquarters",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "Show gas station id, location, and manager_name for all gas stations ordered by open year.",
        "query": "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year",
        "query_toks": [
            "SELECT",
            "station_id",
            ",",
            "LOCATION",
            ",",
            "manager_name",
            "FROM",
            "gas_station",
            "ORDER",
            "BY",
            "open_year"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "What are the gas station ids, locations, and manager names for the gas stations ordered by opening year?",
        "query": "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year",
        "query_toks": [
            "SELECT",
            "station_id",
            ",",
            "LOCATION",
            ",",
            "manager_name",
            "FROM",
            "gas_station",
            "ORDER",
            "BY",
            "open_year"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "How many gas station are opened between 2000 and 2005?",
        "query": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "gas_station",
            "WHERE",
            "open_year",
            "BETWEEN",
            "2000",
            "AND",
            "2005"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "What is the total number of gas stations that opened between 2000 and 2005?",
        "query": "SELECT count(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "gas_station",
            "WHERE",
            "open_year",
            "BETWEEN",
            "2000",
            "AND",
            "2005"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "Show all locations and the number of gas stations in each location ordered by the count.",
        "query": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)",
        "query_toks": [
            "SELECT",
            "LOCATION",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "gas_station",
            "GROUP",
            "BY",
            "LOCATION",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "For each location, how many gas stations are there in order?",
        "query": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)",
        "query_toks": [
            "SELECT",
            "LOCATION",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "gas_station",
            "GROUP",
            "BY",
            "LOCATION",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "Show all headquarters with both a company in banking industry and a company in Oil and gas.",
        "query": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'",
        "query_toks": [
            "SELECT",
            "headquarters",
            "FROM",
            "company",
            "WHERE",
            "main_industry",
            "=",
            "'Banking",
            "'",
            "INTERSECT",
            "SELECT",
            "headquarters",
            "FROM",
            "company",
            "WHERE",
            "main_industry",
            "=",
            "'Oil",
            "and",
            "gas",
            "'"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "What are the headquarters that have both a company in the banking and 'oil and gas' industries?",
        "query": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'",
        "query_toks": [
            "SELECT",
            "headquarters",
            "FROM",
            "company",
            "WHERE",
            "main_industry",
            "=",
            "'Banking",
            "'",
            "INTERSECT",
            "SELECT",
            "headquarters",
            "FROM",
            "company",
            "WHERE",
            "main_industry",
            "=",
            "'Oil",
            "and",
            "gas",
            "'"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "Show all headquarters without a company in banking industry.",
        "query": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'",
        "query_toks": [
            "SELECT",
            "headquarters",
            "FROM",
            "company",
            "EXCEPT",
            "SELECT",
            "headquarters",
            "FROM",
            "company",
            "WHERE",
            "main_industry",
            "=",
            "'Banking",
            "'"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "What are the headquarters without companies that are in the banking industry?",
        "query": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'",
        "query_toks": [
            "SELECT",
            "headquarters",
            "FROM",
            "company",
            "EXCEPT",
            "SELECT",
            "headquarters",
            "FROM",
            "company",
            "WHERE",
            "main_industry",
            "=",
            "'Banking",
            "'"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "Show the company name with the number of gas station.",
        "query": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id",
        "query_toks": [
            "SELECT",
            "T2.company",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "station_company",
            "AS",
            "T1",
            "JOIN",
            "company",
            "AS",
            "T2",
            "ON",
            "T1.company_id",
            "=",
            "T2.company_id",
            "GROUP",
            "BY",
            "T1.company_id"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "For each company id, what are the companies and how many gas stations does each one operate?",
        "query": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id",
        "query_toks": [
            "SELECT",
            "T2.company",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "station_company",
            "AS",
            "T1",
            "JOIN",
            "company",
            "AS",
            "T2",
            "ON",
            "T1.company_id",
            "=",
            "T2.company_id",
            "GROUP",
            "BY",
            "T1.company_id"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "Show company name and main industry without a gas station.",
        "query": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "query_toks": [
            "SELECT",
            "company",
            ",",
            "main_industry",
            "FROM",
            "company",
            "WHERE",
            "company_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "company_id",
            "FROM",
            "station_company",
            ")"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "What are the main industries of the companies without gas stations and what are the companies?",
        "query": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "query_toks": [
            "SELECT",
            "company",
            ",",
            "main_industry",
            "FROM",
            "company",
            "WHERE",
            "company_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "company_id",
            "FROM",
            "station_company",
            ")"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "Show the manager name for gas stations belonging to the ExxonMobil company.",
        "query": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'",
        "query_toks": [
            "SELECT",
            "T3.manager_name",
            "FROM",
            "station_company",
            "AS",
            "T1",
            "JOIN",
            "company",
            "AS",
            "T2",
            "ON",
            "T1.company_id",
            "=",
            "T2.company_id",
            "JOIN",
            "gas_station",
            "AS",
            "T3",
            "ON",
            "T1.station_id",
            "=",
            "T3.station_id",
            "WHERE",
            "T2.company",
            "=",
            "'ExxonMobil",
            "'"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "What are the names of the managers for gas stations that are operated by the ExxonMobil company?",
        "query": "SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.company  =  'ExxonMobil'",
        "query_toks": [
            "SELECT",
            "T3.manager_name",
            "FROM",
            "station_company",
            "AS",
            "T1",
            "JOIN",
            "company",
            "AS",
            "T2",
            "ON",
            "T1.company_id",
            "=",
            "T2.company_id",
            "JOIN",
            "gas_station",
            "AS",
            "T3",
            "ON",
            "T1.station_id",
            "=",
            "T3.station_id",
            "WHERE",
            "T2.company",
            "=",
            "'ExxonMobil",
            "'"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "Show all locations where a gas station for company with market value greater than 100 is located.",
        "query": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100",
        "query_toks": [
            "SELECT",
            "T3.location",
            "FROM",
            "station_company",
            "AS",
            "T1",
            "JOIN",
            "company",
            "AS",
            "T2",
            "ON",
            "T1.company_id",
            "=",
            "T2.company_id",
            "JOIN",
            "gas_station",
            "AS",
            "T3",
            "ON",
            "T1.station_id",
            "=",
            "T3.station_id",
            "WHERE",
            "T2.market_value",
            ">",
            "100"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "What are the locations that have gas stations owned by a company with a market value greater than 100?",
        "query": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100",
        "query_toks": [
            "SELECT",
            "T3.location",
            "FROM",
            "station_company",
            "AS",
            "T1",
            "JOIN",
            "company",
            "AS",
            "T2",
            "ON",
            "T1.company_id",
            "=",
            "T2.company_id",
            "JOIN",
            "gas_station",
            "AS",
            "T3",
            "ON",
            "T1.station_id",
            "=",
            "T3.station_id",
            "WHERE",
            "T2.market_value",
            ">",
            "100"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "Show the manager name with most number of gas stations opened after 2000.",
        "query": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "manager_name",
            "FROM",
            "gas_station",
            "WHERE",
            "open_year",
            ">",
            "2000",
            "GROUP",
            "BY",
            "manager_name",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "What is the name of the manager with the most gas stations that opened after 2000?",
        "query": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "manager_name",
            "FROM",
            "gas_station",
            "WHERE",
            "open_year",
            ">",
            "2000",
            "GROUP",
            "BY",
            "manager_name",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "order all gas station locations by the opening year.",
        "query": "SELECT LOCATION FROM gas_station ORDER BY open_year",
        "query_toks": [
            "SELECT",
            "LOCATION",
            "FROM",
            "gas_station",
            "ORDER",
            "BY",
            "open_year"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "What are the locations of all the gas stations ordered by opening year?",
        "query": "SELECT LOCATION FROM gas_station ORDER BY open_year",
        "query_toks": [
            "SELECT",
            "LOCATION",
            "FROM",
            "gas_station",
            "ORDER",
            "BY",
            "open_year"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.",
        "query": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion",
        "query_toks": [
            "SELECT",
            "rank",
            ",",
            "company",
            ",",
            "market_value",
            "FROM",
            "company",
            "WHERE",
            "main_industry",
            "=",
            "'Banking",
            "'",
            "ORDER",
            "BY",
            "sales_billion",
            ",",
            "profits_billion"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits?",
        "query": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion",
        "query_toks": [
            "SELECT",
            "rank",
            ",",
            "company",
            ",",
            "market_value",
            "FROM",
            "company",
            "WHERE",
            "main_industry",
            "=",
            "'Banking",
            "'",
            "ORDER",
            "BY",
            "sales_billion",
            ",",
            "profits_billion"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.",
        "query": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3",
        "query_toks": [
            "SELECT",
            "T3.location",
            ",",
            "T3.Representative_Name",
            "FROM",
            "station_company",
            "AS",
            "T1",
            "JOIN",
            "company",
            "AS",
            "T2",
            "ON",
            "T1.company_id",
            "=",
            "T2.company_id",
            "JOIN",
            "gas_station",
            "AS",
            "T3",
            "ON",
            "T1.station_id",
            "=",
            "T3.station_id",
            "ORDER",
            "BY",
            "T2.Assets_billion",
            "DESC",
            "LIMIT",
            "3"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets?",
        "query": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3",
        "query_toks": [
            "SELECT",
            "T3.location",
            ",",
            "T3.Representative_Name",
            "FROM",
            "station_company",
            "AS",
            "T1",
            "JOIN",
            "company",
            "AS",
            "T2",
            "ON",
            "T1.company_id",
            "=",
            "T2.company_id",
            "JOIN",
            "gas_station",
            "AS",
            "T3",
            "ON",
            "T1.station_id",
            "=",
            "T3.station_id",
            "ORDER",
            "BY",
            "T2.Assets_billion",
            "DESC",
            "LIMIT",
            "3"
        ],
        "db_id": "gas_company"
    },
    {
        "question": "List all department names ordered by their starting date.",
        "query": "SELECT dname FROM department ORDER BY mgr_start_date",
        "query_toks": [
            "SELECT",
            "dname",
            "FROM",
            "department",
            "ORDER",
            "BY",
            "mgr_start_date"
        ],
        "db_id": "company_1"
    },
    {
        "question": "find all dependent names who have a spouse relation with some employee.",
        "query": "SELECT Dependent_name FROM dependent WHERE relationship  =  'Spouse'",
        "query_toks": [
            "SELECT",
            "Dependent_name",
            "FROM",
            "dependent",
            "WHERE",
            "relationship",
            "=",
            "'Spouse",
            "'"
        ],
        "db_id": "company_1"
    },
    {
        "question": "how many female dependents are there?",
        "query": "SELECT count(*) FROM dependent WHERE sex  =  'F'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "dependent",
            "WHERE",
            "sex",
            "=",
            "'F",
            "'"
        ],
        "db_id": "company_1"
    },
    {
        "question": "Find the names of departments that are located in Houston.",
        "query": "SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber  =  t2.dnumber WHERE t2.dlocation  =  'Houston'",
        "query_toks": [
            "SELECT",
            "t1.dname",
            "FROM",
            "department",
            "AS",
            "t1",
            "JOIN",
            "dept_locations",
            "AS",
            "t2",
            "ON",
            "t1.dnumber",
            "=",
            "t2.dnumber",
            "WHERE",
            "t2.dlocation",
            "=",
            "'Houston",
            "'"
        ],
        "db_id": "company_1"
    },
    {
        "question": "Return the first names and last names of employees who earn more than 30000 in salary.",
        "query": "SELECT fname ,  lname FROM employee WHERE salary  >  30000",
        "query_toks": [
            "SELECT",
            "fname",
            ",",
            "lname",
            "FROM",
            "employee",
            "WHERE",
            "salary",
            ">",
            "30000"
        ],
        "db_id": "company_1"
    },
    {
        "question": "Find the number of employees of each gender whose salary is lower than 50000.",
        "query": "SELECT count(*) ,  sex FROM employee WHERE salary  <  50000 GROUP BY sex",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "sex",
            "FROM",
            "employee",
            "WHERE",
            "salary",
            "<",
            "50000",
            "GROUP",
            "BY",
            "sex"
        ],
        "db_id": "company_1"
    },
    {
        "question": "list the first and last names, and the addresses of all employees in the ascending order of their birth date.",
        "query": "SELECT fname ,  lname ,  address FROM employee ORDER BY Bdate",
        "query_toks": [
            "SELECT",
            "fname",
            ",",
            "lname",
            ",",
            "address",
            "FROM",
            "employee",
            "ORDER",
            "BY",
            "Bdate"
        ],
        "db_id": "company_1"
    },
    {
        "question": "what are the details of the cmi masters that have the cross reference code 'Tax'?",
        "query": "SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T2.source_system_code  =  'Tax'",
        "query_toks": [
            "SELECT",
            "T1.cmi_details",
            "FROM",
            "Customer_Master_Index",
            "AS",
            "T1",
            "JOIN",
            "CMI_Cross_References",
            "AS",
            "T2",
            "ON",
            "T1.master_customer_id",
            "=",
            "T2.master_customer_id",
            "WHERE",
            "T2.source_system_code",
            "=",
            "'Tax",
            "'"
        ],
        "db_id": "local_govt_mdm"
    },
    {
        "question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.",
        "query": "SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1",
        "query_toks": [
            "SELECT",
            "T1.cmi_cross_ref_id",
            ",",
            "T1.source_system_code",
            "FROM",
            "CMI_Cross_References",
            "AS",
            "T1",
            "JOIN",
            "Council_Tax",
            "AS",
            "T2",
            "ON",
            "T1.cmi_cross_ref_id",
            "=",
            "T2.cmi_cross_ref_id",
            "GROUP",
            "BY",
            "T1.cmi_cross_ref_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "1"
        ],
        "db_id": "local_govt_mdm"
    },
    {
        "question": "How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n",
        "query": "SELECT T2.cmi_cross_ref_id ,  T2.master_customer_id ,  count(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id",
        "query_toks": [
            "SELECT",
            "T2.cmi_cross_ref_id",
            ",",
            "T2.master_customer_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Business_Rates",
            "AS",
            "T1",
            "JOIN",
            "CMI_Cross_References",
            "AS",
            "T2",
            "ON",
            "T1.cmi_cross_ref_id",
            "=",
            "T2.cmi_cross_ref_id",
            "GROUP",
            "BY",
            "T2.cmi_cross_ref_id"
        ],
        "db_id": "local_govt_mdm"
    },
    {
        "question": "What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.",
        "query": "SELECT T1.source_system_code ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id ORDER BY T2.council_tax_id",
        "query_toks": [
            "SELECT",
            "T1.source_system_code",
            ",",
            "T2.council_tax_id",
            "FROM",
            "CMI_Cross_References",
            "AS",
            "T1",
            "JOIN",
            "Benefits_Overpayments",
            "AS",
            "T2",
            "ON",
            "T1.cmi_cross_ref_id",
            "=",
            "T2.cmi_cross_ref_id",
            "ORDER",
            "BY",
            "T2.council_tax_id"
        ],
        "db_id": "local_govt_mdm"
    },
    {
        "question": "Wat is the tax source system code and master customer id of the taxes related to each parking fine id?",
        "query": "SELECT T1.source_system_code ,  T1.master_customer_id ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id",
        "query_toks": [
            "SELECT",
            "T1.source_system_code",
            ",",
            "T1.master_customer_id",
            ",",
            "T2.council_tax_id",
            "FROM",
            "CMI_Cross_References",
            "AS",
            "T1",
            "JOIN",
            "Parking_Fines",
            "AS",
            "T2",
            "ON",
            "T1.cmi_cross_ref_id",
            "=",
            "T2.cmi_cross_ref_id"
        ],
        "db_id": "local_govt_mdm"
    },
    {
        "question": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?",
        "query": "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'",
        "query_toks": [
            "SELECT",
            "T1.council_tax_id",
            "FROM",
            "Rent_Arrears",
            "AS",
            "T1",
            "JOIN",
            "CMI_Cross_References",
            "AS",
            "T2",
            "ON",
            "T1.cmi_cross_ref_id",
            "=",
            "T2.cmi_cross_ref_id",
            "JOIN",
            "Customer_Master_Index",
            "AS",
            "T3",
            "ON",
            "T3.master_customer_id",
            "=",
            "T2.master_customer_id",
            "WHERE",
            "T3.cmi_details",
            "!",
            "=",
            "'Schmidt",
            ",",
            "Kertzmann",
            "and",
            "Lubowitz",
            "'"
        ],
        "db_id": "local_govt_mdm"
    },
    {
        "question": "What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?",
        "query": "SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id WHERE T2.source_system_code  =  'Electoral' OR T2.source_system_code  =  'Tax'",
        "query_toks": [
            "SELECT",
            "T1.electoral_register_id",
            "FROM",
            "Electoral_Register",
            "AS",
            "T1",
            "JOIN",
            "CMI_Cross_References",
            "AS",
            "T2",
            "ON",
            "T1.cmi_cross_ref_id",
            "=",
            "T2.cmi_cross_ref_id",
            "WHERE",
            "T2.source_system_code",
            "=",
            "'Electoral",
            "'",
            "OR",
            "T2.source_system_code",
            "=",
            "'Tax",
            "'"
        ],
        "db_id": "local_govt_mdm"
    },
    {
        "question": "How many different source system code for the cmi cross references are there?",
        "query": "SELECT count(DISTINCT source_system_code) FROM CMI_cross_references",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "source_system_code",
            ")",
            "FROM",
            "CMI_cross_references"
        ],
        "db_id": "local_govt_mdm"
    },
    {
        "question": "List all information about customer master index, and sort them by details in descending order.",
        "query": "SELECT * FROM customer_master_index ORDER BY cmi_details DESC",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "customer_master_index",
            "ORDER",
            "BY",
            "cmi_details",
            "DESC"
        ],
        "db_id": "local_govt_mdm"
    },
    {
        "question": "List the council tax ids and their related cmi cross references of all the parking fines.",
        "query": "SELECT council_tax_id ,  cmi_cross_ref_id FROM parking_fines",
        "query_toks": [
            "SELECT",
            "council_tax_id",
            ",",
            "cmi_cross_ref_id",
            "FROM",
            "parking_fines"
        ],
        "db_id": "local_govt_mdm"
    },
    {
        "question": "How many council taxes are collected for renting arrears ?",
        "query": "SELECT count(*) FROM rent_arrears",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "rent_arrears"
        ],
        "db_id": "local_govt_mdm"
    },
    {
        "question": "What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?",
        "query": "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  'Gottlieb ,  Becker and Wyman'",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T2.source_system_code",
            "FROM",
            "customer_master_index",
            "AS",
            "T1",
            "JOIN",
            "cmi_cross_references",
            "AS",
            "T2",
            "ON",
            "T1.master_customer_id",
            "=",
            "T2.master_customer_id",
            "WHERE",
            "T1.cmi_details",
            "=",
            "'Gottlieb",
            ",",
            "Becker",
            "and",
            "Wyman",
            "'"
        ],
        "db_id": "local_govt_mdm"
    },
    {
        "question": "Which cmi cross reference id is not related to any parking taxes?",
        "query": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines",
        "query_toks": [
            "SELECT",
            "cmi_cross_ref_id",
            "FROM",
            "cmi_cross_references",
            "EXCEPT",
            "SELECT",
            "cmi_cross_ref_id",
            "FROM",
            "parking_fines"
        ],
        "db_id": "local_govt_mdm"
    },
    {
        "question": "Which distinct source system code includes the substring 'en'?",
        "query": "SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "source_system_code",
            "FROM",
            "cmi_cross_references",
            "WHERE",
            "source_system_code",
            "LIKE",
            "'",
            "%",
            "en",
            "%",
            "'"
        ],
        "db_id": "local_govt_mdm"
    },
    {
        "question": "Find the ids of orders whose status is 'Success'.",
        "query": "SELECT actual_order_id FROM actual_orders WHERE order_status_code  =  'Success'",
        "query_toks": [
            "SELECT",
            "actual_order_id",
            "FROM",
            "actual_orders",
            "WHERE",
            "order_status_code",
            "=",
            "'Success",
            "'"
        ],
        "db_id": "customer_deliveries"
    },
    {
        "question": "Find the name and price of the product that has been ordered the greatest number of times.",
        "query": "SELECT t1.product_name ,   t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t1.product_name",
            ",",
            "t1.product_price",
            "FROM",
            "products",
            "AS",
            "t1",
            "JOIN",
            "regular_order_products",
            "AS",
            "t2",
            "ON",
            "t1.product_id",
            "=",
            "t2.product_id",
            "GROUP",
            "BY",
            "t2.product_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customer_deliveries"
    },
    {
        "question": "Find the number of customers in total.",
        "query": "SELECT count(*) FROM customers",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "customers"
        ],
        "db_id": "customer_deliveries"
    },
    {
        "question": "How many different payment methods are there?",
        "query": "SELECT count(DISTINCT payment_method) FROM customers",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "payment_method",
            ")",
            "FROM",
            "customers"
        ],
        "db_id": "customer_deliveries"
    },
    {
        "question": "Show the details of all trucks in the order of their license number.",
        "query": "SELECT truck_details FROM trucks ORDER BY truck_licence_number",
        "query_toks": [
            "SELECT",
            "truck_details",
            "FROM",
            "trucks",
            "ORDER",
            "BY",
            "truck_licence_number"
        ],
        "db_id": "customer_deliveries"
    },
    {
        "question": "Find the name of the most expensive product.",
        "query": "SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "product_name",
            "FROM",
            "products",
            "ORDER",
            "BY",
            "product_price",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customer_deliveries"
    },
    {
        "question": "Find the names of customers who are not living in the state of California.",
        "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'",
        "query_toks": [
            "SELECT",
            "customer_name",
            "FROM",
            "customers",
            "EXCEPT",
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_addresses",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "addresses",
            "AS",
            "t3",
            "ON",
            "t2.address_id",
            "=",
            "t3.address_id",
            "WHERE",
            "t3.state_province_county",
            "=",
            "'California",
            "'"
        ],
        "db_id": "customer_deliveries"
    },
    {
        "question": "List the names and emails of customers who payed by Visa card.",
        "query": "SELECT customer_email ,  customer_name FROM customers WHERE payment_method  =  'Visa'",
        "query_toks": [
            "SELECT",
            "customer_email",
            ",",
            "customer_name",
            "FROM",
            "customers",
            "WHERE",
            "payment_method",
            "=",
            "'Visa",
            "'"
        ],
        "db_id": "customer_deliveries"
    },
    {
        "question": "Find the names and phone numbers of customers living in California state.",
        "query": "SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'",
        "query_toks": [
            "SELECT",
            "t1.customer_name",
            ",",
            "t1.customer_phone",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_addresses",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "addresses",
            "AS",
            "t3",
            "ON",
            "t2.address_id",
            "=",
            "t3.address_id",
            "WHERE",
            "t3.state_province_county",
            "=",
            "'California",
            "'"
        ],
        "db_id": "customer_deliveries"
    },
    {
        "question": "Find the states which do not have any employee in their record.",
        "query": "SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees)",
        "query_toks": [
            "SELECT",
            "state_province_county",
            "FROM",
            "addresses",
            "WHERE",
            "address_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "employee_address_id",
            "FROM",
            "Employees",
            ")"
        ],
        "db_id": "customer_deliveries"
    },
    {
        "question": "List the names, phone numbers, and emails of all customers sorted by their dates of becoming customers.",
        "query": "SELECT customer_name ,  customer_phone ,  customer_email FROM Customers ORDER BY date_became_customer",
        "query_toks": [
            "SELECT",
            "customer_name",
            ",",
            "customer_phone",
            ",",
            "customer_email",
            "FROM",
            "Customers",
            "ORDER",
            "BY",
            "date_became_customer"
        ],
        "db_id": "customer_deliveries"
    },
    {
        "question": "Find the name of the first 5 customers.",
        "query": "SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5",
        "query_toks": [
            "SELECT",
            "customer_name",
            "FROM",
            "Customers",
            "ORDER",
            "BY",
            "date_became_customer",
            "LIMIT",
            "5"
        ],
        "db_id": "customer_deliveries"
    },
    {
        "question": "Find the payment method that is used most frequently.",
        "query": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "payment_method",
            "FROM",
            "Customers",
            "GROUP",
            "BY",
            "payment_method",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customer_deliveries"
    },
    {
        "question": "List the names of all routes in alphabetic order.",
        "query": "SELECT route_name FROM Delivery_Routes ORDER BY route_name",
        "query_toks": [
            "SELECT",
            "route_name",
            "FROM",
            "Delivery_Routes",
            "ORDER",
            "BY",
            "route_name"
        ],
        "db_id": "customer_deliveries"
    },
    {
        "question": "Find the name of route that has the highest number of deliveries.",
        "query": "SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t1.route_name",
            "FROM",
            "Delivery_Routes",
            "AS",
            "t1",
            "JOIN",
            "Delivery_Route_Locations",
            "AS",
            "t2",
            "ON",
            "t1.route_id",
            "=",
            "t2.route_id",
            "GROUP",
            "BY",
            "t1.route_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customer_deliveries"
    },
    {
        "question": "List the state names and the number of customers living in each state.",
        "query": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county",
        "query_toks": [
            "SELECT",
            "t2.state_province_county",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "customer_addresses",
            "AS",
            "t1",
            "JOIN",
            "addresses",
            "AS",
            "t2",
            "ON",
            "t1.address_id",
            "=",
            "t2.address_id",
            "GROUP",
            "BY",
            "t2.state_province_county"
        ],
        "db_id": "customer_deliveries"
    },
    {
        "question": "How many different last names do the actors and actresses have?",
        "query": "SELECT count(DISTINCT last_name) FROM actor",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "last_name",
            ")",
            "FROM",
            "actor"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Count the number of different last names actors have.",
        "query": "SELECT count(DISTINCT last_name) FROM actor",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "last_name",
            ")",
            "FROM",
            "actor"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "What is the most popular first name of the actors?",
        "query": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "first_name",
            "FROM",
            "actor",
            "GROUP",
            "BY",
            "first_name",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Return the most common first name among all actors.",
        "query": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "first_name",
            "FROM",
            "actor",
            "GROUP",
            "BY",
            "first_name",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "What is the most popular full name of the actors?",
        "query": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            "FROM",
            "actor",
            "GROUP",
            "BY",
            "first_name",
            ",",
            "last_name",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Return the most common full name among all actors.",
        "query": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            "FROM",
            "actor",
            "GROUP",
            "BY",
            "first_name",
            ",",
            "last_name",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Which districts have at least two addresses?",
        "query": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2",
        "query_toks": [
            "SELECT",
            "district",
            "FROM",
            "address",
            "GROUP",
            "BY",
            "district",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Give the districts which have two or more addresses.",
        "query": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2",
        "query_toks": [
            "SELECT",
            "district",
            "FROM",
            "address",
            "GROUP",
            "BY",
            "district",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "What is the phone number and postal code of the address 1031 Daugavpils Parkway?",
        "query": "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'",
        "query_toks": [
            "SELECT",
            "phone",
            ",",
            "postal_code",
            "FROM",
            "address",
            "WHERE",
            "address",
            "=",
            "'1031",
            "Daugavpils",
            "Parkway",
            "'"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Give the phone and postal code corresponding to the address '1031 Daugavpils Parkway'.",
        "query": "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'",
        "query_toks": [
            "SELECT",
            "phone",
            ",",
            "postal_code",
            "FROM",
            "address",
            "WHERE",
            "address",
            "=",
            "'1031",
            "Daugavpils",
            "Parkway",
            "'"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "query": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.city",
            ",",
            "count",
            "(",
            "*",
            ")",
            ",",
            "T1.city_id",
            "FROM",
            "address",
            "AS",
            "T1",
            "JOIN",
            "city",
            "AS",
            "T2",
            "ON",
            "T1.city_id",
            "=",
            "T2.city_id",
            "GROUP",
            "BY",
            "T1.city_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "What are the city name, id, and number of addresses corresponding to the city with the most addressed?",
        "query": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.city",
            ",",
            "count",
            "(",
            "*",
            ")",
            ",",
            "T1.city_id",
            "FROM",
            "address",
            "AS",
            "T1",
            "JOIN",
            "city",
            "AS",
            "T2",
            "ON",
            "T1.city_id",
            "=",
            "T2.city_id",
            "GROUP",
            "BY",
            "T1.city_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "How many addresses are in the district of California?",
        "query": "SELECT count(*) FROM address WHERE district  =  'California'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "address",
            "WHERE",
            "district",
            "=",
            "'California",
            "'"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Count the number of addressed in the California district.",
        "query": "SELECT count(*) FROM address WHERE district  =  'California'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "address",
            "WHERE",
            "district",
            "=",
            "'California",
            "'"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id.",
        "query": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
        "query_toks": [
            "SELECT",
            "title",
            ",",
            "film_id",
            "FROM",
            "film",
            "WHERE",
            "rental_rate",
            "=",
            "0.99",
            "INTERSECT",
            "SELECT",
            "T1.title",
            ",",
            "T1.film_id",
            "FROM",
            "film",
            "AS",
            "T1",
            "JOIN",
            "inventory",
            "AS",
            "T2",
            "ON",
            "T1.film_id",
            "=",
            "T2.film_id",
            "GROUP",
            "BY",
            "T1.film_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "<",
            "3"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "What are the title and id of the film which has a rental rate of 0.99 and an inventory of below 3?",
        "query": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
        "query_toks": [
            "SELECT",
            "title",
            ",",
            "film_id",
            "FROM",
            "film",
            "WHERE",
            "rental_rate",
            "=",
            "0.99",
            "INTERSECT",
            "SELECT",
            "T1.title",
            ",",
            "T1.film_id",
            "FROM",
            "film",
            "AS",
            "T1",
            "JOIN",
            "inventory",
            "AS",
            "T2",
            "ON",
            "T1.film_id",
            "=",
            "T2.film_id",
            "GROUP",
            "BY",
            "T1.film_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "<",
            "3"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "How many cities are in Australia?",
        "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "city",
            "AS",
            "T1",
            "JOIN",
            "country",
            "AS",
            "T2",
            "ON",
            "T1.country_id",
            "=",
            "T2.country_id",
            "WHERE",
            "T2.country",
            "=",
            "'Australia",
            "'"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Count the number of cities in Australia.",
        "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "city",
            "AS",
            "T1",
            "JOIN",
            "country",
            "AS",
            "T2",
            "ON",
            "T1.country_id",
            "=",
            "T2.country_id",
            "WHERE",
            "T2.country",
            "=",
            "'Australia",
            "'"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Which countries have at least 3 cities?",
        "query": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3",
        "query_toks": [
            "SELECT",
            "T2.country",
            "FROM",
            "city",
            "AS",
            "T1",
            "JOIN",
            "country",
            "AS",
            "T2",
            "ON",
            "T1.country_id",
            "=",
            "T2.country_id",
            "GROUP",
            "BY",
            "T2.country_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "3"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "What are the countries that contain 3 or more cities?",
        "query": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3",
        "query_toks": [
            "SELECT",
            "T2.country",
            "FROM",
            "city",
            "AS",
            "T1",
            "JOIN",
            "country",
            "AS",
            "T2",
            "ON",
            "T1.country_id",
            "=",
            "T2.country_id",
            "GROUP",
            "BY",
            "T2.country_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "3"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Find all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa.",
        "query": "SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'",
        "query_toks": [
            "SELECT",
            "payment_date",
            "FROM",
            "payment",
            "WHERE",
            "amount",
            ">",
            "10",
            "UNION",
            "SELECT",
            "T1.payment_date",
            "FROM",
            "payment",
            "AS",
            "T1",
            "JOIN",
            "staff",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "WHERE",
            "T2.first_name",
            "=",
            "'Elsa",
            "'"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "What are the payment dates for any payments that have an amount greater than 10 or were handled by a staff member with the first name Elsa?",
        "query": "SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'",
        "query_toks": [
            "SELECT",
            "payment_date",
            "FROM",
            "payment",
            "WHERE",
            "amount",
            ">",
            "10",
            "UNION",
            "SELECT",
            "T1.payment_date",
            "FROM",
            "payment",
            "AS",
            "T1",
            "JOIN",
            "staff",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "WHERE",
            "T2.first_name",
            "=",
            "'Elsa",
            "'"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "How many customers have an active value of 1?",
        "query": "SELECT count(*) FROM customer WHERE active = '1'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "customer",
            "WHERE",
            "active",
            "=",
            "'1",
            "'"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Count the number of customers who are active.",
        "query": "SELECT count(*) FROM customer WHERE active = '1'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "customer",
            "WHERE",
            "active",
            "=",
            "'1",
            "'"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Which film has the highest rental rate? And what is the rate?",
        "query": "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "title",
            ",",
            "rental_rate",
            "FROM",
            "film",
            "ORDER",
            "BY",
            "rental_rate",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "What are the title and rental rate of the film with the highest rental rate?",
        "query": "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "title",
            ",",
            "rental_rate",
            "FROM",
            "film",
            "ORDER",
            "BY",
            "rental_rate",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Which film has the most number of actors or actresses? List the film name, film id and description.",
        "query": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.title",
            ",",
            "T2.film_id",
            ",",
            "T2.description",
            "FROM",
            "film_actor",
            "AS",
            "T1",
            "JOIN",
            "film",
            "AS",
            "T2",
            "ON",
            "T1.film_id",
            "=",
            "T2.film_id",
            "GROUP",
            "BY",
            "T2.film_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "What are the title, id, and description of the movie with the greatest number of actors?",
        "query": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.title",
            ",",
            "T2.film_id",
            ",",
            "T2.description",
            "FROM",
            "film_actor",
            "AS",
            "T1",
            "JOIN",
            "film",
            "AS",
            "T2",
            "ON",
            "T1.film_id",
            "=",
            "T2.film_id",
            "GROUP",
            "BY",
            "T2.film_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Which film actor (actress) starred the most films? List his or her first name, last name and actor id.",
        "query": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.first_name",
            ",",
            "T2.last_name",
            ",",
            "T2.actor_id",
            "FROM",
            "film_actor",
            "AS",
            "T1",
            "JOIN",
            "actor",
            "AS",
            "T2",
            "ON",
            "T1.actor_id",
            "=",
            "T2.actor_id",
            "GROUP",
            "BY",
            "T2.actor_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Return the full name and id of the actor or actress who starred in the greatest number of films.",
        "query": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.first_name",
            ",",
            "T2.last_name",
            ",",
            "T2.actor_id",
            "FROM",
            "film_actor",
            "AS",
            "T1",
            "JOIN",
            "actor",
            "AS",
            "T2",
            "ON",
            "T1.actor_id",
            "=",
            "T2.actor_id",
            "GROUP",
            "BY",
            "T2.actor_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.",
        "query": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30",
        "query_toks": [
            "SELECT",
            "T2.first_name",
            ",",
            "T2.last_name",
            "FROM",
            "film_actor",
            "AS",
            "T1",
            "JOIN",
            "actor",
            "AS",
            "T2",
            "ON",
            "T1.actor_id",
            "=",
            "T2.actor_id",
            "GROUP",
            "BY",
            "T2.actor_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "30"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "What are the full names of actors who had roles in more than 30 films?",
        "query": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30",
        "query_toks": [
            "SELECT",
            "T2.first_name",
            ",",
            "T2.last_name",
            "FROM",
            "film_actor",
            "AS",
            "T1",
            "JOIN",
            "actor",
            "AS",
            "T2",
            "ON",
            "T1.actor_id",
            "=",
            "T2.actor_id",
            "GROUP",
            "BY",
            "T2.actor_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "30"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Which store owns most items?",
        "query": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "store_id",
            "FROM",
            "inventory",
            "GROUP",
            "BY",
            "store_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "What is the id of the store that has the most items in inventory?",
        "query": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "store_id",
            "FROM",
            "inventory",
            "GROUP",
            "BY",
            "store_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "What is the total amount of all payments?",
        "query": "SELECT sum(amount) FROM payment",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "amount",
            ")",
            "FROM",
            "payment"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Return the sum of all payment amounts.",
        "query": "SELECT sum(amount) FROM payment",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "amount",
            ")",
            "FROM",
            "payment"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T1.last_name",
            ",",
            "T1.customer_id",
            "FROM",
            "customer",
            "AS",
            "T1",
            "JOIN",
            "payment",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "ORDER",
            "BY",
            "sum",
            "(",
            "amount",
            ")",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "What is the full name and id of the customer who has the lowest total amount of payment?",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T1.last_name",
            ",",
            "T1.customer_id",
            "FROM",
            "customer",
            "AS",
            "T1",
            "JOIN",
            "payment",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "ORDER",
            "BY",
            "sum",
            "(",
            "amount",
            ")",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "What is the genre name of the film HUNGER ROOF?",
        "query": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "category",
            "AS",
            "T1",
            "JOIN",
            "film_category",
            "AS",
            "T2",
            "ON",
            "T1.category_id",
            "=",
            "T2.category_id",
            "JOIN",
            "film",
            "AS",
            "T3",
            "ON",
            "T2.film_id",
            "=",
            "T3.film_id",
            "WHERE",
            "T3.title",
            "=",
            "'HUNGER",
            "ROOF",
            "'"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Return the name of the category to which the film 'HUNGER ROOF' belongs.",
        "query": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'",
        "query_toks": [
            "SELECT",
            "T1.name",
            "FROM",
            "category",
            "AS",
            "T1",
            "JOIN",
            "film_category",
            "AS",
            "T2",
            "ON",
            "T1.category_id",
            "=",
            "T2.category_id",
            "JOIN",
            "film",
            "AS",
            "T3",
            "ON",
            "T2.film_id",
            "=",
            "T3.film_id",
            "WHERE",
            "T3.title",
            "=",
            "'HUNGER",
            "ROOF",
            "'"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "How many films are there in each category? List the genre name, genre id and the count.",
        "query": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id",
        "query_toks": [
            "SELECT",
            "T2.name",
            ",",
            "T1.category_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "film_category",
            "AS",
            "T1",
            "JOIN",
            "category",
            "AS",
            "T2",
            "ON",
            "T1.category_id",
            "=",
            "T2.category_id",
            "GROUP",
            "BY",
            "T1.category_id"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "What are the names and ids of the different categories, and how many films are in each?",
        "query": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id",
        "query_toks": [
            "SELECT",
            "T2.name",
            ",",
            "T1.category_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "film_category",
            "AS",
            "T1",
            "JOIN",
            "category",
            "AS",
            "T2",
            "ON",
            "T1.category_id",
            "=",
            "T2.category_id",
            "GROUP",
            "BY",
            "T1.category_id"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Which film has the most copies in the inventory? List both title and id.",
        "query": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.title",
            ",",
            "T1.film_id",
            "FROM",
            "film",
            "AS",
            "T1",
            "JOIN",
            "inventory",
            "AS",
            "T2",
            "ON",
            "T1.film_id",
            "=",
            "T2.film_id",
            "GROUP",
            "BY",
            "T1.film_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "What is the title and id of the film that has the greatest number of copies in inventory?",
        "query": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.title",
            ",",
            "T1.film_id",
            "FROM",
            "film",
            "AS",
            "T1",
            "JOIN",
            "inventory",
            "AS",
            "T2",
            "ON",
            "T1.film_id",
            "=",
            "T2.film_id",
            "GROUP",
            "BY",
            "T1.film_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "What is the film title and inventory id of the item in the inventory which was rented most frequently?",
        "query": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.title",
            ",",
            "T2.inventory_id",
            "FROM",
            "film",
            "AS",
            "T1",
            "JOIN",
            "inventory",
            "AS",
            "T2",
            "ON",
            "T1.film_id",
            "=",
            "T2.film_id",
            "JOIN",
            "rental",
            "AS",
            "T3",
            "ON",
            "T2.inventory_id",
            "=",
            "T3.inventory_id",
            "GROUP",
            "BY",
            "T2.inventory_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Return the title and inventory id of the film that is rented most often.",
        "query": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.title",
            ",",
            "T2.inventory_id",
            "FROM",
            "film",
            "AS",
            "T1",
            "JOIN",
            "inventory",
            "AS",
            "T2",
            "ON",
            "T1.film_id",
            "=",
            "T2.film_id",
            "JOIN",
            "rental",
            "AS",
            "T3",
            "ON",
            "T2.inventory_id",
            "=",
            "T3.inventory_id",
            "GROUP",
            "BY",
            "T2.inventory_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "How many languages are in these films?",
        "query": "SELECT count(DISTINCT language_id) FROM film",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "language_id",
            ")",
            "FROM",
            "film"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Count the number of different languages in these films.",
        "query": "SELECT count(DISTINCT language_id) FROM film",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "language_id",
            ")",
            "FROM",
            "film"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "What are all the movies rated as R? List the titles.",
        "query": "SELECT title FROM film WHERE rating  =  'R'",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "film",
            "WHERE",
            "rating",
            "=",
            "'R",
            "'"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Return the titles of any movies with an R rating.",
        "query": "SELECT title FROM film WHERE rating  =  'R'",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "film",
            "WHERE",
            "rating",
            "=",
            "'R",
            "'"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Where is store 1 located?",
        "query": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1",
        "query_toks": [
            "SELECT",
            "T2.address",
            "FROM",
            "store",
            "AS",
            "T1",
            "JOIN",
            "address",
            "AS",
            "T2",
            "ON",
            "T1.address_id",
            "=",
            "T2.address_id",
            "WHERE",
            "store_id",
            "=",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Return the address of store 1.",
        "query": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1",
        "query_toks": [
            "SELECT",
            "T2.address",
            "FROM",
            "store",
            "AS",
            "T1",
            "JOIN",
            "address",
            "AS",
            "T2",
            "ON",
            "T1.address_id",
            "=",
            "T2.address_id",
            "WHERE",
            "store_id",
            "=",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Which staff handled least number of payments? List the full name and the id.",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T1.last_name",
            ",",
            "T1.staff_id",
            "FROM",
            "staff",
            "AS",
            "T1",
            "JOIN",
            "payment",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "GROUP",
            "BY",
            "T1.staff_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Give the full name and staff id of the staff who has handled the fewest payments.",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T1.last_name",
            ",",
            "T1.staff_id",
            "FROM",
            "staff",
            "AS",
            "T1",
            "JOIN",
            "payment",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "GROUP",
            "BY",
            "T1.staff_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Which language does the film AIRPORT POLLOCK use? List the language name.",
        "query": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "film",
            "AS",
            "T1",
            "JOIN",
            "LANGUAGE",
            "AS",
            "T2",
            "ON",
            "T1.language_id",
            "=",
            "T2.language_id",
            "WHERE",
            "T1.title",
            "=",
            "'AIRPORT",
            "POLLOCK",
            "'"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "What is the name of the language that the film 'AIRPORT POLLOCK' is in?",
        "query": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "film",
            "AS",
            "T1",
            "JOIN",
            "LANGUAGE",
            "AS",
            "T2",
            "ON",
            "T1.language_id",
            "=",
            "T2.language_id",
            "WHERE",
            "T1.title",
            "=",
            "'AIRPORT",
            "POLLOCK",
            "'"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "How many stores are there?",
        "query": "SELECT count(*) FROM store",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "store"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Count the number of stores.",
        "query": "SELECT count(*) FROM store",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "store"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "How many kinds of different ratings are listed?",
        "query": "SELECT count(DISTINCT rating) FROM film",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "rating",
            ")",
            "FROM",
            "film"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Count the number of different film ratings.",
        "query": "SELECT count(DISTINCT rating) FROM film",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "rating",
            ")",
            "FROM",
            "film"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Which movies have 'Deleted Scenes' as a substring in the special feature?",
        "query": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "film",
            "WHERE",
            "special_features",
            "LIKE",
            "'",
            "%",
            "Deleted",
            "Scenes",
            "%",
            "'"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Return the titles of films that include 'Deleted Scenes' in their special feature section.",
        "query": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "film",
            "WHERE",
            "special_features",
            "LIKE",
            "'",
            "%",
            "Deleted",
            "Scenes",
            "%",
            "'"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "How many items in inventory does store 1 have?",
        "query": "SELECT count(*) FROM inventory WHERE store_id  =  1",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "inventory",
            "WHERE",
            "store_id",
            "=",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Count the number of items store 1 has in stock.",
        "query": "SELECT count(*) FROM inventory WHERE store_id  =  1",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "inventory",
            "WHERE",
            "store_id",
            "=",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "When did the first payment happen?",
        "query": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "payment_date",
            "FROM",
            "payment",
            "ORDER",
            "BY",
            "payment_date",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "What was the date of the earliest payment?",
        "query": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "payment_date",
            "FROM",
            "payment",
            "ORDER",
            "BY",
            "payment_date",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Where does the customer with the first name Linda live? And what is her email?",
        "query": "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'",
        "query_toks": [
            "SELECT",
            "T2.address",
            ",",
            "T1.email",
            "FROM",
            "customer",
            "AS",
            "T1",
            "JOIN",
            "address",
            "AS",
            "T2",
            "ON",
            "T2.address_id",
            "=",
            "T1.address_id",
            "WHERE",
            "T1.first_name",
            "=",
            "'LINDA",
            "'"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Return the address and email of the customer with the first name Linda.",
        "query": "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'",
        "query_toks": [
            "SELECT",
            "T2.address",
            ",",
            "T1.email",
            "FROM",
            "customer",
            "AS",
            "T1",
            "JOIN",
            "address",
            "AS",
            "T2",
            "ON",
            "T2.address_id",
            "=",
            "T1.address_id",
            "WHERE",
            "T1.first_name",
            "=",
            "'LINDA",
            "'"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.",
        "query": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "film",
            "WHERE",
            "LENGTH",
            ">",
            "100",
            "OR",
            "rating",
            "=",
            "'PG",
            "'",
            "EXCEPT",
            "SELECT",
            "title",
            "FROM",
            "film",
            "WHERE",
            "replacement_cost",
            ">",
            "200"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "What are the titles of films that are either longer than 100 minutes or rated PG other than those that cost more than 200 to replace?",
        "query": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200",
        "query_toks": [
            "SELECT",
            "title",
            "FROM",
            "film",
            "WHERE",
            "LENGTH",
            ">",
            "100",
            "OR",
            "rating",
            "=",
            "'PG",
            "'",
            "EXCEPT",
            "SELECT",
            "title",
            "FROM",
            "film",
            "WHERE",
            "replacement_cost",
            ">",
            "200"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "What is the first name and the last name of the customer who made the earliest rental?",
        "query": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T1.last_name",
            "FROM",
            "customer",
            "AS",
            "T1",
            "JOIN",
            "rental",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "ORDER",
            "BY",
            "T2.rental_date",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Return the full name of the customer who made the first rental.",
        "query": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T1.last_name",
            "FROM",
            "customer",
            "AS",
            "T1",
            "JOIN",
            "rental",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "ORDER",
            "BY",
            "T2.rental_date",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns?",
        "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.first_name",
            ",",
            "T1.last_name",
            "FROM",
            "staff",
            "AS",
            "T1",
            "JOIN",
            "rental",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "JOIN",
            "customer",
            "AS",
            "T3",
            "ON",
            "T2.customer_id",
            "=",
            "T3.customer_id",
            "WHERE",
            "T3.first_name",
            "=",
            "'APRIL",
            "'",
            "AND",
            "T3.last_name",
            "=",
            "'BURNS",
            "'"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Return the full name of the staff who provided a customer with the first name April and the last name Burns with a film rental.",
        "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.first_name",
            ",",
            "T1.last_name",
            "FROM",
            "staff",
            "AS",
            "T1",
            "JOIN",
            "rental",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "JOIN",
            "customer",
            "AS",
            "T3",
            "ON",
            "T2.customer_id",
            "=",
            "T3.customer_id",
            "WHERE",
            "T3.first_name",
            "=",
            "'APRIL",
            "'",
            "AND",
            "T3.last_name",
            "=",
            "'BURNS",
            "'"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Which store has most the customers?",
        "query": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "store_id",
            "FROM",
            "customer",
            "GROUP",
            "BY",
            "store_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Return the id of the store with the most customers.",
        "query": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "store_id",
            "FROM",
            "customer",
            "GROUP",
            "BY",
            "store_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "What is the largest payment amount?",
        "query": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "amount",
            "FROM",
            "payment",
            "ORDER",
            "BY",
            "amount",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Return the amount of the largest payment.",
        "query": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "amount",
            "FROM",
            "payment",
            "ORDER",
            "BY",
            "amount",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Where does the staff member with the first name Elsa live?",
        "query": "SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'",
        "query_toks": [
            "SELECT",
            "T2.address",
            "FROM",
            "staff",
            "AS",
            "T1",
            "JOIN",
            "address",
            "AS",
            "T2",
            "ON",
            "T1.address_id",
            "=",
            "T2.address_id",
            "WHERE",
            "T1.first_name",
            "=",
            "'Elsa",
            "'"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Give the address of the staff member who has the first name Elsa.",
        "query": "SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'",
        "query_toks": [
            "SELECT",
            "T2.address",
            "FROM",
            "staff",
            "AS",
            "T1",
            "JOIN",
            "address",
            "AS",
            "T2",
            "ON",
            "T1.address_id",
            "=",
            "T2.address_id",
            "WHERE",
            "T1.first_name",
            "=",
            "'Elsa",
            "'"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?",
        "query": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )",
        "query_toks": [
            "SELECT",
            "first_name",
            "FROM",
            "customer",
            "WHERE",
            "customer_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "customer_id",
            "FROM",
            "rental",
            "WHERE",
            "rental_date",
            ">",
            "'2005-08-23",
            "02:06:01",
            "'",
            ")"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "Return the first names of customers who did not rented a film after the date '2005-08-23 02:06:01'.",
        "query": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )",
        "query_toks": [
            "SELECT",
            "first_name",
            "FROM",
            "customer",
            "WHERE",
            "customer_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "customer_id",
            "FROM",
            "rental",
            "WHERE",
            "rental_date",
            ">",
            "'2005-08-23",
            "02:06:01",
            "'",
            ")"
        ],
        "db_id": "sakila_1"
    },
    {
        "question": "How many bank branches are there?",
        "query": "SELECT count(*) FROM bank",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "bank"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Count the number of bank branches.",
        "query": "SELECT count(*) FROM bank",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "bank"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "How many customers are there?",
        "query": "SELECT sum(no_of_customers) FROM bank",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "no_of_customers",
            ")",
            "FROM",
            "bank"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What is the total number of customers across banks?",
        "query": "SELECT sum(no_of_customers) FROM bank",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "no_of_customers",
            ")",
            "FROM",
            "bank"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the number of customers in the banks at New York City.",
        "query": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "no_of_customers",
            ")",
            "FROM",
            "bank",
            "WHERE",
            "city",
            "=",
            "'New",
            "York",
            "City",
            "'"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What is the total number of customers who use banks in New York City?",
        "query": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "no_of_customers",
            ")",
            "FROM",
            "bank",
            "WHERE",
            "city",
            "=",
            "'New",
            "York",
            "City",
            "'"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the average number of customers in all banks of Utah state.",
        "query": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "no_of_customers",
            ")",
            "FROM",
            "bank",
            "WHERE",
            "state",
            "=",
            "'Utah",
            "'"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What is the average number of customers across banks in the state of Utah?",
        "query": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "no_of_customers",
            ")",
            "FROM",
            "bank",
            "WHERE",
            "state",
            "=",
            "'Utah",
            "'"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the average number of customers cross all banks.",
        "query": "SELECT avg(no_of_customers) FROM bank",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "no_of_customers",
            ")",
            "FROM",
            "bank"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What is the average number of bank customers?",
        "query": "SELECT avg(no_of_customers) FROM bank",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "no_of_customers",
            ")",
            "FROM",
            "bank"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the city and state of the bank branch named morningside.",
        "query": "SELECT city ,  state FROM bank WHERE bname  =  'morningside'",
        "query_toks": [
            "SELECT",
            "city",
            ",",
            "state",
            "FROM",
            "bank",
            "WHERE",
            "bname",
            "=",
            "'morningside",
            "'"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What city and state is the bank with the name morningside in?",
        "query": "SELECT city ,  state FROM bank WHERE bname  =  'morningside'",
        "query_toks": [
            "SELECT",
            "city",
            ",",
            "state",
            "FROM",
            "bank",
            "WHERE",
            "bname",
            "=",
            "'morningside",
            "'"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the branch names of banks in the New York state.",
        "query": "SELECT bname FROM bank WHERE state  =  'New York'",
        "query_toks": [
            "SELECT",
            "bname",
            "FROM",
            "bank",
            "WHERE",
            "state",
            "=",
            "'New",
            "York",
            "'"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What are the names of banks in the state of New York?",
        "query": "SELECT bname FROM bank WHERE state  =  'New York'",
        "query_toks": [
            "SELECT",
            "bname",
            "FROM",
            "bank",
            "WHERE",
            "state",
            "=",
            "'New",
            "York",
            "'"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "List the name of all customers sorted by their account balance in ascending order.",
        "query": "SELECT cust_name FROM customer ORDER BY acc_bal",
        "query_toks": [
            "SELECT",
            "cust_name",
            "FROM",
            "customer",
            "ORDER",
            "BY",
            "acc_bal"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What are the names of all customers, ordered by account balance?",
        "query": "SELECT cust_name FROM customer ORDER BY acc_bal",
        "query_toks": [
            "SELECT",
            "cust_name",
            "FROM",
            "customer",
            "ORDER",
            "BY",
            "acc_bal"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "List the name of all different customers who have some loan sorted by their total loan amount.",
        "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "query_toks": [
            "SELECT",
            "T1.cust_name",
            "FROM",
            "customer",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.cust_id",
            "=",
            "T2.cust_id",
            "GROUP",
            "BY",
            "T1.cust_name",
            "ORDER",
            "BY",
            "sum",
            "(",
            "T2.amount",
            ")"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What are the names of the different customers who have taken out a loan, ordered by the total amount that they have taken?",
        "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "query_toks": [
            "SELECT",
            "T1.cust_name",
            "FROM",
            "customer",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.cust_id",
            "=",
            "T2.cust_id",
            "GROUP",
            "BY",
            "T1.cust_name",
            "ORDER",
            "BY",
            "sum",
            "(",
            "T2.amount",
            ")"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the state, account type, and credit score of the customer whose number of loan is 0.",
        "query": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "query_toks": [
            "SELECT",
            "state",
            ",",
            "acc_type",
            ",",
            "credit_score",
            "FROM",
            "customer",
            "WHERE",
            "no_of_loans",
            "=",
            "0"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What are the states, account types, and credit scores for customers who have 0 loans?",
        "query": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "query_toks": [
            "SELECT",
            "state",
            ",",
            "acc_type",
            ",",
            "credit_score",
            "FROM",
            "customer",
            "WHERE",
            "no_of_loans",
            "=",
            "0"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the number of different cities which banks are located at.",
        "query": "SELECT count(DISTINCT city) FROM bank",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "city",
            ")",
            "FROM",
            "bank"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "In how many different cities are banks located?",
        "query": "SELECT count(DISTINCT city) FROM bank",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "city",
            ")",
            "FROM",
            "bank"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the number of different states which banks are located at.",
        "query": "SELECT count(DISTINCT state) FROM bank",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "state",
            ")",
            "FROM",
            "bank"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "In how many different states are banks located?",
        "query": "SELECT count(DISTINCT state) FROM bank",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "state",
            ")",
            "FROM",
            "bank"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "How many distinct types of accounts are there?",
        "query": "SELECT count(DISTINCT acc_type) FROM customer",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "acc_type",
            ")",
            "FROM",
            "customer"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Count the number of different account types.",
        "query": "SELECT count(DISTINCT acc_type) FROM customer",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "acc_type",
            ")",
            "FROM",
            "customer"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the name and account balance of the customer whose name includes the letter ‘a’.",
        "query": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'",
        "query_toks": [
            "SELECT",
            "cust_name",
            ",",
            "acc_bal",
            "FROM",
            "customer",
            "WHERE",
            "cust_name",
            "LIKE",
            "'",
            "%",
            "a",
            "%",
            "'"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What are the names and account balances of customers with the letter a in their names?",
        "query": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'",
        "query_toks": [
            "SELECT",
            "cust_name",
            ",",
            "acc_bal",
            "FROM",
            "customer",
            "WHERE",
            "cust_name",
            "LIKE",
            "'",
            "%",
            "a",
            "%",
            "'"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the total account balance of each customer from Utah or Texas.",
        "query": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "acc_bal",
            ")",
            "FROM",
            "customer",
            "WHERE",
            "state",
            "=",
            "'Utah",
            "'",
            "OR",
            "state",
            "=",
            "'Texas",
            "'"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What are the total account balances for each customer from Utah or Texas?",
        "query": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "acc_bal",
            ")",
            "FROM",
            "customer",
            "WHERE",
            "state",
            "=",
            "'Utah",
            "'",
            "OR",
            "state",
            "=",
            "'Texas",
            "'"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the name of customers who have both saving and checking account types.",
        "query": "SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'",
        "query_toks": [
            "SELECT",
            "cust_name",
            "FROM",
            "customer",
            "WHERE",
            "acc_type",
            "=",
            "'saving",
            "'",
            "INTERSECT",
            "SELECT",
            "cust_name",
            "FROM",
            "customer",
            "WHERE",
            "acc_type",
            "=",
            "'checking",
            "'"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What are the names of customers who have both savings and checking accounts?",
        "query": "SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'",
        "query_toks": [
            "SELECT",
            "cust_name",
            "FROM",
            "customer",
            "WHERE",
            "acc_type",
            "=",
            "'saving",
            "'",
            "INTERSECT",
            "SELECT",
            "cust_name",
            "FROM",
            "customer",
            "WHERE",
            "acc_type",
            "=",
            "'checking",
            "'"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the name of customers who do not have an saving account.",
        "query": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "query_toks": [
            "SELECT",
            "cust_name",
            "FROM",
            "customer",
            "EXCEPT",
            "SELECT",
            "cust_name",
            "FROM",
            "customer",
            "WHERE",
            "acc_type",
            "=",
            "'saving",
            "'"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What are the names of customers who do not have saving accounts?",
        "query": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "query_toks": [
            "SELECT",
            "cust_name",
            "FROM",
            "customer",
            "EXCEPT",
            "SELECT",
            "cust_name",
            "FROM",
            "customer",
            "WHERE",
            "acc_type",
            "=",
            "'saving",
            "'"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the name of customers who do not have a loan with a type of Mortgages.",
        "query": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'",
        "query_toks": [
            "SELECT",
            "cust_name",
            "FROM",
            "customer",
            "EXCEPT",
            "SELECT",
            "T1.cust_name",
            "FROM",
            "customer",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.cust_id",
            "=",
            "T2.cust_id",
            "WHERE",
            "T2.loan_type",
            "=",
            "'Mortgages",
            "'"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What are the names of customers who have not taken a Mortage loan?",
        "query": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'",
        "query_toks": [
            "SELECT",
            "cust_name",
            "FROM",
            "customer",
            "EXCEPT",
            "SELECT",
            "T1.cust_name",
            "FROM",
            "customer",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.cust_id",
            "=",
            "T2.cust_id",
            "WHERE",
            "T2.loan_type",
            "=",
            "'Mortgages",
            "'"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the name of customers who have loans of both Mortgages and Auto.",
        "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'",
        "query_toks": [
            "SELECT",
            "T1.cust_name",
            "FROM",
            "customer",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.cust_id",
            "=",
            "T2.cust_id",
            "WHERE",
            "loan_type",
            "=",
            "'Mortgages",
            "'",
            "INTERSECT",
            "SELECT",
            "T1.cust_name",
            "FROM",
            "customer",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.cust_id",
            "=",
            "T2.cust_id",
            "WHERE",
            "loan_type",
            "=",
            "'Auto",
            "'"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What are the names of customers who have taken both Mortgage and Auto loans?",
        "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'",
        "query_toks": [
            "SELECT",
            "T1.cust_name",
            "FROM",
            "customer",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.cust_id",
            "=",
            "T2.cust_id",
            "WHERE",
            "loan_type",
            "=",
            "'Mortgages",
            "'",
            "INTERSECT",
            "SELECT",
            "T1.cust_name",
            "FROM",
            "customer",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.cust_id",
            "=",
            "T2.cust_id",
            "WHERE",
            "loan_type",
            "=",
            "'Auto",
            "'"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the name of customers whose credit score is below the average credit scores of all customers.",
        "query": "SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)",
        "query_toks": [
            "SELECT",
            "cust_name",
            "FROM",
            "customer",
            "WHERE",
            "credit_score",
            "<",
            "(",
            "SELECT",
            "avg",
            "(",
            "credit_score",
            ")",
            "FROM",
            "customer",
            ")"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What are the names of customers with credit score less than the average credit score across customers?",
        "query": "SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)",
        "query_toks": [
            "SELECT",
            "cust_name",
            "FROM",
            "customer",
            "WHERE",
            "credit_score",
            "<",
            "(",
            "SELECT",
            "avg",
            "(",
            "credit_score",
            ")",
            "FROM",
            "customer",
            ")"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the branch name of the bank that has the most number of customers.",
        "query": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "bname",
            "FROM",
            "bank",
            "ORDER",
            "BY",
            "no_of_customers",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What is the name of the bank branch with the greatest number of customers?",
        "query": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "bname",
            "FROM",
            "bank",
            "ORDER",
            "BY",
            "no_of_customers",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the name of customer who has the lowest credit score.",
        "query": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1",
        "query_toks": [
            "SELECT",
            "cust_name",
            "FROM",
            "customer",
            "ORDER",
            "BY",
            "credit_score",
            "LIMIT",
            "1"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What is the name of the customer with the worst credit score?",
        "query": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1",
        "query_toks": [
            "SELECT",
            "cust_name",
            "FROM",
            "customer",
            "ORDER",
            "BY",
            "credit_score",
            "LIMIT",
            "1"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the name, account type, and account balance of the customer who has the highest credit score.",
        "query": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "cust_name",
            ",",
            "acc_type",
            ",",
            "acc_bal",
            "FROM",
            "customer",
            "ORDER",
            "BY",
            "credit_score",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What is the name, account type, and account balance corresponding to the customer with the highest credit score?",
        "query": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "cust_name",
            ",",
            "acc_type",
            ",",
            "acc_bal",
            "FROM",
            "customer",
            "ORDER",
            "BY",
            "credit_score",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the name of customer who has the highest amount of loans.",
        "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.cust_name",
            "FROM",
            "customer",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.cust_id",
            "=",
            "T2.cust_id",
            "GROUP",
            "BY",
            "T1.cust_name",
            "ORDER",
            "BY",
            "sum",
            "(",
            "T2.amount",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What is the name of the customer who has greatest total loan amount?",
        "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.cust_name",
            "FROM",
            "customer",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.cust_id",
            "=",
            "T2.cust_id",
            "GROUP",
            "BY",
            "T1.cust_name",
            "ORDER",
            "BY",
            "sum",
            "(",
            "T2.amount",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the state which has the most number of customers.",
        "query": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "state",
            "FROM",
            "bank",
            "GROUP",
            "BY",
            "state",
            "ORDER",
            "BY",
            "sum",
            "(",
            "no_of_customers",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Which state has the greatest total number of bank customers?",
        "query": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "state",
            "FROM",
            "bank",
            "GROUP",
            "BY",
            "state",
            "ORDER",
            "BY",
            "sum",
            "(",
            "no_of_customers",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "For each account type, find the average account balance of customers with credit score lower than 50.",
        "query": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "acc_bal",
            ")",
            ",",
            "acc_type",
            "FROM",
            "customer",
            "WHERE",
            "credit_score",
            "<",
            "50",
            "GROUP",
            "BY",
            "acc_type"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What is the average account balance of customers with credit score below 50 for the different account types?",
        "query": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "acc_bal",
            ")",
            ",",
            "acc_type",
            "FROM",
            "customer",
            "WHERE",
            "credit_score",
            "<",
            "50",
            "GROUP",
            "BY",
            "acc_type"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "For each state, find the total account balance of customers whose credit score is above 100.",
        "query": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "acc_bal",
            ")",
            ",",
            "state",
            "FROM",
            "customer",
            "WHERE",
            "credit_score",
            ">",
            "100",
            "GROUP",
            "BY",
            "state"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What is the total account balance for customers with a credit score of above 100 for the different states?",
        "query": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "acc_bal",
            ")",
            ",",
            "state",
            "FROM",
            "customer",
            "WHERE",
            "credit_score",
            ">",
            "100",
            "GROUP",
            "BY",
            "state"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the total amount of loans offered by each bank branch.",
        "query": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "amount",
            ")",
            ",",
            "T1.bname",
            "FROM",
            "bank",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.branch_id",
            "=",
            "T2.branch_id",
            "GROUP",
            "BY",
            "T1.bname"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What are the names of the different bank branches, and what are their total loan amounts?",
        "query": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "amount",
            ")",
            ",",
            "T1.bname",
            "FROM",
            "bank",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.branch_id",
            "=",
            "T2.branch_id",
            "GROUP",
            "BY",
            "T1.bname"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the name of customers who have more than one loan.",
        "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1",
        "query_toks": [
            "SELECT",
            "T1.cust_name",
            "FROM",
            "customer",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.cust_id",
            "=",
            "T2.cust_id",
            "GROUP",
            "BY",
            "T1.cust_name",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What are the names of customers who have taken out more than one loan?",
        "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1",
        "query_toks": [
            "SELECT",
            "T1.cust_name",
            "FROM",
            "customer",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.cust_id",
            "=",
            "T2.cust_id",
            "GROUP",
            "BY",
            "T1.cust_name",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.",
        "query": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "query_toks": [
            "SELECT",
            "T1.cust_name",
            ",",
            "T1.acc_type",
            "FROM",
            "customer",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.cust_id",
            "=",
            "T2.cust_id",
            "GROUP",
            "BY",
            "T1.cust_name",
            "HAVING",
            "sum",
            "(",
            "T2.amount",
            ")",
            ">",
            "5000"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?",
        "query": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "query_toks": [
            "SELECT",
            "T1.cust_name",
            ",",
            "T1.acc_type",
            "FROM",
            "customer",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.cust_id",
            "=",
            "T2.cust_id",
            "GROUP",
            "BY",
            "T1.cust_name",
            "HAVING",
            "sum",
            "(",
            "T2.amount",
            ")",
            ">",
            "5000"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the name of bank branch that provided the greatest total amount of loans.",
        "query": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.bname",
            "FROM",
            "bank",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.branch_id",
            "=",
            "T2.branch_id",
            "GROUP",
            "BY",
            "T1.bname",
            "ORDER",
            "BY",
            "sum",
            "(",
            "T2.amount",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What is the name of the bank branch that has lent the greatest amount?",
        "query": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.bname",
            "FROM",
            "bank",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.branch_id",
            "=",
            "T2.branch_id",
            "GROUP",
            "BY",
            "T1.bname",
            "ORDER",
            "BY",
            "sum",
            "(",
            "T2.amount",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.",
        "query": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.bname",
            "FROM",
            "loan",
            "AS",
            "T1",
            "JOIN",
            "bank",
            "AS",
            "T2",
            "ON",
            "T1.branch_id",
            "=",
            "T2.branch_id",
            "JOIN",
            "customer",
            "AS",
            "T3",
            "ON",
            "T1.cust_id",
            "=",
            "T3.cust_id",
            "WHERE",
            "T3.credit_score",
            "<",
            "100",
            "GROUP",
            "BY",
            "T2.bname",
            "ORDER",
            "BY",
            "sum",
            "(",
            "T1.amount",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What is the name of the bank branch that has lended the largest total amount in loans, specifically to customers with credit scores below 100?",
        "query": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.bname",
            "FROM",
            "loan",
            "AS",
            "T1",
            "JOIN",
            "bank",
            "AS",
            "T2",
            "ON",
            "T1.branch_id",
            "=",
            "T2.branch_id",
            "JOIN",
            "customer",
            "AS",
            "T3",
            "ON",
            "T1.cust_id",
            "=",
            "T3.cust_id",
            "WHERE",
            "T3.credit_score",
            "<",
            "100",
            "GROUP",
            "BY",
            "T2.bname",
            "ORDER",
            "BY",
            "sum",
            "(",
            "T1.amount",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the name of bank branches that provided some loans.",
        "query": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.bname",
            "FROM",
            "bank",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.branch_id",
            "=",
            "T2.branch_id"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What are the names of the different banks that have provided loans?",
        "query": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.bname",
            "FROM",
            "bank",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.branch_id",
            "=",
            "T2.branch_id"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the name and credit score of the customers who have some loans.",
        "query": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.cust_name",
            ",",
            "T1.credit_score",
            "FROM",
            "customer",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.cust_id",
            "=",
            "T2.cust_id"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What are the different names and credit scores of customers who have taken a loan?",
        "query": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.cust_name",
            ",",
            "T1.credit_score",
            "FROM",
            "customer",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.cust_id",
            "=",
            "T2.cust_id"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the the name of the customers who have a loan with amount more than 3000.",
        "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000",
        "query_toks": [
            "SELECT",
            "T1.cust_name",
            "FROM",
            "customer",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.cust_id",
            "=",
            "T2.cust_id",
            "WHERE",
            "amount",
            ">",
            "3000"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What are the names of customers who have a loan of more than 3000 in amount?",
        "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000",
        "query_toks": [
            "SELECT",
            "T1.cust_name",
            "FROM",
            "customer",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.cust_id",
            "=",
            "T2.cust_id",
            "WHERE",
            "amount",
            ">",
            "3000"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the city and name of bank branches that provide business loans.",
        "query": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",
        "query_toks": [
            "SELECT",
            "T1.bname",
            ",",
            "T1.city",
            "FROM",
            "bank",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.branch_id",
            "=",
            "T2.branch_id",
            "WHERE",
            "T2.loan_type",
            "=",
            "'Business",
            "'"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What are the names and cities of bank branches that offer loans for business?",
        "query": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",
        "query_toks": [
            "SELECT",
            "T1.bname",
            ",",
            "T1.city",
            "FROM",
            "bank",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.branch_id",
            "=",
            "T2.branch_id",
            "WHERE",
            "T2.loan_type",
            "=",
            "'Business",
            "'"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.",
        "query": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100",
        "query_toks": [
            "SELECT",
            "T2.bname",
            "FROM",
            "loan",
            "AS",
            "T1",
            "JOIN",
            "bank",
            "AS",
            "T2",
            "ON",
            "T1.branch_id",
            "=",
            "T2.branch_id",
            "JOIN",
            "customer",
            "AS",
            "T3",
            "ON",
            "T1.cust_id",
            "=",
            "T3.cust_id",
            "WHERE",
            "T3.credit_score",
            "<",
            "100"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What are the names of banks that have loaned money to customers with credit scores below 100?",
        "query": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100",
        "query_toks": [
            "SELECT",
            "T2.bname",
            "FROM",
            "loan",
            "AS",
            "T1",
            "JOIN",
            "bank",
            "AS",
            "T2",
            "ON",
            "T1.branch_id",
            "=",
            "T2.branch_id",
            "JOIN",
            "customer",
            "AS",
            "T3",
            "ON",
            "T1.cust_id",
            "=",
            "T3.cust_id",
            "WHERE",
            "T3.credit_score",
            "<",
            "100"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the total amount of loans provided by bank branches in the state of New York.",
        "query": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "T2.amount",
            ")",
            "FROM",
            "bank",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.branch_id",
            "=",
            "T2.branch_id",
            "WHERE",
            "T1.state",
            "=",
            "'New",
            "York",
            "'"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What is the total amount of money loaned by banks in New York state?",
        "query": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "T2.amount",
            ")",
            "FROM",
            "bank",
            "AS",
            "T1",
            "JOIN",
            "loan",
            "AS",
            "T2",
            "ON",
            "T1.branch_id",
            "=",
            "T2.branch_id",
            "WHERE",
            "T1.state",
            "=",
            "'New",
            "York",
            "'"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the average credit score of the customers who have some loan.",
        "query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "credit_score",
            ")",
            "FROM",
            "customer",
            "WHERE",
            "cust_id",
            "IN",
            "(",
            "SELECT",
            "cust_id",
            "FROM",
            "loan",
            ")"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What is the average credit score for customers who have taken a loan?",
        "query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "credit_score",
            ")",
            "FROM",
            "customer",
            "WHERE",
            "cust_id",
            "IN",
            "(",
            "SELECT",
            "cust_id",
            "FROM",
            "loan",
            ")"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Find the average credit score of the customers who do not have any loan.",
        "query": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "credit_score",
            ")",
            "FROM",
            "customer",
            "WHERE",
            "cust_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "cust_id",
            "FROM",
            "loan",
            ")"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "What is the average credit score for customers who have never taken a loan?",
        "query": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "credit_score",
            ")",
            "FROM",
            "customer",
            "WHERE",
            "cust_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "cust_id",
            "FROM",
            "loan",
            ")"
        ],
        "db_id": "loan_1"
    },
    {
        "question": "Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.",
        "query": "SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2",
        "query_toks": [
            "SELECT",
            "T1.asset_id",
            ",",
            "T1.asset_details",
            "FROM",
            "Assets",
            "AS",
            "T1",
            "JOIN",
            "Asset_Parts",
            "AS",
            "T2",
            "ON",
            "T1.asset_id",
            "=",
            "T2.asset_id",
            "GROUP",
            "BY",
            "T1.asset_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "2",
            "INTERSECT",
            "SELECT",
            "T1.asset_id",
            ",",
            "T1.asset_details",
            "FROM",
            "Assets",
            "AS",
            "T1",
            "JOIN",
            "Fault_Log",
            "AS",
            "T2",
            "ON",
            "T1.asset_id",
            "=",
            "T2.asset_id",
            "GROUP",
            "BY",
            "T1.asset_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "<",
            "2"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "How many assets does each maintenance contract contain? List the number and the contract id.",
        "query": "SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "T1.maintenance_contract_id",
            "FROM",
            "Maintenance_Contracts",
            "AS",
            "T1",
            "JOIN",
            "Assets",
            "AS",
            "T2",
            "ON",
            "T1.maintenance_contract_id",
            "=",
            "T2.maintenance_contract_id",
            "GROUP",
            "BY",
            "T1.maintenance_contract_id"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "How many assets does each third party company supply? List the count and the company id.",
        "query": "SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "T1.company_id",
            "FROM",
            "Third_Party_Companies",
            "AS",
            "T1",
            "JOIN",
            "Assets",
            "AS",
            "T2",
            "ON",
            "T1.company_id",
            "=",
            "T2.supplier_company_id",
            "GROUP",
            "BY",
            "T1.company_id"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.",
        "query": "SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2 UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2",
        "query_toks": [
            "SELECT",
            "T1.company_id",
            ",",
            "T1.company_name",
            "FROM",
            "Third_Party_Companies",
            "AS",
            "T1",
            "JOIN",
            "Maintenance_Engineers",
            "AS",
            "T2",
            "ON",
            "T1.company_id",
            "=",
            "T2.company_id",
            "GROUP",
            "BY",
            "T1.company_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2",
            "UNION",
            "SELECT",
            "T3.company_id",
            ",",
            "T3.company_name",
            "FROM",
            "Third_Party_Companies",
            "AS",
            "T3",
            "JOIN",
            "Maintenance_Contracts",
            "AS",
            "T4",
            "ON",
            "T3.company_id",
            "=",
            "T4.maintenance_contract_company_id",
            "GROUP",
            "BY",
            "T3.company_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "What is the name and id of the staff who recorded the fault log but has not contacted any visiting engineers?",
        "query": "SELECT T1.staff_name ,  T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id  =  T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name ,  T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id  =  T4.contact_staff_id",
        "query_toks": [
            "SELECT",
            "T1.staff_name",
            ",",
            "T1.staff_id",
            "FROM",
            "Staff",
            "AS",
            "T1",
            "JOIN",
            "Fault_Log",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.recorded_by_staff_id",
            "EXCEPT",
            "SELECT",
            "T3.staff_name",
            ",",
            "T3.staff_id",
            "FROM",
            "Staff",
            "AS",
            "T3",
            "JOIN",
            "Engineer_Visits",
            "AS",
            "T4",
            "ON",
            "T3.staff_id",
            "=",
            "T4.contact_staff_id"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "Which engineer has visited the most times? Show the engineer id, first name and last name.",
        "query": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.engineer_id",
            ",",
            "T1.first_name",
            ",",
            "T1.last_name",
            "FROM",
            "Maintenance_Engineers",
            "AS",
            "T1",
            "JOIN",
            "Engineer_Visits",
            "AS",
            "T2",
            "GROUP",
            "BY",
            "T1.engineer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "Which parts have more than 2 faults? Show the part name and id.",
        "query": "SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2",
        "query_toks": [
            "SELECT",
            "T1.part_name",
            ",",
            "T1.part_id",
            "FROM",
            "Parts",
            "AS",
            "T1",
            "JOIN",
            "Part_Faults",
            "AS",
            "T2",
            "ON",
            "T1.part_id",
            "=",
            "T2.part_id",
            "GROUP",
            "BY",
            "T1.part_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "List all every engineer's first name, last name, details and coresponding skill description.",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T1.last_name",
            ",",
            "T1.other_details",
            ",",
            "T3.skill_description",
            "FROM",
            "Maintenance_Engineers",
            "AS",
            "T1",
            "JOIN",
            "Engineer_Skills",
            "AS",
            "T2",
            "ON",
            "T1.engineer_id",
            "=",
            "T2.engineer_id",
            "JOIN",
            "Skills",
            "AS",
            "T3",
            "ON",
            "T2.skill_id",
            "=",
            "T3.skill_id"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.",
        "query": "SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",
        "query_toks": [
            "SELECT",
            "T1.fault_short_name",
            ",",
            "T3.skill_description",
            "FROM",
            "Part_Faults",
            "AS",
            "T1",
            "JOIN",
            "Skills_Required_To_Fix",
            "AS",
            "T2",
            "ON",
            "T1.part_fault_id",
            "=",
            "T2.part_fault_id",
            "JOIN",
            "Skills",
            "AS",
            "T3",
            "ON",
            "T2.skill_id",
            "=",
            "T3.skill_id"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "How many assets can each parts be used in? List the part name and the number.",
        "query": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name",
        "query_toks": [
            "SELECT",
            "T1.part_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Parts",
            "AS",
            "T1",
            "JOIN",
            "Asset_Parts",
            "AS",
            "T2",
            "ON",
            "T1.part_id",
            "=",
            "T2.part_id",
            "GROUP",
            "BY",
            "T1.part_name"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "What are all the fault descriptions and the fault status of all the faults recoreded in the logs?",
        "query": "SELECT T1.fault_description ,  T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id",
        "query_toks": [
            "SELECT",
            "T1.fault_description",
            ",",
            "T2.fault_status",
            "FROM",
            "Fault_Log",
            "AS",
            "T1",
            "JOIN",
            "Fault_Log_Parts",
            "AS",
            "T2",
            "ON",
            "T1.fault_log_entry_id",
            "=",
            "T2.fault_log_entry_id"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "How many engineer visits are required at most for a single fault log? List the number and the log entry id.",
        "query": "SELECT count(*) ,  T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "T1.fault_log_entry_id",
            "FROM",
            "Fault_Log",
            "AS",
            "T1",
            "JOIN",
            "Engineer_Visits",
            "AS",
            "T2",
            "ON",
            "T1.fault_log_entry_id",
            "=",
            "T2.fault_log_entry_id",
            "GROUP",
            "BY",
            "T1.fault_log_entry_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "What are all the distinct last names of all the engineers?",
        "query": "SELECT DISTINCT last_name FROM Maintenance_Engineers",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "last_name",
            "FROM",
            "Maintenance_Engineers"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "How many fault status codes are recorded in the fault log parts table?",
        "query": "SELECT DISTINCT fault_status FROM Fault_Log_Parts",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "fault_status",
            "FROM",
            "Fault_Log_Parts"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "Which engineers have never visited to maintain the assets? List the engineer first name and last name.",
        "query": "SELECT first_name ,  last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            "FROM",
            "Maintenance_Engineers",
            "WHERE",
            "engineer_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "engineer_id",
            "FROM",
            "Engineer_Visits",
            ")"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "List the asset id, details, make and model for every asset.",
        "query": "SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets",
        "query_toks": [
            "SELECT",
            "asset_id",
            ",",
            "asset_details",
            ",",
            "asset_make",
            ",",
            "asset_model",
            "FROM",
            "Assets"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "When was the first asset acquired?",
        "query": "SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "asset_acquired_date",
            "FROM",
            "Assets",
            "ORDER",
            "BY",
            "asset_acquired_date",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "Which part fault requires the most number of skills to fix? List part id and name.",
        "query": "SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.part_id",
            ",",
            "T1.part_name",
            "FROM",
            "Parts",
            "AS",
            "T1",
            "JOIN",
            "Part_Faults",
            "AS",
            "T2",
            "ON",
            "T1.part_id",
            "=",
            "T2.part_id",
            "JOIN",
            "Skills_Required_To_Fix",
            "AS",
            "T3",
            "ON",
            "T2.part_fault_id",
            "=",
            "T3.part_fault_id",
            "GROUP",
            "BY",
            "T1.part_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "Which kind of part has the least number of faults? List the part name.",
        "query": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.part_name",
            "FROM",
            "Parts",
            "AS",
            "T1",
            "JOIN",
            "Part_Faults",
            "AS",
            "T2",
            "ON",
            "T1.part_id",
            "=",
            "T2.part_id",
            "GROUP",
            "BY",
            "T1.part_name",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.",
        "query": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.engineer_id",
            ",",
            "T1.first_name",
            ",",
            "T1.last_name",
            "FROM",
            "Maintenance_Engineers",
            "AS",
            "T1",
            "JOIN",
            "Engineer_Visits",
            "AS",
            "T2",
            "ON",
            "T1.engineer_id",
            "=",
            "T2.engineer_id",
            "GROUP",
            "BY",
            "T1.engineer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "Which staff have contacted which engineers? List the staff name and the engineer first name and last name.",
        "query": "SELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id",
        "query_toks": [
            "SELECT",
            "T1.staff_name",
            ",",
            "T3.first_name",
            ",",
            "T3.last_name",
            "FROM",
            "Staff",
            "AS",
            "T1",
            "JOIN",
            "Engineer_Visits",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.contact_staff_id",
            "JOIN",
            "Maintenance_Engineers",
            "AS",
            "T3",
            "ON",
            "T2.engineer_id",
            "=",
            "T3.engineer_id"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "Which fault log included the most number of faulty parts? List the fault log id, description and record time.",
        "query": "SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.fault_log_entry_id",
            ",",
            "T1.fault_description",
            ",",
            "T1.fault_log_entry_datetime",
            "FROM",
            "Fault_Log",
            "AS",
            "T1",
            "JOIN",
            "Fault_Log_Parts",
            "AS",
            "T2",
            "ON",
            "T1.fault_log_entry_id",
            "=",
            "T2.fault_log_entry_id",
            "GROUP",
            "BY",
            "T1.fault_log_entry_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "Which skill is used in fixing the most number of faults? List the skill id and description.",
        "query": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.skill_id",
            ",",
            "T1.skill_description",
            "FROM",
            "Skills",
            "AS",
            "T1",
            "JOIN",
            "Skills_Required_To_Fix",
            "AS",
            "T2",
            "ON",
            "T1.skill_id",
            "=",
            "T2.skill_id",
            "GROUP",
            "BY",
            "T1.skill_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "What are all the distinct asset models?",
        "query": "SELECT DISTINCT asset_model FROM Assets",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "asset_model",
            "FROM",
            "Assets"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "query_toks": [
            "SELECT",
            "asset_make",
            ",",
            "asset_model",
            ",",
            "asset_details",
            "FROM",
            "Assets",
            "ORDER",
            "BY",
            "asset_disposed_date",
            "ASC"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "Which part has the least chargeable amount? List the part id and amount.",
        "query": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "part_id",
            ",",
            "chargeable_amount",
            "FROM",
            "Parts",
            "ORDER",
            "BY",
            "chargeable_amount",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "Which company started the earliest the maintenance contract? Show the company name.",
        "query": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.company_name",
            "FROM",
            "Third_Party_Companies",
            "AS",
            "T1",
            "JOIN",
            "Maintenance_Contracts",
            "AS",
            "T2",
            "ON",
            "T1.company_id",
            "=",
            "T2.maintenance_contract_company_id",
            "ORDER",
            "BY",
            "T2.contract_start_date",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "What is the description of the type of the company who concluded its contracts most recently?",
        "query": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id JOIN Ref_Company_Types AS T3 ON T1.company_type_code  =  T3.company_type_code ORDER BY T2.contract_end_date DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.company_name",
            "FROM",
            "Third_Party_Companies",
            "AS",
            "T1",
            "JOIN",
            "Maintenance_Contracts",
            "AS",
            "T2",
            "ON",
            "T1.company_id",
            "=",
            "T2.maintenance_contract_company_id",
            "JOIN",
            "Ref_Company_Types",
            "AS",
            "T3",
            "ON",
            "T1.company_type_code",
            "=",
            "T3.company_type_code",
            "ORDER",
            "BY",
            "T2.contract_end_date",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "Which gender makes up the majority of the staff?",
        "query": "SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "gender",
            "FROM",
            "staff",
            "GROUP",
            "BY",
            "gender",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.",
        "query": "SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name",
        "query_toks": [
            "SELECT",
            "T1.staff_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Staff",
            "AS",
            "T1",
            "JOIN",
            "Engineer_Visits",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.contact_staff_id",
            "GROUP",
            "BY",
            "T1.staff_name"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "Which assets did not incur any fault log? List the asset model.",
        "query": "SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)",
        "query_toks": [
            "SELECT",
            "asset_model",
            "FROM",
            "Assets",
            "WHERE",
            "asset_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "asset_id",
            "FROM",
            "Fault_Log",
            ")"
        ],
        "db_id": "assets_maintenance"
    },
    {
        "question": "Display the first name and department name for each employee.",
        "query": "SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T2.department_name",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "departments",
            "AS",
            "T2",
            "ON",
            "T1.department_id",
            "=",
            "T2.department_id"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the first name and department name of all employees?",
        "query": "SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T2.department_name",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "departments",
            "AS",
            "T2",
            "ON",
            "T1.department_id",
            "=",
            "T2.department_id"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "List the full name (first and last name), and salary for those employees who earn below 6000.",
        "query": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "salary",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "<",
            "6000"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the full names and salaries for any employees earning less than 6000?",
        "query": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "salary",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "<",
            "6000"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "Display the first name, and department number for all employees whose last name is \"McEwen\".",
        "query": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "department_id",
            "FROM",
            "employees",
            "WHERE",
            "last_name",
            "=",
            "'McEwen",
            "'"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the first names and department numbers for employees with last name McEwen?",
        "query": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "department_id",
            "FROM",
            "employees",
            "WHERE",
            "last_name",
            "=",
            "'McEwen",
            "'"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "Return all the information for all employees without any department number.",
        "query": "SELECT * FROM employees WHERE department_id  =  \"null\"",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "employees",
            "WHERE",
            "department_id",
            "=",
            "``",
            "null",
            "''"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are all the employees without a department number?",
        "query": "SELECT * FROM employees WHERE department_id  =  \"null\"",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "employees",
            "WHERE",
            "department_id",
            "=",
            "``",
            "null",
            "''"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "Display all the information about the department Marketing.",
        "query": "SELECT * FROM  departments WHERE department_name  =  'Marketing'",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "departments",
            "WHERE",
            "department_name",
            "=",
            "'Marketing",
            "'"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What is all the information about the Marketing department?",
        "query": "SELECT * FROM  departments WHERE department_name  =  'Marketing'",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "departments",
            "WHERE",
            "department_name",
            "=",
            "'Marketing",
            "'"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "when is the hire date for those employees whose first name does not containing the letter M?",
        "query": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "query_toks": [
            "SELECT",
            "hire_date",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "NOT",
            "LIKE",
            "'",
            "%",
            "M",
            "%",
            "'"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "On what dates were employees without the letter M in their first names hired?",
        "query": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "query_toks": [
            "SELECT",
            "hire_date",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "NOT",
            "LIKE",
            "'",
            "%",
            "M",
            "%",
            "'"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M.",
        "query": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "hire_date",
            ",",
            "salary",
            ",",
            "department_id",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "NOT",
            "LIKE",
            "'",
            "%",
            "M",
            "%",
            "'"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "query": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "hire_date",
            ",",
            "salary",
            ",",
            "department_id",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "NOT",
            "LIKE",
            "'",
            "%",
            "M",
            "%",
            "'"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M and make the result set in ascending order by department number.",
        "query": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "hire_date",
            ",",
            "salary",
            ",",
            "department_id",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "NOT",
            "LIKE",
            "'",
            "%",
            "M",
            "%",
            "'",
            "ORDER",
            "BY",
            "department_id"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the full name, hire data, salary and department id for employees without the letter M in their first name, ordered by ascending department id?",
        "query": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "hire_date",
            ",",
            "salary",
            ",",
            "department_id",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "NOT",
            "LIKE",
            "'",
            "%",
            "M",
            "%",
            "'",
            "ORDER",
            "BY",
            "department_id"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "what is the phone number of employees whose salary is in the range of 8000 and 12000?",
        "query": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000",
        "query_toks": [
            "SELECT",
            "phone_number",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "Return the phone numbers of employees with salaries between 8000 and 12000.",
        "query": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000",
        "query_toks": [
            "SELECT",
            "phone_number",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "``",
            "null",
            "''",
            "OR",
            "department_id",
            "!",
            "=",
            "40"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "8000",
            "AND",
            "12000",
            "AND",
            "commission_pct",
            "!",
            "=",
            "``",
            "null",
            "''",
            "OR",
            "department_id",
            "!",
            "=",
            "40"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the full name (first and last name) and salary for all employees who does not have any value for commission?",
        "query": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "salary",
            "FROM",
            "employees",
            "WHERE",
            "commission_pct",
            "=",
            "``",
            "null",
            "''"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "Return the full names and salaries of employees with null commissions.",
        "query": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "salary",
            "FROM",
            "employees",
            "WHERE",
            "commission_pct",
            "=",
            "``",
            "null",
            "''"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "Display the first and last name, and salary for those employees whose first name is ending with the letter m.",
        "query": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "salary",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'",
            "%",
            "m",
            "'"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "Return the full names and salaries for employees with first names that end with the letter m.",
        "query": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "salary",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'",
            "%",
            "m",
            "'"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "Find job id and date of hire for those employees who was hired between November 5th, 2007 and July 5th, 2009.",
        "query": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "query_toks": [
            "SELECT",
            "job_id",
            ",",
            "hire_date",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "BETWEEN",
            "'2007-11-05",
            "'",
            "AND",
            "'2009-07-05",
            "'"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the job ids and dates of hire for employees hired after November 5th, 2007 and before July 5th, 2009?",
        "query": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "query_toks": [
            "SELECT",
            "job_id",
            ",",
            "hire_date",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "BETWEEN",
            "'2007-11-05",
            "'",
            "AND",
            "'2009-07-05",
            "'"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the first and last name for those employees who works either in department 70 or 90?",
        "query": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            "FROM",
            "employees",
            "WHERE",
            "department_id",
            "=",
            "70",
            "OR",
            "department_id",
            "=",
            "90"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the full names of employees who with in department 70 or 90?",
        "query": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            "FROM",
            "employees",
            "WHERE",
            "department_id",
            "=",
            "70",
            "OR",
            "department_id",
            "=",
            "90"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "Find the salary and manager number for those employees who is working under a manager.",
        "query": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
        "query_toks": [
            "SELECT",
            "salary",
            ",",
            "manager_id",
            "FROM",
            "employees",
            "WHERE",
            "manager_id",
            "!",
            "=",
            "``",
            "null",
            "''"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the salaries and manager ids for employees who have managers?",
        "query": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
        "query_toks": [
            "SELECT",
            "salary",
            ",",
            "manager_id",
            "FROM",
            "employees",
            "WHERE",
            "manager_id",
            "!",
            "=",
            "``",
            "null",
            "''"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display all the details from Employees table for those employees who was hired before 2002-06-21.",
        "query": "SELECT * FROM employees WHERE hire_date  <  '2002-06-21'",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21",
            "'"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What is all the information about employees hired before June 21, 2002?",
        "query": "SELECT * FROM employees WHERE hire_date  <  '2002-06-21'",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            "<",
            "'2002-06-21",
            "'"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "query": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'",
            "%",
            "D",
            "%",
            "'",
            "OR",
            "first_name",
            "LIKE",
            "'",
            "%",
            "S",
            "%",
            "'",
            "ORDER",
            "BY",
            "salary",
            "DESC"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What is all the information about employees with D or S in their first name, ordered by salary descending?",
        "query": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'",
            "%",
            "D",
            "%",
            "'",
            "OR",
            "first_name",
            "LIKE",
            "'",
            "%",
            "S",
            "%",
            "'",
            "ORDER",
            "BY",
            "salary",
            "DESC"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display those employees who joined after 7th September, 1987.",
        "query": "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            ">",
            "'1987-09-07",
            "'"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "Which employees were hired after September 7th, 1987?",
        "query": "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "employees",
            "WHERE",
            "hire_date",
            ">",
            "'1987-09-07",
            "'"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display the job title of jobs which minimum salary is greater than 9000.",
        "query": "SELECT job_title FROM jobs WHERE min_salary  >  9000",
        "query_toks": [
            "SELECT",
            "job_title",
            "FROM",
            "jobs",
            "WHERE",
            "min_salary",
            ">",
            "9000"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "Which job titles correspond to jobs with salaries over 9000?",
        "query": "SELECT job_title FROM jobs WHERE min_salary  >  9000",
        "query_toks": [
            "SELECT",
            "job_title",
            "FROM",
            "jobs",
            "WHERE",
            "min_salary",
            ">",
            "9000"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query_toks": [
            "SELECT",
            "job_title",
            ",",
            "max_salary",
            "-",
            "min_salary",
            "FROM",
            "jobs",
            "WHERE",
            "max_salary",
            "BETWEEN",
            "12000",
            "AND",
            "18000"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000?",
        "query": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "query_toks": [
            "SELECT",
            "job_title",
            ",",
            "max_salary",
            "-",
            "min_salary",
            "FROM",
            "jobs",
            "WHERE",
            "max_salary",
            "BETWEEN",
            "12000",
            "AND",
            "18000"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50.",
        "query": "SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50",
        "query_toks": [
            "SELECT",
            "email",
            "FROM",
            "employees",
            "WHERE",
            "commission_pct",
            "=",
            "``",
            "null",
            "''",
            "AND",
            "salary",
            "BETWEEN",
            "7000",
            "AND",
            "12000",
            "AND",
            "department_id",
            "=",
            "50"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the emails of employees with null commission, salary between 7000 and 12000, and who work in department 50?",
        "query": "SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50",
        "query_toks": [
            "SELECT",
            "email",
            "FROM",
            "employees",
            "WHERE",
            "commission_pct",
            "=",
            "``",
            "null",
            "''",
            "AND",
            "salary",
            "BETWEEN",
            "7000",
            "AND",
            "12000",
            "AND",
            "department_id",
            "=",
            "50"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display the employee ID for each employee and the date on which he ended his previous job.",
        "query": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id",
        "query_toks": [
            "SELECT",
            "employee_id",
            ",",
            "MAX",
            "(",
            "end_date",
            ")",
            "FROM",
            "job_history",
            "GROUP",
            "BY",
            "employee_id"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the employee ids for each employee and final dates of employment at their last job?",
        "query": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id",
        "query_toks": [
            "SELECT",
            "employee_id",
            ",",
            "MAX",
            "(",
            "end_date",
            ")",
            "FROM",
            "job_history",
            "GROUP",
            "BY",
            "employee_id"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display those departments where more than ten employees work who got a commission percentage.",
        "query": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10",
        "query_toks": [
            "SELECT",
            "department_id",
            "FROM",
            "employees",
            "GROUP",
            "BY",
            "department_id",
            "HAVING",
            "COUNT",
            "(",
            "commission_pct",
            ")",
            ">",
            "10"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the department ids for which more than 10 employees had a commission?",
        "query": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10",
        "query_toks": [
            "SELECT",
            "department_id",
            "FROM",
            "employees",
            "GROUP",
            "BY",
            "department_id",
            "HAVING",
            "COUNT",
            "(",
            "commission_pct",
            ")",
            ">",
            "10"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "Find the ids of the departments where any manager is managing 4 or more employees.",
        "query": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "department_id",
            "FROM",
            "employees",
            "GROUP",
            "BY",
            "department_id",
            ",",
            "manager_id",
            "HAVING",
            "COUNT",
            "(",
            "employee_id",
            ")",
            ">",
            "=",
            "4"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are department ids for departments with managers managing more than 3 employees?",
        "query": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "department_id",
            "FROM",
            "employees",
            "GROUP",
            "BY",
            "department_id",
            ",",
            "manager_id",
            "HAVING",
            "COUNT",
            "(",
            "employee_id",
            ")",
            ">",
            "=",
            "4"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display the average salary of employees for each department who gets a commission percentage.",
        "query": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id",
        "query_toks": [
            "SELECT",
            "department_id",
            ",",
            "AVG",
            "(",
            "salary",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "commission_pct",
            "!",
            "=",
            "``",
            "null",
            "''",
            "GROUP",
            "BY",
            "department_id"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What is the average salary of employees who have a commission percentage that is not null?",
        "query": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id",
        "query_toks": [
            "SELECT",
            "department_id",
            ",",
            "AVG",
            "(",
            "salary",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "commission_pct",
            "!",
            "=",
            "``",
            "null",
            "''",
            "GROUP",
            "BY",
            "department_id"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display the country ID and number of cities for each country.",
        "query": "SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id",
        "query_toks": [
            "SELECT",
            "country_id",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "locations",
            "GROUP",
            "BY",
            "country_id"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "Give the country id and corresponding count of cities in each country.",
        "query": "SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id",
        "query_toks": [
            "SELECT",
            "country_id",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "locations",
            "GROUP",
            "BY",
            "country_id"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display job ID for those jobs that were done by two or more for more than 300 days.",
        "query": "SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2",
        "query_toks": [
            "SELECT",
            "job_id",
            "FROM",
            "job_history",
            "WHERE",
            "end_date",
            "-",
            "start_date",
            ">",
            "300",
            "GROUP",
            "BY",
            "job_id",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the job ids for jobs done more than once for a period of more than 300 days?",
        "query": "SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2",
        "query_toks": [
            "SELECT",
            "job_id",
            "FROM",
            "job_history",
            "WHERE",
            "end_date",
            "-",
            "start_date",
            ">",
            "300",
            "GROUP",
            "BY",
            "job_id",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display the ID for those employees who did two or more jobs in the past.",
        "query": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2",
        "query_toks": [
            "SELECT",
            "employee_id",
            "FROM",
            "job_history",
            "GROUP",
            "BY",
            "employee_id",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the employee ids for employees who have held two or more jobs?",
        "query": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2",
        "query_toks": [
            "SELECT",
            "employee_id",
            "FROM",
            "job_history",
            "GROUP",
            "BY",
            "employee_id",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "Find employee with ID and name of the country presently where (s)he is working.",
        "query": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "query_toks": [
            "SELECT",
            "T1.employee_id",
            ",",
            "T4.country_name",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "departments",
            "AS",
            "T2",
            "ON",
            "T1.department_id",
            "=",
            "T2.department_id",
            "JOIN",
            "locations",
            "AS",
            "T3",
            "ON",
            "T2.location_id",
            "=",
            "T3.location_id",
            "JOIN",
            "countries",
            "AS",
            "T4",
            "ON",
            "T3.country_id",
            "=",
            "T4.country_id"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are all the employee ids and the names of the countries in which they work?",
        "query": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "query_toks": [
            "SELECT",
            "T1.employee_id",
            ",",
            "T4.country_name",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "departments",
            "AS",
            "T2",
            "ON",
            "T1.department_id",
            "=",
            "T2.department_id",
            "JOIN",
            "locations",
            "AS",
            "T3",
            "ON",
            "T2.location_id",
            "=",
            "T3.location_id",
            "JOIN",
            "countries",
            "AS",
            "T4",
            "ON",
            "T3.country_id",
            "=",
            "T4.country_id"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display the department name and number of employees in each of the department.",
        "query": "SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name",
        "query_toks": [
            "SELECT",
            "T2.department_name",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "departments",
            "AS",
            "T2",
            "ON",
            "T1.department_id",
            "=",
            "T2.department_id",
            "GROUP",
            "BY",
            "T2.department_name"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "Give the name of each department and the number of employees in each.",
        "query": "SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name",
        "query_toks": [
            "SELECT",
            "T2.department_name",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "departments",
            "AS",
            "T2",
            "ON",
            "T1.department_id",
            "=",
            "T2.department_id",
            "GROUP",
            "BY",
            "T2.department_name"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "query": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "job_history",
            "AS",
            "T1",
            "JOIN",
            "employees",
            "AS",
            "T2",
            "ON",
            "T1.employee_id",
            "=",
            "T2.employee_id",
            "WHERE",
            "T2.salary",
            ">",
            "=",
            "12000"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What is all the job history info done by employees earning a salary greater than or equal to 12000?",
        "query": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "job_history",
            "AS",
            "T1",
            "JOIN",
            "employees",
            "AS",
            "T2",
            "ON",
            "T1.employee_id",
            "=",
            "T2.employee_id",
            "WHERE",
            "T2.salary",
            ">",
            "=",
            "12000"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display job title and average salary of employees.",
        "query": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title",
        "query_toks": [
            "SELECT",
            "job_title",
            ",",
            "AVG",
            "(",
            "salary",
            ")",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "jobs",
            "AS",
            "T2",
            "ON",
            "T1.job_id",
            "=",
            "T2.job_id",
            "GROUP",
            "BY",
            "T2.job_title"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What is the average salary for each job title?",
        "query": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title",
        "query_toks": [
            "SELECT",
            "job_title",
            ",",
            "AVG",
            "(",
            "salary",
            ")",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "jobs",
            "AS",
            "T2",
            "ON",
            "T1.job_id",
            "=",
            "T2.job_id",
            "GROUP",
            "BY",
            "T2.job_title"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What is the full name ( first name and last name ) for those employees who gets more salary than the employee whose id is 163?",
        "query": "SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            ">",
            "(",
            "SELECT",
            "salary",
            "FROM",
            "employees",
            "WHERE",
            "employee_id",
            "=",
            "163",
            ")"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "Provide the full names of employees earning more than the employee with id 163.",
        "query": "SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            ">",
            "(",
            "SELECT",
            "salary",
            "FROM",
            "employees",
            "WHERE",
            "employee_id",
            "=",
            "163",
            ")"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "return the smallest salary for every departments.",
        "query": "SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id",
        "query_toks": [
            "SELECT",
            "MIN",
            "(",
            "salary",
            ")",
            ",",
            "department_id",
            "FROM",
            "employees",
            "GROUP",
            "BY",
            "department_id"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What is the minimum salary in each department?",
        "query": "SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id",
        "query_toks": [
            "SELECT",
            "MIN",
            "(",
            "salary",
            ")",
            ",",
            "department_id",
            "FROM",
            "employees",
            "GROUP",
            "BY",
            "department_id"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "Find the first name and last name and department id for those employees who earn such amount of salary which is the smallest salary of any of the departments.",
        "query": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "department_id",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "IN",
            "(",
            "SELECT",
            "MIN",
            "(",
            "salary",
            ")",
            "FROM",
            "employees",
            "GROUP",
            "BY",
            "department_id",
            ")"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the full names and department ids for the lowest paid employees across all departments.",
        "query": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "department_id",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "IN",
            "(",
            "SELECT",
            "MIN",
            "(",
            "salary",
            ")",
            "FROM",
            "employees",
            "GROUP",
            "BY",
            "department_id",
            ")"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "Find the employee id for all employees who earn more than the average salary.",
        "query": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)",
        "query_toks": [
            "SELECT",
            "employee_id",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            ">",
            "(",
            "SELECT",
            "AVG",
            "(",
            "salary",
            ")",
            "FROM",
            "employees",
            ")"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the employee ids for employees who make more than the average?",
        "query": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)",
        "query_toks": [
            "SELECT",
            "employee_id",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            ">",
            "(",
            "SELECT",
            "AVG",
            "(",
            "salary",
            ")",
            "FROM",
            "employees",
            ")"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display the employee id and salary of all employees who report to Payam (first name).",
        "query": "SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )",
        "query_toks": [
            "SELECT",
            "employee_id",
            ",",
            "salary",
            "FROM",
            "employees",
            "WHERE",
            "manager_id",
            "=",
            "(",
            "SELECT",
            "employee_id",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "=",
            "'Payam",
            "'",
            ")"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the employee ids of employees who report to Payam, and what are their salaries?",
        "query": "SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )",
        "query_toks": [
            "SELECT",
            "employee_id",
            ",",
            "salary",
            "FROM",
            "employees",
            "WHERE",
            "manager_id",
            "=",
            "(",
            "SELECT",
            "employee_id",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "=",
            "'Payam",
            "'",
            ")"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "find the name of all departments that do actually have one or more employees assigned to them.",
        "query": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T2.department_name",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "departments",
            "AS",
            "T2",
            "ON",
            "T1.department_id",
            "=",
            "T2.department_id"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the names of departments that have at least one employee.",
        "query": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T2.department_name",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "departments",
            "AS",
            "T2",
            "ON",
            "T1.department_id",
            "=",
            "T2.department_id"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "get the details of employees who manage a department.",
        "query": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "*",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "departments",
            "AS",
            "T2",
            "ON",
            "T1.department_id",
            "=",
            "T2.department_id",
            "WHERE",
            "T1.employee_id",
            "=",
            "T2.manager_id"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What is all the information regarding employees who are managers?",
        "query": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "*",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "departments",
            "AS",
            "T2",
            "ON",
            "T1.department_id",
            "=",
            "T2.department_id",
            "WHERE",
            "T1.employee_id",
            "=",
            "T2.manager_id"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display all the information about the department Marketing.",
        "query": "SELECT * FROM  departments WHERE department_name  =  'Marketing'",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "departments",
            "WHERE",
            "department_name",
            "=",
            "'Marketing",
            "'"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What is all the information about the Marketing department?",
        "query": "SELECT * FROM  departments WHERE department_name  =  'Marketing'",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "departments",
            "WHERE",
            "department_name",
            "=",
            "'Marketing",
            "'"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display the ID for those employees who did two or more jobs in the past.",
        "query": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2",
        "query_toks": [
            "SELECT",
            "employee_id",
            "FROM",
            "job_history",
            "GROUP",
            "BY",
            "employee_id",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the employee ids for those who had two or more jobs.",
        "query": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2",
        "query_toks": [
            "SELECT",
            "employee_id",
            "FROM",
            "job_history",
            "GROUP",
            "BY",
            "employee_id",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the unique ids of those departments where any manager is managing 4 or more employees.",
        "query": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "department_id",
            "FROM",
            "employees",
            "GROUP",
            "BY",
            "department_id",
            ",",
            "manager_id",
            "HAVING",
            "COUNT",
            "(",
            "employee_id",
            ")",
            ">",
            "=",
            "4"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "Give the distinct department ids of departments in which a manager is in charge of 4 or more employees?",
        "query": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "department_id",
            "FROM",
            "employees",
            "GROUP",
            "BY",
            "department_id",
            ",",
            "manager_id",
            "HAVING",
            "COUNT",
            "(",
            "employee_id",
            ")",
            ">",
            "=",
            "4"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "Find the job ID for those jobs which average salary is above 8000.",
        "query": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000",
        "query_toks": [
            "SELECT",
            "job_id",
            "FROM",
            "employees",
            "GROUP",
            "BY",
            "job_id",
            "HAVING",
            "AVG",
            "(",
            "salary",
            ")",
            ">",
            "8000"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the job ids corresponding to jobs with average salary above 8000?",
        "query": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000",
        "query_toks": [
            "SELECT",
            "job_id",
            "FROM",
            "employees",
            "GROUP",
            "BY",
            "job_id",
            "HAVING",
            "AVG",
            "(",
            "salary",
            ")",
            ">",
            "8000"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display the employee ID and job name for all those jobs in department 80.",
        "query": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80",
        "query_toks": [
            "SELECT",
            "T1.employee_id",
            ",",
            "T2.job_title",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "jobs",
            "AS",
            "T2",
            "ON",
            "T1.job_id",
            "=",
            "T2.job_id",
            "WHERE",
            "T1.department_id",
            "=",
            "80"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "what are the employee ids and job titles for employees in department 80?",
        "query": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80",
        "query_toks": [
            "SELECT",
            "T1.employee_id",
            ",",
            "T2.job_title",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "jobs",
            "AS",
            "T2",
            "ON",
            "T1.job_id",
            "=",
            "T2.job_id",
            "WHERE",
            "T1.department_id",
            "=",
            "80"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What is the first name and job id for all employees in the Finance department?",
        "query": "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T1.job_id",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "departments",
            "AS",
            "T2",
            "ON",
            "T1.department_id",
            "=",
            "T2.department_id",
            "WHERE",
            "T2.department_name",
            "=",
            "'Finance",
            "'"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "Give the first name and job id for all employees in the Finance department.",
        "query": "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T1.job_id",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "departments",
            "AS",
            "T2",
            "ON",
            "T1.department_id",
            "=",
            "T2.department_id",
            "WHERE",
            "T2.department_name",
            "=",
            "'Finance",
            "'"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display all the information of the employees whose salary if within the range of smallest salary and 2500.",
        "query": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "(",
            "SELECT",
            "MIN",
            "(",
            "salary",
            ")",
            "FROM",
            "employees",
            ")",
            "AND",
            "2500"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "BETWEEN",
            "(",
            "SELECT",
            "MIN",
            "(",
            "salary",
            ")",
            "FROM",
            "employees",
            ")",
            "AND",
            "2500"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "Find the ids of the employees who does not work in those departments where some employees works whose manager id within the range 100 and 200.",
        "query": "SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "employees",
            "WHERE",
            "department_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "department_id",
            "FROM",
            "departments",
            "WHERE",
            "manager_id",
            "BETWEEN",
            "100",
            "AND",
            "200",
            ")"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the ids for employees who do not work in departments with managers that have ids between 100 and 200?",
        "query": "SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "employees",
            "WHERE",
            "department_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "department_id",
            "FROM",
            "departments",
            "WHERE",
            "manager_id",
            "BETWEEN",
            "100",
            "AND",
            "200",
            ")"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara.",
        "query": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "hire_date",
            "FROM",
            "employees",
            "WHERE",
            "department_id",
            "=",
            "(",
            "SELECT",
            "department_id",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Clara",
            "''",
            ")"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the full names and hire dates for employees in the same department as someone with the first name Clara?",
        "query": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "hire_date",
            "FROM",
            "employees",
            "WHERE",
            "department_id",
            "=",
            "(",
            "SELECT",
            "department_id",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Clara",
            "''",
            ")"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara excluding Clara.",
        "query": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "hire_date",
            "FROM",
            "employees",
            "WHERE",
            "department_id",
            "=",
            "(",
            "SELECT",
            "department_id",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Clara",
            "''",
            ")",
            "AND",
            "first_name",
            "!",
            "=",
            "``",
            "Clara",
            "''"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the full names and hire dates for employees in the same department as someone with the first name Clara, not including Clara?",
        "query": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "hire_date",
            "FROM",
            "employees",
            "WHERE",
            "department_id",
            "=",
            "(",
            "SELECT",
            "department_id",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Clara",
            "''",
            ")",
            "AND",
            "first_name",
            "!",
            "=",
            "``",
            "Clara",
            "''"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display the employee number and name( first name and last name ) for all employees who work in a department with any employee whose name contains a ’T’.",
        "query": "SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )",
        "query_toks": [
            "SELECT",
            "employee_id",
            ",",
            "first_name",
            ",",
            "last_name",
            "FROM",
            "employees",
            "WHERE",
            "department_id",
            "IN",
            "(",
            "SELECT",
            "department_id",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'",
            "%",
            "T",
            "%",
            "'",
            ")"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the ids and full names for employees who work in a department that has someone with a first name that contains the letter T?",
        "query": "SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )",
        "query_toks": [
            "SELECT",
            "employee_id",
            ",",
            "first_name",
            ",",
            "last_name",
            "FROM",
            "employees",
            "WHERE",
            "department_id",
            "IN",
            "(",
            "SELECT",
            "department_id",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'",
            "%",
            "T",
            "%",
            "'",
            ")"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display the employee number, name( first name and last name ), and salary for all employees who earn more than the average salary and who work in a department with any employee with a 'J' in their first name.",
        "query": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')",
        "query_toks": [
            "SELECT",
            "employee_id",
            ",",
            "first_name",
            ",",
            "last_name",
            ",",
            "salary",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            ">",
            "(",
            "SELECT",
            "AVG",
            "(",
            "salary",
            ")",
            "FROM",
            "employees",
            ")",
            "AND",
            "department_id",
            "IN",
            "(",
            "SELECT",
            "department_id",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'",
            "%",
            "J",
            "%",
            "'",
            ")"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the ids, full names, and salaries for employees making more than average and who work in a department with employees who have the letter J in their first name?",
        "query": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')",
        "query_toks": [
            "SELECT",
            "employee_id",
            ",",
            "first_name",
            ",",
            "last_name",
            ",",
            "salary",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            ">",
            "(",
            "SELECT",
            "AVG",
            "(",
            "salary",
            ")",
            "FROM",
            "employees",
            ")",
            "AND",
            "department_id",
            "IN",
            "(",
            "SELECT",
            "department_id",
            "FROM",
            "employees",
            "WHERE",
            "first_name",
            "LIKE",
            "'",
            "%",
            "J",
            "%",
            "'",
            ")"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display the employee number and job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN.",
        "query": "SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )",
        "query_toks": [
            "SELECT",
            "employee_id",
            ",",
            "job_id",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "<",
            "(",
            "SELECT",
            "min",
            "(",
            "salary",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "job_id",
            "=",
            "'MK_MAN",
            "'",
            ")"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the employee ids and job ids for employees who make less than the lowest earning employee with title MK_MAN?",
        "query": "SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )",
        "query_toks": [
            "SELECT",
            "employee_id",
            ",",
            "job_id",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            "<",
            "(",
            "SELECT",
            "min",
            "(",
            "salary",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "job_id",
            "=",
            "'MK_MAN",
            "'",
            ")"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display the employee number, name( first name and last name ) and job title for all employees whose salary is more than any salary of those employees whose job title is PU_MAN.",
        "query": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )",
        "query_toks": [
            "SELECT",
            "employee_id",
            ",",
            "first_name",
            ",",
            "last_name",
            ",",
            "job_id",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            ">",
            "(",
            "SELECT",
            "max",
            "(",
            "salary",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "job_id",
            "=",
            "'PU_MAN",
            "'",
            ")"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the employee ids, full names, and job ids for employees who make more than the highest earning employee with title PU_MAN?",
        "query": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )",
        "query_toks": [
            "SELECT",
            "employee_id",
            ",",
            "first_name",
            ",",
            "last_name",
            ",",
            "job_id",
            "FROM",
            "employees",
            "WHERE",
            "salary",
            ">",
            "(",
            "SELECT",
            "max",
            "(",
            "salary",
            ")",
            "FROM",
            "employees",
            "WHERE",
            "job_id",
            "=",
            "'PU_MAN",
            "'",
            ")"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display the department id and the total salary for those departments which contains at least two employees.",
        "query": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2",
        "query_toks": [
            "SELECT",
            "department_id",
            ",",
            "SUM",
            "(",
            "salary",
            ")",
            "FROM",
            "employees",
            "GROUP",
            "BY",
            "department_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are total salaries and department id for each department that has more than 2 employees?",
        "query": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2",
        "query_toks": [
            "SELECT",
            "department_id",
            ",",
            "SUM",
            "(",
            "salary",
            ")",
            "FROM",
            "employees",
            "GROUP",
            "BY",
            "department_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display all the information of those employees who did not have any job in the past.",
        "query": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "employees",
            "WHERE",
            "employee_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "employee_id",
            "FROM",
            "job_history",
            ")"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What is all the information about employees who have never had a job in the past?",
        "query": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "query_toks": [
            "SELECT",
            "*",
            "FROM",
            "employees",
            "WHERE",
            "employee_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "employee_id",
            "FROM",
            "job_history",
            ")"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display the department ID, full name (first and last name), salary for those employees who is highest salary in every department.",
        "query": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "salary",
            ",",
            "department_id",
            ",",
            "MAX",
            "(",
            "salary",
            ")",
            "FROM",
            "employees",
            "GROUP",
            "BY",
            "department_id"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the department ids, full names, and salaries for employees who make the most in their departments?",
        "query": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "salary",
            ",",
            "department_id",
            ",",
            "MAX",
            "(",
            "salary",
            ")",
            "FROM",
            "employees",
            "GROUP",
            "BY",
            "department_id"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display the first and last name, department, city, and state province for each employee.",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T1.last_name",
            ",",
            "T2.department_name",
            ",",
            "T3.city",
            ",",
            "T3.state_province",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "departments",
            "AS",
            "T2",
            "ON",
            "T1.department_id",
            "=",
            "T2.department_id",
            "JOIN",
            "locations",
            "AS",
            "T3",
            "ON",
            "T2.location_id",
            "=",
            "T3.location_id"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the full names, departments, cities, and state provinces for each employee?",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T1.last_name",
            ",",
            "T2.department_name",
            ",",
            "T3.city",
            ",",
            "T3.state_province",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "departments",
            "AS",
            "T2",
            "ON",
            "T1.department_id",
            "=",
            "T2.department_id",
            "JOIN",
            "locations",
            "AS",
            "T3",
            "ON",
            "T2.location_id",
            "=",
            "T3.location_id"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display those employees who contain a letter z to their first name and also display their last name, city.",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T1.last_name",
            ",",
            "T3.city",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "departments",
            "AS",
            "T2",
            "ON",
            "T1.department_id",
            "=",
            "T2.department_id",
            "JOIN",
            "locations",
            "AS",
            "T3",
            "ON",
            "T2.location_id",
            "=",
            "T3.location_id",
            "WHERE",
            "T1.first_name",
            "LIKE",
            "'",
            "%",
            "z",
            "%",
            "'"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the full names and cities of employees who have the letter Z in their first names?",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T1.last_name",
            ",",
            "T3.city",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "departments",
            "AS",
            "T2",
            "ON",
            "T1.department_id",
            "=",
            "T2.department_id",
            "JOIN",
            "locations",
            "AS",
            "T3",
            "ON",
            "T2.location_id",
            "=",
            "T3.location_id",
            "WHERE",
            "T1.first_name",
            "LIKE",
            "'",
            "%",
            "z",
            "%",
            "'"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display the department name, city, and state province for each department.",
        "query": "SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id",
        "query_toks": [
            "SELECT",
            "T1.department_name",
            ",",
            "T2.city",
            ",",
            "T2.state_province",
            "FROM",
            "departments",
            "AS",
            "T1",
            "JOIN",
            "locations",
            "AS",
            "T2",
            "ON",
            "T2.location_id",
            "=",
            "T1.location_id"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the department names, cities, and state provinces for each department?",
        "query": "SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id",
        "query_toks": [
            "SELECT",
            "T1.department_name",
            ",",
            "T2.city",
            ",",
            "T2.state_province",
            "FROM",
            "departments",
            "AS",
            "T1",
            "JOIN",
            "locations",
            "AS",
            "T2",
            "ON",
            "T2.location_id",
            "=",
            "T1.location_id"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display the full name (first and last name ) of employee with ID and name of the country presently where (s)he is working.",
        "query": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T1.last_name",
            ",",
            "T1.employee_id",
            ",",
            "T4.country_name",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "departments",
            "AS",
            "T2",
            "ON",
            "T1.department_id",
            "=",
            "T2.department_id",
            "JOIN",
            "locations",
            "AS",
            "T3",
            "ON",
            "T2.location_id",
            "=",
            "T3.location_id",
            "JOIN",
            "countries",
            "AS",
            "T4",
            "ON",
            "T3.country_id",
            "=",
            "T4.country_id"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What the full names, ids of each employee and the name of the country they are in?",
        "query": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T1.last_name",
            ",",
            "T1.employee_id",
            ",",
            "T4.country_name",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "departments",
            "AS",
            "T2",
            "ON",
            "T1.department_id",
            "=",
            "T2.department_id",
            "JOIN",
            "locations",
            "AS",
            "T3",
            "ON",
            "T2.location_id",
            "=",
            "T3.location_id",
            "JOIN",
            "countries",
            "AS",
            "T4",
            "ON",
            "T3.country_id",
            "=",
            "T4.country_id"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display the department name and number of employees in each of the department.",
        "query": "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name",
        "query_toks": [
            "SELECT",
            "department_name",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "departments",
            "AS",
            "T2",
            "ON",
            "T1.department_id",
            "=",
            "T2.department_id",
            "GROUP",
            "BY",
            "department_name"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are the department names and how many employees work in each of them?",
        "query": "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name",
        "query_toks": [
            "SELECT",
            "department_name",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "departments",
            "AS",
            "T2",
            "ON",
            "T1.department_id",
            "=",
            "T2.department_id",
            "GROUP",
            "BY",
            "department_name"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "display the full name (first and last name), and salary of those employees who working in any department located in London.",
        "query": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "salary",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "departments",
            "AS",
            "T2",
            "ON",
            "T1.department_id",
            "=",
            "T2.department_id",
            "JOIN",
            "locations",
            "AS",
            "T3",
            "ON",
            "T2.location_id",
            "=",
            "T3.location_id",
            "WHERE",
            "T3.city",
            "=",
            "'London",
            "'"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "What are full names and salaries of employees working in the city of London?",
        "query": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "salary",
            "FROM",
            "employees",
            "AS",
            "T1",
            "JOIN",
            "departments",
            "AS",
            "T2",
            "ON",
            "T1.department_id",
            "=",
            "T2.department_id",
            "JOIN",
            "locations",
            "AS",
            "T3",
            "ON",
            "T2.location_id",
            "=",
            "T3.location_id",
            "WHERE",
            "T3.city",
            "=",
            "'London",
            "'"
        ],
        "db_id": "hr_1"
    },
    {
        "question": "what is the full name and id of the college with the largest number of baseball players?",
        "query": "SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "T1.name_full",
            ",",
            "T1.college_id",
            "FROM",
            "college",
            "AS",
            "T1",
            "JOIN",
            "player_college",
            "AS",
            "T2",
            "ON",
            "T1.college_id",
            "=",
            "T2.college_id",
            "GROUP",
            "BY",
            "T1.college_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Find the full name and id of the college that has the most baseball players.",
        "query": "SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "T1.name_full",
            ",",
            "T1.college_id",
            "FROM",
            "college",
            "AS",
            "T1",
            "JOIN",
            "player_college",
            "AS",
            "T2",
            "ON",
            "T1.college_id",
            "=",
            "T2.college_id",
            "GROUP",
            "BY",
            "T1.college_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "What is average salary of the players in the team named 'Boston Red Stockings' ?",
        "query": "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "T1.salary",
            ")",
            "FROM",
            "salary",
            "AS",
            "T1",
            "JOIN",
            "team",
            "AS",
            "T2",
            "ON",
            "T1.team_id",
            "=",
            "T2.team_id_br",
            "WHERE",
            "T2.name",
            "=",
            "'Boston",
            "Red",
            "Stockings",
            "'"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Compute the average salary of the players in the team called 'Boston Red Stockings'.",
        "query": "SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "T1.salary",
            ")",
            "FROM",
            "salary",
            "AS",
            "T1",
            "JOIN",
            "team",
            "AS",
            "T2",
            "ON",
            "T1.team_id",
            "=",
            "T2.team_id_br",
            "WHERE",
            "T2.name",
            "=",
            "'Boston",
            "Red",
            "Stockings",
            "'"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "What are first and last names of players participating in all star game in 1998?",
        "query": "SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998",
        "query_toks": [
            "SELECT",
            "name_first",
            ",",
            "name_last",
            "FROM",
            "player",
            "AS",
            "T1",
            "JOIN",
            "all_star",
            "AS",
            "T2",
            "ON",
            "T1.player_id",
            "=",
            "T2.player_id",
            "WHERE",
            "YEAR",
            "=",
            "1998"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "List the first and last name for players who participated in all star game in 1998.",
        "query": "SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998",
        "query_toks": [
            "SELECT",
            "name_first",
            ",",
            "name_last",
            "FROM",
            "player",
            "AS",
            "T1",
            "JOIN",
            "all_star",
            "AS",
            "T2",
            "ON",
            "T1.player_id",
            "=",
            "T2.player_id",
            "WHERE",
            "YEAR",
            "=",
            "1998"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "What are the first name, last name and id of the player with the most all star game experiences? Also list the count.",
        "query": "SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "T1.name_first",
            ",",
            "T1.name_last",
            ",",
            "T1.player_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "player",
            "AS",
            "T1",
            "JOIN",
            "all_star",
            "AS",
            "T2",
            "ON",
            "T1.player_id",
            "=",
            "T2.player_id",
            "GROUP",
            "BY",
            "T1.player_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Which player has the most all star game experiences? Give me the first name, last name and id of the player, as well as the number of times the player participated in all star game.",
        "query": "SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "T1.name_first",
            ",",
            "T1.name_last",
            ",",
            "T1.player_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "player",
            "AS",
            "T1",
            "JOIN",
            "all_star",
            "AS",
            "T2",
            "ON",
            "T1.player_id",
            "=",
            "T2.player_id",
            "GROUP",
            "BY",
            "T1.player_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "How many players enter hall of fame each year?",
        "query": "SELECT yearid ,  count(*) FROM hall_of_fame GROUP BY yearid;",
        "query_toks": [
            "SELECT",
            "yearid",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "hall_of_fame",
            "GROUP",
            "BY",
            "yearid",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Count the number of players who enter hall of fame for each year.",
        "query": "SELECT yearid ,  count(*) FROM hall_of_fame GROUP BY yearid;",
        "query_toks": [
            "SELECT",
            "yearid",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "hall_of_fame",
            "GROUP",
            "BY",
            "yearid",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "What is the average number of attendance at home games for each year?",
        "query": "SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;",
        "query_toks": [
            "SELECT",
            "YEAR",
            ",",
            "avg",
            "(",
            "attendance",
            ")",
            "FROM",
            "home_game",
            "GROUP",
            "BY",
            "YEAR",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "For each year, return the year and the average number of attendance at home games.",
        "query": "SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;",
        "query_toks": [
            "SELECT",
            "YEAR",
            ",",
            "avg",
            "(",
            "attendance",
            ")",
            "FROM",
            "home_game",
            "GROUP",
            "BY",
            "YEAR",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "In 2014, what are the id and rank of the team that has the largest average number of attendance?",
        "query": "SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "T2.team_id",
            ",",
            "T2.rank",
            "FROM",
            "home_game",
            "AS",
            "T1",
            "JOIN",
            "team",
            "AS",
            "T2",
            "ON",
            "T1.team_id",
            "=",
            "T2.team_id",
            "WHERE",
            "T1.year",
            "=",
            "2014",
            "GROUP",
            "BY",
            "T1.team_id",
            "ORDER",
            "BY",
            "avg",
            "(",
            "T1.attendance",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Find the id and rank of the team that has the highest average attendance rate in 2014.",
        "query": "SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "T2.team_id",
            ",",
            "T2.rank",
            "FROM",
            "home_game",
            "AS",
            "T1",
            "JOIN",
            "team",
            "AS",
            "T2",
            "ON",
            "T1.team_id",
            "=",
            "T2.team_id",
            "WHERE",
            "T1.year",
            "=",
            "2014",
            "GROUP",
            "BY",
            "T1.team_id",
            "ORDER",
            "BY",
            "avg",
            "(",
            "T1.attendance",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "What are the manager's first name, last name and id who won the most manager award?",
        "query": "SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "T1.name_first",
            ",",
            "T1.name_last",
            ",",
            "T2.player_id",
            "FROM",
            "player",
            "AS",
            "T1",
            "JOIN",
            "manager_award",
            "AS",
            "T2",
            "ON",
            "T1.player_id",
            "=",
            "T2.player_id",
            "GROUP",
            "BY",
            "T2.player_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Which manager won the most manager award? Give me the manager's first name, last name and id.",
        "query": "SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "T1.name_first",
            ",",
            "T1.name_last",
            ",",
            "T2.player_id",
            "FROM",
            "player",
            "AS",
            "T1",
            "JOIN",
            "manager_award",
            "AS",
            "T2",
            "ON",
            "T1.player_id",
            "=",
            "T2.player_id",
            "GROUP",
            "BY",
            "T2.player_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "How many parks are there in the state of NY?",
        "query": "SELECT count(*) FROM park WHERE state  =  'NY';",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "park",
            "WHERE",
            "state",
            "=",
            "'NY",
            "'",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Show me the number of parks the state of NY has.",
        "query": "SELECT count(*) FROM park WHERE state  =  'NY';",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "park",
            "WHERE",
            "state",
            "=",
            "'NY",
            "'",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Which 3 players won the most player awards? List their full name and id.",
        "query": "SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;",
        "query_toks": [
            "SELECT",
            "T1.name_first",
            ",",
            "T1.name_last",
            ",",
            "T1.player_id",
            "FROM",
            "player",
            "AS",
            "T1",
            "JOIN",
            "player_award",
            "AS",
            "T2",
            "ON",
            "T1.player_id",
            "=",
            "T2.player_id",
            "GROUP",
            "BY",
            "T1.player_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "3",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Find the first name, last name and id for the top three players won the most player awards.",
        "query": "SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;",
        "query_toks": [
            "SELECT",
            "T1.name_first",
            ",",
            "T1.name_last",
            ",",
            "T1.player_id",
            "FROM",
            "player",
            "AS",
            "T1",
            "JOIN",
            "player_award",
            "AS",
            "T2",
            "ON",
            "T1.player_id",
            "=",
            "T2.player_id",
            "GROUP",
            "BY",
            "T1.player_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "3",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "List three countries which are the origins of the least players.",
        "query": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;",
        "query_toks": [
            "SELECT",
            "birth_country",
            "FROM",
            "player",
            "GROUP",
            "BY",
            "birth_country",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC",
            "LIMIT",
            "3",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "What are the three countries that the least players are from?",
        "query": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;",
        "query_toks": [
            "SELECT",
            "birth_country",
            "FROM",
            "player",
            "GROUP",
            "BY",
            "birth_country",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC",
            "LIMIT",
            "3",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Find all the players' first name and last name who have empty death record.",
        "query": "SELECT name_first ,  name_last FROM player WHERE death_year = '';",
        "query_toks": [
            "SELECT",
            "name_first",
            ",",
            "name_last",
            "FROM",
            "player",
            "WHERE",
            "death_year",
            "=",
            "''",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "What are the first name and last name of the players whose death record is empty?",
        "query": "SELECT name_first ,  name_last FROM player WHERE death_year = '';",
        "query_toks": [
            "SELECT",
            "name_first",
            ",",
            "name_last",
            "FROM",
            "player",
            "WHERE",
            "death_year",
            "=",
            "''",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "How many players born in USA are right-handed batters? That is, have the batter value 'R'.",
        "query": "SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R';",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "player",
            "WHERE",
            "birth_country",
            "=",
            "'USA",
            "'",
            "AND",
            "bats",
            "=",
            "'R",
            "'",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Count the number of players who were born in USA and have bats information 'R'.",
        "query": "SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R';",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "player",
            "WHERE",
            "birth_country",
            "=",
            "'USA",
            "'",
            "AND",
            "bats",
            "=",
            "'R",
            "'",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "What is the average height of the players from the college named 'Yale University'?",
        "query": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "T1.height",
            ")",
            "FROM",
            "player",
            "AS",
            "T1",
            "JOIN",
            "player_college",
            "AS",
            "T2",
            "ON",
            "T1.player_id",
            "=",
            "T2.player_id",
            "JOIN",
            "college",
            "AS",
            "T3",
            "ON",
            "T3.college_id",
            "=",
            "T2.college_id",
            "WHERE",
            "T3.name_full",
            "=",
            "'Yale",
            "University",
            "'",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Find the average height of the players who belong to the college called 'Yale University'.",
        "query": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "T1.height",
            ")",
            "FROM",
            "player",
            "AS",
            "T1",
            "JOIN",
            "player_college",
            "AS",
            "T2",
            "ON",
            "T1.player_id",
            "=",
            "T2.player_id",
            "JOIN",
            "college",
            "AS",
            "T3",
            "ON",
            "T3.college_id",
            "=",
            "T2.college_id",
            "WHERE",
            "T3.name_full",
            "=",
            "'Yale",
            "University",
            "'",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "What is the highest salary among each team? List the team name, id and maximum salary.",
        "query": "SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;",
        "query_toks": [
            "SELECT",
            "T1.name",
            ",",
            "T1.team_id",
            ",",
            "max",
            "(",
            "T2.salary",
            ")",
            "FROM",
            "team",
            "AS",
            "T1",
            "JOIN",
            "salary",
            "AS",
            "T2",
            "ON",
            "T1.team_id",
            "=",
            "T2.team_id",
            "GROUP",
            "BY",
            "T1.team_id",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "For each team, return the team name, id and the maximum salary among the team.",
        "query": "SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;",
        "query_toks": [
            "SELECT",
            "T1.name",
            ",",
            "T1.team_id",
            ",",
            "max",
            "(",
            "T2.salary",
            ")",
            "FROM",
            "team",
            "AS",
            "T1",
            "JOIN",
            "salary",
            "AS",
            "T2",
            "ON",
            "T1.team_id",
            "=",
            "T2.team_id",
            "GROUP",
            "BY",
            "T1.team_id",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "What are the name and id of the team offering the lowest average salary?",
        "query": "SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "T1.name",
            ",",
            "T1.team_id",
            "FROM",
            "team",
            "AS",
            "T1",
            "JOIN",
            "salary",
            "AS",
            "T2",
            "ON",
            "T1.team_id",
            "=",
            "T2.team_id",
            "GROUP",
            "BY",
            "T1.team_id",
            "ORDER",
            "BY",
            "avg",
            "(",
            "T2.salary",
            ")",
            "ASC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Which team offers the lowest average salary? Give me the name and id of the team.",
        "query": "SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "T1.name",
            ",",
            "T1.team_id",
            "FROM",
            "team",
            "AS",
            "T1",
            "JOIN",
            "salary",
            "AS",
            "T2",
            "ON",
            "T1.team_id",
            "=",
            "T2.team_id",
            "GROUP",
            "BY",
            "T1.team_id",
            "ORDER",
            "BY",
            "avg",
            "(",
            "T2.salary",
            ")",
            "ASC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Find the players' first name and last name who won award both in 1960 and in 1961.",
        "query": "SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961",
        "query_toks": [
            "SELECT",
            "T1.name_first",
            ",",
            "T1.name_last",
            "FROM",
            "player",
            "AS",
            "T1",
            "JOIN",
            "player_award",
            "AS",
            "T2",
            "WHERE",
            "T2.year",
            "=",
            "1960",
            "INTERSECT",
            "SELECT",
            "T1.name_first",
            ",",
            "T1.name_last",
            "FROM",
            "player",
            "AS",
            "T1",
            "JOIN",
            "player_award",
            "AS",
            "T2",
            "WHERE",
            "T2.year",
            "=",
            "1961"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Which players won awards in both 1960 and 1961? Return their first names and last names.",
        "query": "SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961",
        "query_toks": [
            "SELECT",
            "T1.name_first",
            ",",
            "T1.name_last",
            "FROM",
            "player",
            "AS",
            "T1",
            "JOIN",
            "player_award",
            "AS",
            "T2",
            "WHERE",
            "T2.year",
            "=",
            "1960",
            "INTERSECT",
            "SELECT",
            "T1.name_first",
            ",",
            "T1.name_last",
            "FROM",
            "player",
            "AS",
            "T1",
            "JOIN",
            "player_award",
            "AS",
            "T2",
            "WHERE",
            "T2.year",
            "=",
            "1961"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "List players' first name and last name who have weight greater than 220 or height shorter than 75.",
        "query": "SELECT name_first ,  name_last FROM player WHERE weight  >  220 OR height  <  75",
        "query_toks": [
            "SELECT",
            "name_first",
            ",",
            "name_last",
            "FROM",
            "player",
            "WHERE",
            "weight",
            ">",
            "220",
            "OR",
            "height",
            "<",
            "75"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "What are the first name and last name of the players who have weight above 220 or height below 75?",
        "query": "SELECT name_first ,  name_last FROM player WHERE weight  >  220 OR height  <  75",
        "query_toks": [
            "SELECT",
            "name_first",
            ",",
            "name_last",
            "FROM",
            "player",
            "WHERE",
            "weight",
            ">",
            "220",
            "OR",
            "height",
            "<",
            "75"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "List the maximum scores of the team Boston Red Stockings when the team won in postseason?",
        "query": "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "T1.wins",
            ")",
            "FROM",
            "postseason",
            "AS",
            "T1",
            "JOIN",
            "team",
            "AS",
            "T2",
            "ON",
            "T1.team_id_winner",
            "=",
            "T2.team_id_br",
            "WHERE",
            "T2.name",
            "=",
            "'Boston",
            "Red",
            "Stockings",
            "'",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "What are the maximum scores the team Boston Red Stockings got when the team won in postseason?",
        "query": "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "T1.wins",
            ")",
            "FROM",
            "postseason",
            "AS",
            "T1",
            "JOIN",
            "team",
            "AS",
            "T2",
            "ON",
            "T1.team_id_winner",
            "=",
            "T2.team_id_br",
            "WHERE",
            "T2.name",
            "=",
            "'Boston",
            "Red",
            "Stockings",
            "'",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "How many times did Boston Red Stockings lose in 2009 postseason?",
        "query": "SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009;",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "postseason",
            "AS",
            "T1",
            "JOIN",
            "team",
            "AS",
            "T2",
            "ON",
            "T1.team_id_loser",
            "=",
            "T2.team_id_br",
            "WHERE",
            "T2.name",
            "=",
            "'Boston",
            "Red",
            "Stockings",
            "'",
            "AND",
            "T1.year",
            "=",
            "2009",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Count the number of times the team \"Boston Red Stockings\" lost in 2009 postseason.",
        "query": "SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009;",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "postseason",
            "AS",
            "T1",
            "JOIN",
            "team",
            "AS",
            "T2",
            "ON",
            "T1.team_id_loser",
            "=",
            "T2.team_id_br",
            "WHERE",
            "T2.name",
            "=",
            "'Boston",
            "Red",
            "Stockings",
            "'",
            "AND",
            "T1.year",
            "=",
            "2009",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "What are the name and id of the team with the most victories in 2008 postseason?",
        "query": "SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "T2.name",
            ",",
            "T1.team_id_winner",
            "FROM",
            "postseason",
            "AS",
            "T1",
            "JOIN",
            "team",
            "AS",
            "T2",
            "ON",
            "T1.team_id_winner",
            "=",
            "T2.team_id_br",
            "WHERE",
            "T1.year",
            "=",
            "2008",
            "GROUP",
            "BY",
            "T1.team_id_winner",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Find the name and id of the team that won the most times in 2008 postseason.",
        "query": "SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "T2.name",
            ",",
            "T1.team_id_winner",
            "FROM",
            "postseason",
            "AS",
            "T1",
            "JOIN",
            "team",
            "AS",
            "T2",
            "ON",
            "T1.team_id_winner",
            "=",
            "T2.team_id_br",
            "WHERE",
            "T1.year",
            "=",
            "2008",
            "GROUP",
            "BY",
            "T1.team_id_winner",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "What is the number of wins the team Boston Red Stockings got in the postseasons each year in history?",
        "query": "SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "T1.year",
            "FROM",
            "postseason",
            "AS",
            "T1",
            "JOIN",
            "team",
            "AS",
            "T2",
            "ON",
            "T1.team_id_winner",
            "=",
            "T2.team_id_br",
            "WHERE",
            "T2.name",
            "=",
            "'Boston",
            "Red",
            "Stockings",
            "'",
            "GROUP",
            "BY",
            "T1.year"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "For each year, return the year and the number of times the team Boston Red Stockings won in the postseasons.",
        "query": "SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "T1.year",
            "FROM",
            "postseason",
            "AS",
            "T1",
            "JOIN",
            "team",
            "AS",
            "T2",
            "ON",
            "T1.team_id_winner",
            "=",
            "T2.team_id_br",
            "WHERE",
            "T2.name",
            "=",
            "'Boston",
            "Red",
            "Stockings",
            "'",
            "GROUP",
            "BY",
            "T1.year"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "What is the total number of postseason games that team Boston Red Stockings participated in?",
        "query": "SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' );",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "(",
            "SELECT",
            "*",
            "FROM",
            "postseason",
            "AS",
            "T1",
            "JOIN",
            "team",
            "AS",
            "T2",
            "ON",
            "T1.team_id_winner",
            "=",
            "T2.team_id_br",
            "WHERE",
            "T2.name",
            "=",
            "'Boston",
            "Red",
            "Stockings",
            "'",
            "UNION",
            "SELECT",
            "*",
            "FROM",
            "postseason",
            "AS",
            "T1",
            "JOIN",
            "team",
            "AS",
            "T2",
            "ON",
            "T1.team_id_loser",
            "=",
            "T2.team_id_br",
            "WHERE",
            "T2.name",
            "=",
            "'Boston",
            "Red",
            "Stockings",
            "'",
            ")",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "How many times in total did the team Boston Red Stockings participate in postseason games?",
        "query": "SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' );",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "(",
            "SELECT",
            "*",
            "FROM",
            "postseason",
            "AS",
            "T1",
            "JOIN",
            "team",
            "AS",
            "T2",
            "ON",
            "T1.team_id_winner",
            "=",
            "T2.team_id_br",
            "WHERE",
            "T2.name",
            "=",
            "'Boston",
            "Red",
            "Stockings",
            "'",
            "UNION",
            "SELECT",
            "*",
            "FROM",
            "postseason",
            "AS",
            "T1",
            "JOIN",
            "team",
            "AS",
            "T2",
            "ON",
            "T1.team_id_loser",
            "=",
            "T2.team_id_br",
            "WHERE",
            "T2.name",
            "=",
            "'Boston",
            "Red",
            "Stockings",
            "'",
            ")",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "How many games in 1885 postseason resulted in ties (that is, the value of \"ties\" is '1')?",
        "query": "SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "postseason",
            "WHERE",
            "YEAR",
            "=",
            "1885",
            "AND",
            "ties",
            "=",
            "1",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Find the number of tied games (the value of \"ties\" is '1') in 1885 postseason.",
        "query": "SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1;",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "postseason",
            "WHERE",
            "YEAR",
            "=",
            "1885",
            "AND",
            "ties",
            "=",
            "1",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "What is the total salary paid by team Boston Red Stockings in 2010?",
        "query": "SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "T1.salary",
            ")",
            "FROM",
            "salary",
            "AS",
            "T1",
            "JOIN",
            "team",
            "AS",
            "T2",
            "ON",
            "T1.team_id",
            "=",
            "T2.team_id_br",
            "WHERE",
            "T2.name",
            "=",
            "'Boston",
            "Red",
            "Stockings",
            "'",
            "AND",
            "T1.year",
            "=",
            "2010"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "What is the total salary expenses of team Boston Red Stockings in 2010?",
        "query": "SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "T1.salary",
            ")",
            "FROM",
            "salary",
            "AS",
            "T1",
            "JOIN",
            "team",
            "AS",
            "T2",
            "ON",
            "T1.team_id",
            "=",
            "T2.team_id_br",
            "WHERE",
            "T2.name",
            "=",
            "'Boston",
            "Red",
            "Stockings",
            "'",
            "AND",
            "T1.year",
            "=",
            "2010"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "How many players were in the team Boston Red Stockings in 2000?",
        "query": "SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "salary",
            "AS",
            "T1",
            "JOIN",
            "team",
            "AS",
            "T2",
            "ON",
            "T1.team_id",
            "=",
            "T2.team_id_br",
            "WHERE",
            "T2.name",
            "=",
            "'Boston",
            "Red",
            "Stockings",
            "'",
            "AND",
            "T1.year",
            "=",
            "2000"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "How many players did Boston Red Stockings have in 2000?",
        "query": "SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "salary",
            "AS",
            "T1",
            "JOIN",
            "team",
            "AS",
            "T2",
            "ON",
            "T1.team_id",
            "=",
            "T2.team_id_br",
            "WHERE",
            "T2.name",
            "=",
            "'Boston",
            "Red",
            "Stockings",
            "'",
            "AND",
            "T1.year",
            "=",
            "2000"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "List the 3 highest salaries of the players in 2001?",
        "query": "SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;",
        "query_toks": [
            "SELECT",
            "salary",
            "FROM",
            "salary",
            "WHERE",
            "YEAR",
            "=",
            "2001",
            "ORDER",
            "BY",
            "salary",
            "DESC",
            "LIMIT",
            "3",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "How much salary did the top 3 well-paid players get in 2001?",
        "query": "SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;",
        "query_toks": [
            "SELECT",
            "salary",
            "FROM",
            "salary",
            "WHERE",
            "YEAR",
            "=",
            "2001",
            "ORDER",
            "BY",
            "salary",
            "DESC",
            "LIMIT",
            "3",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "What were all the salary values of players in 2010 and 2001?",
        "query": "SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001",
        "query_toks": [
            "SELECT",
            "salary",
            "FROM",
            "salary",
            "WHERE",
            "YEAR",
            "=",
            "2010",
            "UNION",
            "SELECT",
            "salary",
            "FROM",
            "salary",
            "WHERE",
            "YEAR",
            "=",
            "2001"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "List all the salary values players received in 2010 and 2001.",
        "query": "SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001",
        "query_toks": [
            "SELECT",
            "salary",
            "FROM",
            "salary",
            "WHERE",
            "YEAR",
            "=",
            "2010",
            "UNION",
            "SELECT",
            "salary",
            "FROM",
            "salary",
            "WHERE",
            "YEAR",
            "=",
            "2001"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "In which year did the least people enter hall of fame?",
        "query": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "yearid",
            "FROM",
            "hall_of_fame",
            "GROUP",
            "BY",
            "yearid",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Find the year in which the least people enter hall of fame.",
        "query": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "yearid",
            "FROM",
            "hall_of_fame",
            "GROUP",
            "BY",
            "yearid",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "How many parks are there in Atlanta city?",
        "query": "SELECT count(*) FROM park WHERE city = 'Atlanta';",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "park",
            "WHERE",
            "city",
            "=",
            "'Atlanta",
            "'",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "How many parks does Atlanta city have?",
        "query": "SELECT count(*) FROM park WHERE city = 'Atlanta';",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "park",
            "WHERE",
            "city",
            "=",
            "'Atlanta",
            "'",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "How many games were played in park \"Columbia Park\" in 1907?",
        "query": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "home_game",
            "AS",
            "T1",
            "JOIN",
            "park",
            "AS",
            "T2",
            "ON",
            "T1.park_id",
            "=",
            "T2.park_id",
            "WHERE",
            "T1.year",
            "=",
            "1907",
            "AND",
            "T2.park_name",
            "=",
            "'Columbia",
            "Park",
            "'",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Count the number of games taken place in park \"Columbia Park\" in 1907.",
        "query": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "home_game",
            "AS",
            "T1",
            "JOIN",
            "park",
            "AS",
            "T2",
            "ON",
            "T1.park_id",
            "=",
            "T2.park_id",
            "WHERE",
            "T1.year",
            "=",
            "1907",
            "AND",
            "T2.park_name",
            "=",
            "'Columbia",
            "Park",
            "'",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "How many games were played in city Atlanta in 2000?",
        "query": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "home_game",
            "AS",
            "T1",
            "JOIN",
            "park",
            "AS",
            "T2",
            "ON",
            "T1.park_id",
            "=",
            "T2.park_id",
            "WHERE",
            "T1.year",
            "=",
            "2000",
            "AND",
            "T2.city",
            "=",
            "'Atlanta",
            "'",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Find the number of games taken place in city Atlanta in 2000.",
        "query": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "home_game",
            "AS",
            "T1",
            "JOIN",
            "park",
            "AS",
            "T2",
            "ON",
            "T1.park_id",
            "=",
            "T2.park_id",
            "WHERE",
            "T1.year",
            "=",
            "2000",
            "AND",
            "T2.city",
            "=",
            "'Atlanta",
            "'",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?",
        "query": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "T1.attendance",
            ")",
            "FROM",
            "home_game",
            "AS",
            "T1",
            "JOIN",
            "team",
            "AS",
            "T2",
            "ON",
            "T1.team_id",
            "=",
            "T2.team_id_br",
            "WHERE",
            "T2.name",
            "=",
            "'Boston",
            "Red",
            "Stockings",
            "'",
            "AND",
            "T1.year",
            "BETWEEN",
            "2000",
            "AND",
            "2010",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "How many games in total did team Boston Red Stockings attend from 2000 to 2010?",
        "query": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "T1.attendance",
            ")",
            "FROM",
            "home_game",
            "AS",
            "T1",
            "JOIN",
            "team",
            "AS",
            "T2",
            "ON",
            "T1.team_id",
            "=",
            "T2.team_id_br",
            "WHERE",
            "T2.name",
            "=",
            "'Boston",
            "Red",
            "Stockings",
            "'",
            "AND",
            "T1.year",
            "BETWEEN",
            "2000",
            "AND",
            "2010",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "How much did the the player with first name Len and last name Barker earn between 1985 to 1990 in total?",
        "query": "SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "T1.salary",
            ")",
            "FROM",
            "salary",
            "AS",
            "T1",
            "JOIN",
            "player",
            "AS",
            "T2",
            "ON",
            "T1.player_id",
            "=",
            "T2.player_id",
            "WHERE",
            "T2.name_first",
            "=",
            "'Len",
            "'",
            "AND",
            "T2.name_last",
            "=",
            "'Barker",
            "'",
            "AND",
            "T1.year",
            "BETWEEN",
            "1985",
            "AND",
            "1990",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Compute the total salary that the player with first name Len and last name Barker received between 1985 to 1990.",
        "query": "SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990;",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "T1.salary",
            ")",
            "FROM",
            "salary",
            "AS",
            "T1",
            "JOIN",
            "player",
            "AS",
            "T2",
            "ON",
            "T1.player_id",
            "=",
            "T2.player_id",
            "WHERE",
            "T2.name_first",
            "=",
            "'Len",
            "'",
            "AND",
            "T2.name_last",
            "=",
            "'Barker",
            "'",
            "AND",
            "T1.year",
            "BETWEEN",
            "1985",
            "AND",
            "1990",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007.",
        "query": "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'",
        "query_toks": [
            "SELECT",
            "T2.name_first",
            ",",
            "T2.name_last",
            "FROM",
            "salary",
            "AS",
            "T1",
            "JOIN",
            "player",
            "AS",
            "T2",
            "ON",
            "T1.player_id",
            "=",
            "T2.player_id",
            "JOIN",
            "team",
            "AS",
            "T3",
            "ON",
            "T3.team_id_br",
            "=",
            "T1.team_id",
            "WHERE",
            "T1.year",
            "=",
            "2005",
            "AND",
            "T3.name",
            "=",
            "'Washington",
            "Nationals",
            "'",
            "INTERSECT",
            "SELECT",
            "T2.name_first",
            ",",
            "T2.name_last",
            "FROM",
            "salary",
            "AS",
            "T1",
            "JOIN",
            "player",
            "AS",
            "T2",
            "ON",
            "T1.player_id",
            "=",
            "T2.player_id",
            "JOIN",
            "team",
            "AS",
            "T3",
            "ON",
            "T3.team_id_br",
            "=",
            "T1.team_id",
            "WHERE",
            "T1.year",
            "=",
            "2007",
            "AND",
            "T3.name",
            "=",
            "'Washington",
            "Nationals",
            "'"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007?",
        "query": "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'",
        "query_toks": [
            "SELECT",
            "T2.name_first",
            ",",
            "T2.name_last",
            "FROM",
            "salary",
            "AS",
            "T1",
            "JOIN",
            "player",
            "AS",
            "T2",
            "ON",
            "T1.player_id",
            "=",
            "T2.player_id",
            "JOIN",
            "team",
            "AS",
            "T3",
            "ON",
            "T3.team_id_br",
            "=",
            "T1.team_id",
            "WHERE",
            "T1.year",
            "=",
            "2005",
            "AND",
            "T3.name",
            "=",
            "'Washington",
            "Nationals",
            "'",
            "INTERSECT",
            "SELECT",
            "T2.name_first",
            ",",
            "T2.name_last",
            "FROM",
            "salary",
            "AS",
            "T1",
            "JOIN",
            "player",
            "AS",
            "T2",
            "ON",
            "T1.player_id",
            "=",
            "T2.player_id",
            "JOIN",
            "team",
            "AS",
            "T3",
            "ON",
            "T3.team_id_br",
            "=",
            "T1.team_id",
            "WHERE",
            "T1.year",
            "=",
            "2007",
            "AND",
            "T3.name",
            "=",
            "'Washington",
            "Nationals",
            "'"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?",
        "query": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "T1.games",
            ")",
            "FROM",
            "home_game",
            "AS",
            "T1",
            "JOIN",
            "team",
            "AS",
            "T2",
            "ON",
            "T1.team_id",
            "=",
            "T2.team_id_br",
            "WHERE",
            "T2.name",
            "=",
            "'Boston",
            "Red",
            "Stockings",
            "'",
            "AND",
            "T1.year",
            "BETWEEN",
            "1990",
            "AND",
            "2000",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Count the total number of games the team Boston Red Stockings attended from 1990 to 2000.",
        "query": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "T1.games",
            ")",
            "FROM",
            "home_game",
            "AS",
            "T1",
            "JOIN",
            "team",
            "AS",
            "T2",
            "ON",
            "T1.team_id",
            "=",
            "T2.team_id_br",
            "WHERE",
            "T2.name",
            "=",
            "'Boston",
            "Red",
            "Stockings",
            "'",
            "AND",
            "T1.year",
            "BETWEEN",
            "1990",
            "AND",
            "2000",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Which team had the least number of attendances in home games in 1980?",
        "query": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "home_game",
            "AS",
            "T1",
            "JOIN",
            "team",
            "AS",
            "T2",
            "ON",
            "T1.team_id",
            "=",
            "T2.team_id_br",
            "WHERE",
            "T1.year",
            "=",
            "1980",
            "ORDER",
            "BY",
            "T1.attendance",
            "ASC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Find the team that attended the least number of home games in 1980.",
        "query": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "home_game",
            "AS",
            "T1",
            "JOIN",
            "team",
            "AS",
            "T2",
            "ON",
            "T1.team_id",
            "=",
            "T2.team_id_br",
            "WHERE",
            "T1.year",
            "=",
            "1980",
            "ORDER",
            "BY",
            "T1.attendance",
            "ASC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "List the names of states that have more than 2 parks.",
        "query": "SELECT state FROM park GROUP BY state HAVING count(*)  >  2;",
        "query_toks": [
            "SELECT",
            "state",
            "FROM",
            "park",
            "GROUP",
            "BY",
            "state",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Which states have more than 2 parks?",
        "query": "SELECT state FROM park GROUP BY state HAVING count(*)  >  2;",
        "query_toks": [
            "SELECT",
            "state",
            "FROM",
            "park",
            "GROUP",
            "BY",
            "state",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "How many team franchises are active, with active value 'Y'?",
        "query": "SELECT count(*) FROM team_franchise WHERE active = 'Y';",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "team_franchise",
            "WHERE",
            "active",
            "=",
            "'Y",
            "'",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Find the number of team franchises that are active (have 'Y' as \"active\" information).",
        "query": "SELECT count(*) FROM team_franchise WHERE active = 'Y';",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "team_franchise",
            "WHERE",
            "active",
            "=",
            "'Y",
            "'",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Which cities have 2 to 4 parks?",
        "query": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;",
        "query_toks": [
            "SELECT",
            "city",
            "FROM",
            "park",
            "GROUP",
            "BY",
            "city",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "BETWEEN",
            "2",
            "AND",
            "4",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Find all the cities that have 2 to 4 parks.",
        "query": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;",
        "query_toks": [
            "SELECT",
            "city",
            "FROM",
            "park",
            "GROUP",
            "BY",
            "city",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "BETWEEN",
            "2",
            "AND",
            "4",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Which park had most attendances in 2008?",
        "query": "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "T2.park_name",
            "FROM",
            "home_game",
            "AS",
            "T1",
            "JOIN",
            "park",
            "AS",
            "T2",
            "ON",
            "T1.park_id",
            "=",
            "T2.park_id",
            "WHERE",
            "T1.year",
            "=",
            "2008",
            "ORDER",
            "BY",
            "T1.attendance",
            "DESC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Which park did the most people attend in 2008?",
        "query": "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "T2.park_name",
            "FROM",
            "home_game",
            "AS",
            "T1",
            "JOIN",
            "park",
            "AS",
            "T2",
            "ON",
            "T1.park_id",
            "=",
            "T2.park_id",
            "WHERE",
            "T1.year",
            "=",
            "2008",
            "ORDER",
            "BY",
            "T1.attendance",
            "DESC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "baseball_1"
    },
    {
        "question": "Which claims caused more than 2 settlements or have the maximum claim value? List the date the claim was made and the claim id.",
        "query": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )",
        "query_toks": [
            "SELECT",
            "T1.Date_Claim_Made",
            ",",
            "T1.Claim_id",
            "FROM",
            "Claims",
            "AS",
            "T1",
            "JOIN",
            "Settlements",
            "AS",
            "T2",
            "ON",
            "T1.Claim_id",
            "=",
            "T2.Claim_id",
            "GROUP",
            "BY",
            "T1.Claim_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2",
            "UNION",
            "SELECT",
            "T1.Date_Claim_Made",
            ",",
            "T1.Claim_id",
            "FROM",
            "Claims",
            "AS",
            "T1",
            "JOIN",
            "Settlements",
            "AS",
            "T2",
            "ON",
            "T1.Claim_id",
            "=",
            "T2.Claim_id",
            "WHERE",
            "T1.Amount_Claimed",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "Amount_Claimed",
            ")",
            "FROM",
            "Claims",
            ")"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Find the claims that led to more than two settlements or have the maximum claim value. For each of them, return the date the claim was made and the id of the claim.",
        "query": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )",
        "query_toks": [
            "SELECT",
            "T1.Date_Claim_Made",
            ",",
            "T1.Claim_id",
            "FROM",
            "Claims",
            "AS",
            "T1",
            "JOIN",
            "Settlements",
            "AS",
            "T2",
            "ON",
            "T1.Claim_id",
            "=",
            "T2.Claim_id",
            "GROUP",
            "BY",
            "T1.Claim_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2",
            "UNION",
            "SELECT",
            "T1.Date_Claim_Made",
            ",",
            "T1.Claim_id",
            "FROM",
            "Claims",
            "AS",
            "T1",
            "JOIN",
            "Settlements",
            "AS",
            "T2",
            "ON",
            "T1.Claim_id",
            "=",
            "T2.Claim_id",
            "WHERE",
            "T1.Amount_Claimed",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "Amount_Claimed",
            ")",
            "FROM",
            "Claims",
            ")"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Which customer had at least 2 policies but did not file any claims? List the customer details and id.",
        "query": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id",
        "query_toks": [
            "SELECT",
            "T1.customer_details",
            ",",
            "T1.customer_id",
            "FROM",
            "Customers",
            "AS",
            "T1",
            "JOIN",
            "Customer_Policies",
            "AS",
            "T2",
            "ON",
            "T1.Customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2",
            "EXCEPT",
            "SELECT",
            "T1.customer_details",
            ",",
            "T1.customer_id",
            "FROM",
            "Customers",
            "AS",
            "T1",
            "JOIN",
            "Customer_Policies",
            "AS",
            "T2",
            "ON",
            "T1.Customer_id",
            "=",
            "T2.customer_id",
            "JOIN",
            "Claims",
            "AS",
            "T3",
            "ON",
            "T2.policy_id",
            "=",
            "T3.policy_id"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Give me the the customer details and id for the customers who had two or more policies but did not file any claims.",
        "query": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id",
        "query_toks": [
            "SELECT",
            "T1.customer_details",
            ",",
            "T1.customer_id",
            "FROM",
            "Customers",
            "AS",
            "T1",
            "JOIN",
            "Customer_Policies",
            "AS",
            "T2",
            "ON",
            "T1.Customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2",
            "EXCEPT",
            "SELECT",
            "T1.customer_details",
            ",",
            "T1.customer_id",
            "FROM",
            "Customers",
            "AS",
            "T1",
            "JOIN",
            "Customer_Policies",
            "AS",
            "T2",
            "ON",
            "T1.Customer_id",
            "=",
            "T2.customer_id",
            "JOIN",
            "Claims",
            "AS",
            "T3",
            "ON",
            "T2.policy_id",
            "=",
            "T3.policy_id"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "List the method, date and amount of all the payments, in ascending order of date.",
        "query": "SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC",
        "query_toks": [
            "SELECT",
            "Payment_Method_Code",
            ",",
            "Date_Payment_Made",
            ",",
            "Amount_Payment",
            "FROM",
            "Payments",
            "ORDER",
            "BY",
            "Date_Payment_Made",
            "ASC"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "What are the method, date and amount of each payment? Sort the list in ascending order of date.",
        "query": "SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC",
        "query_toks": [
            "SELECT",
            "Payment_Method_Code",
            ",",
            "Date_Payment_Made",
            ",",
            "Amount_Payment",
            "FROM",
            "Payments",
            "ORDER",
            "BY",
            "Date_Payment_Made",
            "ASC"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Among all the claims, what is the settlement amount of the claim with the largest claim amount? List both the settlement amount and claim amount.",
        "query": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Amount_Settled",
            ",",
            "Amount_Claimed",
            "FROM",
            "Claims",
            "ORDER",
            "BY",
            "Amount_Claimed",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Find the settlement amount of the claim with the largest claim amount. Show both the settlement amount and claim amount.",
        "query": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Amount_Settled",
            ",",
            "Amount_Claimed",
            "FROM",
            "Claims",
            "ORDER",
            "BY",
            "Amount_Claimed",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount.",
        "query": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Amount_Settled",
            ",",
            "Amount_Claimed",
            "FROM",
            "Claims",
            "ORDER",
            "BY",
            "Amount_Settled",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Find the claimed amount in the claim with the least amount settled. Show both the settlement amount and claim amount.",
        "query": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Amount_Settled",
            ",",
            "Amount_Claimed",
            "FROM",
            "Claims",
            "ORDER",
            "BY",
            "Amount_Settled",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Among all the claims, which claims have a claimed amount larger than the average? List the date the claim was made and the date it was settled.",
        "query": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )",
        "query_toks": [
            "SELECT",
            "Date_Claim_Made",
            ",",
            "Date_Claim_Settled",
            "FROM",
            "Claims",
            "WHERE",
            "Amount_Claimed",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "Amount_Claimed",
            ")",
            "FROM",
            "Claims",
            ")"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Give me the claim date, settlement date for all the claims whose claimed amount is larger than the average.",
        "query": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )",
        "query_toks": [
            "SELECT",
            "Date_Claim_Made",
            ",",
            "Date_Claim_Settled",
            "FROM",
            "Claims",
            "WHERE",
            "Amount_Claimed",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "Amount_Claimed",
            ")",
            "FROM",
            "Claims",
            ")"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date.",
        "query": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )",
        "query_toks": [
            "SELECT",
            "Date_Claim_Made",
            "FROM",
            "Claims",
            "WHERE",
            "Amount_Settled",
            "<",
            "=",
            "(",
            "SELECT",
            "avg",
            "(",
            "Amount_Settled",
            ")",
            "FROM",
            "Claims",
            ")"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Return the claim start date for the claims whose claimed amount is no more than the average",
        "query": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )",
        "query_toks": [
            "SELECT",
            "Date_Claim_Made",
            "FROM",
            "Claims",
            "WHERE",
            "Amount_Settled",
            "<",
            "=",
            "(",
            "SELECT",
            "avg",
            "(",
            "Amount_Settled",
            ")",
            "FROM",
            "Claims",
            ")"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "How many settlements does each claim correspond to? List the claim id and the number of settlements.",
        "query": "SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id",
        "query_toks": [
            "SELECT",
            "T1.Claim_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Claims",
            "AS",
            "T1",
            "JOIN",
            "Settlements",
            "AS",
            "T2",
            "ON",
            "T1.claim_id",
            "=",
            "T2.claim_id",
            "GROUP",
            "BY",
            "T1.claim_id"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Find the number of settlements each claim corresponds to. Show the number together with the claim id.",
        "query": "SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id",
        "query_toks": [
            "SELECT",
            "T1.Claim_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Claims",
            "AS",
            "T1",
            "JOIN",
            "Settlements",
            "AS",
            "T2",
            "ON",
            "T1.claim_id",
            "=",
            "T2.claim_id",
            "GROUP",
            "BY",
            "T1.claim_id"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Which claim incurred the most number of settlements? List the claim id, the date the claim was made, and the number.",
        "query": "SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.claim_id",
            ",",
            "T1.date_claim_made",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Claims",
            "AS",
            "T1",
            "JOIN",
            "Settlements",
            "AS",
            "T2",
            "ON",
            "T1.claim_id",
            "=",
            "T2.claim_id",
            "GROUP",
            "BY",
            "T1.claim_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Find the claim id and claim date of the claim that incurred the most settlement count. Also tell me the count.",
        "query": "SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.claim_id",
            ",",
            "T1.date_claim_made",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Claims",
            "AS",
            "T1",
            "JOIN",
            "Settlements",
            "AS",
            "T2",
            "ON",
            "T1.claim_id",
            "=",
            "T2.claim_id",
            "GROUP",
            "BY",
            "T1.claim_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "How many settlements were made on the claim with the most recent claim settlement date? List the number and the claim id.",
        "query": "SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "T1.claim_id",
            "FROM",
            "Claims",
            "AS",
            "T1",
            "JOIN",
            "Settlements",
            "AS",
            "T2",
            "ON",
            "T1.claim_id",
            "=",
            "T2.claim_id",
            "GROUP",
            "BY",
            "T1.claim_id",
            "ORDER",
            "BY",
            "T1.Date_Claim_Settled",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Find the claim id and the number of settlements made for the claim with the most recent settlement date.",
        "query": "SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "T1.claim_id",
            "FROM",
            "Claims",
            "AS",
            "T1",
            "JOIN",
            "Settlements",
            "AS",
            "T2",
            "ON",
            "T1.claim_id",
            "=",
            "T2.claim_id",
            "GROUP",
            "BY",
            "T1.claim_id",
            "ORDER",
            "BY",
            "T1.Date_Claim_Settled",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Of all the claims, what was the earliest date when any claim was made?",
        "query": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Date_Claim_Made",
            "FROM",
            "Claims",
            "ORDER",
            "BY",
            "Date_Claim_Made",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Tell me the the date when the first claim was made.",
        "query": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Date_Claim_Made",
            "FROM",
            "Claims",
            "ORDER",
            "BY",
            "Date_Claim_Made",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "What is the total amount of settlement made for all the settlements?",
        "query": "SELECT sum(Amount_Settled) FROM Settlements",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Amount_Settled",
            ")",
            "FROM",
            "Settlements"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Compute the total amount of settlement across all the settlements.",
        "query": "SELECT sum(Amount_Settled) FROM Settlements",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Amount_Settled",
            ")",
            "FROM",
            "Settlements"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Who are the customers that had more than 1 policy? List the customer details and id.",
        "query": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1",
        "query_toks": [
            "SELECT",
            "T1.customer_details",
            ",",
            "T1.customer_id",
            "FROM",
            "Customers",
            "AS",
            "T1",
            "JOIN",
            "Customer_Policies",
            "AS",
            "T2",
            "ON",
            "T1.Customer_id",
            "=",
            "T2.Customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Find the the customer details and id for the customers who had more than one policy.",
        "query": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1",
        "query_toks": [
            "SELECT",
            "T1.customer_details",
            ",",
            "T1.customer_id",
            "FROM",
            "Customers",
            "AS",
            "T1",
            "JOIN",
            "Customer_Policies",
            "AS",
            "T2",
            "ON",
            "T1.Customer_id",
            "=",
            "T2.Customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "What are the claim dates and settlement dates of all the settlements?",
        "query": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements",
        "query_toks": [
            "SELECT",
            "Date_Claim_Made",
            ",",
            "Date_Claim_Settled",
            "FROM",
            "Settlements"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Tell me the the claim date and settlement date for each settlement case.",
        "query": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements",
        "query_toks": [
            "SELECT",
            "Date_Claim_Made",
            ",",
            "Date_Claim_Settled",
            "FROM",
            "Settlements"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "What is the most popular payment method?",
        "query": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Payment_Method_Code",
            "FROM",
            "Payments",
            "GROUP",
            "BY",
            "Payment_Method_Code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Which payment method is used the most often?",
        "query": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Payment_Method_Code",
            "FROM",
            "Payments",
            "GROUP",
            "BY",
            "Payment_Method_Code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "With which kind of payment method were the least number of payments processed?",
        "query": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Payment_Method_Code",
            "FROM",
            "Payments",
            "GROUP",
            "BY",
            "Payment_Method_Code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "What is the payment method that were used the least often?",
        "query": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Payment_Method_Code",
            "FROM",
            "Payments",
            "GROUP",
            "BY",
            "Payment_Method_Code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "What is the total amount of payment?",
        "query": "SELECT sum(Amount_Payment) FROM Payments",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Amount_Payment",
            ")",
            "FROM",
            "Payments"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Compute the total amount of payment processed.",
        "query": "SELECT sum(Amount_Payment) FROM Payments",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Amount_Payment",
            ")",
            "FROM",
            "Payments"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "What are all the distinct details of the customers?",
        "query": "SELECT DISTINCT customer_details FROM Customers",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "customer_details",
            "FROM",
            "Customers"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Return the distinct customer details.",
        "query": "SELECT DISTINCT customer_details FROM Customers",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "customer_details",
            "FROM",
            "Customers"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Which kind of policy type was chosen by the most customers?",
        "query": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Policy_Type_Code",
            "FROM",
            "Customer_Policies",
            "GROUP",
            "BY",
            "Policy_Type_Code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Find the policy type the most customers choose.",
        "query": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Policy_Type_Code",
            "FROM",
            "Customer_Policies",
            "GROUP",
            "BY",
            "Policy_Type_Code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "How many settlements are there in total?",
        "query": "SELECT count(*) FROM Settlements",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Settlements"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Count the total number of settlements made.",
        "query": "SELECT count(*) FROM Settlements",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Settlements"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Which Payments were processed with Visa? List the payment Id, the date and the amount.",
        "query": "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'",
        "query_toks": [
            "SELECT",
            "Payment_ID",
            ",",
            "Date_Payment_Made",
            ",",
            "Amount_Payment",
            "FROM",
            "Payments",
            "WHERE",
            "Payment_Method_Code",
            "=",
            "'Visa",
            "'"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Give me the payment Id, the date and the amount for all the payments processed with Visa.",
        "query": "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'",
        "query_toks": [
            "SELECT",
            "Payment_ID",
            ",",
            "Date_Payment_Made",
            ",",
            "Amount_Payment",
            "FROM",
            "Payments",
            "WHERE",
            "Payment_Method_Code",
            "=",
            "'Visa",
            "'"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "List the details of the customers who do not have any policies.",
        "query": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id",
        "query_toks": [
            "SELECT",
            "customer_details",
            "FROM",
            "Customers",
            "EXCEPT",
            "SELECT",
            "T1.customer_details",
            "FROM",
            "Customers",
            "AS",
            "T1",
            "JOIN",
            "Customer_Policies",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Which customers do not have any policies? Find the details of these customers.",
        "query": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id",
        "query_toks": [
            "SELECT",
            "customer_details",
            "FROM",
            "Customers",
            "EXCEPT",
            "SELECT",
            "T1.customer_details",
            "FROM",
            "Customers",
            "AS",
            "T1",
            "JOIN",
            "Customer_Policies",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement.",
        "query": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1",
        "query_toks": [
            "SELECT",
            "T1.claim_id",
            ",",
            "T1.date_claim_made",
            ",",
            "T1.Date_Claim_Settled",
            "FROM",
            "Claims",
            "AS",
            "T1",
            "JOIN",
            "Settlements",
            "AS",
            "T2",
            "ON",
            "T1.Claim_id",
            "=",
            "T2.Claim_id",
            "GROUP",
            "BY",
            "T1.claim_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "1"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Which claims had exactly one settlement? For each, tell me the the date the claim was made, the date it was settled and the amount settled.",
        "query": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1",
        "query_toks": [
            "SELECT",
            "T1.claim_id",
            ",",
            "T1.date_claim_made",
            ",",
            "T1.Date_Claim_Settled",
            "FROM",
            "Claims",
            "AS",
            "T1",
            "JOIN",
            "Settlements",
            "AS",
            "T2",
            "ON",
            "T1.Claim_id",
            "=",
            "T2.Claim_id",
            "GROUP",
            "BY",
            "T1.claim_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "=",
            "1"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "Find the total claimed amount of all the claims.",
        "query": "SELECT sum(Amount_Claimed) FROM Claims",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Amount_Claimed",
            ")",
            "FROM",
            "Claims"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "What is total amount claimed summed across all the claims?",
        "query": "SELECT sum(Amount_Claimed) FROM Claims",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Amount_Claimed",
            ")",
            "FROM",
            "Claims"
        ],
        "db_id": "insurance_policies"
    },
    {
        "question": "How many companies are headquartered in the US?",
        "query": "SELECT count(*) FROM company WHERE Headquarters  =  'USA'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "company",
            "WHERE",
            "Headquarters",
            "=",
            "'USA",
            "'"
        ],
        "db_id": "company_employee"
    },
    {
        "question": "List the names of companies by ascending number of sales.",
        "query": "SELECT Name FROM company ORDER BY Sales_in_Billion ASC",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "company",
            "ORDER",
            "BY",
            "Sales_in_Billion",
            "ASC"
        ],
        "db_id": "company_employee"
    },
    {
        "question": "What are the headquarters and industries of all companies?",
        "query": "SELECT Headquarters ,  Industry FROM company",
        "query_toks": [
            "SELECT",
            "Headquarters",
            ",",
            "Industry",
            "FROM",
            "company"
        ],
        "db_id": "company_employee"
    },
    {
        "question": "Show the names of companies in the banking or retailing industry?",
        "query": "SELECT Name FROM company WHERE Industry  =  \"Banking\" OR Industry  =  \"Retailing\"",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "company",
            "WHERE",
            "Industry",
            "=",
            "``",
            "Banking",
            "''",
            "OR",
            "Industry",
            "=",
            "``",
            "Retailing",
            "''"
        ],
        "db_id": "company_employee"
    },
    {
        "question": "What is the maximum and minimum market value of companies?",
        "query": "SELECT max(Market_Value_in_Billion) ,  min(Market_Value_in_Billion) FROM company",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "Market_Value_in_Billion",
            ")",
            ",",
            "min",
            "(",
            "Market_Value_in_Billion",
            ")",
            "FROM",
            "company"
        ],
        "db_id": "company_employee"
    },
    {
        "question": "What is the headquarter of the company with the largest sales?",
        "query": "SELECT Headquarters FROM company ORDER BY Sales_in_Billion DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Headquarters",
            "FROM",
            "company",
            "ORDER",
            "BY",
            "Sales_in_Billion",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "company_employee"
    },
    {
        "question": "Show the different headquarters and number of companies at each headquarter.",
        "query": "SELECT Headquarters ,  COUNT(*) FROM company GROUP BY Headquarters",
        "query_toks": [
            "SELECT",
            "Headquarters",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "company",
            "GROUP",
            "BY",
            "Headquarters"
        ],
        "db_id": "company_employee"
    },
    {
        "question": "Show the most common headquarter for companies.",
        "query": "SELECT Headquarters FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Headquarters",
            "FROM",
            "company",
            "GROUP",
            "BY",
            "Headquarters",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "company_employee"
    },
    {
        "question": "Show the headquarters that have at least two companies.",
        "query": "SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(*)  >=  2",
        "query_toks": [
            "SELECT",
            "Headquarters",
            "FROM",
            "company",
            "GROUP",
            "BY",
            "Headquarters",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "company_employee"
    },
    {
        "question": "Show the headquarters that have both companies in banking industry and companies in oil and gas industry.",
        "query": "SELECT Headquarters FROM company WHERE Industry  =  \"Banking\" INTERSECT SELECT Headquarters FROM company WHERE Industry  =  \"Oil and gas\"",
        "query_toks": [
            "SELECT",
            "Headquarters",
            "FROM",
            "company",
            "WHERE",
            "Industry",
            "=",
            "``",
            "Banking",
            "''",
            "INTERSECT",
            "SELECT",
            "Headquarters",
            "FROM",
            "company",
            "WHERE",
            "Industry",
            "=",
            "``",
            "Oil",
            "and",
            "gas",
            "''"
        ],
        "db_id": "company_employee"
    },
    {
        "question": "Show the names of companies and of employees.",
        "query": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID",
        "query_toks": [
            "SELECT",
            "T3.Name",
            ",",
            "T2.Name",
            "FROM",
            "employment",
            "AS",
            "T1",
            "JOIN",
            "people",
            "AS",
            "T2",
            "ON",
            "T1.People_ID",
            "=",
            "T2.People_ID",
            "JOIN",
            "company",
            "AS",
            "T3",
            "ON",
            "T1.Company_ID",
            "=",
            "T3.Company_ID"
        ],
        "db_id": "company_employee"
    },
    {
        "question": "Show names of companies and that of employees in descending order of number of years working for that employee.",
        "query": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID ORDER BY T1.Year_working",
        "query_toks": [
            "SELECT",
            "T3.Name",
            ",",
            "T2.Name",
            "FROM",
            "employment",
            "AS",
            "T1",
            "JOIN",
            "people",
            "AS",
            "T2",
            "ON",
            "T1.People_ID",
            "=",
            "T2.People_ID",
            "JOIN",
            "company",
            "AS",
            "T3",
            "ON",
            "T1.Company_ID",
            "=",
            "T3.Company_ID",
            "ORDER",
            "BY",
            "T1.Year_working"
        ],
        "db_id": "company_employee"
    },
    {
        "question": "Show the names of employees that work for companies with sales bigger than 200.",
        "query": "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200",
        "query_toks": [
            "SELECT",
            "T2.Name",
            "FROM",
            "employment",
            "AS",
            "T1",
            "JOIN",
            "people",
            "AS",
            "T2",
            "ON",
            "T1.People_ID",
            "=",
            "T2.People_ID",
            "JOIN",
            "company",
            "AS",
            "T3",
            "ON",
            "T1.Company_ID",
            "=",
            "T3.Company_ID",
            "WHERE",
            "T3.Sales_in_Billion",
            ">",
            "200"
        ],
        "db_id": "company_employee"
    },
    {
        "question": "Show the names of companies and the number of employees they have",
        "query": "SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name",
        "query_toks": [
            "SELECT",
            "T3.Name",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "employment",
            "AS",
            "T1",
            "JOIN",
            "people",
            "AS",
            "T2",
            "ON",
            "T1.People_ID",
            "=",
            "T2.People_ID",
            "JOIN",
            "company",
            "AS",
            "T3",
            "ON",
            "T1.Company_ID",
            "=",
            "T3.Company_ID",
            "GROUP",
            "BY",
            "T3.Name"
        ],
        "db_id": "company_employee"
    },
    {
        "question": "List the names of people that are not employed by any company",
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment)",
        "query_toks": [
            "SELECT",
            "Name",
            "FROM",
            "people",
            "WHERE",
            "People_ID",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "People_ID",
            "FROM",
            "employment",
            ")"
        ],
        "db_id": "company_employee"
    },
    {
        "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "query": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "company",
            "WHERE",
            "Sales_in_Billion",
            ">",
            "200",
            "ORDER",
            "BY",
            "Sales_in_Billion",
            ",",
            "Profits_in_Billion",
            "DESC"
        ],
        "db_id": "company_employee"
    },
    {
        "question": "How many companies are there?",
        "query": "SELECT count(*) FROM Companies",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Companies"
        ],
        "db_id": "company_office"
    },
    {
        "question": "Count the number of companies.",
        "query": "SELECT count(*) FROM Companies",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Companies"
        ],
        "db_id": "company_office"
    },
    {
        "question": "List the names of companies in descending order of market value.",
        "query": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "Companies",
            "ORDER",
            "BY",
            "Market_Value_billion",
            "DESC"
        ],
        "db_id": "company_office"
    },
    {
        "question": "Sort the company names in descending order of the company's market value.",
        "query": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "Companies",
            "ORDER",
            "BY",
            "Market_Value_billion",
            "DESC"
        ],
        "db_id": "company_office"
    },
    {
        "question": "What are the names of companies whose headquarters are not \"USA\"?",
        "query": "SELECT name FROM Companies WHERE Headquarters != 'USA'",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "Companies",
            "WHERE",
            "Headquarters",
            "!",
            "=",
            "'USA",
            "'"
        ],
        "db_id": "company_office"
    },
    {
        "question": "Find the names of the companies whose headquarters are not located in \"USA\".",
        "query": "SELECT name FROM Companies WHERE Headquarters != 'USA'",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "Companies",
            "WHERE",
            "Headquarters",
            "!",
            "=",
            "'USA",
            "'"
        ],
        "db_id": "company_office"
    },
    {
        "question": "What are the name and assets of each company, sorted in ascending order of company name?",
        "query": "SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "Assets_billion",
            "FROM",
            "Companies",
            "ORDER",
            "BY",
            "name",
            "ASC"
        ],
        "db_id": "company_office"
    },
    {
        "question": "List the name and assets of each company in ascending order of company name.",
        "query": "SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "Assets_billion",
            "FROM",
            "Companies",
            "ORDER",
            "BY",
            "name",
            "ASC"
        ],
        "db_id": "company_office"
    },
    {
        "question": "What are the average profits of companies?",
        "query": "SELECT avg(Profits_billion) FROM Companies",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "Profits_billion",
            ")",
            "FROM",
            "Companies"
        ],
        "db_id": "company_office"
    },
    {
        "question": "Compute the average profits companies make.",
        "query": "SELECT avg(Profits_billion) FROM Companies",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "Profits_billion",
            ")",
            "FROM",
            "Companies"
        ],
        "db_id": "company_office"
    },
    {
        "question": "What are the maximum and minimum sales of the companies whose industries are not \"Banking\".",
        "query": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "Sales_billion",
            ")",
            ",",
            "min",
            "(",
            "Sales_billion",
            ")",
            "FROM",
            "Companies",
            "WHERE",
            "Industry",
            "!",
            "=",
            "``",
            "Banking",
            "''"
        ],
        "db_id": "company_office"
    },
    {
        "question": "Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry.",
        "query": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "Sales_billion",
            ")",
            ",",
            "min",
            "(",
            "Sales_billion",
            ")",
            "FROM",
            "Companies",
            "WHERE",
            "Industry",
            "!",
            "=",
            "``",
            "Banking",
            "''"
        ],
        "db_id": "company_office"
    },
    {
        "question": "How many different industries are the companies in?",
        "query": "SELECT count(DISTINCT Industry) FROM Companies",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "Industry",
            ")",
            "FROM",
            "Companies"
        ],
        "db_id": "company_office"
    },
    {
        "question": "Count the number of distinct company industries.",
        "query": "SELECT count(DISTINCT Industry) FROM Companies",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "Industry",
            ")",
            "FROM",
            "Companies"
        ],
        "db_id": "company_office"
    },
    {
        "question": "List the names of buildings in descending order of building height.",
        "query": "SELECT name FROM buildings ORDER BY Height DESC",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "buildings",
            "ORDER",
            "BY",
            "Height",
            "DESC"
        ],
        "db_id": "company_office"
    },
    {
        "question": "What are the names of buildings sorted in descending order of building height?",
        "query": "SELECT name FROM buildings ORDER BY Height DESC",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "buildings",
            "ORDER",
            "BY",
            "Height",
            "DESC"
        ],
        "db_id": "company_office"
    },
    {
        "question": "Find the stories of the building with the largest height.",
        "query": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Stories",
            "FROM",
            "buildings",
            "ORDER",
            "BY",
            "Height",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "company_office"
    },
    {
        "question": "What is the stories of highest building?",
        "query": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Stories",
            "FROM",
            "buildings",
            "ORDER",
            "BY",
            "Height",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "company_office"
    },
    {
        "question": "List the name of a building along with the name of a company whose office is in the building.",
        "query": "SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id",
        "query_toks": [
            "SELECT",
            "T3.name",
            ",",
            "T2.name",
            "FROM",
            "Office_locations",
            "AS",
            "T1",
            "JOIN",
            "buildings",
            "AS",
            "T2",
            "ON",
            "T1.building_id",
            "=",
            "T2.id",
            "JOIN",
            "Companies",
            "AS",
            "T3",
            "ON",
            "T1.company_id",
            "=",
            "T3.id"
        ],
        "db_id": "company_office"
    },
    {
        "question": "For each company, return the company name and the name of the building its office is located in.",
        "query": "SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id",
        "query_toks": [
            "SELECT",
            "T3.name",
            ",",
            "T2.name",
            "FROM",
            "Office_locations",
            "AS",
            "T1",
            "JOIN",
            "buildings",
            "AS",
            "T2",
            "ON",
            "T1.building_id",
            "=",
            "T2.id",
            "JOIN",
            "Companies",
            "AS",
            "T3",
            "ON",
            "T1.company_id",
            "=",
            "T3.id"
        ],
        "db_id": "company_office"
    },
    {
        "question": "Show the names of the buildings that have more than one company offices.",
        "query": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "Office_locations",
            "AS",
            "T1",
            "JOIN",
            "buildings",
            "AS",
            "T2",
            "ON",
            "T1.building_id",
            "=",
            "T2.id",
            "JOIN",
            "Companies",
            "AS",
            "T3",
            "ON",
            "T1.company_id",
            "=",
            "T3.id",
            "GROUP",
            "BY",
            "T1.building_id",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "db_id": "company_office"
    },
    {
        "question": "Which buildings have more than one company offices? Give me the building names.",
        "query": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "Office_locations",
            "AS",
            "T1",
            "JOIN",
            "buildings",
            "AS",
            "T2",
            "ON",
            "T1.building_id",
            "=",
            "T2.id",
            "JOIN",
            "Companies",
            "AS",
            "T3",
            "ON",
            "T1.company_id",
            "=",
            "T3.id",
            "GROUP",
            "BY",
            "T1.building_id",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "db_id": "company_office"
    },
    {
        "question": "Show the name of the building that has the most company offices.",
        "query": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "Office_locations",
            "AS",
            "T1",
            "JOIN",
            "buildings",
            "AS",
            "T2",
            "ON",
            "T1.building_id",
            "=",
            "T2.id",
            "JOIN",
            "Companies",
            "AS",
            "T3",
            "ON",
            "T1.company_id",
            "=",
            "T3.id",
            "GROUP",
            "BY",
            "T1.building_id",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "company_office"
    },
    {
        "question": "Which building has the largest number of company offices? Give me the building name.",
        "query": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.name",
            "FROM",
            "Office_locations",
            "AS",
            "T1",
            "JOIN",
            "buildings",
            "AS",
            "T2",
            "ON",
            "T1.building_id",
            "=",
            "T2.id",
            "JOIN",
            "Companies",
            "AS",
            "T3",
            "ON",
            "T1.company_id",
            "=",
            "T3.id",
            "GROUP",
            "BY",
            "T1.building_id",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "company_office"
    },
    {
        "question": "Please show the names of the buildings whose status is \"on-hold\", in ascending order of stories.",
        "query": "SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "buildings",
            "WHERE",
            "Status",
            "=",
            "``",
            "on-hold",
            "''",
            "ORDER",
            "BY",
            "Stories",
            "ASC"
        ],
        "db_id": "company_office"
    },
    {
        "question": "Find the names of the buildings in \"on-hold\" status, and sort them in ascending order of building stories.",
        "query": "SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "buildings",
            "WHERE",
            "Status",
            "=",
            "``",
            "on-hold",
            "''",
            "ORDER",
            "BY",
            "Stories",
            "ASC"
        ],
        "db_id": "company_office"
    },
    {
        "question": "Please show each industry and the corresponding number of companies in that industry.",
        "query": "SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry",
        "query_toks": [
            "SELECT",
            "Industry",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "Companies",
            "GROUP",
            "BY",
            "Industry"
        ],
        "db_id": "company_office"
    },
    {
        "question": "Whah are the name of each industry and the number of companies in that industry?",
        "query": "SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry",
        "query_toks": [
            "SELECT",
            "Industry",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "Companies",
            "GROUP",
            "BY",
            "Industry"
        ],
        "db_id": "company_office"
    },
    {
        "question": "Please show the industries of companies in descending order of the number of companies.",
        "query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
        "query_toks": [
            "SELECT",
            "Industry",
            "FROM",
            "Companies",
            "GROUP",
            "BY",
            "Industry",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "db_id": "company_office"
    },
    {
        "question": "Sort all the industries in descending order of the count of companies in each industry",
        "query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
        "query_toks": [
            "SELECT",
            "Industry",
            "FROM",
            "Companies",
            "GROUP",
            "BY",
            "Industry",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "db_id": "company_office"
    },
    {
        "question": "List the industry shared by the most companies.",
        "query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Industry",
            "FROM",
            "Companies",
            "GROUP",
            "BY",
            "Industry",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "company_office"
    },
    {
        "question": "Which industry has the most companies?",
        "query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Industry",
            "FROM",
            "Companies",
            "GROUP",
            "BY",
            "Industry",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "company_office"
    },
    {
        "question": "List the names of buildings that have no company office.",
        "query": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "buildings",
            "WHERE",
            "id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "building_id",
            "FROM",
            "Office_locations",
            ")"
        ],
        "db_id": "company_office"
    },
    {
        "question": "Which buildings do not have any company office? Give me the building names.",
        "query": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)",
        "query_toks": [
            "SELECT",
            "name",
            "FROM",
            "buildings",
            "WHERE",
            "id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "building_id",
            "FROM",
            "Office_locations",
            ")"
        ],
        "db_id": "company_office"
    },
    {
        "question": "Show the industries shared by companies whose headquarters are \"USA\" and companies whose headquarters are \"China\".",
        "query": "SELECT Industry FROM Companies WHERE Headquarters  =  \"USA\" INTERSECT SELECT Industry FROM Companies WHERE Headquarters  =  \"China\"",
        "query_toks": [
            "SELECT",
            "Industry",
            "FROM",
            "Companies",
            "WHERE",
            "Headquarters",
            "=",
            "``",
            "USA",
            "''",
            "INTERSECT",
            "SELECT",
            "Industry",
            "FROM",
            "Companies",
            "WHERE",
            "Headquarters",
            "=",
            "``",
            "China",
            "''"
        ],
        "db_id": "company_office"
    },
    {
        "question": "Which industries have both companies with headquarter in \"USA\" and companies with headquarter in \"China\"?",
        "query": "SELECT Industry FROM Companies WHERE Headquarters  =  \"USA\" INTERSECT SELECT Industry FROM Companies WHERE Headquarters  =  \"China\"",
        "query_toks": [
            "SELECT",
            "Industry",
            "FROM",
            "Companies",
            "WHERE",
            "Headquarters",
            "=",
            "``",
            "USA",
            "''",
            "INTERSECT",
            "SELECT",
            "Industry",
            "FROM",
            "Companies",
            "WHERE",
            "Headquarters",
            "=",
            "``",
            "China",
            "''"
        ],
        "db_id": "company_office"
    },
    {
        "question": "Find the number of companies whose industry is \"Banking\" or \"Conglomerate\",",
        "query": "SELECT count(*) FROM Companies WHERE Industry  =  \"Banking\" OR Industry  =  \"Conglomerate\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Companies",
            "WHERE",
            "Industry",
            "=",
            "``",
            "Banking",
            "''",
            "OR",
            "Industry",
            "=",
            "``",
            "Conglomerate",
            "''"
        ],
        "db_id": "company_office"
    },
    {
        "question": "How many companies are in either \"Banking\" industry or \"Conglomerate\" industry?",
        "query": "SELECT count(*) FROM Companies WHERE Industry  =  \"Banking\" OR Industry  =  \"Conglomerate\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Companies",
            "WHERE",
            "Industry",
            "=",
            "``",
            "Banking",
            "''",
            "OR",
            "Industry",
            "=",
            "``",
            "Conglomerate",
            "''"
        ],
        "db_id": "company_office"
    },
    {
        "question": "Show the headquarters shared by more than two companies.",
        "query": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2",
        "query_toks": [
            "SELECT",
            "Headquarters",
            "FROM",
            "Companies",
            "GROUP",
            "BY",
            "Headquarters",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "2"
        ],
        "db_id": "company_office"
    },
    {
        "question": "Which headquarter locations are used by more than 2 companies?",
        "query": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2",
        "query_toks": [
            "SELECT",
            "Headquarters",
            "FROM",
            "Companies",
            "GROUP",
            "BY",
            "Headquarters",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "2"
        ],
        "db_id": "company_office"
    },
    {
        "question": "How many products are there?",
        "query": "SELECT count(*) FROM Products",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Products"
        ],
        "db_id": "solvency_ii"
    },
    {
        "question": "List the name of products in ascending order of price.",
        "query": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC",
        "query_toks": [
            "SELECT",
            "Product_Name",
            "FROM",
            "Products",
            "ORDER",
            "BY",
            "Product_Price",
            "ASC"
        ],
        "db_id": "solvency_ii"
    },
    {
        "question": "What are the names and type codes of products?",
        "query": "SELECT Product_Name ,  Product_Type_Code FROM Products",
        "query_toks": [
            "SELECT",
            "Product_Name",
            ",",
            "Product_Type_Code",
            "FROM",
            "Products"
        ],
        "db_id": "solvency_ii"
    },
    {
        "question": "Show the prices of the products named \"Dining\" or \"Trading Policy\".",
        "query": "SELECT Product_Price FROM Products WHERE Product_Name  =  \"Dining\" OR Product_Name  =  \"Trading Policy\"",
        "query_toks": [
            "SELECT",
            "Product_Price",
            "FROM",
            "Products",
            "WHERE",
            "Product_Name",
            "=",
            "``",
            "Dining",
            "''",
            "OR",
            "Product_Name",
            "=",
            "``",
            "Trading",
            "Policy",
            "''"
        ],
        "db_id": "solvency_ii"
    },
    {
        "question": "What is the average price for products?",
        "query": "SELECT avg(Product_Price) FROM Products",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "Product_Price",
            ")",
            "FROM",
            "Products"
        ],
        "db_id": "solvency_ii"
    },
    {
        "question": "What is the name of the product with the highest price?",
        "query": "SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Product_Name",
            "FROM",
            "Products",
            "ORDER",
            "BY",
            "Product_Price",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "solvency_ii"
    },
    {
        "question": "Show different type codes of products and the number of products with each type code.",
        "query": "SELECT Product_Type_Code ,  COUNT(*) FROM Products GROUP BY Product_Type_Code",
        "query_toks": [
            "SELECT",
            "Product_Type_Code",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "Products",
            "GROUP",
            "BY",
            "Product_Type_Code"
        ],
        "db_id": "solvency_ii"
    },
    {
        "question": "Show the most common type code across products.",
        "query": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Product_Type_Code",
            "FROM",
            "Products",
            "GROUP",
            "BY",
            "Product_Type_Code",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "solvency_ii"
    },
    {
        "question": "Show the product type codes that have at least two products.",
        "query": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(*)  >=  2",
        "query_toks": [
            "SELECT",
            "Product_Type_Code",
            "FROM",
            "Products",
            "GROUP",
            "BY",
            "Product_Type_Code",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "solvency_ii"
    },
    {
        "question": "Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000.",
        "query": "SELECT Product_Type_Code FROM Products WHERE Product_Price  >  4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price  <  3000",
        "query_toks": [
            "SELECT",
            "Product_Type_Code",
            "FROM",
            "Products",
            "WHERE",
            "Product_Price",
            ">",
            "4500",
            "INTERSECT",
            "SELECT",
            "Product_Type_Code",
            "FROM",
            "Products",
            "WHERE",
            "Product_Price",
            "<",
            "3000"
        ],
        "db_id": "solvency_ii"
    },
    {
        "question": "Show the names of products and the number of events they are in.",
        "query": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name",
        "query_toks": [
            "SELECT",
            "T1.Product_Name",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "Products",
            "AS",
            "T1",
            "JOIN",
            "Products_in_Events",
            "AS",
            "T2",
            "ON",
            "T1.Product_ID",
            "=",
            "T2.Product_ID",
            "GROUP",
            "BY",
            "T1.Product_Name"
        ],
        "db_id": "solvency_ii"
    },
    {
        "question": "Show the names of products and the number of events they are in, sorted by the number of events in descending order.",
        "query": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC",
        "query_toks": [
            "SELECT",
            "T1.Product_Name",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "Products",
            "AS",
            "T1",
            "JOIN",
            "Products_in_Events",
            "AS",
            "T2",
            "ON",
            "T1.Product_ID",
            "=",
            "T2.Product_ID",
            "GROUP",
            "BY",
            "T1.Product_Name",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "db_id": "solvency_ii"
    },
    {
        "question": "Show the names of products that are in at least two events.",
        "query": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2",
        "query_toks": [
            "SELECT",
            "T1.Product_Name",
            "FROM",
            "Products",
            "AS",
            "T1",
            "JOIN",
            "Products_in_Events",
            "AS",
            "T2",
            "ON",
            "T1.Product_ID",
            "=",
            "T2.Product_ID",
            "GROUP",
            "BY",
            "T1.Product_Name",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "solvency_ii"
    },
    {
        "question": "Show the names of products that are in at least two events in ascending alphabetical order of product name.",
        "query": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name",
        "query_toks": [
            "SELECT",
            "T1.Product_Name",
            "FROM",
            "Products",
            "AS",
            "T1",
            "JOIN",
            "Products_in_Events",
            "AS",
            "T2",
            "ON",
            "T1.Product_ID",
            "=",
            "T2.Product_ID",
            "GROUP",
            "BY",
            "T1.Product_Name",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2",
            "ORDER",
            "BY",
            "T1.Product_Name"
        ],
        "db_id": "solvency_ii"
    },
    {
        "question": "List the names of products that are not in any event.",
        "query": "SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)",
        "query_toks": [
            "SELECT",
            "Product_Name",
            "FROM",
            "Products",
            "WHERE",
            "Product_ID",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "Product_ID",
            "FROM",
            "Products_in_Events",
            ")"
        ],
        "db_id": "solvency_ii"
    },
    {
        "question": "How many premises are there?",
        "query": "SELECT count(*) FROM premises",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "premises"
        ],
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "What are all the distinct premise types?",
        "query": "SELECT DISTINCT premises_type FROM premises",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "premises_type",
            "FROM",
            "premises"
        ],
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "Find the types and details for all premises and order by the premise type.",
        "query": "SELECT premises_type ,  premise_details FROM premises ORDER BY premises_type",
        "query_toks": [
            "SELECT",
            "premises_type",
            ",",
            "premise_details",
            "FROM",
            "premises",
            "ORDER",
            "BY",
            "premises_type"
        ],
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "Show each premise type and the number of premises in that type.",
        "query": "SELECT premises_type ,  count(*) FROM premises GROUP BY premises_type",
        "query_toks": [
            "SELECT",
            "premises_type",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "premises",
            "GROUP",
            "BY",
            "premises_type"
        ],
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "Show all distinct product categories along with the number of mailshots in each category.",
        "query": "SELECT product_category ,  count(*) FROM mailshot_campaigns GROUP BY product_category",
        "query_toks": [
            "SELECT",
            "product_category",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "mailshot_campaigns",
            "GROUP",
            "BY",
            "product_category"
        ],
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "Show the name and phone of the customer without any mailshot.",
        "query": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)",
        "query_toks": [
            "SELECT",
            "customer_name",
            ",",
            "customer_phone",
            "FROM",
            "customers",
            "WHERE",
            "customer_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "customer_id",
            "FROM",
            "mailshot_customers",
            ")"
        ],
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "Show the name and phone for customers with a mailshot with outcome code 'No Response'.",
        "query": "SELECT T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.outcome_code  =  'No Response'",
        "query_toks": [
            "SELECT",
            "T1.customer_name",
            ",",
            "T1.customer_phone",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "mailshot_customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.outcome_code",
            "=",
            "'No",
            "Response",
            "'"
        ],
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "Show the outcome code of mailshots along with the number of mailshots in each outcome code.",
        "query": "SELECT outcome_code ,  count(*) FROM mailshot_customers GROUP BY outcome_code",
        "query_toks": [
            "SELECT",
            "outcome_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "mailshot_customers",
            "GROUP",
            "BY",
            "outcome_code"
        ],
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "Show the names of customers who have at least 2 mailshots with outcome code 'Order'.",
        "query": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE outcome_code  =  'Order' GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "query_toks": [
            "SELECT",
            "T2.customer_name",
            "FROM",
            "mailshot_customers",
            "AS",
            "T1",
            "JOIN",
            "customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "outcome_code",
            "=",
            "'Order",
            "'",
            "GROUP",
            "BY",
            "T1.customer_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "Show the names of customers who have the most mailshots.",
        "query": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.customer_name",
            "FROM",
            "mailshot_customers",
            "AS",
            "T1",
            "JOIN",
            "customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.",
        "query": "SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'",
        "query_toks": [
            "SELECT",
            "T2.customer_name",
            ",",
            "T2.payment_method",
            "FROM",
            "mailshot_customers",
            "AS",
            "T1",
            "JOIN",
            "customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T1.outcome_code",
            "=",
            "'Order",
            "'",
            "INTERSECT",
            "SELECT",
            "T2.customer_name",
            ",",
            "T2.payment_method",
            "FROM",
            "mailshot_customers",
            "AS",
            "T1",
            "JOIN",
            "customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T1.outcome_code",
            "=",
            "'No",
            "Response",
            "'"
        ],
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "Show the premise type and address type code for all customer addresses.",
        "query": "SELECT T2.premises_type ,  T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id  =  T2.premise_id",
        "query_toks": [
            "SELECT",
            "T2.premises_type",
            ",",
            "T1.address_type_code",
            "FROM",
            "customer_addresses",
            "AS",
            "T1",
            "JOIN",
            "premises",
            "AS",
            "T2",
            "ON",
            "T1.premise_id",
            "=",
            "T2.premise_id"
        ],
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "What are the distinct address type codes for all customer addresses?",
        "query": "SELECT DISTINCT address_type_code FROM customer_addresses",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "address_type_code",
            "FROM",
            "customer_addresses"
        ],
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.",
        "query": "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'",
        "query_toks": [
            "SELECT",
            "order_shipping_charges",
            ",",
            "customer_id",
            "FROM",
            "customer_orders",
            "WHERE",
            "order_status_code",
            "=",
            "'Cancelled",
            "'",
            "OR",
            "order_status_code",
            "=",
            "'Paid",
            "'"
        ],
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "Show the names of customers having an order with shipping method FedEx and order status Paid.",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  'FedEx' AND order_status_code  =  'Paid'",
        "query_toks": [
            "SELECT",
            "T1.customer_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "customer_orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "shipping_method_code",
            "=",
            "'FedEx",
            "'",
            "AND",
            "order_status_code",
            "=",
            "'Paid",
            "'"
        ],
        "db_id": "customers_campaigns_ecommerce"
    },
    {
        "question": "What are the ids of the top three products that were purchased in the largest amount?",
        "query": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3",
        "query_toks": [
            "SELECT",
            "product_id",
            "FROM",
            "product_suppliers",
            "ORDER",
            "BY",
            "total_amount_purchased",
            "DESC",
            "LIMIT",
            "3"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Give the ids of the three products purchased in the largest amounts.",
        "query": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3",
        "query_toks": [
            "SELECT",
            "product_id",
            "FROM",
            "product_suppliers",
            "ORDER",
            "BY",
            "total_amount_purchased",
            "DESC",
            "LIMIT",
            "3"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are the product id and product type of the cheapest product?",
        "query": "SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1",
        "query_toks": [
            "SELECT",
            "product_id",
            ",",
            "product_type_code",
            "FROM",
            "products",
            "ORDER",
            "BY",
            "product_price",
            "LIMIT",
            "1"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Give the id and product type of the product with the lowest price.",
        "query": "SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1",
        "query_toks": [
            "SELECT",
            "product_id",
            ",",
            "product_type_code",
            "FROM",
            "products",
            "ORDER",
            "BY",
            "product_price",
            "LIMIT",
            "1"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Find the number of different product types.",
        "query": "SELECT count(DISTINCT product_type_code) FROM products",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "product_type_code",
            ")",
            "FROM",
            "products"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Count the number of distinct product types.",
        "query": "SELECT count(DISTINCT product_type_code) FROM products",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "product_type_code",
            ")",
            "FROM",
            "products"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Return the address of customer 10.",
        "query": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10",
        "query_toks": [
            "SELECT",
            "T1.address_details",
            "FROM",
            "addresses",
            "AS",
            "T1",
            "JOIN",
            "customer_addresses",
            "AS",
            "T2",
            "ON",
            "T1.address_id",
            "=",
            "T2.address_id",
            "WHERE",
            "T2.customer_id",
            "=",
            "10"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What is the address for the customer with id 10?",
        "query": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10",
        "query_toks": [
            "SELECT",
            "T1.address_details",
            "FROM",
            "addresses",
            "AS",
            "T1",
            "JOIN",
            "customer_addresses",
            "AS",
            "T2",
            "ON",
            "T1.address_id",
            "=",
            "T2.address_id",
            "WHERE",
            "T2.customer_id",
            "=",
            "10"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are the staff ids and genders of all staffs whose job title is Department Manager?",
        "query": "SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Department Manager\"",
        "query_toks": [
            "SELECT",
            "T1.staff_id",
            ",",
            "T1.staff_gender",
            "FROM",
            "staff",
            "AS",
            "T1",
            "JOIN",
            "staff_department_assignments",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "WHERE",
            "T2.job_title_code",
            "=",
            "``",
            "Department",
            "Manager",
            "''"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Return the staff ids and genders for any staff with the title Department Manager.",
        "query": "SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Department Manager\"",
        "query_toks": [
            "SELECT",
            "T1.staff_id",
            ",",
            "T1.staff_gender",
            "FROM",
            "staff",
            "AS",
            "T1",
            "JOIN",
            "staff_department_assignments",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "WHERE",
            "T2.job_title_code",
            "=",
            "``",
            "Department",
            "Manager",
            "''"
        ],
        "db_id": "department_store"
    },
    {
        "question": "For each payment method, return how many customers use it.",
        "query": "SELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code",
        "query_toks": [
            "SELECT",
            "payment_method_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "customers",
            "GROUP",
            "BY",
            "payment_method_code"
        ],
        "db_id": "department_store"
    },
    {
        "question": "How many customers use each payment method?",
        "query": "SELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code",
        "query_toks": [
            "SELECT",
            "payment_method_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "customers",
            "GROUP",
            "BY",
            "payment_method_code"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What is the id of the product that was ordered the most often?",
        "query": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "product_id",
            "FROM",
            "order_items",
            "GROUP",
            "BY",
            "product_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Give the product id for the product that was ordered most frequently.",
        "query": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "product_id",
            "FROM",
            "order_items",
            "GROUP",
            "BY",
            "product_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are the name, phone number and email address of the customer who made the largest number of orders?",
        "query": "SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.customer_name",
            ",",
            "T1.customer_phone",
            ",",
            "T1.customer_email",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "customer_orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T2.customer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Return the name, phone number and email address for the customer with the most orders.",
        "query": "SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.customer_name",
            ",",
            "T1.customer_phone",
            ",",
            "T1.customer_email",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "customer_orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T2.customer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What is the average price for each type of product?",
        "query": "SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code",
        "query_toks": [
            "SELECT",
            "product_type_code",
            ",",
            "avg",
            "(",
            "product_price",
            ")",
            "FROM",
            "products",
            "GROUP",
            "BY",
            "product_type_code"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Return the average price for each product type.",
        "query": "SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code",
        "query_toks": [
            "SELECT",
            "product_type_code",
            ",",
            "avg",
            "(",
            "product_price",
            ")",
            "FROM",
            "products",
            "GROUP",
            "BY",
            "product_type_code"
        ],
        "db_id": "department_store"
    },
    {
        "question": "How many department stores does the store chain South have?",
        "query": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "department_stores",
            "AS",
            "T1",
            "JOIN",
            "department_store_chain",
            "AS",
            "T2",
            "ON",
            "T1.dept_store_chain_id",
            "=",
            "T2.dept_store_chain_id",
            "WHERE",
            "T2.dept_store_chain_name",
            "=",
            "``",
            "South",
            "''"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Count the number of stores the chain South has.",
        "query": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "department_stores",
            "AS",
            "T1",
            "JOIN",
            "department_store_chain",
            "AS",
            "T2",
            "ON",
            "T1.dept_store_chain_id",
            "=",
            "T2.dept_store_chain_id",
            "WHERE",
            "T2.dept_store_chain_name",
            "=",
            "``",
            "South",
            "''"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What is the name and job title of the staff who was assigned the latest?",
        "query": "SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.staff_name",
            ",",
            "T2.job_title_code",
            "FROM",
            "staff",
            "AS",
            "T1",
            "JOIN",
            "staff_department_assignments",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "ORDER",
            "BY",
            "T2.date_assigned_to",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Return the name and job title of the staff with the latest date assigned.",
        "query": "SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.staff_name",
            ",",
            "T2.job_title_code",
            "FROM",
            "staff",
            "AS",
            "T1",
            "JOIN",
            "staff_department_assignments",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "ORDER",
            "BY",
            "T2.date_assigned_to",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Give me the product type, name and price for all the products supplied by supplier id 3.",
        "query": "SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3",
        "query_toks": [
            "SELECT",
            "T2.product_type_code",
            ",",
            "T2.product_name",
            ",",
            "T2.product_price",
            "FROM",
            "product_suppliers",
            "AS",
            "T1",
            "JOIN",
            "products",
            "AS",
            "T2",
            "ON",
            "T1.product_id",
            "=",
            "T2.product_id",
            "WHERE",
            "T1.supplier_id",
            "=",
            "3"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Return the product type, name, and price for products supplied by supplier 3.",
        "query": "SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3",
        "query_toks": [
            "SELECT",
            "T2.product_type_code",
            ",",
            "T2.product_name",
            ",",
            "T2.product_price",
            "FROM",
            "product_suppliers",
            "AS",
            "T1",
            "JOIN",
            "products",
            "AS",
            "T2",
            "ON",
            "T1.product_id",
            "=",
            "T2.product_id",
            "WHERE",
            "T1.supplier_id",
            "=",
            "3"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Return the distinct name of customers whose order status is Pending, in the order of customer id.",
        "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.customer_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "customer_orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.order_status_code",
            "=",
            "``",
            "Pending",
            "''",
            "ORDER",
            "BY",
            "T2.customer_id"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are the distinct names of customers with an order status of Pending, sorted by customer id?",
        "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.customer_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "customer_orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.order_status_code",
            "=",
            "``",
            "Pending",
            "''",
            "ORDER",
            "BY",
            "T2.customer_id"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Find the name and address of the customers who have both New and Pending orders.",
        "query": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
        "query_toks": [
            "SELECT",
            "T1.customer_name",
            ",",
            "T1.customer_address",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "customer_orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.order_status_code",
            "=",
            "``",
            "New",
            "''",
            "INTERSECT",
            "SELECT",
            "T1.customer_name",
            ",",
            "T1.customer_address",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "customer_orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.order_status_code",
            "=",
            "``",
            "Pending",
            "''"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are the names and addressed of customers who have both New and Pending orders?",
        "query": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
        "query_toks": [
            "SELECT",
            "T1.customer_name",
            ",",
            "T1.customer_address",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "customer_orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.order_status_code",
            "=",
            "``",
            "New",
            "''",
            "INTERSECT",
            "SELECT",
            "T1.customer_name",
            ",",
            "T1.customer_address",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "customer_orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.order_status_code",
            "=",
            "``",
            "Pending",
            "''"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Return ids of all the products that are supplied by supplier id 2 and are more expensive than the average price of all products.",
        "query": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)",
        "query_toks": [
            "SELECT",
            "T1.product_id",
            "FROM",
            "product_suppliers",
            "AS",
            "T1",
            "JOIN",
            "products",
            "AS",
            "T2",
            "ON",
            "T1.product_id",
            "=",
            "T2.product_id",
            "WHERE",
            "T1.supplier_id",
            "=",
            "2",
            "AND",
            "T2.product_price",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "product_price",
            ")",
            "FROM",
            "products",
            ")"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are the ids of products from the supplier with id 2, which are more expensive than the average price across all products?",
        "query": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)",
        "query_toks": [
            "SELECT",
            "T1.product_id",
            "FROM",
            "product_suppliers",
            "AS",
            "T1",
            "JOIN",
            "products",
            "AS",
            "T2",
            "ON",
            "T1.product_id",
            "=",
            "T2.product_id",
            "WHERE",
            "T1.supplier_id",
            "=",
            "2",
            "AND",
            "T2.product_price",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "product_price",
            ")",
            "FROM",
            "products",
            ")"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What is the id and name of the department store that has both marketing and managing department?",
        "query": "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\"",
        "query_toks": [
            "SELECT",
            "T2.dept_store_id",
            ",",
            "T2.store_name",
            "FROM",
            "departments",
            "AS",
            "T1",
            "JOIN",
            "department_stores",
            "AS",
            "T2",
            "ON",
            "T1.dept_store_id",
            "=",
            "T2.dept_store_id",
            "WHERE",
            "T1.department_name",
            "=",
            "``",
            "marketing",
            "''",
            "INTERSECT",
            "SELECT",
            "T2.dept_store_id",
            ",",
            "T2.store_name",
            "FROM",
            "departments",
            "AS",
            "T1",
            "JOIN",
            "department_stores",
            "AS",
            "T2",
            "ON",
            "T1.dept_store_id",
            "=",
            "T2.dept_store_id",
            "WHERE",
            "T1.department_name",
            "=",
            "``",
            "managing",
            "''"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are the ids and names of department stores with both marketing and managing departments?",
        "query": "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\"",
        "query_toks": [
            "SELECT",
            "T2.dept_store_id",
            ",",
            "T2.store_name",
            "FROM",
            "departments",
            "AS",
            "T1",
            "JOIN",
            "department_stores",
            "AS",
            "T2",
            "ON",
            "T1.dept_store_id",
            "=",
            "T2.dept_store_id",
            "WHERE",
            "T1.department_name",
            "=",
            "``",
            "marketing",
            "''",
            "INTERSECT",
            "SELECT",
            "T2.dept_store_id",
            ",",
            "T2.store_name",
            "FROM",
            "departments",
            "AS",
            "T1",
            "JOIN",
            "department_stores",
            "AS",
            "T2",
            "ON",
            "T1.dept_store_id",
            "=",
            "T2.dept_store_id",
            "WHERE",
            "T1.department_name",
            "=",
            "``",
            "managing",
            "''"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are the ids of the two department store chains with the largest number of department stores?",
        "query": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2",
        "query_toks": [
            "SELECT",
            "dept_store_chain_id",
            "FROM",
            "department_stores",
            "GROUP",
            "BY",
            "dept_store_chain_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "2"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Return the ids of the two department store chains with the most department stores.",
        "query": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2",
        "query_toks": [
            "SELECT",
            "dept_store_chain_id",
            "FROM",
            "department_stores",
            "GROUP",
            "BY",
            "dept_store_chain_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "2"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What is the id of the department with the least number of staff?",
        "query": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1",
        "query_toks": [
            "SELECT",
            "department_id",
            "FROM",
            "staff_department_assignments",
            "GROUP",
            "BY",
            "department_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "LIMIT",
            "1"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Return the id of the department with the fewest staff assignments.",
        "query": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1",
        "query_toks": [
            "SELECT",
            "department_id",
            "FROM",
            "staff_department_assignments",
            "GROUP",
            "BY",
            "department_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "LIMIT",
            "1"
        ],
        "db_id": "department_store"
    },
    {
        "question": "For each product type, return the maximum and minimum price.",
        "query": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code",
        "query_toks": [
            "SELECT",
            "product_type_code",
            ",",
            "max",
            "(",
            "product_price",
            ")",
            ",",
            "min",
            "(",
            "product_price",
            ")",
            "FROM",
            "products",
            "GROUP",
            "BY",
            "product_type_code"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are the maximum and minimum product prices for each product type?",
        "query": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code",
        "query_toks": [
            "SELECT",
            "product_type_code",
            ",",
            "max",
            "(",
            "product_price",
            ")",
            ",",
            "min",
            "(",
            "product_price",
            ")",
            "FROM",
            "products",
            "GROUP",
            "BY",
            "product_type_code"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Find the product type whose average price is higher than the average price of all products.",
        "query": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)",
        "query_toks": [
            "SELECT",
            "product_type_code",
            "FROM",
            "products",
            "GROUP",
            "BY",
            "product_type_code",
            "HAVING",
            "avg",
            "(",
            "product_price",
            ")",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "product_price",
            ")",
            "FROM",
            "products",
            ")"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What is the code of the product type with an average price higher than the average price of all products?",
        "query": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)",
        "query_toks": [
            "SELECT",
            "product_type_code",
            "FROM",
            "products",
            "GROUP",
            "BY",
            "product_type_code",
            "HAVING",
            "avg",
            "(",
            "product_price",
            ")",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "product_price",
            ")",
            "FROM",
            "products",
            ")"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Find the id and name of the staff who has been assigned for the shortest period.",
        "query": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.staff_id",
            ",",
            "T1.staff_name",
            "FROM",
            "staff",
            "AS",
            "T1",
            "JOIN",
            "Staff_Department_Assignments",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "ORDER",
            "BY",
            "date_assigned_to",
            "-",
            "date_assigned_from",
            "LIMIT",
            "1"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What is the id and name of the staff who has been assigned for the least amount of time?",
        "query": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.staff_id",
            ",",
            "T1.staff_name",
            "FROM",
            "staff",
            "AS",
            "T1",
            "JOIN",
            "Staff_Department_Assignments",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "ORDER",
            "BY",
            "date_assigned_to",
            "-",
            "date_assigned_from",
            "LIMIT",
            "1"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Return the names and ids of all products whose price is between 600 and 700.",
        "query": "SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700",
        "query_toks": [
            "SELECT",
            "product_name",
            ",",
            "product_id",
            "FROM",
            "products",
            "WHERE",
            "product_price",
            "BETWEEN",
            "600",
            "AND",
            "700"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are the names and ids of products costing between 600 and 700?",
        "query": "SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700",
        "query_toks": [
            "SELECT",
            "product_name",
            ",",
            "product_id",
            "FROM",
            "products",
            "WHERE",
            "product_price",
            "BETWEEN",
            "600",
            "AND",
            "700"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Find the ids of all distinct customers who made order after some orders that were Cancelled.",
        "query": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "customer_id",
            "FROM",
            "Customer_Orders",
            "WHERE",
            "order_date",
            ">",
            "(",
            "SELECT",
            "min",
            "(",
            "order_date",
            ")",
            "FROM",
            "Customer_Orders",
            "WHERE",
            "order_status_code",
            "=",
            "``",
            "Cancelled",
            "''",
            ")"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are the distinct ids of customers who made an order after any order that was Cancelled?",
        "query": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "customer_id",
            "FROM",
            "Customer_Orders",
            "WHERE",
            "order_date",
            ">",
            "(",
            "SELECT",
            "min",
            "(",
            "order_date",
            ")",
            "FROM",
            "Customer_Orders",
            "WHERE",
            "order_status_code",
            "=",
            "``",
            "Cancelled",
            "''",
            ")"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff?",
        "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "query_toks": [
            "SELECT",
            "staff_id",
            "FROM",
            "Staff_Department_Assignments",
            "WHERE",
            "date_assigned_to",
            "<",
            "(",
            "SELECT",
            "max",
            "(",
            "date_assigned_to",
            ")",
            "FROM",
            "Staff_Department_Assignments",
            "WHERE",
            "job_title_code",
            "=",
            "'Clerical",
            "Staff",
            "'",
            ")"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.",
        "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "query_toks": [
            "SELECT",
            "staff_id",
            "FROM",
            "Staff_Department_Assignments",
            "WHERE",
            "date_assigned_to",
            "<",
            "(",
            "SELECT",
            "max",
            "(",
            "date_assigned_to",
            ")",
            "FROM",
            "Staff_Department_Assignments",
            "WHERE",
            "job_title_code",
            "=",
            "'Clerical",
            "Staff",
            "'",
            ")"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are the names and ids of customers whose address contains TN?",
        "query": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"",
        "query_toks": [
            "SELECT",
            "customer_name",
            ",",
            "customer_id",
            "FROM",
            "customers",
            "WHERE",
            "customer_address",
            "LIKE",
            "``",
            "%",
            "TN",
            "%",
            "''"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Return the names and ids of customers who have TN in their address.",
        "query": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"",
        "query_toks": [
            "SELECT",
            "customer_name",
            ",",
            "customer_id",
            "FROM",
            "customers",
            "WHERE",
            "customer_address",
            "LIKE",
            "``",
            "%",
            "TN",
            "%",
            "''"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Return the name and gender of the staff who was assigned in 2016.",
        "query": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\"",
        "query_toks": [
            "SELECT",
            "T1.staff_name",
            ",",
            "T1.staff_gender",
            "FROM",
            "staff",
            "AS",
            "T1",
            "JOIN",
            "staff_department_assignments",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "WHERE",
            "T2.date_assigned_from",
            "LIKE",
            "``",
            "2016",
            "%",
            "''"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are the names and genders of staff who were assigned in 2016?",
        "query": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\"",
        "query_toks": [
            "SELECT",
            "T1.staff_name",
            ",",
            "T1.staff_gender",
            "FROM",
            "staff",
            "AS",
            "T1",
            "JOIN",
            "staff_department_assignments",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "WHERE",
            "T2.date_assigned_from",
            "LIKE",
            "``",
            "2016",
            "%",
            "''"
        ],
        "db_id": "department_store"
    },
    {
        "question": "List the name of staff who has been assigned multiple jobs.",
        "query": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1",
        "query_toks": [
            "SELECT",
            "T1.staff_name",
            "FROM",
            "staff",
            "AS",
            "T1",
            "JOIN",
            "staff_department_assignments",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "GROUP",
            "BY",
            "T2.staff_id",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are the names of staff who have been assigned multiple jobs?",
        "query": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1",
        "query_toks": [
            "SELECT",
            "T1.staff_name",
            "FROM",
            "staff",
            "AS",
            "T1",
            "JOIN",
            "staff_department_assignments",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "GROUP",
            "BY",
            "T2.staff_id",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "db_id": "department_store"
    },
    {
        "question": "List the name and phone number of all suppliers in the alphabetical order of their addresses.",
        "query": "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details",
        "query_toks": [
            "SELECT",
            "T1.supplier_name",
            ",",
            "T1.supplier_phone",
            "FROM",
            "Suppliers",
            "AS",
            "T1",
            "JOIN",
            "supplier_addresses",
            "AS",
            "T2",
            "ON",
            "T1.supplier_id",
            "=",
            "T2.supplier_id",
            "JOIN",
            "addresses",
            "AS",
            "T3",
            "ON",
            "T2.address_id",
            "=",
            "T3.address_id",
            "ORDER",
            "BY",
            "T3.address_details"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are the names and phone numbers for all suppliers, sorted in alphabetical order of their addressed?",
        "query": "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details",
        "query_toks": [
            "SELECT",
            "T1.supplier_name",
            ",",
            "T1.supplier_phone",
            "FROM",
            "Suppliers",
            "AS",
            "T1",
            "JOIN",
            "supplier_addresses",
            "AS",
            "T2",
            "ON",
            "T1.supplier_id",
            "=",
            "T2.supplier_id",
            "JOIN",
            "addresses",
            "AS",
            "T3",
            "ON",
            "T2.address_id",
            "=",
            "T3.address_id",
            "ORDER",
            "BY",
            "T3.address_details"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are the phone numbers of all customers and suppliers.",
        "query": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers",
        "query_toks": [
            "SELECT",
            "customer_phone",
            "FROM",
            "customers",
            "UNION",
            "SELECT",
            "supplier_phone",
            "FROM",
            "suppliers"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Return the phone numbers for all customers and suppliers.",
        "query": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers",
        "query_toks": [
            "SELECT",
            "customer_phone",
            "FROM",
            "customers",
            "UNION",
            "SELECT",
            "supplier_phone",
            "FROM",
            "suppliers"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Return the ids of all products that were ordered more than three times or supplied more than 80000.",
        "query": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000",
        "query_toks": [
            "SELECT",
            "product_id",
            "FROM",
            "Order_Items",
            "GROUP",
            "BY",
            "product_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3",
            "UNION",
            "SELECT",
            "product_id",
            "FROM",
            "Product_Suppliers",
            "GROUP",
            "BY",
            "product_id",
            "HAVING",
            "sum",
            "(",
            "total_amount_purchased",
            ")",
            ">",
            "80000"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are the ids of all products that were either ordered more than 3 times or have a cumulative amount purchased of above 80000?",
        "query": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000",
        "query_toks": [
            "SELECT",
            "product_id",
            "FROM",
            "Order_Items",
            "GROUP",
            "BY",
            "product_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3",
            "UNION",
            "SELECT",
            "product_id",
            "FROM",
            "Product_Suppliers",
            "GROUP",
            "BY",
            "product_id",
            "HAVING",
            "sum",
            "(",
            "total_amount_purchased",
            ")",
            ">",
            "80000"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are id and name of the products whose price is lower than 600 or higher than 900?",
        "query": "SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900",
        "query_toks": [
            "SELECT",
            "product_id",
            ",",
            "product_name",
            "FROM",
            "products",
            "WHERE",
            "product_price",
            "<",
            "600",
            "OR",
            "product_price",
            ">",
            "900"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Give the ids and names of products with price lower than 600 or higher than 900.",
        "query": "SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900",
        "query_toks": [
            "SELECT",
            "product_id",
            ",",
            "product_name",
            "FROM",
            "products",
            "WHERE",
            "product_price",
            "<",
            "600",
            "OR",
            "product_price",
            ">",
            "900"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000.",
        "query": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000",
        "query_toks": [
            "SELECT",
            "supplier_id",
            "FROM",
            "Product_Suppliers",
            "GROUP",
            "BY",
            "supplier_id",
            "HAVING",
            "avg",
            "(",
            "total_amount_purchased",
            ")",
            ">",
            "50000",
            "OR",
            "avg",
            "(",
            "total_amount_purchased",
            ")",
            "<",
            "30000"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are the ids of suppliers which have an average amount purchased of above 50000 or below 30000?",
        "query": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000",
        "query_toks": [
            "SELECT",
            "supplier_id",
            "FROM",
            "Product_Suppliers",
            "GROUP",
            "BY",
            "supplier_id",
            "HAVING",
            "avg",
            "(",
            "total_amount_purchased",
            ")",
            ">",
            "50000",
            "OR",
            "avg",
            "(",
            "total_amount_purchased",
            ")",
            "<",
            "30000"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are the average amount purchased and value purchased for the supplier who supplies the most products.",
        "query": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "total_amount_purchased",
            ")",
            ",",
            "avg",
            "(",
            "total_value_purchased",
            ")",
            "FROM",
            "Product_Suppliers",
            "WHERE",
            "supplier_id",
            "=",
            "(",
            "SELECT",
            "supplier_id",
            "FROM",
            "Product_Suppliers",
            "GROUP",
            "BY",
            "supplier_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ")"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Return the average total amount purchased and total value purchased for the supplier who supplies the greatest number of products.",
        "query": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "total_amount_purchased",
            ")",
            ",",
            "avg",
            "(",
            "total_value_purchased",
            ")",
            "FROM",
            "Product_Suppliers",
            "WHERE",
            "supplier_id",
            "=",
            "(",
            "SELECT",
            "supplier_id",
            "FROM",
            "Product_Suppliers",
            "GROUP",
            "BY",
            "supplier_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ")"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What is the largest and smallest customer codes?",
        "query": "SELECT max(customer_code) ,  min(customer_code) FROM Customers",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "customer_code",
            ")",
            ",",
            "min",
            "(",
            "customer_code",
            ")",
            "FROM",
            "Customers"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Return the maximum and minimum customer codes.",
        "query": "SELECT max(customer_code) ,  min(customer_code) FROM Customers",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "customer_code",
            ")",
            ",",
            "min",
            "(",
            "customer_code",
            ")",
            "FROM",
            "Customers"
        ],
        "db_id": "department_store"
    },
    {
        "question": "List the names of all the distinct customers who bought a keyboard.",
        "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.customer_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "customer_orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "JOIN",
            "order_items",
            "AS",
            "T3",
            "ON",
            "T2.order_id",
            "=",
            "T3.order_id",
            "JOIN",
            "products",
            "AS",
            "T4",
            "ON",
            "T3.product_id",
            "=",
            "T4.product_id",
            "WHERE",
            "T4.product_name",
            "=",
            "``",
            "keyboard",
            "''"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are the distinct names of customers who have purchased a keyboard?",
        "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.customer_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "customer_orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "JOIN",
            "order_items",
            "AS",
            "T3",
            "ON",
            "T2.order_id",
            "=",
            "T3.order_id",
            "JOIN",
            "products",
            "AS",
            "T4",
            "ON",
            "T3.product_id",
            "=",
            "T4.product_id",
            "WHERE",
            "T4.product_name",
            "=",
            "``",
            "keyboard",
            "''"
        ],
        "db_id": "department_store"
    },
    {
        "question": "List the names and phone numbers of all the distinct suppliers who supply red jeans.",
        "query": "SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  \"red jeans\"",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.supplier_name",
            ",",
            "T1.supplier_phone",
            "FROM",
            "suppliers",
            "AS",
            "T1",
            "JOIN",
            "product_suppliers",
            "AS",
            "T2",
            "ON",
            "T1.supplier_id",
            "=",
            "T2.supplier_id",
            "JOIN",
            "products",
            "AS",
            "T3",
            "ON",
            "T2.product_id",
            "=",
            "T3.product_id",
            "WHERE",
            "T3.product_name",
            "=",
            "``",
            "red",
            "jeans",
            "''"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are the distinct names and phone numbers for suppliers who have red jeans?",
        "query": "SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  \"red jeans\"",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.supplier_name",
            ",",
            "T1.supplier_phone",
            "FROM",
            "suppliers",
            "AS",
            "T1",
            "JOIN",
            "product_suppliers",
            "AS",
            "T2",
            "ON",
            "T1.supplier_id",
            "=",
            "T2.supplier_id",
            "JOIN",
            "products",
            "AS",
            "T3",
            "ON",
            "T2.product_id",
            "=",
            "T3.product_id",
            "WHERE",
            "T3.product_name",
            "=",
            "``",
            "red",
            "jeans",
            "''"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type?",
        "query": "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "product_price",
            ")",
            ",",
            "min",
            "(",
            "product_price",
            ")",
            ",",
            "product_type_code",
            "FROM",
            "products",
            "GROUP",
            "BY",
            "product_type_code",
            "ORDER",
            "BY",
            "product_type_code"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Give the maximum and minimum product prices for each product type, grouped and ordered by product type.",
        "query": "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "product_price",
            ")",
            ",",
            "min",
            "(",
            "product_price",
            ")",
            ",",
            "product_type_code",
            "FROM",
            "products",
            "GROUP",
            "BY",
            "product_type_code",
            "ORDER",
            "BY",
            "product_type_code"
        ],
        "db_id": "department_store"
    },
    {
        "question": "List the order id, customer id for orders in Cancelled status, ordered by their order dates.",
        "query": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date",
        "query_toks": [
            "SELECT",
            "order_id",
            ",",
            "customer_id",
            "FROM",
            "customer_orders",
            "WHERE",
            "order_status_code",
            "=",
            "``",
            "Cancelled",
            "''",
            "ORDER",
            "BY",
            "order_date"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are the order ids and customer ids for orders that have been Cancelled, sorted by their order dates?",
        "query": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date",
        "query_toks": [
            "SELECT",
            "order_id",
            ",",
            "customer_id",
            "FROM",
            "customer_orders",
            "WHERE",
            "order_status_code",
            "=",
            "``",
            "Cancelled",
            "''",
            "ORDER",
            "BY",
            "order_date"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Find the names of products that were bought by at least two distinct customers.",
        "query": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T3.product_name",
            "FROM",
            "customer_orders",
            "AS",
            "T1",
            "JOIN",
            "order_items",
            "AS",
            "T2",
            "ON",
            "T1.order_id",
            "=",
            "T2.order_id",
            "JOIN",
            "products",
            "AS",
            "T3",
            "ON",
            "T2.product_id",
            "=",
            "T3.product_id",
            "GROUP",
            "BY",
            "T3.product_id",
            "HAVING",
            "COUNT",
            "(",
            "DISTINCT",
            "T1.customer_id",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are the distinct names of products purchased by at least two different customers?",
        "query": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T3.product_name",
            "FROM",
            "customer_orders",
            "AS",
            "T1",
            "JOIN",
            "order_items",
            "AS",
            "T2",
            "ON",
            "T1.order_id",
            "=",
            "T2.order_id",
            "JOIN",
            "products",
            "AS",
            "T3",
            "ON",
            "T2.product_id",
            "=",
            "T3.product_id",
            "GROUP",
            "BY",
            "T3.product_id",
            "HAVING",
            "COUNT",
            "(",
            "DISTINCT",
            "T1.customer_id",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Find the names of customers who have bought by at least three distinct products.",
        "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.customer_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "customer_orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "JOIN",
            "order_items",
            "AS",
            "T3",
            "ON",
            "T2.order_id",
            "=",
            "T3.order_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "HAVING",
            "COUNT",
            "(",
            "DISTINCT",
            "T3.product_id",
            ")",
            ">",
            "=",
            "3"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are the distinct names of customers who have purchased at least three different products?",
        "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.customer_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "customer_orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "JOIN",
            "order_items",
            "AS",
            "T3",
            "ON",
            "T2.order_id",
            "=",
            "T3.order_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "HAVING",
            "COUNT",
            "(",
            "DISTINCT",
            "T3.product_id",
            ")",
            ">",
            "=",
            "3"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.",
        "query": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"",
        "query_toks": [
            "SELECT",
            "T1.staff_name",
            ",",
            "T1.staff_gender",
            "FROM",
            "staff",
            "AS",
            "T1",
            "JOIN",
            "Staff_Department_Assignments",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "WHERE",
            "T2.job_title_code",
            "=",
            "``",
            "Sales",
            "Person",
            "''",
            "EXCEPT",
            "SELECT",
            "T1.staff_name",
            ",",
            "T1.staff_gender",
            "FROM",
            "staff",
            "AS",
            "T1",
            "JOIN",
            "Staff_Department_Assignments",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "WHERE",
            "T2.job_title_code",
            "=",
            "``",
            "Clerical",
            "Staff",
            "''"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are the names and genders of staff who have held the title Sales Person, but never Clerical Staff?",
        "query": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"",
        "query_toks": [
            "SELECT",
            "T1.staff_name",
            ",",
            "T1.staff_gender",
            "FROM",
            "staff",
            "AS",
            "T1",
            "JOIN",
            "Staff_Department_Assignments",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "WHERE",
            "T2.job_title_code",
            "=",
            "``",
            "Sales",
            "Person",
            "''",
            "EXCEPT",
            "SELECT",
            "T1.staff_name",
            ",",
            "T1.staff_gender",
            "FROM",
            "staff",
            "AS",
            "T1",
            "JOIN",
            "Staff_Department_Assignments",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "WHERE",
            "T2.job_title_code",
            "=",
            "``",
            "Clerical",
            "Staff",
            "''"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Find the id and name of customers whose address contains WY state and do not use credit card for payment.",
        "query": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"",
        "query_toks": [
            "SELECT",
            "customer_id",
            ",",
            "customer_name",
            "FROM",
            "customers",
            "WHERE",
            "customer_address",
            "LIKE",
            "``",
            "%",
            "WY",
            "%",
            "''",
            "AND",
            "payment_method_code",
            "!",
            "=",
            "``",
            "Credit",
            "Card",
            "''"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment?",
        "query": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"",
        "query_toks": [
            "SELECT",
            "customer_id",
            ",",
            "customer_name",
            "FROM",
            "customers",
            "WHERE",
            "customer_address",
            "LIKE",
            "``",
            "%",
            "WY",
            "%",
            "''",
            "AND",
            "payment_method_code",
            "!",
            "=",
            "``",
            "Credit",
            "Card",
            "''"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Find the average price of all product clothes.",
        "query": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "product_price",
            ")",
            "FROM",
            "products",
            "WHERE",
            "product_type_code",
            "=",
            "'Clothes",
            "'"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What is the average price of clothes?",
        "query": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "product_price",
            ")",
            "FROM",
            "products",
            "WHERE",
            "product_type_code",
            "=",
            "'Clothes",
            "'"
        ],
        "db_id": "department_store"
    },
    {
        "question": "Find the name of the most expensive hardware product.",
        "query": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "product_name",
            "FROM",
            "products",
            "WHERE",
            "product_type_code",
            "=",
            "'Hardware",
            "'",
            "ORDER",
            "BY",
            "product_price",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "department_store"
    },
    {
        "question": "What is the name of the hardware product with the greatest price?",
        "query": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "product_name",
            "FROM",
            "products",
            "WHERE",
            "product_type_code",
            "=",
            "'Hardware",
            "'",
            "ORDER",
            "BY",
            "product_price",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "department_store"
    },
    {
        "question": "How many residents does each property have? List property id and resident count.",
        "query": "SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id",
        "query_toks": [
            "SELECT",
            "T1.property_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "properties",
            "AS",
            "T1",
            "JOIN",
            "residents",
            "AS",
            "T2",
            "ON",
            "T1.property_id",
            "=",
            "T2.property_id",
            "GROUP",
            "BY",
            "T1.property_id"
        ],
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?",
        "query": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.service_type_code",
            "FROM",
            "services",
            "AS",
            "T1",
            "JOIN",
            "organizations",
            "AS",
            "T2",
            "ON",
            "T1.organization_id",
            "=",
            "T2.organization_id",
            "WHERE",
            "T2.organization_details",
            "=",
            "'Denesik",
            "and",
            "Sons",
            "Party",
            "'"
        ],
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "How many services has each resident requested? List the resident id, details, and the count in descending order of the count.",
        "query": "SELECT T1.resident_id ,  T1.other_details ,  count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id  =  T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC",
        "query_toks": [
            "SELECT",
            "T1.resident_id",
            ",",
            "T1.other_details",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Residents",
            "AS",
            "T1",
            "JOIN",
            "Residents_Services",
            "AS",
            "T2",
            "ON",
            "T1.resident_id",
            "=",
            "T2.resident_id",
            "GROUP",
            "BY",
            "T1.resident_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "What is the maximum number that a certain service is provided? List the service id, details and number.",
        "query": "SELECT T1.service_id ,  T1.service_details ,  count(*) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id  =  T2.service_id GROUP BY T1.service_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.service_id",
            ",",
            "T1.service_details",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Services",
            "AS",
            "T1",
            "JOIN",
            "Residents_Services",
            "AS",
            "T2",
            "ON",
            "T1.service_id",
            "=",
            "T2.service_id",
            "GROUP",
            "BY",
            "T1.service_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "List the id and type of each thing, and the details of the organization that owns it.",
        "query": "SELECT T1.thing_id ,  T1.type_of_Thing_Code ,  T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id  =  T2.organization_id",
        "query_toks": [
            "SELECT",
            "T1.thing_id",
            ",",
            "T1.type_of_Thing_Code",
            ",",
            "T2.organization_details",
            "FROM",
            "Things",
            "AS",
            "T1",
            "JOIN",
            "Organizations",
            "AS",
            "T2",
            "ON",
            "T1.organization_id",
            "=",
            "T2.organization_id"
        ],
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "What are the id and details of the customers who have at least 3 events?",
        "query": "SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3",
        "query_toks": [
            "SELECT",
            "T1.customer_id",
            ",",
            "T1.customer_details",
            "FROM",
            "Customers",
            "AS",
            "T1",
            "JOIN",
            "Customer_Events",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "3"
        ],
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "What is each customer's move in date, and the corresponding customer id and details?",
        "query": "SELECT T2.date_moved_in ,  T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id",
        "query_toks": [
            "SELECT",
            "T2.date_moved_in",
            ",",
            "T1.customer_id",
            ",",
            "T1.customer_details",
            "FROM",
            "Customers",
            "AS",
            "T1",
            "JOIN",
            "Customer_Events",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id"
        ],
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "Which events have the number of notes between one and three? List the event id and the property id.",
        "query": "SELECT T1.Customer_Event_ID  ,  T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID  =  T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3",
        "query_toks": [
            "SELECT",
            "T1.Customer_Event_ID",
            ",",
            "T1.property_id",
            "FROM",
            "Customer_Events",
            "AS",
            "T1",
            "JOIN",
            "Customer_Event_Notes",
            "AS",
            "T2",
            "ON",
            "T1.Customer_Event_ID",
            "=",
            "T2.Customer_Event_ID",
            "GROUP",
            "BY",
            "T1.customer_event_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "BETWEEN",
            "1",
            "AND",
            "3"
        ],
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'",
        "query": "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T2.thing_id",
            ",",
            "T2.Type_of_Thing_Code",
            "FROM",
            "Timed_Status_of_Things",
            "AS",
            "T1",
            "JOIN",
            "Things",
            "AS",
            "T2",
            "ON",
            "T1.thing_id",
            "=",
            "T2.thing_id",
            "WHERE",
            "T1.Status_of_Thing_Code",
            "=",
            "'Close",
            "'",
            "OR",
            "T1.Date_and_Date",
            "<",
            "'2017-06-19",
            "02:59:21",
            "'"
        ],
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "How many distinct locations have the things with service detail 'Unsatisfied' been located in?",
        "query": "SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.service_details  =  'Unsatisfied'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "T2.Location_Code",
            ")",
            "FROM",
            "Things",
            "AS",
            "T1",
            "JOIN",
            "Timed_Locations_of_Things",
            "AS",
            "T2",
            "ON",
            "T1.thing_id",
            "=",
            "T2.thing_id",
            "WHERE",
            "T1.service_details",
            "=",
            "'Unsatisfied",
            "'"
        ],
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "How many different status codes of things are there?",
        "query": "SELECT count(DISTINCT Status_of_Thing_Code) FROM Timed_Status_of_Things",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "Status_of_Thing_Code",
            ")",
            "FROM",
            "Timed_Status_of_Things"
        ],
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "Which organizations are not a parent organization of others? List the organization id.",
        "query": "SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations",
        "query_toks": [
            "SELECT",
            "organization_id",
            "FROM",
            "organizations",
            "EXCEPT",
            "SELECT",
            "parent_organization_id",
            "FROM",
            "organizations"
        ],
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "When is the last day any resident moved in?",
        "query": "SELECT max(date_moved_in) FROM Residents",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "date_moved_in",
            ")",
            "FROM",
            "Residents"
        ],
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "What are the resident details containing the substring 'Miss'?",
        "query": "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'",
        "query_toks": [
            "SELECT",
            "other_details",
            "FROM",
            "Residents",
            "WHERE",
            "other_details",
            "LIKE",
            "'",
            "%",
            "Miss",
            "%",
            "'"
        ],
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "List the customer event id and the corresponding move in date and property id.",
        "query": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "query_toks": [
            "SELECT",
            "customer_event_id",
            ",",
            "date_moved_in",
            ",",
            "property_id",
            "FROM",
            "customer_events"
        ],
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "How many customers did not have any event?",
        "query": "SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events )",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "customers",
            "WHERE",
            "customer_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "customer_id",
            "FROM",
            "customer_events",
            ")"
        ],
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "What are the distinct move in dates of the residents?",
        "query": "SELECT DISTINCT date_moved_in FROM residents",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "date_moved_in",
            "FROM",
            "residents"
        ],
        "db_id": "local_govt_and_lot"
    },
    {
        "question": "How many devices are there?",
        "query": "SELECT count(*) FROM device",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "device"
        ],
        "db_id": "device"
    },
    {
        "question": "Count the number of devices.",
        "query": "SELECT count(*) FROM device",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "device"
        ],
        "db_id": "device"
    },
    {
        "question": "List the carriers of devices in ascending alphabetical order.",
        "query": "SELECT Carrier FROM device ORDER BY Carrier ASC",
        "query_toks": [
            "SELECT",
            "Carrier",
            "FROM",
            "device",
            "ORDER",
            "BY",
            "Carrier",
            "ASC"
        ],
        "db_id": "device"
    },
    {
        "question": "What are the different carriers for devices, listed in alphabetical order?",
        "query": "SELECT Carrier FROM device ORDER BY Carrier ASC",
        "query_toks": [
            "SELECT",
            "Carrier",
            "FROM",
            "device",
            "ORDER",
            "BY",
            "Carrier",
            "ASC"
        ],
        "db_id": "device"
    },
    {
        "question": "What are the carriers of devices whose software platforms are not \"Android\"?",
        "query": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'",
        "query_toks": [
            "SELECT",
            "Carrier",
            "FROM",
            "device",
            "WHERE",
            "Software_Platform",
            "!",
            "=",
            "'Android",
            "'"
        ],
        "db_id": "device"
    },
    {
        "question": "Return the device carriers that do not have Android as their software platform.",
        "query": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'",
        "query_toks": [
            "SELECT",
            "Carrier",
            "FROM",
            "device",
            "WHERE",
            "Software_Platform",
            "!",
            "=",
            "'Android",
            "'"
        ],
        "db_id": "device"
    },
    {
        "question": "What are the names of shops in ascending order of open year?",
        "query": "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC",
        "query_toks": [
            "SELECT",
            "Shop_Name",
            "FROM",
            "shop",
            "ORDER",
            "BY",
            "Open_Year",
            "ASC"
        ],
        "db_id": "device"
    },
    {
        "question": "Return the names of shops, ordered by year of opening ascending.",
        "query": "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC",
        "query_toks": [
            "SELECT",
            "Shop_Name",
            "FROM",
            "shop",
            "ORDER",
            "BY",
            "Open_Year",
            "ASC"
        ],
        "db_id": "device"
    },
    {
        "question": "What is the average quantity of stocks?",
        "query": "SELECT avg(Quantity) FROM stock",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "Quantity",
            ")",
            "FROM",
            "stock"
        ],
        "db_id": "device"
    },
    {
        "question": "Give the average quantity of stocks.",
        "query": "SELECT avg(Quantity) FROM stock",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "Quantity",
            ")",
            "FROM",
            "stock"
        ],
        "db_id": "device"
    },
    {
        "question": "What are the names and location of the shops in ascending alphabetical order of name.",
        "query": "SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC",
        "query_toks": [
            "SELECT",
            "Shop_Name",
            ",",
            "LOCATION",
            "FROM",
            "shop",
            "ORDER",
            "BY",
            "Shop_Name",
            "ASC"
        ],
        "db_id": "device"
    },
    {
        "question": "Return the names and locations of shops, ordered by name in alphabetical order.",
        "query": "SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC",
        "query_toks": [
            "SELECT",
            "Shop_Name",
            ",",
            "LOCATION",
            "FROM",
            "shop",
            "ORDER",
            "BY",
            "Shop_Name",
            "ASC"
        ],
        "db_id": "device"
    },
    {
        "question": "How many different software platforms are there for devices?",
        "query": "SELECT count(DISTINCT Software_Platform) FROM device",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "Software_Platform",
            ")",
            "FROM",
            "device"
        ],
        "db_id": "device"
    },
    {
        "question": "Count the number of different software platforms.",
        "query": "SELECT count(DISTINCT Software_Platform) FROM device",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "Software_Platform",
            ")",
            "FROM",
            "device"
        ],
        "db_id": "device"
    },
    {
        "question": "List the open date of open year of the shop named \"Apple\".",
        "query": "SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  \"Apple\"",
        "query_toks": [
            "SELECT",
            "Open_Date",
            ",",
            "Open_Year",
            "FROM",
            "shop",
            "WHERE",
            "Shop_Name",
            "=",
            "``",
            "Apple",
            "''"
        ],
        "db_id": "device"
    },
    {
        "question": "What are the open dates and years for the shop named Apple?",
        "query": "SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  \"Apple\"",
        "query_toks": [
            "SELECT",
            "Open_Date",
            ",",
            "Open_Year",
            "FROM",
            "shop",
            "WHERE",
            "Shop_Name",
            "=",
            "``",
            "Apple",
            "''"
        ],
        "db_id": "device"
    },
    {
        "question": "List the name of the shop with the latest open year.",
        "query": "SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Shop_Name",
            "FROM",
            "shop",
            "ORDER",
            "BY",
            "Open_Year",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "device"
    },
    {
        "question": "What is the shop name corresponding to the shop that opened in the most recent year?",
        "query": "SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Shop_Name",
            "FROM",
            "shop",
            "ORDER",
            "BY",
            "Open_Year",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "device"
    },
    {
        "question": "Show names of shops and the carriers of devices they have in stock.",
        "query": "SELECT T3.Shop_Name ,  T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID  =  T3.Shop_ID",
        "query_toks": [
            "SELECT",
            "T3.Shop_Name",
            ",",
            "T2.Carrier",
            "FROM",
            "stock",
            "AS",
            "T1",
            "JOIN",
            "device",
            "AS",
            "T2",
            "ON",
            "T1.Device_ID",
            "=",
            "T2.Device_ID",
            "JOIN",
            "shop",
            "AS",
            "T3",
            "ON",
            "T1.Shop_ID",
            "=",
            "T3.Shop_ID"
        ],
        "db_id": "device"
    },
    {
        "question": "What are the names of device shops, and what are the carriers that they carry devices in stock for?",
        "query": "SELECT T3.Shop_Name ,  T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID  =  T3.Shop_ID",
        "query_toks": [
            "SELECT",
            "T3.Shop_Name",
            ",",
            "T2.Carrier",
            "FROM",
            "stock",
            "AS",
            "T1",
            "JOIN",
            "device",
            "AS",
            "T2",
            "ON",
            "T1.Device_ID",
            "=",
            "T2.Device_ID",
            "JOIN",
            "shop",
            "AS",
            "T3",
            "ON",
            "T1.Shop_ID",
            "=",
            "T3.Shop_ID"
        ],
        "db_id": "device"
    },
    {
        "question": "Show names of shops that have more than one kind of device in stock.",
        "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1",
        "query_toks": [
            "SELECT",
            "T2.Shop_Name",
            "FROM",
            "stock",
            "AS",
            "T1",
            "JOIN",
            "shop",
            "AS",
            "T2",
            "ON",
            "T1.Shop_ID",
            "=",
            "T2.Shop_ID",
            "GROUP",
            "BY",
            "T1.Shop_ID",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "db_id": "device"
    },
    {
        "question": "What are the names of shops that have more than a single kind of device in stock?",
        "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1",
        "query_toks": [
            "SELECT",
            "T2.Shop_Name",
            "FROM",
            "stock",
            "AS",
            "T1",
            "JOIN",
            "shop",
            "AS",
            "T2",
            "ON",
            "T1.Shop_ID",
            "=",
            "T2.Shop_ID",
            "GROUP",
            "BY",
            "T1.Shop_ID",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "db_id": "device"
    },
    {
        "question": "Show the name of the shop that has the most kind of devices in stock.",
        "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.Shop_Name",
            "FROM",
            "stock",
            "AS",
            "T1",
            "JOIN",
            "shop",
            "AS",
            "T2",
            "ON",
            "T1.Shop_ID",
            "=",
            "T2.Shop_ID",
            "GROUP",
            "BY",
            "T1.Shop_ID",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "device"
    },
    {
        "question": "What is the name of the shop that has the most different kinds of devices in stock?",
        "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.Shop_Name",
            "FROM",
            "stock",
            "AS",
            "T1",
            "JOIN",
            "shop",
            "AS",
            "T2",
            "ON",
            "T1.Shop_ID",
            "=",
            "T2.Shop_ID",
            "GROUP",
            "BY",
            "T1.Shop_ID",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "device"
    },
    {
        "question": "Show the name of the shop that have the largest quantity of devices in stock.",
        "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.Shop_Name",
            "FROM",
            "stock",
            "AS",
            "T1",
            "JOIN",
            "shop",
            "AS",
            "T2",
            "ON",
            "T1.Shop_ID",
            "=",
            "T2.Shop_ID",
            "GROUP",
            "BY",
            "T1.Shop_ID",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "T1.quantity",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "device"
    },
    {
        "question": "What is the name of the shop that has the greatest quantity of devices in stock?",
        "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.Shop_Name",
            "FROM",
            "stock",
            "AS",
            "T1",
            "JOIN",
            "shop",
            "AS",
            "T2",
            "ON",
            "T1.Shop_ID",
            "=",
            "T2.Shop_ID",
            "GROUP",
            "BY",
            "T1.Shop_ID",
            "ORDER",
            "BY",
            "SUM",
            "(",
            "T1.quantity",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "device"
    },
    {
        "question": "Please show different software platforms and the corresponding number of devices using each.",
        "query": "SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform",
        "query_toks": [
            "SELECT",
            "Software_Platform",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "device",
            "GROUP",
            "BY",
            "Software_Platform"
        ],
        "db_id": "device"
    },
    {
        "question": "What are the different software platforms for devices, and how many devices have each?",
        "query": "SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform",
        "query_toks": [
            "SELECT",
            "Software_Platform",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "device",
            "GROUP",
            "BY",
            "Software_Platform"
        ],
        "db_id": "device"
    },
    {
        "question": "Please show the software platforms of devices in descending order of the count.",
        "query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC",
        "query_toks": [
            "SELECT",
            "Software_Platform",
            "FROM",
            "device",
            "GROUP",
            "BY",
            "Software_Platform",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "db_id": "device"
    },
    {
        "question": "What are the different software platforms for devices, ordered by frequency descending?",
        "query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC",
        "query_toks": [
            "SELECT",
            "Software_Platform",
            "FROM",
            "device",
            "GROUP",
            "BY",
            "Software_Platform",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC"
        ],
        "db_id": "device"
    },
    {
        "question": "List the software platform shared by the greatest number of devices.",
        "query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Software_Platform",
            "FROM",
            "device",
            "GROUP",
            "BY",
            "Software_Platform",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "device"
    },
    {
        "question": "What is the software platform that is most common amongst all devices?",
        "query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Software_Platform",
            "FROM",
            "device",
            "GROUP",
            "BY",
            "Software_Platform",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "device"
    },
    {
        "question": "List the names of shops that have no devices in stock.",
        "query": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)",
        "query_toks": [
            "SELECT",
            "Shop_Name",
            "FROM",
            "shop",
            "WHERE",
            "Shop_ID",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "Shop_ID",
            "FROM",
            "stock",
            ")"
        ],
        "db_id": "device"
    },
    {
        "question": "What are the names of shops that do not have any devices in stock?",
        "query": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)",
        "query_toks": [
            "SELECT",
            "Shop_Name",
            "FROM",
            "shop",
            "WHERE",
            "Shop_ID",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "Shop_ID",
            "FROM",
            "stock",
            ")"
        ],
        "db_id": "device"
    },
    {
        "question": "Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.",
        "query": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008",
        "query_toks": [
            "SELECT",
            "LOCATION",
            "FROM",
            "shop",
            "WHERE",
            "Open_Year",
            ">",
            "2012",
            "INTERSECT",
            "SELECT",
            "LOCATION",
            "FROM",
            "shop",
            "WHERE",
            "Open_Year",
            "<",
            "2008"
        ],
        "db_id": "device"
    },
    {
        "question": "Which locations contains both shops that opened after the year 2012 and shops that opened before 2008?",
        "query": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008",
        "query_toks": [
            "SELECT",
            "LOCATION",
            "FROM",
            "shop",
            "WHERE",
            "Open_Year",
            ">",
            "2012",
            "INTERSECT",
            "SELECT",
            "LOCATION",
            "FROM",
            "shop",
            "WHERE",
            "Open_Year",
            "<",
            "2008"
        ],
        "db_id": "device"
    },
    {
        "question": "List the carriers of devices that have no devices in stock.",
        "query": "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)",
        "query_toks": [
            "SELECT",
            "Carrier",
            "FROM",
            "device",
            "WHERE",
            "Device_ID",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "Device_ID",
            "FROM",
            "stock",
            ")"
        ],
        "db_id": "device"
    },
    {
        "question": "What are the carriers of devices that are not in stock anywhere?",
        "query": "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)",
        "query_toks": [
            "SELECT",
            "Carrier",
            "FROM",
            "device",
            "WHERE",
            "Device_ID",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "Device_ID",
            "FROM",
            "stock",
            ")"
        ],
        "db_id": "device"
    },
    {
        "question": "Show the carriers of devices in stock at more than one shop.",
        "query": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1",
        "query_toks": [
            "SELECT",
            "T2.Carrier",
            "FROM",
            "stock",
            "AS",
            "T1",
            "JOIN",
            "device",
            "AS",
            "T2",
            "ON",
            "T1.Device_ID",
            "=",
            "T2.Device_ID",
            "GROUP",
            "BY",
            "T1.Device_ID",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "db_id": "device"
    },
    {
        "question": "What are the carriers of devices that are in stock in more than a single shop?",
        "query": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1",
        "query_toks": [
            "SELECT",
            "T2.Carrier",
            "FROM",
            "stock",
            "AS",
            "T1",
            "JOIN",
            "device",
            "AS",
            "T2",
            "ON",
            "T1.Device_ID",
            "=",
            "T2.Device_ID",
            "GROUP",
            "BY",
            "T1.Device_ID",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "db_id": "device"
    },
    {
        "question": "How many bookings do we have?",
        "query": "SELECT count(*) FROM BOOKINGS",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "BOOKINGS"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Count the total number of bookings made.",
        "query": "SELECT count(*) FROM BOOKINGS",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "BOOKINGS"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "List the order dates of all the bookings.",
        "query": "SELECT Order_Date FROM BOOKINGS",
        "query_toks": [
            "SELECT",
            "Order_Date",
            "FROM",
            "BOOKINGS"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What is the order date of each booking?",
        "query": "SELECT Order_Date FROM BOOKINGS",
        "query_toks": [
            "SELECT",
            "Order_Date",
            "FROM",
            "BOOKINGS"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Show all the planned delivery dates and actual delivery dates of bookings.",
        "query": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS",
        "query_toks": [
            "SELECT",
            "Planned_Delivery_Date",
            ",",
            "Actual_Delivery_Date",
            "FROM",
            "BOOKINGS"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the planned delivery date and actual delivery date for each booking?",
        "query": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS",
        "query_toks": [
            "SELECT",
            "Planned_Delivery_Date",
            ",",
            "Actual_Delivery_Date",
            "FROM",
            "BOOKINGS"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "How many customers do we have?",
        "query": "SELECT count(*) FROM CUSTOMERS",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "CUSTOMERS"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Count the number of customers recorded.",
        "query": "SELECT count(*) FROM CUSTOMERS",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "CUSTOMERS"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the phone and email for customer Harold?",
        "query": "SELECT Customer_Phone ,  Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name  =  \"Harold\"",
        "query_toks": [
            "SELECT",
            "Customer_Phone",
            ",",
            "Customer_Email_Address",
            "FROM",
            "CUSTOMERS",
            "WHERE",
            "Customer_Name",
            "=",
            "``",
            "Harold",
            "''"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Find the phone number and email address of customer \"Harold\".",
        "query": "SELECT Customer_Phone ,  Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name  =  \"Harold\"",
        "query_toks": [
            "SELECT",
            "Customer_Phone",
            ",",
            "Customer_Email_Address",
            "FROM",
            "CUSTOMERS",
            "WHERE",
            "Customer_Name",
            "=",
            "``",
            "Harold",
            "''"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Show all the Store_Name of drama workshop groups.",
        "query": "SELECT Store_Name FROM Drama_Workshop_Groups",
        "query_toks": [
            "SELECT",
            "Store_Name",
            "FROM",
            "Drama_Workshop_Groups"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the store names of drama workshop groups?",
        "query": "SELECT Store_Name FROM Drama_Workshop_Groups",
        "query_toks": [
            "SELECT",
            "Store_Name",
            "FROM",
            "Drama_Workshop_Groups"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Show the minimum, average, maximum order quantity of all invoices.",
        "query": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES",
        "query_toks": [
            "SELECT",
            "min",
            "(",
            "Order_Quantity",
            ")",
            ",",
            "avg",
            "(",
            "Order_Quantity",
            ")",
            ",",
            "max",
            "(",
            "Order_Quantity",
            ")",
            "FROM",
            "INVOICES"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the minimum, average, and maximum quantities ordered? Check all the invoices.",
        "query": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES",
        "query_toks": [
            "SELECT",
            "min",
            "(",
            "Order_Quantity",
            ")",
            ",",
            "avg",
            "(",
            "Order_Quantity",
            ")",
            ",",
            "max",
            "(",
            "Order_Quantity",
            ")",
            "FROM",
            "INVOICES"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the distinct payment method codes in all the invoices?",
        "query": "SELECT DISTINCT payment_method_code FROM INVOICES",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "payment_method_code",
            "FROM",
            "INVOICES"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Show me the distinct payment method codes from the invoice record.",
        "query": "SELECT DISTINCT payment_method_code FROM INVOICES",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "payment_method_code",
            "FROM",
            "INVOICES"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What is the description of the marketing region China?",
        "query": "SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name  =  \"China\"",
        "query_toks": [
            "SELECT",
            "Marketing_Region_Descriptrion",
            "FROM",
            "Marketing_Regions",
            "WHERE",
            "Marketing_Region_Name",
            "=",
            "``",
            "China",
            "''"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Find the marketing region description of China?",
        "query": "SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name  =  \"China\"",
        "query_toks": [
            "SELECT",
            "Marketing_Region_Descriptrion",
            "FROM",
            "Marketing_Regions",
            "WHERE",
            "Marketing_Region_Name",
            "=",
            "``",
            "China",
            "''"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Show all the distinct product names with price higher than the average.",
        "query": "SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS)",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "Product_Name",
            "FROM",
            "PRODUCTS",
            "WHERE",
            "Product_Price",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "Product_Price",
            ")",
            "FROM",
            "PRODUCTS",
            ")"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the distinct names of the products that cost more than the average?",
        "query": "SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS)",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "Product_Name",
            "FROM",
            "PRODUCTS",
            "WHERE",
            "Product_Price",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "Product_Price",
            ")",
            "FROM",
            "PRODUCTS",
            ")"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What is the name of the most expensive product?",
        "query": "SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Product_Name",
            "FROM",
            "PRODUCTS",
            "ORDER",
            "BY",
            "Product_Price",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Tell me the name of the most pricy product.",
        "query": "SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Product_Name",
            "FROM",
            "PRODUCTS",
            "ORDER",
            "BY",
            "Product_Price",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "List all product names in ascending order of price.",
        "query": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC",
        "query_toks": [
            "SELECT",
            "Product_Name",
            "FROM",
            "Products",
            "ORDER",
            "BY",
            "Product_Price",
            "ASC"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Sort the names of products in ascending order of their price.",
        "query": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC",
        "query_toks": [
            "SELECT",
            "Product_Name",
            "FROM",
            "Products",
            "ORDER",
            "BY",
            "Product_Price",
            "ASC"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What is the phone number of the performer Ashley?",
        "query": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\"",
        "query_toks": [
            "SELECT",
            "Customer_Phone",
            "FROM",
            "PERFORMERS",
            "WHERE",
            "Customer_Name",
            "=",
            "``",
            "Ashley",
            "''"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Find the phone number of performer \"Ashley\".",
        "query": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\"",
        "query_toks": [
            "SELECT",
            "Customer_Phone",
            "FROM",
            "PERFORMERS",
            "WHERE",
            "Customer_Name",
            "=",
            "``",
            "Ashley",
            "''"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Show all payment method codes and the number of orders for each code.",
        "query": "SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code",
        "query_toks": [
            "SELECT",
            "payment_method_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "INVOICES",
            "GROUP",
            "BY",
            "payment_method_code"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "List the distinct payment method codes with the number of orders made",
        "query": "SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code",
        "query_toks": [
            "SELECT",
            "payment_method_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "INVOICES",
            "GROUP",
            "BY",
            "payment_method_code"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What is the payment method code used by the most orders?",
        "query": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "payment_method_code",
            "FROM",
            "INVOICES",
            "GROUP",
            "BY",
            "payment_method_code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Find the payment method that is used the most often in all the invoices. Give me its code.",
        "query": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "payment_method_code",
            "FROM",
            "INVOICES",
            "GROUP",
            "BY",
            "payment_method_code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Which city is the address of the store named \"FJA Filming\" located in?",
        "query": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\"",
        "query_toks": [
            "SELECT",
            "T1.City_Town",
            "FROM",
            "Addresses",
            "AS",
            "T1",
            "JOIN",
            "Stores",
            "AS",
            "T2",
            "ON",
            "T1.Address_ID",
            "=",
            "T2.Address_ID",
            "WHERE",
            "T2.Store_Name",
            "=",
            "``",
            "FJA",
            "Filming",
            "''"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Find the city the store named \"FJA Filming\" is in.",
        "query": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\"",
        "query_toks": [
            "SELECT",
            "T1.City_Town",
            "FROM",
            "Addresses",
            "AS",
            "T1",
            "JOIN",
            "Stores",
            "AS",
            "T2",
            "ON",
            "T1.Address_ID",
            "=",
            "T2.Address_ID",
            "WHERE",
            "T2.Store_Name",
            "=",
            "``",
            "FJA",
            "Filming",
            "''"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the states or counties of the address of the stores with marketing region code \"CA\"?",
        "query": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  \"CA\"",
        "query_toks": [
            "SELECT",
            "T1.State_County",
            "FROM",
            "Addresses",
            "AS",
            "T1",
            "JOIN",
            "Stores",
            "AS",
            "T2",
            "ON",
            "T1.Address_ID",
            "=",
            "T2.Address_ID",
            "WHERE",
            "T2.Marketing_Region_Code",
            "=",
            "``",
            "CA",
            "''"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Find the states or counties where the stores with marketing region code \"CA\" are located.",
        "query": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  \"CA\"",
        "query_toks": [
            "SELECT",
            "T1.State_County",
            "FROM",
            "Addresses",
            "AS",
            "T1",
            "JOIN",
            "Stores",
            "AS",
            "T2",
            "ON",
            "T1.Address_ID",
            "=",
            "T2.Address_ID",
            "WHERE",
            "T2.Marketing_Region_Code",
            "=",
            "``",
            "CA",
            "''"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What is the name of the marketing region that the store Rob Dinning belongs to?",
        "query": "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  \"Rob Dinning\"",
        "query_toks": [
            "SELECT",
            "T1.Marketing_Region_Name",
            "FROM",
            "Marketing_Regions",
            "AS",
            "T1",
            "JOIN",
            "Stores",
            "AS",
            "T2",
            "ON",
            "T1.Marketing_Region_Code",
            "=",
            "T2.Marketing_Region_Code",
            "WHERE",
            "T2.Store_Name",
            "=",
            "``",
            "Rob",
            "Dinning",
            "''"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Return the name of the marketing region the store Rob Dinning is located in.",
        "query": "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  \"Rob Dinning\"",
        "query_toks": [
            "SELECT",
            "T1.Marketing_Region_Name",
            "FROM",
            "Marketing_Regions",
            "AS",
            "T1",
            "JOIN",
            "Stores",
            "AS",
            "T2",
            "ON",
            "T1.Marketing_Region_Code",
            "=",
            "T2.Marketing_Region_Code",
            "WHERE",
            "T2.Store_Name",
            "=",
            "``",
            "Rob",
            "Dinning",
            "''"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the descriptions of the service types with product price above 100?",
        "query": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Price  >  100",
        "query_toks": [
            "SELECT",
            "T1.Service_Type_Description",
            "FROM",
            "Ref_Service_Types",
            "AS",
            "T1",
            "JOIN",
            "Services",
            "AS",
            "T2",
            "ON",
            "T1.Service_Type_Code",
            "=",
            "T2.Service_Type_Code",
            "WHERE",
            "T2.Product_Price",
            ">",
            "100"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Give me the descriptions of the service types that cost more than 100.",
        "query": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Price  >  100",
        "query_toks": [
            "SELECT",
            "T1.Service_Type_Description",
            "FROM",
            "Ref_Service_Types",
            "AS",
            "T1",
            "JOIN",
            "Services",
            "AS",
            "T2",
            "ON",
            "T1.Service_Type_Code",
            "=",
            "T2.Service_Type_Code",
            "WHERE",
            "T2.Product_Price",
            ">",
            "100"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What is the description, code and the corresponding count of each service type?",
        "query": "SELECT T1.Service_Type_Description ,  T2.Service_Type_Code ,  COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T2.Service_Type_Code",
        "query_toks": [
            "SELECT",
            "T1.Service_Type_Description",
            ",",
            "T2.Service_Type_Code",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "Ref_Service_Types",
            "AS",
            "T1",
            "JOIN",
            "Services",
            "AS",
            "T2",
            "ON",
            "T1.Service_Type_Code",
            "=",
            "T2.Service_Type_Code",
            "GROUP",
            "BY",
            "T2.Service_Type_Code"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "List the description, code and the number of services for each service type.",
        "query": "SELECT T1.Service_Type_Description ,  T2.Service_Type_Code ,  COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T2.Service_Type_Code",
        "query_toks": [
            "SELECT",
            "T1.Service_Type_Description",
            ",",
            "T2.Service_Type_Code",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "Ref_Service_Types",
            "AS",
            "T1",
            "JOIN",
            "Services",
            "AS",
            "T2",
            "ON",
            "T1.Service_Type_Code",
            "=",
            "T2.Service_Type_Code",
            "GROUP",
            "BY",
            "T2.Service_Type_Code"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What is the description and code of the type of service that is performed the most often?",
        "query": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.Service_Type_Description",
            ",",
            "T1.Service_Type_Code",
            "FROM",
            "Ref_Service_Types",
            "AS",
            "T1",
            "JOIN",
            "Services",
            "AS",
            "T2",
            "ON",
            "T1.Service_Type_Code",
            "=",
            "T2.Service_Type_Code",
            "GROUP",
            "BY",
            "T1.Service_Type_Code",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Find the description and code of the service type that is performed the most times.",
        "query": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.Service_Type_Description",
            ",",
            "T1.Service_Type_Code",
            "FROM",
            "Ref_Service_Types",
            "AS",
            "T1",
            "JOIN",
            "Services",
            "AS",
            "T2",
            "ON",
            "T1.Service_Type_Code",
            "=",
            "T2.Service_Type_Code",
            "GROUP",
            "BY",
            "T1.Service_Type_Code",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the phones and emails of workshop groups in which services are performed?",
        "query": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID",
        "query_toks": [
            "SELECT",
            "T1.Store_Phone",
            ",",
            "T1.Store_Email_Address",
            "FROM",
            "Drama_Workshop_Groups",
            "AS",
            "T1",
            "JOIN",
            "Services",
            "AS",
            "T2",
            "ON",
            "T1.Workshop_Group_ID",
            "=",
            "T2.Workshop_Group_ID"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Give me all the phone numbers and email addresses of the workshop groups where services are performed.",
        "query": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID",
        "query_toks": [
            "SELECT",
            "T1.Store_Phone",
            ",",
            "T1.Store_Email_Address",
            "FROM",
            "Drama_Workshop_Groups",
            "AS",
            "T1",
            "JOIN",
            "Services",
            "AS",
            "T2",
            "ON",
            "T1.Workshop_Group_ID",
            "=",
            "T2.Workshop_Group_ID"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the names of workshop groups in which services with product name \"film\" are performed?",
        "query": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T2.Product_Name  =  \"film\"",
        "query_toks": [
            "SELECT",
            "T1.Store_Phone",
            ",",
            "T1.Store_Email_Address",
            "FROM",
            "Drama_Workshop_Groups",
            "AS",
            "T1",
            "JOIN",
            "Services",
            "AS",
            "T2",
            "ON",
            "T1.Workshop_Group_ID",
            "=",
            "T2.Workshop_Group_ID",
            "WHERE",
            "T2.Product_Name",
            "=",
            "``",
            "film",
            "''"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Find the names of the workshop groups where services with product name \"film\" are performed.",
        "query": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T2.Product_Name  =  \"film\"",
        "query_toks": [
            "SELECT",
            "T1.Store_Phone",
            ",",
            "T1.Store_Email_Address",
            "FROM",
            "Drama_Workshop_Groups",
            "AS",
            "T1",
            "JOIN",
            "Services",
            "AS",
            "T2",
            "ON",
            "T1.Workshop_Group_ID",
            "=",
            "T2.Workshop_Group_ID",
            "WHERE",
            "T2.Product_Name",
            "=",
            "``",
            "film",
            "''"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the different product names? What is the average product price for each of them?",
        "query": "SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
        "query_toks": [
            "SELECT",
            "Product_Name",
            ",",
            "avg",
            "(",
            "Product_Price",
            ")",
            "FROM",
            "PRODUCTS",
            "GROUP",
            "BY",
            "Product_Name"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "For each distinct product name, show its average product price.",
        "query": "SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name",
        "query_toks": [
            "SELECT",
            "Product_Name",
            ",",
            "avg",
            "(",
            "Product_Price",
            ")",
            "FROM",
            "PRODUCTS",
            "GROUP",
            "BY",
            "Product_Name"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the product names with average product price smaller than 1000000?",
        "query": "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000",
        "query_toks": [
            "SELECT",
            "Product_Name",
            "FROM",
            "PRODUCTS",
            "GROUP",
            "BY",
            "Product_Name",
            "HAVING",
            "avg",
            "(",
            "Product_Price",
            ")",
            "<",
            "1000000"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Find the product names whose average product price is below 1000000.",
        "query": "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000",
        "query_toks": [
            "SELECT",
            "Product_Name",
            "FROM",
            "PRODUCTS",
            "GROUP",
            "BY",
            "Product_Name",
            "HAVING",
            "avg",
            "(",
            "Product_Price",
            ")",
            "<",
            "1000000"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the total order quantities of photo products?",
        "query": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "T1.Order_Quantity",
            ")",
            "FROM",
            "ORDER_ITEMS",
            "AS",
            "T1",
            "JOIN",
            "Products",
            "AS",
            "T2",
            "ON",
            "T1.Product_ID",
            "=",
            "T2.Product_ID",
            "WHERE",
            "T2.Product_Name",
            "=",
            "``",
            "photo",
            "''"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Compute the total order quantities of the product \"photo\".",
        "query": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "T1.Order_Quantity",
            ")",
            "FROM",
            "ORDER_ITEMS",
            "AS",
            "T1",
            "JOIN",
            "Products",
            "AS",
            "T2",
            "ON",
            "T1.Product_ID",
            "=",
            "T2.Product_ID",
            "WHERE",
            "T2.Product_Name",
            "=",
            "``",
            "photo",
            "''"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the order details of the products with price higher than 2000?",
        "query": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000",
        "query_toks": [
            "SELECT",
            "T1.Other_Item_Details",
            "FROM",
            "ORDER_ITEMS",
            "AS",
            "T1",
            "JOIN",
            "Products",
            "AS",
            "T2",
            "ON",
            "T1.Product_ID",
            "=",
            "T2.Product_ID",
            "WHERE",
            "T2.Product_price",
            ">",
            "2000"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Find the order detail for the products with price above 2000.",
        "query": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000",
        "query_toks": [
            "SELECT",
            "T1.Other_Item_Details",
            "FROM",
            "ORDER_ITEMS",
            "AS",
            "T1",
            "JOIN",
            "Products",
            "AS",
            "T2",
            "ON",
            "T1.Product_ID",
            "=",
            "T2.Product_ID",
            "WHERE",
            "T2.Product_price",
            ">",
            "2000"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the actual delivery dates of orders with quantity 1?",
        "query": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1",
        "query_toks": [
            "SELECT",
            "T1.Actual_Delivery_Date",
            "FROM",
            "Customer_Orders",
            "AS",
            "T1",
            "JOIN",
            "ORDER_ITEMS",
            "AS",
            "T2",
            "ON",
            "T1.Order_ID",
            "=",
            "T2.Order_ID",
            "WHERE",
            "T2.Order_Quantity",
            "=",
            "1"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "List the actual delivery date for all the orders with quantity 1",
        "query": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1",
        "query_toks": [
            "SELECT",
            "T1.Actual_Delivery_Date",
            "FROM",
            "Customer_Orders",
            "AS",
            "T1",
            "JOIN",
            "ORDER_ITEMS",
            "AS",
            "T2",
            "ON",
            "T1.Order_ID",
            "=",
            "T2.Order_ID",
            "WHERE",
            "T2.Order_Quantity",
            "=",
            "1"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the order dates of orders with price higher than 1000?",
        "query": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID JOIN Products AS T3 ON T2.Product_ID  =  T3.Product_ID WHERE T3.Product_price  >  1000",
        "query_toks": [
            "SELECT",
            "T1.Order_Date",
            "FROM",
            "Customer_Orders",
            "AS",
            "T1",
            "JOIN",
            "ORDER_ITEMS",
            "AS",
            "T2",
            "ON",
            "T1.Order_ID",
            "=",
            "T2.Order_ID",
            "JOIN",
            "Products",
            "AS",
            "T3",
            "ON",
            "T2.Product_ID",
            "=",
            "T3.Product_ID",
            "WHERE",
            "T3.Product_price",
            ">",
            "1000"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Find the order dates of the orders with price above 1000.",
        "query": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID JOIN Products AS T3 ON T2.Product_ID  =  T3.Product_ID WHERE T3.Product_price  >  1000",
        "query_toks": [
            "SELECT",
            "T1.Order_Date",
            "FROM",
            "Customer_Orders",
            "AS",
            "T1",
            "JOIN",
            "ORDER_ITEMS",
            "AS",
            "T2",
            "ON",
            "T1.Order_ID",
            "=",
            "T2.Order_ID",
            "JOIN",
            "Products",
            "AS",
            "T3",
            "ON",
            "T2.Product_ID",
            "=",
            "T3.Product_ID",
            "WHERE",
            "T3.Product_price",
            ">",
            "1000"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "query": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "Currency_Code",
            ")",
            "FROM",
            "Drama_Workshop_Groups"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "query": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "Currency_Code",
            ")",
            "FROM",
            "Drama_Workshop_Groups"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the names of the drama workshop groups with address in Feliciaberg city?",
        "query": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\"",
        "query_toks": [
            "SELECT",
            "T2.Store_Name",
            "FROM",
            "Addresses",
            "AS",
            "T1",
            "JOIN",
            "Drama_Workshop_Groups",
            "AS",
            "T2",
            "ON",
            "T1.Address_ID",
            "=",
            "T2.Address_ID",
            "WHERE",
            "T1.City_Town",
            "=",
            "``",
            "Feliciaberg",
            "''"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Return the the names of the drama workshop groups that are located in Feliciaberg city.",
        "query": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\"",
        "query_toks": [
            "SELECT",
            "T2.Store_Name",
            "FROM",
            "Addresses",
            "AS",
            "T1",
            "JOIN",
            "Drama_Workshop_Groups",
            "AS",
            "T2",
            "ON",
            "T1.Address_ID",
            "=",
            "T2.Address_ID",
            "WHERE",
            "T1.City_Town",
            "=",
            "``",
            "Feliciaberg",
            "''"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the email addresses of the drama workshop groups with address in Alaska state?",
        "query": "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Alaska\"",
        "query_toks": [
            "SELECT",
            "T2.Store_Email_Address",
            "FROM",
            "Addresses",
            "AS",
            "T1",
            "JOIN",
            "Drama_Workshop_Groups",
            "AS",
            "T2",
            "ON",
            "T1.Address_ID",
            "=",
            "T2.Address_ID",
            "WHERE",
            "T1.State_County",
            "=",
            "``",
            "Alaska",
            "''"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "List the email addresses of the drama workshop groups located in Alaska state.",
        "query": "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Alaska\"",
        "query_toks": [
            "SELECT",
            "T2.Store_Email_Address",
            "FROM",
            "Addresses",
            "AS",
            "T1",
            "JOIN",
            "Drama_Workshop_Groups",
            "AS",
            "T2",
            "ON",
            "T1.Address_ID",
            "=",
            "T2.Address_ID",
            "WHERE",
            "T1.State_County",
            "=",
            "``",
            "Alaska",
            "''"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Show all cities along with the number of drama workshop groups in each city.",
        "query": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town",
        "query_toks": [
            "SELECT",
            "T1.City_Town",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Addresses",
            "AS",
            "T1",
            "JOIN",
            "Drama_Workshop_Groups",
            "AS",
            "T2",
            "ON",
            "T1.Address_ID",
            "=",
            "T2.Address_ID",
            "GROUP",
            "BY",
            "T1.City_Town"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "How many drama workshop groups are there in each city? Return both the city and the count.",
        "query": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town",
        "query_toks": [
            "SELECT",
            "T1.City_Town",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Addresses",
            "AS",
            "T1",
            "JOIN",
            "Drama_Workshop_Groups",
            "AS",
            "T2",
            "ON",
            "T1.Address_ID",
            "=",
            "T2.Address_ID",
            "GROUP",
            "BY",
            "T1.City_Town"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What is the marketing region code that has the most drama workshop groups?",
        "query": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Marketing_Region_Code",
            "FROM",
            "Drama_Workshop_Groups",
            "GROUP",
            "BY",
            "Marketing_Region_Code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Which marketing region has the most drama workshop groups? Give me the region code.",
        "query": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Marketing_Region_Code",
            "FROM",
            "Drama_Workshop_Groups",
            "GROUP",
            "BY",
            "Marketing_Region_Code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Show all cities where at least one customer lives in but no performer lives in.",
        "query": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID",
        "query_toks": [
            "SELECT",
            "T1.City_Town",
            "FROM",
            "Addresses",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.Address_ID",
            "=",
            "T2.Address_ID",
            "EXCEPT",
            "SELECT",
            "T1.City_Town",
            "FROM",
            "Addresses",
            "AS",
            "T1",
            "JOIN",
            "Performers",
            "AS",
            "T2",
            "ON",
            "T1.Address_ID",
            "=",
            "T2.Address_ID"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Which cities have at least one customer but no performer?",
        "query": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID",
        "query_toks": [
            "SELECT",
            "T1.City_Town",
            "FROM",
            "Addresses",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.Address_ID",
            "=",
            "T2.Address_ID",
            "EXCEPT",
            "SELECT",
            "T1.City_Town",
            "FROM",
            "Addresses",
            "AS",
            "T1",
            "JOIN",
            "Performers",
            "AS",
            "T2",
            "ON",
            "T1.Address_ID",
            "=",
            "T2.Address_ID"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What is the most frequent status of bookings?",
        "query": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Status_Code",
            "FROM",
            "BOOKINGS",
            "GROUP",
            "BY",
            "Status_Code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Which status code is the most common of all the bookings?",
        "query": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Status_Code",
            "FROM",
            "BOOKINGS",
            "GROUP",
            "BY",
            "Status_Code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the names of the workshop groups that have bookings with status code \"stop\"?",
        "query": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"",
        "query_toks": [
            "SELECT",
            "T2.Store_Name",
            "FROM",
            "Bookings",
            "AS",
            "T1",
            "JOIN",
            "Drama_Workshop_Groups",
            "AS",
            "T2",
            "ON",
            "T1.Workshop_Group_ID",
            "=",
            "T2.Workshop_Group_ID",
            "WHERE",
            "T1.Status_Code",
            "=",
            "``",
            "stop",
            "''"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Which workshop groups have bookings with status code \"stop\"? Give me the names.",
        "query": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"",
        "query_toks": [
            "SELECT",
            "T2.Store_Name",
            "FROM",
            "Bookings",
            "AS",
            "T1",
            "JOIN",
            "Drama_Workshop_Groups",
            "AS",
            "T2",
            "ON",
            "T1.Workshop_Group_ID",
            "=",
            "T2.Workshop_Group_ID",
            "WHERE",
            "T1.Status_Code",
            "=",
            "``",
            "stop",
            "''"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Show the names of all the clients with no booking.",
        "query": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID",
        "query_toks": [
            "SELECT",
            "Customer_Name",
            "FROM",
            "Clients",
            "EXCEPT",
            "SELECT",
            "T2.Customer_Name",
            "FROM",
            "Bookings",
            "AS",
            "T1",
            "JOIN",
            "Clients",
            "AS",
            "T2",
            "ON",
            "T1.Customer_ID",
            "=",
            "T2.Client_ID"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What are the names of the clients who do not have any booking?",
        "query": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID",
        "query_toks": [
            "SELECT",
            "Customer_Name",
            "FROM",
            "Clients",
            "EXCEPT",
            "SELECT",
            "T2.Customer_Name",
            "FROM",
            "Bookings",
            "AS",
            "T1",
            "JOIN",
            "Clients",
            "AS",
            "T2",
            "ON",
            "T1.Customer_ID",
            "=",
            "T2.Client_ID"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What is the average quantities ordered with payment method code \"MasterCard\" on invoices?",
        "query": "SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  \"MasterCard\"",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "Order_Quantity",
            ")",
            "FROM",
            "Invoices",
            "WHERE",
            "payment_method_code",
            "=",
            "``",
            "MasterCard",
            "''"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Check the invoices record and compute the average quantities ordered with the payment method \"MasterCard\".",
        "query": "SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  \"MasterCard\"",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "Order_Quantity",
            ")",
            "FROM",
            "Invoices",
            "WHERE",
            "payment_method_code",
            "=",
            "``",
            "MasterCard",
            "''"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What is the product ID of the most frequently ordered item on invoices?",
        "query": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Product_ID",
            "FROM",
            "INVOICES",
            "GROUP",
            "BY",
            "Product_ID",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Find the id of the product ordered the most often on invoices.",
        "query": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "Product_ID",
            "FROM",
            "INVOICES",
            "GROUP",
            "BY",
            "Product_ID",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "What is the description of the service type which offers both the photo product and the film product?",
        "query": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film'",
        "query_toks": [
            "SELECT",
            "T1.Service_Type_Description",
            "FROM",
            "Ref_Service_Types",
            "AS",
            "T1",
            "JOIN",
            "Services",
            "AS",
            "T2",
            "ON",
            "T1.Service_Type_Code",
            "=",
            "T2.Service_Type_Code",
            "WHERE",
            "T2.Product_Name",
            "=",
            "'photo",
            "'",
            "INTERSECT",
            "SELECT",
            "T1.Service_Type_Description",
            "FROM",
            "Ref_Service_Types",
            "AS",
            "T1",
            "JOIN",
            "Services",
            "AS",
            "T2",
            "ON",
            "T1.Service_Type_Code",
            "=",
            "T2.Service_Type_Code",
            "WHERE",
            "T2.Product_Name",
            "=",
            "'film",
            "'"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "Give me the description of the service type that offers not only the photo product but also the film product.",
        "query": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film'",
        "query_toks": [
            "SELECT",
            "T1.Service_Type_Description",
            "FROM",
            "Ref_Service_Types",
            "AS",
            "T1",
            "JOIN",
            "Services",
            "AS",
            "T2",
            "ON",
            "T1.Service_Type_Code",
            "=",
            "T2.Service_Type_Code",
            "WHERE",
            "T2.Product_Name",
            "=",
            "'photo",
            "'",
            "INTERSECT",
            "SELECT",
            "T1.Service_Type_Description",
            "FROM",
            "Ref_Service_Types",
            "AS",
            "T1",
            "JOIN",
            "Services",
            "AS",
            "T2",
            "ON",
            "T1.Service_Type_Code",
            "=",
            "T2.Service_Type_Code",
            "WHERE",
            "T2.Product_Name",
            "=",
            "'film",
            "'"
        ],
        "db_id": "cre_Drama_Workshop_Groups"
    },
    {
        "question": "How many addresses are there in country USA?",
        "query": "SELECT count(*) FROM addresses WHERE country  =  'USA'",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "addresses",
            "WHERE",
            "country",
            "=",
            "'USA",
            "'"
        ],
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "Show all distinct cities in the address record.",
        "query": "SELECT DISTINCT city FROM addresses",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "city",
            "FROM",
            "addresses"
        ],
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "Show each state and the number of addresses in each state.",
        "query": "SELECT state_province_county ,  count(*) FROM addresses GROUP BY state_province_county",
        "query_toks": [
            "SELECT",
            "state_province_county",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "addresses",
            "GROUP",
            "BY",
            "state_province_county"
        ],
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "Show names and phones of customers who do not have address information.",
        "query": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_address_history)",
        "query_toks": [
            "SELECT",
            "customer_name",
            ",",
            "customer_phone",
            "FROM",
            "customers",
            "WHERE",
            "customer_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "customer_id",
            "FROM",
            "customer_address_history",
            ")"
        ],
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "Show the name of the customer who has the most orders.",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.customer_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "customer_orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "Show the product type codes which have at least two products.",
        "query": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2",
        "query_toks": [
            "SELECT",
            "product_type_code",
            "FROM",
            "products",
            "GROUP",
            "BY",
            "product_type_code",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "Show the names of customers who have both an order in completed status and an order in part status.",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Completed' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Part'",
        "query_toks": [
            "SELECT",
            "T1.customer_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "customer_orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.order_status_code",
            "=",
            "'Completed",
            "'",
            "INTERSECT",
            "SELECT",
            "T1.customer_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "customer_orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.order_status_code",
            "=",
            "'Part",
            "'"
        ],
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "Show the name, phone, and payment method code for all customers in descending order of customer number.",
        "query": "SELECT customer_name ,  customer_phone ,  payment_method_code FROM customers ORDER BY customer_number DESC",
        "query_toks": [
            "SELECT",
            "customer_name",
            ",",
            "customer_phone",
            ",",
            "payment_method_code",
            "FROM",
            "customers",
            "ORDER",
            "BY",
            "customer_number",
            "DESC"
        ],
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "Show the product name and total order quantity for each product.",
        "query": "SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id",
        "query_toks": [
            "SELECT",
            "T1.product_name",
            ",",
            "sum",
            "(",
            "T2.order_quantity",
            ")",
            "FROM",
            "products",
            "AS",
            "T1",
            "JOIN",
            "order_items",
            "AS",
            "T2",
            "ON",
            "T1.product_id",
            "=",
            "T2.product_id",
            "GROUP",
            "BY",
            "T1.product_id"
        ],
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "Show the minimum, maximum, average price for all products.",
        "query": "SELECT min(product_price) ,  max(product_price) ,  avg(product_price) FROM products",
        "query_toks": [
            "SELECT",
            "min",
            "(",
            "product_price",
            ")",
            ",",
            "max",
            "(",
            "product_price",
            ")",
            ",",
            "avg",
            "(",
            "product_price",
            ")",
            "FROM",
            "products"
        ],
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "How many products have a price higher than the average?",
        "query": "SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "products",
            "WHERE",
            "product_price",
            ">",
            "(",
            "SELECT",
            "avg",
            "(",
            "product_price",
            ")",
            "FROM",
            "products",
            ")"
        ],
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "Show the customer name, customer address city, date from, and date to for each customer address history.",
        "query": "SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id",
        "query_toks": [
            "SELECT",
            "T2.customer_name",
            ",",
            "T3.city",
            ",",
            "T1.date_from",
            ",",
            "T1.date_to",
            "FROM",
            "customer_address_history",
            "AS",
            "T1",
            "JOIN",
            "customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "JOIN",
            "addresses",
            "AS",
            "T3",
            "ON",
            "T1.address_id",
            "=",
            "T3.address_id"
        ],
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "Show the names of customers who use Credit Card payment method and have more than 2 orders.",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2",
        "query_toks": [
            "SELECT",
            "T1.customer_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "customer_orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T1.payment_method_code",
            "=",
            "'Credit",
            "Card",
            "'",
            "GROUP",
            "BY",
            "T1.customer_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2"
        ],
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "What are the name and phone of the customer with the most ordered product quantity?",
        "query": "SELECT  T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T3.order_id  =  T2.order_id GROUP BY T1.customer_id ORDER BY sum(T3.order_quantity) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.customer_name",
            ",",
            "T1.customer_phone",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "customer_orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "JOIN",
            "order_items",
            "AS",
            "T3",
            "ON",
            "T3.order_id",
            "=",
            "T2.order_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "ORDER",
            "BY",
            "sum",
            "(",
            "T3.order_quantity",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "Show the product type and name for the products with price higher than 1000 or lower than 500.",
        "query": "SELECT product_type_code ,  product_name FROM products WHERE product_price  >  1000 OR product_price  <  500",
        "query_toks": [
            "SELECT",
            "product_type_code",
            ",",
            "product_name",
            "FROM",
            "products",
            "WHERE",
            "product_price",
            ">",
            "1000",
            "OR",
            "product_price",
            "<",
            "500"
        ],
        "db_id": "customers_and_products_contacts"
    },
    {
        "question": "How many customers are there?",
        "query": "SELECT count(*) FROM customers",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "customers"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Count the number of customers.",
        "query": "SELECT count(*) FROM customers",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "customers"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Find the emails and phone numbers of all the customers, ordered by email address and phone number.",
        "query": "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number",
        "query_toks": [
            "SELECT",
            "email_address",
            ",",
            "phone_number",
            "FROM",
            "customers",
            "ORDER",
            "BY",
            "email_address",
            ",",
            "phone_number"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "What are the emails and phone numbers of all customers, sorted by email address and phone number?",
        "query": "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number",
        "query_toks": [
            "SELECT",
            "email_address",
            ",",
            "phone_number",
            "FROM",
            "customers",
            "ORDER",
            "BY",
            "email_address",
            ",",
            "phone_number"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Which city has the least number of customers whose type code is \"Good Credit Rating\"?",
        "query": "SELECT town_city FROM customers WHERE customer_type_code  =  \"Good Credit Rating\" GROUP BY town_city ORDER BY count(*) LIMIT 1",
        "query_toks": [
            "SELECT",
            "town_city",
            "FROM",
            "customers",
            "WHERE",
            "customer_type_code",
            "=",
            "``",
            "Good",
            "Credit",
            "Rating",
            "''",
            "GROUP",
            "BY",
            "town_city",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "LIMIT",
            "1"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Return the city with the customer type code \"Good Credit Rating\" that had the fewest customers.",
        "query": "SELECT town_city FROM customers WHERE customer_type_code  =  \"Good Credit Rating\" GROUP BY town_city ORDER BY count(*) LIMIT 1",
        "query_toks": [
            "SELECT",
            "town_city",
            "FROM",
            "customers",
            "WHERE",
            "customer_type_code",
            "=",
            "``",
            "Good",
            "Credit",
            "Rating",
            "''",
            "GROUP",
            "BY",
            "town_city",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "LIMIT",
            "1"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "List the name of all products along with the number of complaints that they have received.",
        "query": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name",
        "query_toks": [
            "SELECT",
            "t1.product_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "products",
            "AS",
            "t1",
            "JOIN",
            "complaints",
            "AS",
            "t2",
            "ON",
            "t1.product_id",
            "=",
            "t2.product_id",
            "GROUP",
            "BY",
            "t1.product_name"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "What are all the different product names, and how many complains has each received?",
        "query": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name",
        "query_toks": [
            "SELECT",
            "t1.product_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "products",
            "AS",
            "t1",
            "JOIN",
            "complaints",
            "AS",
            "t2",
            "ON",
            "t1.product_id",
            "=",
            "t2.product_id",
            "GROUP",
            "BY",
            "t1.product_name"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Find the emails of customers who has filed a complaints of the product with the most complaints.",
        "query": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1",
        "query_toks": [
            "SELECT",
            "t1.email_address",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "complaints",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "GROUP",
            "BY",
            "t1.customer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "LIMIT",
            "1"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "What are the emails of customers who have filed complaints on the product which has had the greatest number of complaints?",
        "query": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1",
        "query_toks": [
            "SELECT",
            "t1.email_address",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "complaints",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "GROUP",
            "BY",
            "t1.customer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "LIMIT",
            "1"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Which products has been complained by the customer who has filed least amount of complaints?",
        "query": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "t1.product_name",
            "FROM",
            "products",
            "AS",
            "t1",
            "JOIN",
            "complaints",
            "AS",
            "t2",
            "ON",
            "t1.product_id",
            "=",
            "t2.product_id",
            "JOIN",
            "customers",
            "AS",
            "t3",
            "GROUP",
            "BY",
            "t3.customer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "LIMIT",
            "1"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Return the names of products that have had complaints filed by the customer who has filed the fewest complaints.",
        "query": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "t1.product_name",
            "FROM",
            "products",
            "AS",
            "t1",
            "JOIN",
            "complaints",
            "AS",
            "t2",
            "ON",
            "t1.product_id",
            "=",
            "t2.product_id",
            "JOIN",
            "customers",
            "AS",
            "t3",
            "GROUP",
            "BY",
            "t3.customer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "LIMIT",
            "1"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "What is the phone number of the customer who has filed the most recent complaint?",
        "query": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t1.phone_number",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "complaints",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "ORDER",
            "BY",
            "t2.date_complaint_raised",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Return the phone number of the customer who filed the complaint that was raised most recently.",
        "query": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t1.phone_number",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "complaints",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "ORDER",
            "BY",
            "t2.date_complaint_raised",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Find the email and phone number of the customers who have never filed a complaint before.",
        "query": "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)",
        "query_toks": [
            "SELECT",
            "email_address",
            ",",
            "phone_number",
            "FROM",
            "customers",
            "WHERE",
            "customer_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "customer_id",
            "FROM",
            "complaints",
            ")"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "What are the emails and phone numbers of custoemrs who have never filed a complaint?",
        "query": "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)",
        "query_toks": [
            "SELECT",
            "email_address",
            ",",
            "phone_number",
            "FROM",
            "customers",
            "WHERE",
            "customer_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "customer_id",
            "FROM",
            "complaints",
            ")"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Find the phone number of all the customers and staff.",
        "query": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff",
        "query_toks": [
            "SELECT",
            "phone_number",
            "FROM",
            "customers",
            "UNION",
            "SELECT",
            "phone_number",
            "FROM",
            "staff"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "What are the phone numbers of all customers and all staff members?",
        "query": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff",
        "query_toks": [
            "SELECT",
            "phone_number",
            "FROM",
            "customers",
            "UNION",
            "SELECT",
            "phone_number",
            "FROM",
            "staff"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "What is the description of the product named \"Chocolate\"?",
        "query": "SELECT product_description FROM products WHERE product_name  =  \"Chocolate\"",
        "query_toks": [
            "SELECT",
            "product_description",
            "FROM",
            "products",
            "WHERE",
            "product_name",
            "=",
            "``",
            "Chocolate",
            "''"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Return the description of the product called \"Chocolate\".",
        "query": "SELECT product_description FROM products WHERE product_name  =  \"Chocolate\"",
        "query_toks": [
            "SELECT",
            "product_description",
            "FROM",
            "products",
            "WHERE",
            "product_name",
            "=",
            "``",
            "Chocolate",
            "''"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Find the name and category of the most expensive product.",
        "query": "SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "product_name",
            ",",
            "product_category_code",
            "FROM",
            "products",
            "ORDER",
            "BY",
            "product_price",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "What is the name and category code of the product with the highest price?",
        "query": "SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "product_name",
            ",",
            "product_category_code",
            "FROM",
            "products",
            "ORDER",
            "BY",
            "product_price",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Find the prices of products which has never received a single complaint.",
        "query": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)",
        "query_toks": [
            "SELECT",
            "product_price",
            "FROM",
            "products",
            "WHERE",
            "product_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "product_id",
            "FROM",
            "complaints",
            ")"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "What are the prices of products that have never gotten a complaint?",
        "query": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)",
        "query_toks": [
            "SELECT",
            "product_price",
            "FROM",
            "products",
            "WHERE",
            "product_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "product_id",
            "FROM",
            "complaints",
            ")"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "What is the average price of the products for each category?",
        "query": "SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "product_price",
            ")",
            ",",
            "product_category_code",
            "FROM",
            "products",
            "GROUP",
            "BY",
            "product_category_code"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Return the average price of products that have each category code.",
        "query": "SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "product_price",
            ")",
            ",",
            "product_category_code",
            "FROM",
            "products",
            "GROUP",
            "BY",
            "product_category_code"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Find the last name of the staff member who processed the complaint of the cheapest product.",
        "query": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id JOIN products AS t3 ON t2.product_id  =  t3.product_id ORDER BY t3.product_price LIMIT 1",
        "query_toks": [
            "SELECT",
            "t1.last_name",
            "FROM",
            "staff",
            "AS",
            "t1",
            "JOIN",
            "complaints",
            "AS",
            "t2",
            "ON",
            "t1.staff_id",
            "=",
            "t2.staff_id",
            "JOIN",
            "products",
            "AS",
            "t3",
            "ON",
            "t2.product_id",
            "=",
            "t3.product_id",
            "ORDER",
            "BY",
            "t3.product_price",
            "LIMIT",
            "1"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "What is the last name of the staff member in charge of the complaint on the product with the lowest price?",
        "query": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id JOIN products AS t3 ON t2.product_id  =  t3.product_id ORDER BY t3.product_price LIMIT 1",
        "query_toks": [
            "SELECT",
            "t1.last_name",
            "FROM",
            "staff",
            "AS",
            "t1",
            "JOIN",
            "complaints",
            "AS",
            "t2",
            "ON",
            "t1.staff_id",
            "=",
            "t2.staff_id",
            "JOIN",
            "products",
            "AS",
            "t3",
            "ON",
            "t2.product_id",
            "=",
            "t3.product_id",
            "ORDER",
            "BY",
            "t3.product_price",
            "LIMIT",
            "1"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Which complaint status has more than 3 records on file?",
        "query": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*)  >  3",
        "query_toks": [
            "SELECT",
            "complaint_status_code",
            "FROM",
            "complaints",
            "GROUP",
            "BY",
            "complaint_status_code",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Return complaint status codes have more than 3 corresponding complaints?",
        "query": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*)  >  3",
        "query_toks": [
            "SELECT",
            "complaint_status_code",
            "FROM",
            "complaints",
            "GROUP",
            "BY",
            "complaint_status_code",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Find the last name of the staff whose email address contains \"wrau\".",
        "query": "SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\"",
        "query_toks": [
            "SELECT",
            "last_name",
            "FROM",
            "staff",
            "WHERE",
            "email_address",
            "LIKE",
            "``",
            "%",
            "wrau",
            "%",
            "''"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "What are the last names of staff with email addressed containing the substring \"wrau\"?",
        "query": "SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\"",
        "query_toks": [
            "SELECT",
            "last_name",
            "FROM",
            "staff",
            "WHERE",
            "email_address",
            "LIKE",
            "``",
            "%",
            "wrau",
            "%",
            "''"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "How many customers are there in the customer type with the most customers?",
        "query": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "customers",
            "GROUP",
            "BY",
            "customer_type_code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Count the number of customers that have the customer type that is most common.",
        "query": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "customers",
            "GROUP",
            "BY",
            "customer_type_code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "What is the last name of the staff who has handled the first ever complaint?",
        "query": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1",
        "query_toks": [
            "SELECT",
            "t1.last_name",
            "FROM",
            "staff",
            "AS",
            "t1",
            "JOIN",
            "complaints",
            "AS",
            "t2",
            "ON",
            "t1.staff_id",
            "=",
            "t2.staff_id",
            "ORDER",
            "BY",
            "t2.date_complaint_raised",
            "LIMIT",
            "1"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Return the last name of the staff member who handled the complaint with the earliest date raised.",
        "query": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1",
        "query_toks": [
            "SELECT",
            "t1.last_name",
            "FROM",
            "staff",
            "AS",
            "t1",
            "JOIN",
            "complaints",
            "AS",
            "t2",
            "ON",
            "t1.staff_id",
            "=",
            "t2.staff_id",
            "ORDER",
            "BY",
            "t2.date_complaint_raised",
            "LIMIT",
            "1"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "How many distinct complaint type codes are there in the database?",
        "query": "SELECT count(DISTINCT complaint_type_code) FROM complaints",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "complaint_type_code",
            ")",
            "FROM",
            "complaints"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Count the number of different complaint type codes.",
        "query": "SELECT count(DISTINCT complaint_type_code) FROM complaints",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "complaint_type_code",
            ")",
            "FROM",
            "complaints"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Find the address line 1 and 2 of the customer with email \"vbogisich@example.org\".",
        "query": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "query_toks": [
            "SELECT",
            "address_line_1",
            ",",
            "address_line_2",
            "FROM",
            "customers",
            "WHERE",
            "email_address",
            "=",
            "``",
            "vbogisich",
            "@",
            "example.org",
            "''"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?",
        "query": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "query_toks": [
            "SELECT",
            "address_line_1",
            ",",
            "address_line_2",
            "FROM",
            "customers",
            "WHERE",
            "email_address",
            "=",
            "``",
            "vbogisich",
            "@",
            "example.org",
            "''"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Find the number of complaints with Product Failure type for each complaint status.",
        "query": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code",
        "query_toks": [
            "SELECT",
            "complaint_status_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "complaints",
            "WHERE",
            "complaint_type_code",
            "=",
            "``",
            "Product",
            "Failure",
            "''",
            "GROUP",
            "BY",
            "complaint_status_code"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Of complaints with the type code \"Product Failure\", how many had each different status code?",
        "query": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code",
        "query_toks": [
            "SELECT",
            "complaint_status_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "complaints",
            "WHERE",
            "complaint_type_code",
            "=",
            "``",
            "Product",
            "Failure",
            "''",
            "GROUP",
            "BY",
            "complaint_status_code"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "What is first names of the top 5 staff who have handled the greatest number of complaints?",
        "query": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5",
        "query_toks": [
            "SELECT",
            "t1.first_name",
            "FROM",
            "staff",
            "AS",
            "t1",
            "JOIN",
            "complaints",
            "AS",
            "t2",
            "ON",
            "t1.staff_id",
            "=",
            "t2.staff_id",
            "GROUP",
            "BY",
            "t2.staff_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "LIMIT",
            "5"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Return the first names of the 5 staff members who have handled the most complaints.",
        "query": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5",
        "query_toks": [
            "SELECT",
            "t1.first_name",
            "FROM",
            "staff",
            "AS",
            "t1",
            "JOIN",
            "complaints",
            "AS",
            "t2",
            "ON",
            "t1.staff_id",
            "=",
            "t2.staff_id",
            "GROUP",
            "BY",
            "t2.staff_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "LIMIT",
            "5"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Which state has the most customers?",
        "query": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1",
        "query_toks": [
            "SELECT",
            "state",
            "FROM",
            "customers",
            "GROUP",
            "BY",
            "state",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "LIMIT",
            "1"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Give the state that has the most customers.",
        "query": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1",
        "query_toks": [
            "SELECT",
            "state",
            "FROM",
            "customers",
            "GROUP",
            "BY",
            "state",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "LIMIT",
            "1"
        ],
        "db_id": "customer_complaints"
    },
    {
        "question": "Find the number of investors in total.",
        "query": "SELECT count(*) FROM INVESTORS",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "INVESTORS"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show all investor details.",
        "query": "SELECT Investor_details FROM INVESTORS",
        "query_toks": [
            "SELECT",
            "Investor_details",
            "FROM",
            "INVESTORS"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show all distinct lot details.",
        "query": "SELECT DISTINCT lot_details FROM LOTS",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "lot_details",
            "FROM",
            "LOTS"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the maximum amount of transaction.",
        "query": "SELECT max(amount_of_transaction) FROM TRANSACTIONS",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "amount_of_transaction",
            ")",
            "FROM",
            "TRANSACTIONS"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show all date and share count of transactions.",
        "query": "SELECT date_of_transaction ,  share_count FROM TRANSACTIONS",
        "query_toks": [
            "SELECT",
            "date_of_transaction",
            ",",
            "share_count",
            "FROM",
            "TRANSACTIONS"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "What is the total share of transactions?",
        "query": "SELECT sum(share_count) FROM TRANSACTIONS",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "share_count",
            ")",
            "FROM",
            "TRANSACTIONS"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show all transaction ids with transaction code 'PUR'.",
        "query": "SELECT transaction_id FROM TRANSACTIONS WHERE transaction_type_code  =  'PUR'",
        "query_toks": [
            "SELECT",
            "transaction_id",
            "FROM",
            "TRANSACTIONS",
            "WHERE",
            "transaction_type_code",
            "=",
            "'PUR",
            "'"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show all dates of transactions whose type code is \"SALE\".",
        "query": "SELECT date_of_transaction FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\"",
        "query_toks": [
            "SELECT",
            "date_of_transaction",
            "FROM",
            "TRANSACTIONS",
            "WHERE",
            "transaction_type_code",
            "=",
            "``",
            "SALE",
            "''"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the average amount of transactions with type code \"SALE\".",
        "query": "SELECT avg(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\"",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "amount_of_transaction",
            ")",
            "FROM",
            "TRANSACTIONS",
            "WHERE",
            "transaction_type_code",
            "=",
            "``",
            "SALE",
            "''"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the description of transaction type with code \"PUR\".",
        "query": "SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code\t  =  \"PUR\"",
        "query_toks": [
            "SELECT",
            "transaction_type_description",
            "FROM",
            "Ref_Transaction_Types",
            "WHERE",
            "transaction_type_code",
            "=",
            "``",
            "PUR",
            "''"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50.",
        "query": "SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50",
        "query_toks": [
            "SELECT",
            "min",
            "(",
            "amount_of_transaction",
            ")",
            "FROM",
            "TRANSACTIONS",
            "WHERE",
            "transaction_type_code",
            "=",
            "``",
            "PUR",
            "''",
            "AND",
            "share_count",
            ">",
            "50"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the maximum share count of transactions where the amount is smaller than 10000",
        "query": "SELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction  <  10000",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "share_count",
            ")",
            "FROM",
            "TRANSACTIONS",
            "WHERE",
            "amount_of_transaction",
            "<",
            "10000"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000.",
        "query": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >  100 OR amount_of_transaction  >  1000",
        "query_toks": [
            "SELECT",
            "date_of_transaction",
            "FROM",
            "TRANSACTIONS",
            "WHERE",
            "share_count",
            ">",
            "100",
            "OR",
            "amount_of_transaction",
            ">",
            "1000"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the transaction type descriptions and dates if the share count is smaller than 10.",
        "query": "SELECT T1.transaction_type_description ,  T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code WHERE T2.share_count  <  10",
        "query_toks": [
            "SELECT",
            "T1.transaction_type_description",
            ",",
            "T2.date_of_transaction",
            "FROM",
            "Ref_Transaction_Types",
            "AS",
            "T1",
            "JOIN",
            "TRANSACTIONS",
            "AS",
            "T2",
            "ON",
            "T1.transaction_type_code",
            "=",
            "T2.transaction_type_code",
            "WHERE",
            "T2.share_count",
            "<",
            "10"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show details of all investors if they make any transaction with share count greater than 100.",
        "query": "SELECT T1.Investor_details FROM  INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.share_count  >  100",
        "query_toks": [
            "SELECT",
            "T1.Investor_details",
            "FROM",
            "INVESTORS",
            "AS",
            "T1",
            "JOIN",
            "TRANSACTIONS",
            "AS",
            "T2",
            "ON",
            "T1.investor_id",
            "=",
            "T2.investor_id",
            "WHERE",
            "T2.share_count",
            ">",
            "100"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "How many distinct transaction types are used in the transactions?",
        "query": "SELECT COUNT(DISTINCT transaction_type_code) FROM TRANSACTIONS",
        "query_toks": [
            "SELECT",
            "COUNT",
            "(",
            "DISTINCT",
            "transaction_type_code",
            ")",
            "FROM",
            "TRANSACTIONS"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Return the lot details and investor ids.",
        "query": "SELECT lot_details ,  investor_id FROM LOTS",
        "query_toks": [
            "SELECT",
            "lot_details",
            ",",
            "investor_id",
            "FROM",
            "LOTS"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Return the lot details of lots that belong to investors with details \"l\"?",
        "query": "SELECT T2.lot_details FROM INVESTORS AS T1 JOIN LOTS AS T2 ON  T1.investor_id  =  T2.investor_id WHERE T1.Investor_details  =  \"l\"",
        "query_toks": [
            "SELECT",
            "T2.lot_details",
            "FROM",
            "INVESTORS",
            "AS",
            "T1",
            "JOIN",
            "LOTS",
            "AS",
            "T2",
            "ON",
            "T1.investor_id",
            "=",
            "T2.investor_id",
            "WHERE",
            "T1.Investor_details",
            "=",
            "``",
            "l",
            "''"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "What are the purchase details of transactions with amount bigger than 10000?",
        "query": "SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  >  10000",
        "query_toks": [
            "SELECT",
            "T1.purchase_details",
            "FROM",
            "PURCHASES",
            "AS",
            "T1",
            "JOIN",
            "TRANSACTIONS",
            "AS",
            "T2",
            "ON",
            "T1.purchase_transaction_id",
            "=",
            "T2.transaction_id",
            "WHERE",
            "T2.amount_of_transaction",
            ">",
            "10000"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "What are the sale details and dates of transactions with amount smaller than 3000?",
        "query": "SELECT T1.sales_details ,  T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  <  3000",
        "query_toks": [
            "SELECT",
            "T1.sales_details",
            ",",
            "T2.date_of_transaction",
            "FROM",
            "SALES",
            "AS",
            "T1",
            "JOIN",
            "TRANSACTIONS",
            "AS",
            "T2",
            "ON",
            "T1.sales_transaction_id",
            "=",
            "T2.transaction_id",
            "WHERE",
            "T2.amount_of_transaction",
            "<",
            "3000"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "What are the lot details of lots associated with transactions with share count smaller than 50?",
        "query": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  <  50",
        "query_toks": [
            "SELECT",
            "T1.lot_details",
            "FROM",
            "LOTS",
            "AS",
            "T1",
            "JOIN",
            "TRANSACTIONS_LOTS",
            "AS",
            "T2",
            "ON",
            "T1.lot_id",
            "=",
            "T2.transaction_id",
            "JOIN",
            "TRANSACTIONS",
            "AS",
            "T3",
            "ON",
            "T2.transaction_id",
            "=",
            "T3.transaction_id",
            "WHERE",
            "T3.share_count",
            "<",
            "50"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"?",
        "query": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON  T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  >  100 AND T3.transaction_type_code  =  \"PUR\"",
        "query_toks": [
            "SELECT",
            "T1.lot_details",
            "FROM",
            "LOTS",
            "AS",
            "T1",
            "JOIN",
            "TRANSACTIONS_LOTS",
            "AS",
            "T2",
            "ON",
            "T1.lot_id",
            "=",
            "T2.transaction_id",
            "JOIN",
            "TRANSACTIONS",
            "AS",
            "T3",
            "ON",
            "T2.transaction_id",
            "=",
            "T3.transaction_id",
            "WHERE",
            "T3.share_count",
            ">",
            "100",
            "AND",
            "T3.transaction_type_code",
            "=",
            "``",
            "PUR",
            "''"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the average transaction amount for different transaction types.",
        "query": "SELECT transaction_type_code ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
        "query_toks": [
            "SELECT",
            "transaction_type_code",
            ",",
            "avg",
            "(",
            "amount_of_transaction",
            ")",
            "FROM",
            "TRANSACTIONS",
            "GROUP",
            "BY",
            "transaction_type_code"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the maximum and minimum share count of different transaction types.",
        "query": "SELECT transaction_type_code ,  max(share_count) ,  min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code",
        "query_toks": [
            "SELECT",
            "transaction_type_code",
            ",",
            "max",
            "(",
            "share_count",
            ")",
            ",",
            "min",
            "(",
            "share_count",
            ")",
            "FROM",
            "TRANSACTIONS",
            "GROUP",
            "BY",
            "transaction_type_code"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the average share count of transactions for different investors.",
        "query": "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id",
        "query_toks": [
            "SELECT",
            "investor_id",
            ",",
            "avg",
            "(",
            "share_count",
            ")",
            "FROM",
            "TRANSACTIONS",
            "GROUP",
            "BY",
            "investor_id"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the average share count of transactions each each investor, ordered by average share count.",
        "query": "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)",
        "query_toks": [
            "SELECT",
            "investor_id",
            ",",
            "avg",
            "(",
            "share_count",
            ")",
            "FROM",
            "TRANSACTIONS",
            "GROUP",
            "BY",
            "investor_id",
            "ORDER",
            "BY",
            "avg",
            "(",
            "share_count",
            ")"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the average amount of transactions for different investors.",
        "query": "SELECT investor_id ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id",
        "query_toks": [
            "SELECT",
            "investor_id",
            ",",
            "avg",
            "(",
            "amount_of_transaction",
            ")",
            "FROM",
            "TRANSACTIONS",
            "GROUP",
            "BY",
            "investor_id"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the average amount of transactions for different lots.",
        "query": "SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id",
        "query_toks": [
            "SELECT",
            "T2.lot_id",
            ",",
            "avg",
            "(",
            "amount_of_transaction",
            ")",
            "FROM",
            "TRANSACTIONS",
            "AS",
            "T1",
            "JOIN",
            "Transactions_Lots",
            "AS",
            "T2",
            "ON",
            "T1.transaction_id",
            "=",
            "T2.transaction_id",
            "GROUP",
            "BY",
            "T2.lot_id"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the average amount of transactions for different lots, ordered by average amount of transactions.",
        "query": "SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)",
        "query_toks": [
            "SELECT",
            "T2.lot_id",
            ",",
            "avg",
            "(",
            "amount_of_transaction",
            ")",
            "FROM",
            "TRANSACTIONS",
            "AS",
            "T1",
            "JOIN",
            "Transactions_Lots",
            "AS",
            "T2",
            "ON",
            "T1.transaction_id",
            "=",
            "T2.transaction_id",
            "GROUP",
            "BY",
            "T2.lot_id",
            "ORDER",
            "BY",
            "avg",
            "(",
            "amount_of_transaction",
            ")"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the number of transactions with transaction type code \"SALE\" for different investors if it is larger than 0.",
        "query": "SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\" GROUP BY investor_id",
        "query_toks": [
            "SELECT",
            "investor_id",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "TRANSACTIONS",
            "WHERE",
            "transaction_type_code",
            "=",
            "``",
            "SALE",
            "''",
            "GROUP",
            "BY",
            "investor_id"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the number of transactions for different investors.",
        "query": "SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS GROUP BY investor_id",
        "query_toks": [
            "SELECT",
            "investor_id",
            ",",
            "COUNT",
            "(",
            "*",
            ")",
            "FROM",
            "TRANSACTIONS",
            "GROUP",
            "BY",
            "investor_id"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the transaction type code that occurs the fewest times.",
        "query": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "transaction_type_code",
            "FROM",
            "TRANSACTIONS",
            "GROUP",
            "BY",
            "transaction_type_code",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the transaction type code that occurs the most frequently.",
        "query": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "transaction_type_code",
            "FROM",
            "TRANSACTIONS",
            "GROUP",
            "BY",
            "transaction_type_code",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the description of the transaction type that occurs most frequently.",
        "query": "SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.transaction_type_description",
            "FROM",
            "Ref_Transaction_Types",
            "AS",
            "T1",
            "JOIN",
            "TRANSACTIONS",
            "AS",
            "T2",
            "ON",
            "T1.transaction_type_code",
            "=",
            "T2.transaction_type_code",
            "GROUP",
            "BY",
            "T1.transaction_type_code",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the id and details of the investor that has the largest number of transactions.",
        "query": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T2.investor_id",
            ",",
            "T1.Investor_details",
            "FROM",
            "INVESTORS",
            "AS",
            "T1",
            "JOIN",
            "TRANSACTIONS",
            "AS",
            "T2",
            "ON",
            "T1.investor_id",
            "=",
            "T2.investor_id",
            "GROUP",
            "BY",
            "T2.investor_id",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the id and details for the investors who have the top 3 number of transactions.",
        "query": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3",
        "query_toks": [
            "SELECT",
            "T2.investor_id",
            ",",
            "T1.Investor_details",
            "FROM",
            "INVESTORS",
            "AS",
            "T1",
            "JOIN",
            "TRANSACTIONS",
            "AS",
            "T2",
            "ON",
            "T1.investor_id",
            "=",
            "T2.investor_id",
            "GROUP",
            "BY",
            "T2.investor_id",
            "ORDER",
            "BY",
            "COUNT",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "3"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the ids of the investors who have at least two transactions.",
        "query": "SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*)  >=  2",
        "query_toks": [
            "SELECT",
            "T2.investor_id",
            "FROM",
            "INVESTORS",
            "AS",
            "T1",
            "JOIN",
            "TRANSACTIONS",
            "AS",
            "T2",
            "ON",
            "T1.investor_id",
            "=",
            "T2.investor_id",
            "GROUP",
            "BY",
            "T2.investor_id",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\".",
        "query": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.transaction_type_code  =  \"SALE\" GROUP BY T2.investor_id HAVING COUNT(*)  >=  2",
        "query_toks": [
            "SELECT",
            "T2.investor_id",
            ",",
            "T1.Investor_details",
            "FROM",
            "INVESTORS",
            "AS",
            "T1",
            "JOIN",
            "TRANSACTIONS",
            "AS",
            "T2",
            "ON",
            "T1.investor_id",
            "=",
            "T2.investor_id",
            "WHERE",
            "T2.transaction_type_code",
            "=",
            "``",
            "SALE",
            "''",
            "GROUP",
            "BY",
            "T2.investor_id",
            "HAVING",
            "COUNT",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "What are the dates of transactions with at least 100 share count or amount bigger than 100?",
        "query": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >=  100 OR amount_of_transaction  >=  100",
        "query_toks": [
            "SELECT",
            "date_of_transaction",
            "FROM",
            "TRANSACTIONS",
            "WHERE",
            "share_count",
            ">",
            "=",
            "100",
            "OR",
            "amount_of_transaction",
            ">",
            "=",
            "100"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "What are the details of all sales and purchases?",
        "query": "SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases",
        "query_toks": [
            "SELECT",
            "sales_details",
            "FROM",
            "sales",
            "UNION",
            "SELECT",
            "purchase_details",
            "FROM",
            "purchases"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "What are the details of the lots which are not used in any transactions?",
        "query": "SELECT lot_details FROM Lots EXCEPT SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id  =  T2.lot_id",
        "query_toks": [
            "SELECT",
            "lot_details",
            "FROM",
            "Lots",
            "EXCEPT",
            "SELECT",
            "T1.lot_details",
            "FROM",
            "Lots",
            "AS",
            "T1",
            "JOIN",
            "transactions_lots",
            "AS",
            "T2",
            "ON",
            "T1.lot_id",
            "=",
            "T2.lot_id"
        ],
        "db_id": "tracking_share_transactions"
    },
    {
        "question": "Find the name of all customers.",
        "query": "SELECT customer_name FROM customers",
        "query_toks": [
            "SELECT",
            "customer_name",
            "FROM",
            "customers"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What are the names of all the customers?",
        "query": "SELECT customer_name FROM customers",
        "query_toks": [
            "SELECT",
            "customer_name",
            "FROM",
            "customers"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "How many customers are there?",
        "query": "SELECT count(*) FROM customers",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "customers"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Return the total number of distinct customers.",
        "query": "SELECT count(*) FROM customers",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "customers"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What is the average amount of items ordered in each order?",
        "query": "SELECT avg(order_quantity) FROM order_items",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "order_quantity",
            ")",
            "FROM",
            "order_items"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the average order quantity per order.",
        "query": "SELECT avg(order_quantity) FROM order_items",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "order_quantity",
            ")",
            "FROM",
            "order_items"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What are the names of customers who use payment method \"Cash\"?",
        "query": "SELECT customer_name FROM customers WHERE payment_method  =  \"Cash\"",
        "query_toks": [
            "SELECT",
            "customer_name",
            "FROM",
            "customers",
            "WHERE",
            "payment_method",
            "=",
            "``",
            "Cash",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Which customers use \"Cash\" for payment method? Return the customer names.",
        "query": "SELECT customer_name FROM customers WHERE payment_method  =  \"Cash\"",
        "query_toks": [
            "SELECT",
            "customer_name",
            "FROM",
            "customers",
            "WHERE",
            "payment_method",
            "=",
            "``",
            "Cash",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the \"date became customers\" of the customers whose ID is between 10 and 20.",
        "query": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20",
        "query_toks": [
            "SELECT",
            "date_became_customer",
            "FROM",
            "customers",
            "WHERE",
            "customer_id",
            "BETWEEN",
            "10",
            "AND",
            "20"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What are the dates when customers with ids between 10 and 20 became customers?",
        "query": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20",
        "query_toks": [
            "SELECT",
            "date_became_customer",
            "FROM",
            "customers",
            "WHERE",
            "customer_id",
            "BETWEEN",
            "10",
            "AND",
            "20"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Which payment method is used by most customers?",
        "query": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "payment_method",
            "FROM",
            "customers",
            "GROUP",
            "BY",
            "payment_method",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the payment method that is used most frequently.",
        "query": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "payment_method",
            "FROM",
            "customers",
            "GROUP",
            "BY",
            "payment_method",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What are the names of customers using the most popular payment method?",
        "query": "SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)",
        "query_toks": [
            "SELECT",
            "customer_name",
            "FROM",
            "customers",
            "WHERE",
            "payment_method",
            "=",
            "(",
            "SELECT",
            "payment_method",
            "FROM",
            "customers",
            "GROUP",
            "BY",
            "payment_method",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ")"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the name of the customers who use the most frequently used payment method.",
        "query": "SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)",
        "query_toks": [
            "SELECT",
            "customer_name",
            "FROM",
            "customers",
            "WHERE",
            "payment_method",
            "=",
            "(",
            "SELECT",
            "payment_method",
            "FROM",
            "customers",
            "GROUP",
            "BY",
            "payment_method",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ")"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What are all the payment methods?",
        "query": "SELECT DISTINCT payment_method FROM customers",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "payment_method",
            "FROM",
            "customers"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Return all the distinct payment methods used by customers.",
        "query": "SELECT DISTINCT payment_method FROM customers",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "payment_method",
            "FROM",
            "customers"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What are the details of all products?",
        "query": "SELECT DISTINCT product_details FROM products",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "product_details",
            "FROM",
            "products"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Return the the details of all products.",
        "query": "SELECT DISTINCT product_details FROM products",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "product_details",
            "FROM",
            "products"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the name of all customers whose name contains \"Alex\".",
        "query": "SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\"",
        "query_toks": [
            "SELECT",
            "customer_name",
            "FROM",
            "customers",
            "WHERE",
            "customer_name",
            "LIKE",
            "``",
            "%",
            "Alex",
            "%",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Which customer's name contains \"Alex\"? Find the full name.",
        "query": "SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\"",
        "query_toks": [
            "SELECT",
            "customer_name",
            "FROM",
            "customers",
            "WHERE",
            "customer_name",
            "LIKE",
            "``",
            "%",
            "Alex",
            "%",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the detail of products whose detail contains the word \"Latte\" or the word \"Americano\"",
        "query": "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\"",
        "query_toks": [
            "SELECT",
            "product_details",
            "FROM",
            "products",
            "WHERE",
            "product_details",
            "LIKE",
            "``",
            "%",
            "Latte",
            "%",
            "''",
            "OR",
            "product_details",
            "LIKE",
            "``",
            "%",
            "Americano",
            "%",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Which product's detail contains the word \"Latte\" or \"Americano\"? Return the full detail.",
        "query": "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\"",
        "query_toks": [
            "SELECT",
            "product_details",
            "FROM",
            "products",
            "WHERE",
            "product_details",
            "LIKE",
            "``",
            "%",
            "Latte",
            "%",
            "''",
            "OR",
            "product_details",
            "LIKE",
            "``",
            "%",
            "Americano",
            "%",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What is the address content of the customer named \"Maudie Kertzmann\"?",
        "query": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\"",
        "query_toks": [
            "SELECT",
            "t3.address_content",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_addresses",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "addresses",
            "AS",
            "t3",
            "ON",
            "t2.address_id",
            "=",
            "t3.address_id",
            "WHERE",
            "t1.customer_name",
            "=",
            "``",
            "Maudie",
            "Kertzmann",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Return the address content for the customer whose name is \"Maudie Kertzmann\".",
        "query": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\"",
        "query_toks": [
            "SELECT",
            "t3.address_content",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_addresses",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "addresses",
            "AS",
            "t3",
            "ON",
            "t2.address_id",
            "=",
            "t3.address_id",
            "WHERE",
            "t1.customer_name",
            "=",
            "``",
            "Maudie",
            "Kertzmann",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "How many customers are living in city \"Lake Geovannyton\"?",
        "query": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_addresses",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "addresses",
            "AS",
            "t3",
            "ON",
            "t2.address_id",
            "=",
            "t3.address_id",
            "WHERE",
            "t3.city",
            "=",
            "``",
            "Lake",
            "Geovannyton",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the number of customers who live in the city called Lake Geovannyton.",
        "query": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_addresses",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "addresses",
            "AS",
            "t3",
            "ON",
            "t2.address_id",
            "=",
            "t3.address_id",
            "WHERE",
            "t3.city",
            "=",
            "``",
            "Lake",
            "Geovannyton",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the name of customers who are living in Colorado?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  \"Colorado\"",
        "query_toks": [
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_addresses",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "addresses",
            "AS",
            "t3",
            "ON",
            "t2.address_id",
            "=",
            "t3.address_id",
            "WHERE",
            "t3.state_province_county",
            "=",
            "``",
            "Colorado",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What are the names of customers who live in Colorado state?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  \"Colorado\"",
        "query_toks": [
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_addresses",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "addresses",
            "AS",
            "t3",
            "ON",
            "t2.address_id",
            "=",
            "t3.address_id",
            "WHERE",
            "t3.state_province_county",
            "=",
            "``",
            "Colorado",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the list of cities that no customer is living in.",
        "query": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)",
        "query_toks": [
            "SELECT",
            "city",
            "FROM",
            "addresses",
            "WHERE",
            "city",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "DISTINCT",
            "t3.city",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_addresses",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "addresses",
            "AS",
            "t3",
            "ON",
            "t2.address_id",
            "=",
            "t3.address_id",
            ")"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What are the cities no customers live in?",
        "query": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)",
        "query_toks": [
            "SELECT",
            "city",
            "FROM",
            "addresses",
            "WHERE",
            "city",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "DISTINCT",
            "t3.city",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_addresses",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "addresses",
            "AS",
            "t3",
            "ON",
            "t2.address_id",
            "=",
            "t3.address_id",
            ")"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Which city has the most customers living in?",
        "query": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t3.city",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_addresses",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "addresses",
            "AS",
            "t3",
            "ON",
            "t2.address_id",
            "=",
            "t3.address_id",
            "GROUP",
            "BY",
            "t3.city",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the city where the most customers live.",
        "query": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t3.city",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_addresses",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "addresses",
            "AS",
            "t3",
            "ON",
            "t2.address_id",
            "=",
            "t3.address_id",
            "GROUP",
            "BY",
            "t3.city",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Retrieve the list of all cities.",
        "query": "SELECT DISTINCT city FROM addresses",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "city",
            "FROM",
            "addresses"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "List all the distinct cities",
        "query": "SELECT DISTINCT city FROM addresses",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "city",
            "FROM",
            "addresses"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the city with post code 255.",
        "query": "SELECT city FROM addresses WHERE zip_postcode  =  255",
        "query_toks": [
            "SELECT",
            "city",
            "FROM",
            "addresses",
            "WHERE",
            "zip_postcode",
            "=",
            "255"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Which city is post code 255 located in?",
        "query": "SELECT city FROM addresses WHERE zip_postcode  =  255",
        "query_toks": [
            "SELECT",
            "city",
            "FROM",
            "addresses",
            "WHERE",
            "zip_postcode",
            "=",
            "255"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the state and country of all cities with post code starting with 4.",
        "query": "SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"4%\"",
        "query_toks": [
            "SELECT",
            "state_province_county",
            ",",
            "country",
            "FROM",
            "addresses",
            "WHERE",
            "zip_postcode",
            "LIKE",
            "``",
            "4",
            "%",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What are the state and country of all the cities that have post codes starting with 4.\\",
        "query": "SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"4%\"",
        "query_toks": [
            "SELECT",
            "state_province_county",
            ",",
            "country",
            "FROM",
            "addresses",
            "WHERE",
            "zip_postcode",
            "LIKE",
            "``",
            "4",
            "%",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "List the countries having more than 4 addresses listed.",
        "query": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4",
        "query_toks": [
            "SELECT",
            "country",
            "FROM",
            "addresses",
            "GROUP",
            "BY",
            "country",
            "HAVING",
            "count",
            "(",
            "address_id",
            ")",
            ">",
            "4"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "For which countries are there more than four distinct addresses listed?",
        "query": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4",
        "query_toks": [
            "SELECT",
            "country",
            "FROM",
            "addresses",
            "GROUP",
            "BY",
            "country",
            "HAVING",
            "count",
            "(",
            "address_id",
            ")",
            ">",
            "4"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "List all the contact channel codes that were used less than 5 times.",
        "query": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5",
        "query_toks": [
            "SELECT",
            "channel_code",
            "FROM",
            "customer_contact_channels",
            "GROUP",
            "BY",
            "channel_code",
            "HAVING",
            "count",
            "(",
            "customer_id",
            ")",
            "<",
            "5"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Which contact channel codes were used less than 5 times?",
        "query": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5",
        "query_toks": [
            "SELECT",
            "channel_code",
            "FROM",
            "customer_contact_channels",
            "GROUP",
            "BY",
            "channel_code",
            "HAVING",
            "count",
            "(",
            "customer_id",
            ")",
            "<",
            "5"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Which contact channel has been used by the customer with name \"Tillman Ernser\"?",
        "query": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "channel_code",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_contact_channels",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "WHERE",
            "t1.customer_name",
            "=",
            "``",
            "Tillman",
            "Ernser",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the contact channel code that was used by the customer named \"Tillman Ernser\".",
        "query": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "channel_code",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_contact_channels",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "WHERE",
            "t1.customer_name",
            "=",
            "``",
            "Tillman",
            "Ernser",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What is the \"active to date\" of the latest contact channel used by \"Tillman Ernser\"?",
        "query": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "t2.active_to_date",
            ")",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_contact_channels",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "WHERE",
            "t1.customer_name",
            "=",
            "``",
            "Tillman",
            "Ernser",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Return the the \"active to date\" of the latest contact channel used by the customer named \"Tillman Ernser\".",
        "query": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "t2.active_to_date",
            ")",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_contact_channels",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "WHERE",
            "t1.customer_name",
            "=",
            "``",
            "Tillman",
            "Ernser",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What is the average time span of contact channels in the database?",
        "query": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "active_to_date",
            "-",
            "active_from_date",
            ")",
            "FROM",
            "customer_contact_channels"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Compute the average active time span of contact channels.",
        "query": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "active_to_date",
            "-",
            "active_from_date",
            ")",
            "FROM",
            "customer_contact_channels"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What is the channel code and contact number of the customer contact channel that was active for the longest time?",
        "query": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)",
        "query_toks": [
            "SELECT",
            "channel_code",
            ",",
            "contact_number",
            "FROM",
            "customer_contact_channels",
            "WHERE",
            "active_to_date",
            "-",
            "active_from_date",
            "=",
            "(",
            "SELECT",
            "active_to_date",
            "-",
            "active_from_date",
            "FROM",
            "customer_contact_channels",
            "ORDER",
            "BY",
            "(",
            "active_to_date",
            "-",
            "active_from_date",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ")"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Return the channel code and contact number of the customer contact channel whose active duration was the longest.",
        "query": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)",
        "query_toks": [
            "SELECT",
            "channel_code",
            ",",
            "contact_number",
            "FROM",
            "customer_contact_channels",
            "WHERE",
            "active_to_date",
            "-",
            "active_from_date",
            "=",
            "(",
            "SELECT",
            "active_to_date",
            "-",
            "active_from_date",
            "FROM",
            "customer_contact_channels",
            "ORDER",
            "BY",
            "(",
            "active_to_date",
            "-",
            "active_from_date",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ")"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the name and active date of the customer that use email as the contact channel.",
        "query": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'",
        "query_toks": [
            "SELECT",
            "t1.customer_name",
            ",",
            "t2.active_from_date",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_contact_channels",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "WHERE",
            "t2.channel_code",
            "=",
            "'Email",
            "'"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What are the name and active date of the customers whose contact channel code is email?",
        "query": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'",
        "query_toks": [
            "SELECT",
            "t1.customer_name",
            ",",
            "t2.active_from_date",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_contact_channels",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "WHERE",
            "t2.channel_code",
            "=",
            "'Email",
            "'"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What is the name of the customer that made the order with the largest quantity?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)",
        "query_toks": [
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_orders",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "order_items",
            "AS",
            "t3",
            "ON",
            "t2.order_id",
            "=",
            "t3.order_id",
            "WHERE",
            "t3.order_quantity",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "order_quantity",
            ")",
            "FROM",
            "order_items",
            ")"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the name of the customer who made the order of the largest amount of goods.",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)",
        "query_toks": [
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_orders",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "order_items",
            "AS",
            "t3",
            "ON",
            "t2.order_id",
            "=",
            "t3.order_id",
            "WHERE",
            "t3.order_quantity",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "order_quantity",
            ")",
            "FROM",
            "order_items",
            ")"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What is the name of the customer that has purchased the most items?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_orders",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "order_items",
            "AS",
            "t3",
            "ON",
            "t2.order_id",
            "=",
            "t3.order_id",
            "GROUP",
            "BY",
            "t1.customer_name",
            "ORDER",
            "BY",
            "sum",
            "(",
            "t3.order_quantity",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Give me the name of the customer who ordered the most items in total.",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_orders",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "order_items",
            "AS",
            "t3",
            "ON",
            "t2.order_id",
            "=",
            "t3.order_id",
            "GROUP",
            "BY",
            "t1.customer_name",
            "ORDER",
            "BY",
            "sum",
            "(",
            "t3.order_quantity",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What is the payment method of the customer that has purchased the least quantity of items?",
        "query": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
        "query_toks": [
            "SELECT",
            "t1.payment_method",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_orders",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "order_items",
            "AS",
            "t3",
            "ON",
            "t2.order_id",
            "=",
            "t3.order_id",
            "GROUP",
            "BY",
            "t1.customer_name",
            "ORDER",
            "BY",
            "sum",
            "(",
            "t3.order_quantity",
            ")",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Tell me the payment method used by the customer who ordered the least amount of goods in total.",
        "query": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
        "query_toks": [
            "SELECT",
            "t1.payment_method",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_orders",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "order_items",
            "AS",
            "t3",
            "ON",
            "t2.order_id",
            "=",
            "t3.order_id",
            "GROUP",
            "BY",
            "t1.customer_name",
            "ORDER",
            "BY",
            "sum",
            "(",
            "t3.order_quantity",
            ")",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "How many types of products have Rodrick Heaney bought in total?",
        "query": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "t3.product_id",
            ")",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_orders",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "order_items",
            "AS",
            "t3",
            "ON",
            "t2.order_id",
            "=",
            "t3.order_id",
            "WHERE",
            "t1.customer_name",
            "=",
            "``",
            "Rodrick",
            "Heaney",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the number of distinct products Rodrick Heaney has bought so far.",
        "query": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "t3.product_id",
            ")",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_orders",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "order_items",
            "AS",
            "t3",
            "ON",
            "t2.order_id",
            "=",
            "t3.order_id",
            "WHERE",
            "t1.customer_name",
            "=",
            "``",
            "Rodrick",
            "Heaney",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What is the total quantity of products purchased by \"Rodrick Heaney\"?",
        "query": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "t3.order_quantity",
            ")",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_orders",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "order_items",
            "AS",
            "t3",
            "ON",
            "t2.order_id",
            "=",
            "t3.order_id",
            "WHERE",
            "t1.customer_name",
            "=",
            "``",
            "Rodrick",
            "Heaney",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Tell me the total quantity of products bought by the customer called \"Rodrick Heaney\".",
        "query": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "t3.order_quantity",
            ")",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_orders",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "order_items",
            "AS",
            "t3",
            "ON",
            "t2.order_id",
            "=",
            "t3.order_id",
            "WHERE",
            "t1.customer_name",
            "=",
            "``",
            "Rodrick",
            "Heaney",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "How many customers have at least one order with status \"Cancelled\"?",
        "query": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "customer_id",
            ")",
            "FROM",
            "customer_orders",
            "WHERE",
            "order_status",
            "=",
            "``",
            "Cancelled",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Return the number of customers who have at least one order with \"Cancelled\" status.",
        "query": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "customer_id",
            ")",
            "FROM",
            "customer_orders",
            "WHERE",
            "order_status",
            "=",
            "``",
            "Cancelled",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "How many orders have detail \"Second time\"?",
        "query": "SELECT count(*) FROM customer_orders WHERE order_details  =  \"Second time\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "customer_orders",
            "WHERE",
            "order_details",
            "=",
            "``",
            "Second",
            "time",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Tell me the number of orders with \"Second time\" as order detail.",
        "query": "SELECT count(*) FROM customer_orders WHERE order_details  =  \"Second time\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "customer_orders",
            "WHERE",
            "order_details",
            "=",
            "``",
            "Second",
            "time",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the customer name and date of the orders that have the status \"Delivered\".",
        "query": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"",
        "query_toks": [
            "SELECT",
            "t1.customer_name",
            ",",
            "t2.order_date",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_orders",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "WHERE",
            "order_status",
            "=",
            "``",
            "Delivered",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What are the customer name and date of the orders whose status is \"Delivered\".",
        "query": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"",
        "query_toks": [
            "SELECT",
            "t1.customer_name",
            ",",
            "t2.order_date",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_orders",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "WHERE",
            "order_status",
            "=",
            "``",
            "Delivered",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What is the total number of products that are in orders with status \"Cancelled\"?",
        "query": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\"",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "t2.order_quantity",
            ")",
            "FROM",
            "customer_orders",
            "AS",
            "t1",
            "JOIN",
            "order_items",
            "AS",
            "t2",
            "ON",
            "t1.order_id",
            "=",
            "t2.order_id",
            "WHERE",
            "t1.order_status",
            "=",
            "``",
            "Cancelled",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the total quantity of products associated with the orders in the \"Cancelled\" status.",
        "query": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\"",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "t2.order_quantity",
            ")",
            "FROM",
            "customer_orders",
            "AS",
            "t1",
            "JOIN",
            "order_items",
            "AS",
            "t2",
            "ON",
            "t1.order_id",
            "=",
            "t2.order_id",
            "WHERE",
            "t1.order_status",
            "=",
            "``",
            "Cancelled",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the total amount of products ordered before 2018-03-17 07:13:53.",
        "query": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\"",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "t2.order_quantity",
            ")",
            "FROM",
            "customer_orders",
            "AS",
            "t1",
            "JOIN",
            "order_items",
            "AS",
            "t2",
            "ON",
            "t1.order_id",
            "=",
            "t2.order_id",
            "WHERE",
            "t1.order_date",
            "<",
            "``",
            "2018-03-17",
            "07:13:53",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What is the total amount of products purchased before 2018-03-17 07:13:53?",
        "query": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\"",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "t2.order_quantity",
            ")",
            "FROM",
            "customer_orders",
            "AS",
            "t1",
            "JOIN",
            "order_items",
            "AS",
            "t2",
            "ON",
            "t1.order_id",
            "=",
            "t2.order_id",
            "WHERE",
            "t1.order_date",
            "<",
            "``",
            "2018-03-17",
            "07:13:53",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Who made the latest order?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_orders",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "ORDER",
            "BY",
            "t2.order_date",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the name of the customer who made an order most recently.",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_orders",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "ORDER",
            "BY",
            "t2.order_date",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Which product has been ordered most number of times?",
        "query": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t2.product_details",
            "FROM",
            "order_items",
            "AS",
            "t1",
            "JOIN",
            "products",
            "AS",
            "t2",
            "ON",
            "t1.product_id",
            "=",
            "t2.product_id",
            "GROUP",
            "BY",
            "t1.product_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What is the most frequently ordered product? Tell me the detail of the product",
        "query": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t2.product_details",
            "FROM",
            "order_items",
            "AS",
            "t1",
            "JOIN",
            "products",
            "AS",
            "t2",
            "ON",
            "t1.product_id",
            "=",
            "t2.product_id",
            "GROUP",
            "BY",
            "t1.product_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the name and ID of the product whose total order quantity is the largest.",
        "query": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1",
        "query_toks": [
            "SELECT",
            "t2.product_details",
            ",",
            "t2.product_id",
            "FROM",
            "order_items",
            "AS",
            "t1",
            "JOIN",
            "products",
            "AS",
            "t2",
            "ON",
            "t1.product_id",
            "=",
            "t2.product_id",
            "GROUP",
            "BY",
            "t1.product_id",
            "ORDER",
            "BY",
            "sum",
            "(",
            "t1.order_quantity",
            ")",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What are the name and ID of the product bought the most.",
        "query": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1",
        "query_toks": [
            "SELECT",
            "t2.product_details",
            ",",
            "t2.product_id",
            "FROM",
            "order_items",
            "AS",
            "t1",
            "JOIN",
            "products",
            "AS",
            "t2",
            "ON",
            "t1.product_id",
            "=",
            "t2.product_id",
            "GROUP",
            "BY",
            "t1.product_id",
            "ORDER",
            "BY",
            "sum",
            "(",
            "t1.order_quantity",
            ")",
            "LIMIT",
            "1"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
        "query": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"",
        "query_toks": [
            "SELECT",
            "address_content",
            "FROM",
            "addresses",
            "WHERE",
            "city",
            "=",
            "``",
            "East",
            "Julianaside",
            "''",
            "AND",
            "state_province_county",
            "=",
            "``",
            "Texas",
            "''",
            "UNION",
            "SELECT",
            "address_content",
            "FROM",
            "addresses",
            "WHERE",
            "city",
            "=",
            "``",
            "Gleasonmouth",
            "''",
            "AND",
            "state_province_county",
            "=",
            "``",
            "Arizona",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What are all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
        "query": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"",
        "query_toks": [
            "SELECT",
            "address_content",
            "FROM",
            "addresses",
            "WHERE",
            "city",
            "=",
            "``",
            "East",
            "Julianaside",
            "''",
            "AND",
            "state_province_county",
            "=",
            "``",
            "Texas",
            "''",
            "UNION",
            "SELECT",
            "address_content",
            "FROM",
            "addresses",
            "WHERE",
            "city",
            "=",
            "``",
            "Gleasonmouth",
            "''",
            "AND",
            "state_province_county",
            "=",
            "``",
            "Arizona",
            "''"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the name of customers who did not pay with Cash.",
        "query": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'",
        "query_toks": [
            "SELECT",
            "customer_name",
            "FROM",
            "customers",
            "WHERE",
            "payment_method",
            "!",
            "=",
            "'Cash",
            "'"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What is the name of customers who do not use Cash as payment method.",
        "query": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'",
        "query_toks": [
            "SELECT",
            "customer_name",
            "FROM",
            "customers",
            "WHERE",
            "payment_method",
            "!",
            "=",
            "'Cash",
            "'"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the names of customers who never ordered product Latte.",
        "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'",
        "query_toks": [
            "SELECT",
            "customer_name",
            "FROM",
            "customers",
            "EXCEPT",
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_orders",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "order_items",
            "AS",
            "t3",
            "ON",
            "t2.order_id",
            "=",
            "t3.order_id",
            "JOIN",
            "products",
            "AS",
            "t4",
            "ON",
            "t3.product_id",
            "=",
            "t4.product_id",
            "WHERE",
            "t4.product_details",
            "=",
            "'Latte",
            "'"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What are names of customers who never ordered product Latte.",
        "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'",
        "query_toks": [
            "SELECT",
            "customer_name",
            "FROM",
            "customers",
            "EXCEPT",
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_orders",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "order_items",
            "AS",
            "t3",
            "ON",
            "t2.order_id",
            "=",
            "t3.order_id",
            "JOIN",
            "products",
            "AS",
            "t4",
            "ON",
            "t3.product_id",
            "=",
            "t4.product_id",
            "WHERE",
            "t4.product_details",
            "=",
            "'Latte",
            "'"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the names of customers who never placed an order.",
        "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id",
        "query_toks": [
            "SELECT",
            "customer_name",
            "FROM",
            "customers",
            "EXCEPT",
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_orders",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What are the names of customers who never made an order.",
        "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id",
        "query_toks": [
            "SELECT",
            "customer_name",
            "FROM",
            "customers",
            "EXCEPT",
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_orders",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "Find the names of customers who ordered both products Latte and Americano.",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'",
        "query_toks": [
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_orders",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "order_items",
            "AS",
            "t3",
            "ON",
            "t2.order_id",
            "=",
            "t3.order_id",
            "JOIN",
            "products",
            "AS",
            "t4",
            "ON",
            "t3.product_id",
            "=",
            "t4.product_id",
            "WHERE",
            "t4.product_details",
            "=",
            "'Latte",
            "'",
            "INTERSECT",
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_orders",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "order_items",
            "AS",
            "t3",
            "ON",
            "t2.order_id",
            "=",
            "t3.order_id",
            "JOIN",
            "products",
            "AS",
            "t4",
            "ON",
            "t3.product_id",
            "=",
            "t4.product_id",
            "WHERE",
            "t4.product_details",
            "=",
            "'Americano",
            "'"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "What are the names of customers who have purchased both products Latte and Americano?",
        "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'",
        "query_toks": [
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_orders",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "order_items",
            "AS",
            "t3",
            "ON",
            "t2.order_id",
            "=",
            "t3.order_id",
            "JOIN",
            "products",
            "AS",
            "t4",
            "ON",
            "t3.product_id",
            "=",
            "t4.product_id",
            "WHERE",
            "t4.product_details",
            "=",
            "'Latte",
            "'",
            "INTERSECT",
            "SELECT",
            "t1.customer_name",
            "FROM",
            "customers",
            "AS",
            "t1",
            "JOIN",
            "customer_orders",
            "AS",
            "t2",
            "ON",
            "t1.customer_id",
            "=",
            "t2.customer_id",
            "JOIN",
            "order_items",
            "AS",
            "t3",
            "ON",
            "t2.order_id",
            "=",
            "t3.order_id",
            "JOIN",
            "products",
            "AS",
            "t4",
            "ON",
            "t3.product_id",
            "=",
            "t4.product_id",
            "WHERE",
            "t4.product_details",
            "=",
            "'Americano",
            "'"
        ],
        "db_id": "customers_and_addresses"
    },
    {
        "question": "List every individual's first name, middle name and last name in alphabetical order by last name.",
        "query": "SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name",
        "query_toks": [
            "SELECT",
            "individual_first_name",
            ",",
            "individual_middle_name",
            ",",
            "individual_last_name",
            "FROM",
            "individuals",
            "ORDER",
            "BY",
            "individual_last_name"
        ],
        "db_id": "e_government"
    },
    {
        "question": "What are the first, middle, and last names of all individuals, ordered by last name?",
        "query": "SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name",
        "query_toks": [
            "SELECT",
            "individual_first_name",
            ",",
            "individual_middle_name",
            ",",
            "individual_last_name",
            "FROM",
            "individuals",
            "ORDER",
            "BY",
            "individual_last_name"
        ],
        "db_id": "e_government"
    },
    {
        "question": "List all the types of forms.",
        "query": "SELECT DISTINCT form_type_code FROM forms",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "form_type_code",
            "FROM",
            "forms"
        ],
        "db_id": "e_government"
    },
    {
        "question": "What are the different types of forms?",
        "query": "SELECT DISTINCT form_type_code FROM forms",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "form_type_code",
            "FROM",
            "forms"
        ],
        "db_id": "e_government"
    },
    {
        "question": "Find the name of the most popular party form.",
        "query": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t1.form_name",
            "FROM",
            "forms",
            "AS",
            "t1",
            "JOIN",
            "party_forms",
            "AS",
            "t2",
            "ON",
            "t1.form_id",
            "=",
            "t2.form_id",
            "GROUP",
            "BY",
            "t2.form_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "e_government"
    },
    {
        "question": "What is the name of the party form that is most common?",
        "query": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t1.form_name",
            "FROM",
            "forms",
            "AS",
            "t1",
            "JOIN",
            "party_forms",
            "AS",
            "t2",
            "ON",
            "t1.form_id",
            "=",
            "t2.form_id",
            "GROUP",
            "BY",
            "t2.form_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "e_government"
    },
    {
        "question": "Find the payment method and phone of the party with email \"enrico09@example.com\".",
        "query": "SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  \"enrico09@example.com\"",
        "query_toks": [
            "SELECT",
            "payment_method_code",
            ",",
            "party_phone",
            "FROM",
            "parties",
            "WHERE",
            "party_email",
            "=",
            "``",
            "enrico09",
            "@",
            "example.com",
            "''"
        ],
        "db_id": "e_government"
    },
    {
        "question": "What is the payment method code and party phone of the party with the email 'enrico09@example.com'?",
        "query": "SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  \"enrico09@example.com\"",
        "query_toks": [
            "SELECT",
            "payment_method_code",
            ",",
            "party_phone",
            "FROM",
            "parties",
            "WHERE",
            "party_email",
            "=",
            "``",
            "enrico09",
            "@",
            "example.com",
            "''"
        ],
        "db_id": "e_government"
    },
    {
        "question": "Find the emails of parties with the most popular party form.",
        "query": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)",
        "query_toks": [
            "SELECT",
            "t1.party_email",
            "FROM",
            "parties",
            "AS",
            "t1",
            "JOIN",
            "party_forms",
            "AS",
            "t2",
            "ON",
            "t1.party_id",
            "=",
            "t2.party_id",
            "WHERE",
            "t2.form_id",
            "=",
            "(",
            "SELECT",
            "form_id",
            "FROM",
            "party_forms",
            "GROUP",
            "BY",
            "form_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ")"
        ],
        "db_id": "e_government"
    },
    {
        "question": "What are the party emails associated with parties that used the party form that is the most common?",
        "query": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)",
        "query_toks": [
            "SELECT",
            "t1.party_email",
            "FROM",
            "parties",
            "AS",
            "t1",
            "JOIN",
            "party_forms",
            "AS",
            "t2",
            "ON",
            "t1.party_id",
            "=",
            "t2.party_id",
            "WHERE",
            "t2.form_id",
            "=",
            "(",
            "SELECT",
            "form_id",
            "FROM",
            "party_forms",
            "GROUP",
            "BY",
            "form_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ")"
        ],
        "db_id": "e_government"
    },
    {
        "question": "List all the name of organizations in order of the date formed.",
        "query": "SELECT organization_name FROM organizations ORDER BY date_formed ASC",
        "query_toks": [
            "SELECT",
            "organization_name",
            "FROM",
            "organizations",
            "ORDER",
            "BY",
            "date_formed",
            "ASC"
        ],
        "db_id": "e_government"
    },
    {
        "question": "What are the names of organizations, ordered by the date they were formed, ascending?",
        "query": "SELECT organization_name FROM organizations ORDER BY date_formed ASC",
        "query_toks": [
            "SELECT",
            "organization_name",
            "FROM",
            "organizations",
            "ORDER",
            "BY",
            "date_formed",
            "ASC"
        ],
        "db_id": "e_government"
    },
    {
        "question": "Find the name of the youngest organization.",
        "query": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "organization_name",
            "FROM",
            "organizations",
            "ORDER",
            "BY",
            "date_formed",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "e_government"
    },
    {
        "question": "What is the name of the organization that was formed most recently?",
        "query": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "organization_name",
            "FROM",
            "organizations",
            "ORDER",
            "BY",
            "date_formed",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "e_government"
    },
    {
        "question": "Find the last name of the latest contact individual of the organization \"Labour Party\".",
        "query": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t3.individual_last_name",
            "FROM",
            "organizations",
            "AS",
            "t1",
            "JOIN",
            "organization_contact_individuals",
            "AS",
            "t2",
            "ON",
            "t1.organization_id",
            "=",
            "t2.organization_id",
            "JOIN",
            "individuals",
            "AS",
            "t3",
            "ON",
            "t2.individual_id",
            "=",
            "t3.individual_id",
            "WHERE",
            "t1.organization_name",
            "=",
            "``",
            "Labour",
            "Party",
            "''",
            "ORDER",
            "BY",
            "t2.date_contact_to",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "e_government"
    },
    {
        "question": "What is the last name of the contact individual from the Labour party organization who was contacted most recently?",
        "query": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t3.individual_last_name",
            "FROM",
            "organizations",
            "AS",
            "t1",
            "JOIN",
            "organization_contact_individuals",
            "AS",
            "t2",
            "ON",
            "t1.organization_id",
            "=",
            "t2.organization_id",
            "JOIN",
            "individuals",
            "AS",
            "t3",
            "ON",
            "t2.individual_id",
            "=",
            "t3.individual_id",
            "WHERE",
            "t1.organization_name",
            "=",
            "``",
            "Labour",
            "Party",
            "''",
            "ORDER",
            "BY",
            "t2.date_contact_to",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "e_government"
    },
    {
        "question": "Find the last name of the first ever contact person of the organization with the highest UK Vat number.",
        "query": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t3.individual_last_name",
            "FROM",
            "organizations",
            "AS",
            "t1",
            "JOIN",
            "organization_contact_individuals",
            "AS",
            "t2",
            "ON",
            "t1.organization_id",
            "=",
            "t2.organization_id",
            "JOIN",
            "individuals",
            "AS",
            "t3",
            "ON",
            "t2.individual_id",
            "=",
            "t3.individual_id",
            "WHERE",
            "t1.uk_vat_number",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "uk_vat_number",
            ")",
            "FROM",
            "organizations",
            ")",
            "ORDER",
            "BY",
            "t2.date_contact_to",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "e_government"
    },
    {
        "question": "What is the last name of the first individual contacted from the organization with the maximum UK Vat number across all organizations?",
        "query": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t3.individual_last_name",
            "FROM",
            "organizations",
            "AS",
            "t1",
            "JOIN",
            "organization_contact_individuals",
            "AS",
            "t2",
            "ON",
            "t1.organization_id",
            "=",
            "t2.organization_id",
            "JOIN",
            "individuals",
            "AS",
            "t3",
            "ON",
            "t2.individual_id",
            "=",
            "t3.individual_id",
            "WHERE",
            "t1.uk_vat_number",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "uk_vat_number",
            ")",
            "FROM",
            "organizations",
            ")",
            "ORDER",
            "BY",
            "t2.date_contact_to",
            "ASC",
            "LIMIT",
            "1"
        ],
        "db_id": "e_government"
    },
    {
        "question": "How many services are there?",
        "query": "SELECT count(*) FROM services",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "services"
        ],
        "db_id": "e_government"
    },
    {
        "question": "Count the number of services.",
        "query": "SELECT count(*) FROM services",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "services"
        ],
        "db_id": "e_government"
    },
    {
        "question": "Find name of the services that has never been used.",
        "query": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id",
        "query_toks": [
            "SELECT",
            "service_name",
            "FROM",
            "services",
            "EXCEPT",
            "SELECT",
            "t1.service_name",
            "FROM",
            "services",
            "AS",
            "t1",
            "JOIN",
            "party_services",
            "AS",
            "t2",
            "ON",
            "t1.service_id",
            "=",
            "t2.service_id"
        ],
        "db_id": "e_government"
    },
    {
        "question": "What are the names of the services that have never been used?",
        "query": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id",
        "query_toks": [
            "SELECT",
            "service_name",
            "FROM",
            "services",
            "EXCEPT",
            "SELECT",
            "t1.service_name",
            "FROM",
            "services",
            "AS",
            "t1",
            "JOIN",
            "party_services",
            "AS",
            "t2",
            "ON",
            "t1.service_id",
            "=",
            "t2.service_id"
        ],
        "db_id": "e_government"
    },
    {
        "question": "Find the name of all the cities and states.",
        "query": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
        "query_toks": [
            "SELECT",
            "town_city",
            "FROM",
            "addresses",
            "UNION",
            "SELECT",
            "state_province_county",
            "FROM",
            "addresses"
        ],
        "db_id": "e_government"
    },
    {
        "question": "What are the names of all cities and states?",
        "query": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
        "query_toks": [
            "SELECT",
            "town_city",
            "FROM",
            "addresses",
            "UNION",
            "SELECT",
            "state_province_county",
            "FROM",
            "addresses"
        ],
        "db_id": "e_government"
    },
    {
        "question": "How many cities are there in state \"Colorado\"?",
        "query": "SELECT count(*) FROM addresses WHERE state_province_county  =  \"Colorado\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "addresses",
            "WHERE",
            "state_province_county",
            "=",
            "``",
            "Colorado",
            "''"
        ],
        "db_id": "e_government"
    },
    {
        "question": "Count the number of cities in the state of Colorado.",
        "query": "SELECT count(*) FROM addresses WHERE state_province_county  =  \"Colorado\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "addresses",
            "WHERE",
            "state_province_county",
            "=",
            "``",
            "Colorado",
            "''"
        ],
        "db_id": "e_government"
    },
    {
        "question": "Find the payment method code used by more than 3 parties.",
        "query": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3",
        "query_toks": [
            "SELECT",
            "payment_method_code",
            "FROM",
            "parties",
            "GROUP",
            "BY",
            "payment_method_code",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3"
        ],
        "db_id": "e_government"
    },
    {
        "question": "What are the payment method codes that have been used by more than 3 parties?",
        "query": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3",
        "query_toks": [
            "SELECT",
            "payment_method_code",
            "FROM",
            "parties",
            "GROUP",
            "BY",
            "payment_method_code",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3"
        ],
        "db_id": "e_government"
    },
    {
        "question": "Find the name of organizations whose names contain \"Party\".",
        "query": "SELECT organization_name FROM organizations WHERE organization_name LIKE \"%Party%\"",
        "query_toks": [
            "SELECT",
            "organization_name",
            "FROM",
            "organizations",
            "WHERE",
            "organization_name",
            "LIKE",
            "``",
            "%",
            "Party",
            "%",
            "''"
        ],
        "db_id": "e_government"
    },
    {
        "question": "What are the names of organizations that contain the word \"Party\"?",
        "query": "SELECT organization_name FROM organizations WHERE organization_name LIKE \"%Party%\"",
        "query_toks": [
            "SELECT",
            "organization_name",
            "FROM",
            "organizations",
            "WHERE",
            "organization_name",
            "LIKE",
            "``",
            "%",
            "Party",
            "%",
            "''"
        ],
        "db_id": "e_government"
    },
    {
        "question": "How many distinct payment methods are used by parties?",
        "query": "SELECT count(DISTINCT payment_method_code) FROM parties",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "payment_method_code",
            ")",
            "FROM",
            "parties"
        ],
        "db_id": "e_government"
    },
    {
        "question": "Count the number of different payment method codes used by parties.",
        "query": "SELECT count(DISTINCT payment_method_code) FROM parties",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "payment_method_code",
            ")",
            "FROM",
            "parties"
        ],
        "db_id": "e_government"
    },
    {
        "question": "Which is the email of the party that has used the services the most number of times?",
        "query": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t1.party_email",
            "FROM",
            "parties",
            "AS",
            "t1",
            "JOIN",
            "party_services",
            "AS",
            "t2",
            "ON",
            "t1.party_id",
            "=",
            "t2.customer_id",
            "GROUP",
            "BY",
            "t1.party_email",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "e_government"
    },
    {
        "question": "Return the party email that has used party services the greatest number of times.",
        "query": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t1.party_email",
            "FROM",
            "parties",
            "AS",
            "t1",
            "JOIN",
            "party_services",
            "AS",
            "t2",
            "ON",
            "t1.party_id",
            "=",
            "t2.customer_id",
            "GROUP",
            "BY",
            "t1.party_email",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "e_government"
    },
    {
        "question": "Which state can address \"6862 Kaitlyn Knolls\" possibly be in?",
        "query": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"",
        "query_toks": [
            "SELECT",
            "state_province_county",
            "FROM",
            "addresses",
            "WHERE",
            "line_1_number_building",
            "LIKE",
            "``",
            "%",
            "6862",
            "Kaitlyn",
            "Knolls",
            "%",
            "''"
        ],
        "db_id": "e_government"
    },
    {
        "question": "Give the state corresponding to the line number building \"6862 Kaitlyn Knolls\".",
        "query": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"",
        "query_toks": [
            "SELECT",
            "state_province_county",
            "FROM",
            "addresses",
            "WHERE",
            "line_1_number_building",
            "LIKE",
            "``",
            "%",
            "6862",
            "Kaitlyn",
            "Knolls",
            "%",
            "''"
        ],
        "db_id": "e_government"
    },
    {
        "question": "What is the name of organization that has the greatest number of contact individuals?",
        "query": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t1.organization_name",
            "FROM",
            "organizations",
            "AS",
            "t1",
            "JOIN",
            "organization_contact_individuals",
            "AS",
            "t2",
            "ON",
            "t1.organization_id",
            "=",
            "t2.organization_id",
            "GROUP",
            "BY",
            "t1.organization_name",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "e_government"
    },
    {
        "question": "Return the name of the organization which has the most contact individuals.",
        "query": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "t1.organization_name",
            "FROM",
            "organizations",
            "AS",
            "t1",
            "JOIN",
            "organization_contact_individuals",
            "AS",
            "t2",
            "ON",
            "t1.organization_id",
            "=",
            "t2.organization_id",
            "GROUP",
            "BY",
            "t1.organization_name",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "e_government"
    },
    {
        "question": "Find the last name of the individuals that have been contact individuals of an organization.",
        "query": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "t1.individual_last_name",
            "FROM",
            "individuals",
            "AS",
            "t1",
            "JOIN",
            "organization_contact_individuals",
            "AS",
            "t2",
            "ON",
            "t1.individual_id",
            "=",
            "t2.individual_id"
        ],
        "db_id": "e_government"
    },
    {
        "question": "What are the last names of individuals who have been contact individuals for an organization?",
        "query": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "t1.individual_last_name",
            "FROM",
            "individuals",
            "AS",
            "t1",
            "JOIN",
            "organization_contact_individuals",
            "AS",
            "t2",
            "ON",
            "t1.individual_id",
            "=",
            "t2.individual_id"
        ],
        "db_id": "e_government"
    },
    {
        "question": "List all vehicle id",
        "query": "SELECT vehicle_id FROM Vehicles;",
        "query_toks": [
            "SELECT",
            "vehicle_id",
            "FROM",
            "Vehicles",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What are the ids of all vehicles?",
        "query": "SELECT vehicle_id FROM Vehicles;",
        "query_toks": [
            "SELECT",
            "vehicle_id",
            "FROM",
            "Vehicles",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "How many vehicle in total?",
        "query": "SELECT count(*) FROM Vehicles;",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Vehicles",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "How many vehicles exist?",
        "query": "SELECT count(*) FROM Vehicles;",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Vehicles",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "Show the detail of vehicle with id 1.",
        "query": "SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;",
        "query_toks": [
            "SELECT",
            "vehicle_details",
            "FROM",
            "Vehicles",
            "WHERE",
            "vehicle_id",
            "=",
            "1",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What are the details of the car with id 1?",
        "query": "SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;",
        "query_toks": [
            "SELECT",
            "vehicle_details",
            "FROM",
            "Vehicles",
            "WHERE",
            "vehicle_id",
            "=",
            "1",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "List the first name middle name and last name of all staff.",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Staff;",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "FROM",
            "Staff",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What are the first, middle, and last names of all staff?",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Staff;",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "FROM",
            "Staff",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What is the birthday of the staff member with first name as Janessa and last name as Sawayn?",
        "query": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "query_toks": [
            "SELECT",
            "date_of_birth",
            "FROM",
            "Staff",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Janessa",
            "''",
            "AND",
            "last_name",
            "=",
            "``",
            "Sawayn",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What is the date of birth for the staff member named Janessa Sawayn?",
        "query": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "query_toks": [
            "SELECT",
            "date_of_birth",
            "FROM",
            "Staff",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Janessa",
            "''",
            "AND",
            "last_name",
            "=",
            "``",
            "Sawayn",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "When did the staff member with first name as Janessa and last name as Sawayn join the company?",
        "query": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "query_toks": [
            "SELECT",
            "date_joined_staff",
            "FROM",
            "Staff",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Janessa",
            "''",
            "AND",
            "last_name",
            "=",
            "``",
            "Sawayn",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "When did the staff member named Janessa Sawayn join the company?",
        "query": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "query_toks": [
            "SELECT",
            "date_joined_staff",
            "FROM",
            "Staff",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Janessa",
            "''",
            "AND",
            "last_name",
            "=",
            "``",
            "Sawayn",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "When did the staff member with first name as Janessa and last name as Sawayn leave the company?",
        "query": "SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "query_toks": [
            "SELECT",
            "date_left_staff",
            "FROM",
            "Staff",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Janessa",
            "''",
            "AND",
            "last_name",
            "=",
            "``",
            "Sawayn",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "When did the staff member Janessa Sawayn leave the company?",
        "query": "SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "query_toks": [
            "SELECT",
            "date_left_staff",
            "FROM",
            "Staff",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Janessa",
            "''",
            "AND",
            "last_name",
            "=",
            "``",
            "Sawayn",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "How many staff have the first name Ludie?",
        "query": "SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Staff",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Ludie",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "How many employees have a first name of Ludie?",
        "query": "SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Staff",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Ludie",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What is the nickname of staff with first name as Janessa and last name as Sawayn?",
        "query": "SELECT nickname FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "query_toks": [
            "SELECT",
            "nickname",
            "FROM",
            "Staff",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Janessa",
            "''",
            "AND",
            "last_name",
            "=",
            "``",
            "Sawayn",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What is the nickname of the employee named Janessa Sawayn?",
        "query": "SELECT nickname FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
        "query_toks": [
            "SELECT",
            "nickname",
            "FROM",
            "Staff",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Janessa",
            "''",
            "AND",
            "last_name",
            "=",
            "``",
            "Sawayn",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "How many staff in total?",
        "query": "SELECT count(*) FROM Staff;",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Staff",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "How many employees are there?",
        "query": "SELECT count(*) FROM Staff;",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Staff",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "Which city does staff with first name as Janessa and last name as Sawayn live?",
        "query": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "query_toks": [
            "SELECT",
            "T1.city",
            "FROM",
            "Addresses",
            "AS",
            "T1",
            "JOIN",
            "Staff",
            "AS",
            "T2",
            "ON",
            "T1.address_id",
            "=",
            "T2.staff_address_id",
            "WHERE",
            "T2.first_name",
            "=",
            "``",
            "Janessa",
            "''",
            "AND",
            "T2.last_name",
            "=",
            "``",
            "Sawayn",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "In what city does Janessa Sawayn live?",
        "query": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "query_toks": [
            "SELECT",
            "T1.city",
            "FROM",
            "Addresses",
            "AS",
            "T1",
            "JOIN",
            "Staff",
            "AS",
            "T2",
            "ON",
            "T1.address_id",
            "=",
            "T2.staff_address_id",
            "WHERE",
            "T2.first_name",
            "=",
            "``",
            "Janessa",
            "''",
            "AND",
            "T2.last_name",
            "=",
            "``",
            "Sawayn",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "Which country and state does staff with first name as Janessa and last name as Sawayn lived?",
        "query": "SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "query_toks": [
            "SELECT",
            "T1.country",
            ",",
            "T1.state_province_county",
            "FROM",
            "Addresses",
            "AS",
            "T1",
            "JOIN",
            "Staff",
            "AS",
            "T2",
            "ON",
            "T1.address_id",
            "=",
            "T2.staff_address_id",
            "WHERE",
            "T2.first_name",
            "=",
            "``",
            "Janessa",
            "''",
            "AND",
            "T2.last_name",
            "=",
            "``",
            "Sawayn",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "In which country and state does Janessa Sawayn live?",
        "query": "SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "query_toks": [
            "SELECT",
            "T1.country",
            ",",
            "T1.state_province_county",
            "FROM",
            "Addresses",
            "AS",
            "T1",
            "JOIN",
            "Staff",
            "AS",
            "T2",
            "ON",
            "T1.address_id",
            "=",
            "T2.staff_address_id",
            "WHERE",
            "T2.first_name",
            "=",
            "``",
            "Janessa",
            "''",
            "AND",
            "T2.last_name",
            "=",
            "``",
            "Sawayn",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "How long is the total lesson time took by customer with first name as Rylan and last name as Goodwin?",
        "query": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "T1.lesson_time",
            ")",
            "FROM",
            "Lessons",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.first_name",
            "=",
            "``",
            "Rylan",
            "''",
            "AND",
            "T2.last_name",
            "=",
            "``",
            "Goodwin",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "How long is the total lesson time took by the customer named Rylan Goodwin?",
        "query": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "T1.lesson_time",
            ")",
            "FROM",
            "Lessons",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.first_name",
            "=",
            "``",
            "Rylan",
            "''",
            "AND",
            "T2.last_name",
            "=",
            "``",
            "Goodwin",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What is the zip code of staff with first name as Janessa and last name as Sawayn lived?",
        "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "query_toks": [
            "SELECT",
            "T1.zip_postcode",
            "FROM",
            "Addresses",
            "AS",
            "T1",
            "JOIN",
            "Staff",
            "AS",
            "T2",
            "ON",
            "T1.address_id",
            "=",
            "T2.staff_address_id",
            "WHERE",
            "T2.first_name",
            "=",
            "``",
            "Janessa",
            "''",
            "AND",
            "T2.last_name",
            "=",
            "``",
            "Sawayn",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What is the zip code of the hosue of the employee named Janessa Sawayn?",
        "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "query_toks": [
            "SELECT",
            "T1.zip_postcode",
            "FROM",
            "Addresses",
            "AS",
            "T1",
            "JOIN",
            "Staff",
            "AS",
            "T2",
            "ON",
            "T1.address_id",
            "=",
            "T2.staff_address_id",
            "WHERE",
            "T2.first_name",
            "=",
            "``",
            "Janessa",
            "''",
            "AND",
            "T2.last_name",
            "=",
            "``",
            "Sawayn",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "How many staff live in state Georgia?",
        "query": "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Addresses",
            "WHERE",
            "state_province_county",
            "=",
            "``",
            "Georgia",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "How many employees live in Georgia?",
        "query": "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Addresses",
            "WHERE",
            "state_province_county",
            "=",
            "``",
            "Georgia",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "Find out the first name and last name of staff lived in city Damianfort.",
        "query": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";",
        "query_toks": [
            "SELECT",
            "T2.first_name",
            ",",
            "T2.last_name",
            "FROM",
            "Addresses",
            "AS",
            "T1",
            "JOIN",
            "Staff",
            "AS",
            "T2",
            "ON",
            "T1.address_id",
            "=",
            "T2.staff_address_id",
            "WHERE",
            "T1.city",
            "=",
            "``",
            "Damianfort",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What is the first and last name of all employees who live in the city Damianfort?",
        "query": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";",
        "query_toks": [
            "SELECT",
            "T2.first_name",
            ",",
            "T2.last_name",
            "FROM",
            "Addresses",
            "AS",
            "T1",
            "JOIN",
            "Staff",
            "AS",
            "T2",
            "ON",
            "T1.address_id",
            "=",
            "T2.staff_address_id",
            "WHERE",
            "T1.city",
            "=",
            "``",
            "Damianfort",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "Which city lives most of staffs? List the city name and number of staffs.",
        "query": "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "T1.city",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Addresses",
            "AS",
            "T1",
            "JOIN",
            "Staff",
            "AS",
            "T2",
            "ON",
            "T1.address_id",
            "=",
            "T2.staff_address_id",
            "GROUP",
            "BY",
            "T1.city",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "In which city do the most employees live and how many of them live there?",
        "query": "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "T1.city",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Addresses",
            "AS",
            "T1",
            "JOIN",
            "Staff",
            "AS",
            "T2",
            "ON",
            "T1.address_id",
            "=",
            "T2.staff_address_id",
            "GROUP",
            "BY",
            "T1.city",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "List the states which have between 2 to 4 staffs living there.",
        "query": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;",
        "query_toks": [
            "SELECT",
            "T1.state_province_county",
            "FROM",
            "Addresses",
            "AS",
            "T1",
            "JOIN",
            "Staff",
            "AS",
            "T2",
            "ON",
            "T1.address_id",
            "=",
            "T2.staff_address_id",
            "GROUP",
            "BY",
            "T1.state_province_county",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "BETWEEN",
            "2",
            "AND",
            "4",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What are the names of the states that have 2 to 4 employees living there?",
        "query": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;",
        "query_toks": [
            "SELECT",
            "T1.state_province_county",
            "FROM",
            "Addresses",
            "AS",
            "T1",
            "JOIN",
            "Staff",
            "AS",
            "T2",
            "ON",
            "T1.address_id",
            "=",
            "T2.staff_address_id",
            "GROUP",
            "BY",
            "T1.state_province_county",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "BETWEEN",
            "2",
            "AND",
            "4",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "List the first name and last name of all customers.",
        "query": "SELECT first_name ,  last_name FROM Customers;",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            "FROM",
            "Customers",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What are the first and last names for all customers?",
        "query": "SELECT first_name ,  last_name FROM Customers;",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            "FROM",
            "Customers",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "List email address and birthday of customer whose first name as Carole.",
        "query": "SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = \"Carole\"",
        "query_toks": [
            "SELECT",
            "email_address",
            ",",
            "date_of_birth",
            "FROM",
            "Customers",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Carole",
            "''"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What are the email addresses and date of births for all customers who have a first name of Carole?",
        "query": "SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = \"Carole\"",
        "query_toks": [
            "SELECT",
            "email_address",
            ",",
            "date_of_birth",
            "FROM",
            "Customers",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Carole",
            "''"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "List phone number and email address of customer with more than 2000 outstanding balance.",
        "query": "SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000;",
        "query_toks": [
            "SELECT",
            "phone_number",
            ",",
            "email_address",
            "FROM",
            "Customers",
            "WHERE",
            "amount_outstanding",
            ">",
            "2000",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What are the phone numbers and email addresses of all customers who have an outstanding balance of more than 2000?",
        "query": "SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000;",
        "query_toks": [
            "SELECT",
            "phone_number",
            ",",
            "email_address",
            "FROM",
            "Customers",
            "WHERE",
            "amount_outstanding",
            ">",
            "2000",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What is the status code, mobile phone number and email address of customer with last name as Kohler or first name as Marina?",
        "query": "SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\"",
        "query_toks": [
            "SELECT",
            "customer_status_code",
            ",",
            "cell_mobile_phone_number",
            ",",
            "email_address",
            "FROM",
            "Customers",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Marina",
            "''",
            "OR",
            "last_name",
            "=",
            "``",
            "Kohler",
            "''"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What is the status code, phone number, and email address of the customer whose last name is Kohler or whose first name is Marina?",
        "query": "SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\"",
        "query_toks": [
            "SELECT",
            "customer_status_code",
            ",",
            "cell_mobile_phone_number",
            ",",
            "email_address",
            "FROM",
            "Customers",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Marina",
            "''",
            "OR",
            "last_name",
            "=",
            "``",
            "Kohler",
            "''"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "When are the birthdays of customer who are classified as 'Good Customer' status?",
        "query": "SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer'",
        "query_toks": [
            "SELECT",
            "date_of_birth",
            "FROM",
            "Customers",
            "WHERE",
            "customer_status_code",
            "=",
            "'Good",
            "Customer",
            "'"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What is the date of birth of every customer whose status code is 'Good Customer'?",
        "query": "SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer'",
        "query_toks": [
            "SELECT",
            "date_of_birth",
            "FROM",
            "Customers",
            "WHERE",
            "customer_status_code",
            "=",
            "'Good",
            "Customer",
            "'"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "When did customer with first name as Carole and last name as Bernhard became a customer?",
        "query": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";",
        "query_toks": [
            "SELECT",
            "date_became_customer",
            "FROM",
            "Customers",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Carole",
            "''",
            "AND",
            "last_name",
            "=",
            "``",
            "Bernhard",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "When did Carole Bernhard first become a customer?",
        "query": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";",
        "query_toks": [
            "SELECT",
            "date_became_customer",
            "FROM",
            "Customers",
            "WHERE",
            "first_name",
            "=",
            "``",
            "Carole",
            "''",
            "AND",
            "last_name",
            "=",
            "``",
            "Bernhard",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "How many customers in total?",
        "query": "SELECT count(*) FROM Customers;",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "How many customers are there?",
        "query": "SELECT count(*) FROM Customers;",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "List all customer status codes and the number of customers having each status code.",
        "query": "SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;",
        "query_toks": [
            "SELECT",
            "customer_status_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers",
            "GROUP",
            "BY",
            "customer_status_code",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "For each customer status code, how many customers are classified that way?",
        "query": "SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;",
        "query_toks": [
            "SELECT",
            "customer_status_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers",
            "GROUP",
            "BY",
            "customer_status_code",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "Which customer status code has least number of customers?",
        "query": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "customer_status_code",
            "FROM",
            "Customers",
            "GROUP",
            "BY",
            "customer_status_code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What is the status code with the least number of customers?",
        "query": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "customer_status_code",
            "FROM",
            "Customers",
            "GROUP",
            "BY",
            "customer_status_code",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "ASC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?",
        "query": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Lessons",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.first_name",
            "=",
            "``",
            "Rylan",
            "''",
            "AND",
            "T2.last_name",
            "=",
            "``",
            "Goodwin",
            "''",
            "AND",
            "T1.lesson_status_code",
            "=",
            "``",
            "Completed",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "How many lessons did the customer Ryan Goodwin complete?",
        "query": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Lessons",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.first_name",
            "=",
            "``",
            "Rylan",
            "''",
            "AND",
            "T2.last_name",
            "=",
            "``",
            "Goodwin",
            "''",
            "AND",
            "T1.lesson_status_code",
            "=",
            "``",
            "Completed",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What is maximum, minimum and average amount of outstanding of customer?",
        "query": "SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "amount_outstanding",
            ")",
            ",",
            "min",
            "(",
            "amount_outstanding",
            ")",
            ",",
            "avg",
            "(",
            "amount_outstanding",
            ")",
            "FROM",
            "Customers",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What is the maximum, minimum, and average amount of money outsanding for all customers?",
        "query": "SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "amount_outstanding",
            ")",
            ",",
            "min",
            "(",
            "amount_outstanding",
            ")",
            ",",
            "avg",
            "(",
            "amount_outstanding",
            ")",
            "FROM",
            "Customers",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "List the first name and last name of customers have the amount of outstanding between 1000 and 3000.",
        "query": "SELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            "FROM",
            "Customers",
            "WHERE",
            "amount_outstanding",
            "BETWEEN",
            "1000",
            "AND",
            "3000",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What are the first and last names of all customers with between 1000 and 3000 dollars outstanding?",
        "query": "SELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            "FROM",
            "Customers",
            "WHERE",
            "amount_outstanding",
            "BETWEEN",
            "1000",
            "AND",
            "3000",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "List first name and last name of customers lived in city Lockmanfurt.",
        "query": "SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T1.last_name",
            "FROM",
            "Customers",
            "AS",
            "T1",
            "JOIN",
            "Addresses",
            "AS",
            "T2",
            "ON",
            "T1.customer_address_id",
            "=",
            "T2.address_id",
            "WHERE",
            "T2.city",
            "=",
            "``",
            "Lockmanfurt",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What are the first and last names of all customers who lived in Lockmanfurt?",
        "query": "SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";",
        "query_toks": [
            "SELECT",
            "T1.first_name",
            ",",
            "T1.last_name",
            "FROM",
            "Customers",
            "AS",
            "T1",
            "JOIN",
            "Addresses",
            "AS",
            "T2",
            "ON",
            "T1.customer_address_id",
            "=",
            "T2.address_id",
            "WHERE",
            "T2.city",
            "=",
            "``",
            "Lockmanfurt",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "Which country does customer with first name as Carole and last name as Bernhard lived in?",
        "query": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"",
        "query_toks": [
            "SELECT",
            "T2.country",
            "FROM",
            "Customers",
            "AS",
            "T1",
            "JOIN",
            "Addresses",
            "AS",
            "T2",
            "ON",
            "T1.customer_address_id",
            "=",
            "T2.address_id",
            "WHERE",
            "T1.first_name",
            "=",
            "``",
            "Carole",
            "''",
            "AND",
            "T1.last_name",
            "=",
            "``",
            "Bernhard",
            "''"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What is the country in which the customer Carole Bernhard lived?",
        "query": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"",
        "query_toks": [
            "SELECT",
            "T2.country",
            "FROM",
            "Customers",
            "AS",
            "T1",
            "JOIN",
            "Addresses",
            "AS",
            "T2",
            "ON",
            "T1.customer_address_id",
            "=",
            "T2.address_id",
            "WHERE",
            "T1.first_name",
            "=",
            "``",
            "Carole",
            "''",
            "AND",
            "T1.last_name",
            "=",
            "``",
            "Bernhard",
            "''"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What is zip code of customer with first name as Carole and last name as Bernhard?",
        "query": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"",
        "query_toks": [
            "SELECT",
            "T2.zip_postcode",
            "FROM",
            "Customers",
            "AS",
            "T1",
            "JOIN",
            "Addresses",
            "AS",
            "T2",
            "ON",
            "T1.customer_address_id",
            "=",
            "T2.address_id",
            "WHERE",
            "T1.first_name",
            "=",
            "``",
            "Carole",
            "''",
            "AND",
            "T1.last_name",
            "=",
            "``",
            "Bernhard",
            "''"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What is the zip code of the customer Carole Bernhard?",
        "query": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"",
        "query_toks": [
            "SELECT",
            "T2.zip_postcode",
            "FROM",
            "Customers",
            "AS",
            "T1",
            "JOIN",
            "Addresses",
            "AS",
            "T2",
            "ON",
            "T1.customer_address_id",
            "=",
            "T2.address_id",
            "WHERE",
            "T1.first_name",
            "=",
            "``",
            "Carole",
            "''",
            "AND",
            "T1.last_name",
            "=",
            "``",
            "Bernhard",
            "''"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "Which city does has most number of customers?",
        "query": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "T2.city",
            "FROM",
            "Customers",
            "AS",
            "T1",
            "JOIN",
            "Addresses",
            "AS",
            "T2",
            "ON",
            "T1.customer_address_id",
            "=",
            "T2.address_id",
            "GROUP",
            "BY",
            "T2.city",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What is the city with the most customers?",
        "query": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;",
        "query_toks": [
            "SELECT",
            "T2.city",
            "FROM",
            "Customers",
            "AS",
            "T1",
            "JOIN",
            "Addresses",
            "AS",
            "T2",
            "ON",
            "T1.customer_address_id",
            "=",
            "T2.address_id",
            "GROUP",
            "BY",
            "T2.city",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "How much in total does customer with first name as Carole and last name as Bernhard paid?",
        "query": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\"",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "T1.amount_payment",
            ")",
            "FROM",
            "Customer_Payments",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.first_name",
            "=",
            "``",
            "Carole",
            "''",
            "AND",
            "T2.last_name",
            "=",
            "``",
            "Bernhard",
            "''"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What is the total amount of moeny paid by the customer Carole Bernhard?",
        "query": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\"",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "T1.amount_payment",
            ")",
            "FROM",
            "Customer_Payments",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.first_name",
            "=",
            "``",
            "Carole",
            "''",
            "AND",
            "T2.last_name",
            "=",
            "``",
            "Bernhard",
            "''"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "List the number of customers that did not have any payment history.",
        "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers",
            "WHERE",
            "customer_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "customer_id",
            "FROM",
            "Customer_Payments",
            ")",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "How many customers have no payment histories?",
        "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customers",
            "WHERE",
            "customer_id",
            "NOT",
            "IN",
            "(",
            "SELECT",
            "customer_id",
            "FROM",
            "Customer_Payments",
            ")",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "List first name and last name of customers that have more than 2 payments.",
        "query": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;",
        "query_toks": [
            "SELECT",
            "T2.first_name",
            ",",
            "T2.last_name",
            "FROM",
            "Customer_Payments",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What are the first and last names of all customers with more than 2 payments?",
        "query": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;",
        "query_toks": [
            "SELECT",
            "T2.first_name",
            ",",
            "T2.last_name",
            "FROM",
            "Customer_Payments",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "List all payment methods and number of payments using each payment methods.",
        "query": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;",
        "query_toks": [
            "SELECT",
            "payment_method_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customer_Payments",
            "GROUP",
            "BY",
            "payment_method_code",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "For each payment method, how many payments were made?",
        "query": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;",
        "query_toks": [
            "SELECT",
            "payment_method_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Customer_Payments",
            "GROUP",
            "BY",
            "payment_method_code",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "How many lessons were in cancelled state?",
        "query": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Lessons",
            "WHERE",
            "lesson_status_code",
            "=",
            "``",
            "Cancelled",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "How many lessons have been cancelled?",
        "query": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Lessons",
            "WHERE",
            "lesson_status_code",
            "=",
            "``",
            "Cancelled",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'.",
        "query": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";",
        "query_toks": [
            "SELECT",
            "T1.lesson_id",
            "FROM",
            "Lessons",
            "AS",
            "T1",
            "JOIN",
            "Staff",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "WHERE",
            "T2.first_name",
            "=",
            "``",
            "Janessa",
            "''",
            "AND",
            "T2.last_name",
            "=",
            "``",
            "Sawayn",
            "''",
            "AND",
            "nickname",
            "LIKE",
            "``",
            "%",
            "s",
            "%",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What are the the lesson ids of all staff taught by Janessa Sawayn whose nickname has the letter s?",
        "query": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";",
        "query_toks": [
            "SELECT",
            "T1.lesson_id",
            "FROM",
            "Lessons",
            "AS",
            "T1",
            "JOIN",
            "Staff",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "WHERE",
            "T2.first_name",
            "=",
            "``",
            "Janessa",
            "''",
            "AND",
            "T2.last_name",
            "=",
            "``",
            "Sawayn",
            "''",
            "AND",
            "nickname",
            "LIKE",
            "``",
            "%",
            "s",
            "%",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "How many lessons taught by staff whose first name has letter 'a' in it?",
        "query": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Lessons",
            "AS",
            "T1",
            "JOIN",
            "Staff",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "WHERE",
            "T2.first_name",
            "LIKE",
            "``",
            "%",
            "a",
            "%",
            "''"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "How many lessons were taught by a staff member whose first name has the letter 'a' in it?",
        "query": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Lessons",
            "AS",
            "T1",
            "JOIN",
            "Staff",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "WHERE",
            "T2.first_name",
            "LIKE",
            "``",
            "%",
            "a",
            "%",
            "''"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "How long is the total lesson time taught by staff with first name as Janessa and last name as Sawayn?",
        "query": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "lesson_time",
            ")",
            "FROM",
            "Lessons",
            "AS",
            "T1",
            "JOIN",
            "Staff",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "WHERE",
            "T2.first_name",
            "=",
            "``",
            "Janessa",
            "''",
            "AND",
            "T2.last_name",
            "=",
            "``",
            "Sawayn",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What is the total time for all lessons taught by Janessa Sawayn?",
        "query": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "lesson_time",
            ")",
            "FROM",
            "Lessons",
            "AS",
            "T1",
            "JOIN",
            "Staff",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "WHERE",
            "T2.first_name",
            "=",
            "``",
            "Janessa",
            "''",
            "AND",
            "T2.last_name",
            "=",
            "``",
            "Sawayn",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What is average lesson price taught by staff with first name as Janessa and last name as Sawayn?",
        "query": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "price",
            ")",
            "FROM",
            "Lessons",
            "AS",
            "T1",
            "JOIN",
            "Staff",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "WHERE",
            "T2.first_name",
            "=",
            "``",
            "Janessa",
            "''",
            "AND",
            "T2.last_name",
            "=",
            "``",
            "Sawayn",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What is the average price for a lesson taught by Janessa Sawayn?",
        "query": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "price",
            ")",
            "FROM",
            "Lessons",
            "AS",
            "T1",
            "JOIN",
            "Staff",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id",
            "WHERE",
            "T2.first_name",
            "=",
            "``",
            "Janessa",
            "''",
            "AND",
            "T2.last_name",
            "=",
            "``",
            "Sawayn",
            "''",
            ";"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "How many lesson does customer with first name Ray took?",
        "query": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Lessons",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.first_name",
            "=",
            "``",
            "Ray",
            "''"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "How many lessons did the customer with the first name Ray take?",
        "query": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\"",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "Lessons",
            "AS",
            "T1",
            "JOIN",
            "Customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.first_name",
            "=",
            "``",
            "Ray",
            "''"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "Which last names are both used by customers and by staff?",
        "query": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
        "query_toks": [
            "SELECT",
            "last_name",
            "FROM",
            "Customers",
            "INTERSECT",
            "SELECT",
            "last_name",
            "FROM",
            "Staff"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What are the last names that are used by customers and staff?",
        "query": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
        "query_toks": [
            "SELECT",
            "last_name",
            "FROM",
            "Customers",
            "INTERSECT",
            "SELECT",
            "last_name",
            "FROM",
            "Staff"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What is the first name of the staff who did not give any lesson?",
        "query": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id",
        "query_toks": [
            "SELECT",
            "first_name",
            "FROM",
            "Staff",
            "EXCEPT",
            "SELECT",
            "T2.first_name",
            "FROM",
            "Lessons",
            "AS",
            "T1",
            "JOIN",
            "Staff",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What is the first name of all employees who do not give any lessons?",
        "query": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id",
        "query_toks": [
            "SELECT",
            "first_name",
            "FROM",
            "Staff",
            "EXCEPT",
            "SELECT",
            "T2.first_name",
            "FROM",
            "Lessons",
            "AS",
            "T1",
            "JOIN",
            "Staff",
            "AS",
            "T2",
            "ON",
            "T1.staff_id",
            "=",
            "T2.staff_id"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What is the id and detail of the vehicle used in lessons for most of the times?",
        "query": "SELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.vehicle_id",
            ",",
            "T1.vehicle_details",
            "FROM",
            "Vehicles",
            "AS",
            "T1",
            "JOIN",
            "Lessons",
            "AS",
            "T2",
            "ON",
            "T1.vehicle_id",
            "=",
            "T2.vehicle_id",
            "GROUP",
            "BY",
            "T1.vehicle_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "driving_school"
    },
    {
        "question": "What is the id of the most recent order?",
        "query": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "order_id",
            "FROM",
            "orders",
            "ORDER",
            "BY",
            "date_order_placed",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Find the id of the order made most recently.",
        "query": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "order_id",
            "FROM",
            "orders",
            "ORDER",
            "BY",
            "date_order_placed",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "what are the order id and customer id of the oldest order?",
        "query": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
        "query_toks": [
            "SELECT",
            "order_id",
            ",",
            "customer_id",
            "FROM",
            "orders",
            "ORDER",
            "BY",
            "date_order_placed",
            "LIMIT",
            "1"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Find the order id and customer id associated with the oldest order.",
        "query": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
        "query_toks": [
            "SELECT",
            "order_id",
            ",",
            "customer_id",
            "FROM",
            "orders",
            "ORDER",
            "BY",
            "date_order_placed",
            "LIMIT",
            "1"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Find the id of the order whose shipment tracking number is \"3452\".",
        "query": "SELECT order_id FROM shipments WHERE shipment_tracking_number = \"3452\"",
        "query_toks": [
            "SELECT",
            "order_id",
            "FROM",
            "shipments",
            "WHERE",
            "shipment_tracking_number",
            "=",
            "``",
            "3452",
            "''"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Which order's shipment tracking number is \"3452\"? Give me the id of the order.",
        "query": "SELECT order_id FROM shipments WHERE shipment_tracking_number = \"3452\"",
        "query_toks": [
            "SELECT",
            "order_id",
            "FROM",
            "shipments",
            "WHERE",
            "shipment_tracking_number",
            "=",
            "``",
            "3452",
            "''"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Find the ids of all the order items whose product id is 11.",
        "query": "SELECT order_item_id FROM order_items WHERE product_id = 11",
        "query_toks": [
            "SELECT",
            "order_item_id",
            "FROM",
            "order_items",
            "WHERE",
            "product_id",
            "=",
            "11"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Find all the order items whose product id is 11. What are the order item ids?",
        "query": "SELECT order_item_id FROM order_items WHERE product_id = 11",
        "query_toks": [
            "SELECT",
            "order_item_id",
            "FROM",
            "order_items",
            "WHERE",
            "product_id",
            "=",
            "11"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "List the name of all the distinct customers who have orders with status \"Packing\".",
        "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\"",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.customer_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.order_status",
            "=",
            "``",
            "Packing",
            "''"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Which customers have orders with status \"Packing\"? Give me the customer names.",
        "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\"",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.customer_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.order_status",
            "=",
            "``",
            "Packing",
            "''"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Find the details of all the distinct customers who have orders with status \"On Road\".",
        "query": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\"",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.customer_details",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.order_status",
            "=",
            "``",
            "On",
            "Road",
            "''"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "What are the distinct customers who have orders with status \"On Road\"? Give me the customer details?",
        "query": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\"",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T1.customer_details",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.order_status",
            "=",
            "``",
            "On",
            "Road",
            "''"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "What is the name of the customer who has the most orders?",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.customer_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Which customer made the most orders? Find the customer name.",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.customer_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "What is the customer id of the customer who has the most orders?",
        "query": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.customer_id",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Find the id of the customer who made the most orders.",
        "query": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.customer_id",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Give me a list of id and status of orders which belong to the customer named \"Jeramie\".",
        "query": "SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
        "query_toks": [
            "SELECT",
            "T2.order_id",
            ",",
            "T2.order_status",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T1.customer_name",
            "=",
            "``",
            "Jeramie",
            "''"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Which orders are made by the customer named \"Jeramie\"? Give me the order ids and status.",
        "query": "SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
        "query_toks": [
            "SELECT",
            "T2.order_id",
            ",",
            "T2.order_status",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T1.customer_name",
            "=",
            "``",
            "Jeramie",
            "''"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Find the dates of orders which belong to the customer named \"Jeramie\".",
        "query": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
        "query_toks": [
            "SELECT",
            "T2.date_order_placed",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T1.customer_name",
            "=",
            "``",
            "Jeramie",
            "''"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "What are the dates of the orders made by the customer named \"Jeramie\"?",
        "query": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
        "query_toks": [
            "SELECT",
            "T2.date_order_placed",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T1.customer_name",
            "=",
            "``",
            "Jeramie",
            "''"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01.",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
        "query_toks": [
            "SELECT",
            "T1.customer_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.date_order_placed",
            ">",
            "=",
            "``",
            "2009-01-01",
            "''",
            "AND",
            "T2.date_order_placed",
            "<",
            "=",
            "``",
            "2010-01-01",
            "''"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Which customers made orders between 2009-01-01 and 2010-01-01? Find their names.",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
        "query_toks": [
            "SELECT",
            "T1.customer_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.date_order_placed",
            ">",
            "=",
            "``",
            "2009-01-01",
            "''",
            "AND",
            "T2.date_order_placed",
            "<",
            "=",
            "``",
            "2010-01-01",
            "''"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Give me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01?",
        "query": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T2.product_id",
            "FROM",
            "orders",
            "AS",
            "T1",
            "JOIN",
            "order_items",
            "AS",
            "T2",
            "ON",
            "T1.order_id",
            "=",
            "T2.order_id",
            "WHERE",
            "T1.date_order_placed",
            ">",
            "=",
            "``",
            "1975-01-01",
            "''",
            "AND",
            "T1.date_order_placed",
            "<",
            "=",
            "``",
            "1976-01-01",
            "''"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "What are the distinct ids of products ordered between 1975-01-01 and 1976-01-01??",
        "query": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "T2.product_id",
            "FROM",
            "orders",
            "AS",
            "T1",
            "JOIN",
            "order_items",
            "AS",
            "T2",
            "ON",
            "T1.order_id",
            "=",
            "T2.order_id",
            "WHERE",
            "T1.date_order_placed",
            ">",
            "=",
            "``",
            "1975-01-01",
            "''",
            "AND",
            "T1.date_order_placed",
            "<",
            "=",
            "``",
            "1976-01-01",
            "''"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Find the names of the customers who have order status both \"On Road\" and \"Shipped\".",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"",
        "query_toks": [
            "SELECT",
            "T1.customer_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.order_status",
            "=",
            "``",
            "On",
            "Road",
            "''",
            "INTERSECT",
            "SELECT",
            "T1.customer_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.order_status",
            "=",
            "``",
            "Shipped",
            "''"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Which customers have both \"On Road\" and \"Shipped\" as order status? List the customer names.",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"",
        "query_toks": [
            "SELECT",
            "T1.customer_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.order_status",
            "=",
            "``",
            "On",
            "Road",
            "''",
            "INTERSECT",
            "SELECT",
            "T1.customer_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.order_status",
            "=",
            "``",
            "Shipped",
            "''"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Find the id of the customers who have order status both \"On Road\" and \"Shipped\".",
        "query": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"",
        "query_toks": [
            "SELECT",
            "T1.customer_id",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.order_status",
            "=",
            "``",
            "On",
            "Road",
            "''",
            "INTERSECT",
            "SELECT",
            "T1.customer_id",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.order_status",
            "=",
            "``",
            "Shipped",
            "''"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Which customers have both \"On Road\" and \"Shipped\" as order status? List the customer ids.",
        "query": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"",
        "query_toks": [
            "SELECT",
            "T1.customer_id",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.order_status",
            "=",
            "``",
            "On",
            "Road",
            "''",
            "INTERSECT",
            "SELECT",
            "T1.customer_id",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "WHERE",
            "T2.order_status",
            "=",
            "``",
            "Shipped",
            "''"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "When was the order placed whose shipment tracking number is 3452? Give me the date.",
        "query": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452",
        "query_toks": [
            "SELECT",
            "T1.date_order_placed",
            "FROM",
            "orders",
            "AS",
            "T1",
            "JOIN",
            "shipments",
            "AS",
            "T2",
            "ON",
            "T1.order_id",
            "=",
            "T2.order_id",
            "WHERE",
            "T2.shipment_tracking_number",
            "=",
            "3452"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "On which day was the order placed whose shipment tracking number is 3452?",
        "query": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452",
        "query_toks": [
            "SELECT",
            "T1.date_order_placed",
            "FROM",
            "orders",
            "AS",
            "T1",
            "JOIN",
            "shipments",
            "AS",
            "T2",
            "ON",
            "T1.order_id",
            "=",
            "T2.order_id",
            "WHERE",
            "T2.shipment_tracking_number",
            "=",
            "3452"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "What is the placement date of the order whose invoice number is 10?",
        "query": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10",
        "query_toks": [
            "SELECT",
            "T1.date_order_placed",
            "FROM",
            "orders",
            "AS",
            "T1",
            "JOIN",
            "shipments",
            "AS",
            "T2",
            "ON",
            "T1.order_id",
            "=",
            "T2.order_id",
            "WHERE",
            "T2.invoice_number",
            "=",
            "10"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "On what day was the order with invoice number 10 placed?",
        "query": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10",
        "query_toks": [
            "SELECT",
            "T1.date_order_placed",
            "FROM",
            "orders",
            "AS",
            "T1",
            "JOIN",
            "shipments",
            "AS",
            "T2",
            "ON",
            "T1.order_id",
            "=",
            "T2.order_id",
            "WHERE",
            "T2.invoice_number",
            "=",
            "10"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "List the count and id of each product in all the orders.",
        "query": "SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "T3.product_id",
            "FROM",
            "orders",
            "AS",
            "T1",
            "JOIN",
            "order_items",
            "AS",
            "T2",
            "JOIN",
            "products",
            "AS",
            "T3",
            "ON",
            "T1.order_id",
            "=",
            "T2.order_id",
            "AND",
            "T2.product_id",
            "=",
            "T3.product_id",
            "GROUP",
            "BY",
            "T3.product_id"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "For each product, return its id and the number of times it was ordered.",
        "query": "SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "*",
            ")",
            ",",
            "T3.product_id",
            "FROM",
            "orders",
            "AS",
            "T1",
            "JOIN",
            "order_items",
            "AS",
            "T2",
            "JOIN",
            "products",
            "AS",
            "T3",
            "ON",
            "T1.order_id",
            "=",
            "T2.order_id",
            "AND",
            "T2.product_id",
            "=",
            "T3.product_id",
            "GROUP",
            "BY",
            "T3.product_id"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "List the name and count of each product in all orders.",
        "query": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "query_toks": [
            "SELECT",
            "T3.product_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "orders",
            "AS",
            "T1",
            "JOIN",
            "order_items",
            "AS",
            "T2",
            "JOIN",
            "products",
            "AS",
            "T3",
            "ON",
            "T1.order_id",
            "=",
            "T2.order_id",
            "AND",
            "T2.product_id",
            "=",
            "T3.product_id",
            "GROUP",
            "BY",
            "T3.product_id"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "For each product, show its name and the number of times it was ordered.",
        "query": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "query_toks": [
            "SELECT",
            "T3.product_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "orders",
            "AS",
            "T1",
            "JOIN",
            "order_items",
            "AS",
            "T2",
            "JOIN",
            "products",
            "AS",
            "T3",
            "ON",
            "T1.order_id",
            "=",
            "T2.order_id",
            "AND",
            "T2.product_id",
            "=",
            "T3.product_id",
            "GROUP",
            "BY",
            "T3.product_id"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Find the ids of orders which are shipped after 2000-01-01.",
        "query": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"",
        "query_toks": [
            "SELECT",
            "order_id",
            "FROM",
            "shipments",
            "WHERE",
            "shipment_date",
            ">",
            "``",
            "2000-01-01",
            "''"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Which orders have shipment after 2000-01-01? Give me the order ids.",
        "query": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"",
        "query_toks": [
            "SELECT",
            "order_id",
            "FROM",
            "shipments",
            "WHERE",
            "shipment_date",
            ">",
            "``",
            "2000-01-01",
            "''"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Find the id of the order which is shipped most recently.",
        "query": "SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)",
        "query_toks": [
            "SELECT",
            "order_id",
            "FROM",
            "shipments",
            "WHERE",
            "shipment_date",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "shipment_date",
            ")",
            "FROM",
            "shipments",
            ")"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Which order has the most recent shipment? Give me the order id.",
        "query": "SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)",
        "query_toks": [
            "SELECT",
            "order_id",
            "FROM",
            "shipments",
            "WHERE",
            "shipment_date",
            "=",
            "(",
            "SELECT",
            "max",
            "(",
            "shipment_date",
            ")",
            "FROM",
            "shipments",
            ")"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "List the names of all distinct products in alphabetical order.",
        "query": "SELECT DISTINCT product_name FROM products ORDER BY product_name",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "product_name",
            "FROM",
            "products",
            "ORDER",
            "BY",
            "product_name"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Sort all the distinct products in alphabetical order.",
        "query": "SELECT DISTINCT product_name FROM products ORDER BY product_name",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "product_name",
            "FROM",
            "products",
            "ORDER",
            "BY",
            "product_name"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "List the ids of all distinct orders ordered by placed date.",
        "query": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "order_id",
            "FROM",
            "orders",
            "ORDER",
            "BY",
            "date_order_placed"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "What are ids of the all distinct orders, sorted by placement date?",
        "query": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "order_id",
            "FROM",
            "orders",
            "ORDER",
            "BY",
            "date_order_placed"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "What is the id of the order which has the most items?",
        "query": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.order_id",
            "FROM",
            "orders",
            "AS",
            "T1",
            "JOIN",
            "order_items",
            "AS",
            "T2",
            "ON",
            "T1.order_id",
            "=",
            "T2.order_id",
            "GROUP",
            "BY",
            "T1.order_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Which order deals with the most items? Return the order id.",
        "query": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.order_id",
            "FROM",
            "orders",
            "AS",
            "T1",
            "JOIN",
            "order_items",
            "AS",
            "T2",
            "ON",
            "T1.order_id",
            "=",
            "T2.order_id",
            "GROUP",
            "BY",
            "T1.order_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "What is the name of the customer who has the largest number of orders?",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.customer_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Find the name of the customer who made the most orders.",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": [
            "SELECT",
            "T1.customer_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T1.customer_id",
            "ORDER",
            "BY",
            "count",
            "(",
            "*",
            ")",
            "DESC",
            "LIMIT",
            "1"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.",
        "query": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "query_toks": [
            "SELECT",
            "invoice_number",
            "FROM",
            "invoices",
            "WHERE",
            "invoice_date",
            "<",
            "``",
            "1989-09-03",
            "''",
            "OR",
            "invoice_date",
            ">",
            "``",
            "2007-12-25",
            "''"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "What are the invoice numbers created before 1989-09-03 or after 2007-12-25?",
        "query": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "query_toks": [
            "SELECT",
            "invoice_number",
            "FROM",
            "invoices",
            "WHERE",
            "invoice_date",
            "<",
            "``",
            "1989-09-03",
            "''",
            "OR",
            "invoice_date",
            ">",
            "``",
            "2007-12-25",
            "''"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.",
        "query": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "invoice_details",
            "FROM",
            "invoices",
            "WHERE",
            "invoice_date",
            "<",
            "``",
            "1989-09-03",
            "''",
            "OR",
            "invoice_date",
            ">",
            "``",
            "2007-12-25",
            "''"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "What are the distinct details of invoices created before 1989-09-03 or after 2007-12-25?",
        "query": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "invoice_details",
            "FROM",
            "invoices",
            "WHERE",
            "invoice_date",
            "<",
            "``",
            "1989-09-03",
            "''",
            "OR",
            "invoice_date",
            ">",
            "``",
            "2007-12-25",
            "''"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "For each customer who has at least two orders, find the customer name and number of orders made.",
        "query": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2",
        "query_toks": [
            "SELECT",
            "T2.customer_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "orders",
            "AS",
            "T1",
            "JOIN",
            "customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T2.customer_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Which customers have made at least two orders? Give me each customer name and number of orders made.",
        "query": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2",
        "query_toks": [
            "SELECT",
            "T2.customer_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "FROM",
            "orders",
            "AS",
            "T1",
            "JOIN",
            "customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T2.customer_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "2"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Find the name of the customers who have at most two orders.",
        "query": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2",
        "query_toks": [
            "SELECT",
            "T2.customer_name",
            "FROM",
            "orders",
            "AS",
            "T1",
            "JOIN",
            "customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T2.customer_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "<",
            "=",
            "2"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "What are the names of the customers who have made two or less orders?",
        "query": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2",
        "query_toks": [
            "SELECT",
            "T2.customer_name",
            "FROM",
            "orders",
            "AS",
            "T1",
            "JOIN",
            "customers",
            "AS",
            "T2",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "GROUP",
            "BY",
            "T2.customer_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            "<",
            "=",
            "2"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "List the names of the customers who have once bought product \"food\".",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1",
        "query_toks": [
            "SELECT",
            "T1.customer_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "JOIN",
            "order_items",
            "AS",
            "T3",
            "JOIN",
            "products",
            "AS",
            "T4",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "AND",
            "T2.order_id",
            "=",
            "T3.order_id",
            "AND",
            "T3.product_id",
            "=",
            "T4.product_id",
            "WHERE",
            "T4.product_name",
            "=",
            "``",
            "food",
            "''",
            "GROUP",
            "BY",
            "T1.customer_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "1"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "What are the names of the customers who bought product \"food\" at least once?",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1",
        "query_toks": [
            "SELECT",
            "T1.customer_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "JOIN",
            "order_items",
            "AS",
            "T3",
            "JOIN",
            "products",
            "AS",
            "T4",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "AND",
            "T2.order_id",
            "=",
            "T3.order_id",
            "AND",
            "T3.product_id",
            "=",
            "T4.product_id",
            "WHERE",
            "T4.product_name",
            "=",
            "``",
            "food",
            "''",
            "GROUP",
            "BY",
            "T1.customer_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "1"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "List the names of customers who have once canceled the purchase of the product \"food\" (the item status is \"Cancel\").",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1",
        "query_toks": [
            "SELECT",
            "T1.customer_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "JOIN",
            "order_items",
            "AS",
            "T3",
            "JOIN",
            "products",
            "AS",
            "T4",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "AND",
            "T2.order_id",
            "=",
            "T3.order_id",
            "AND",
            "T3.product_id",
            "=",
            "T4.product_id",
            "WHERE",
            "T3.order_item_status",
            "=",
            "``",
            "Cancel",
            "''",
            "AND",
            "T4.product_name",
            "=",
            "``",
            "food",
            "''",
            "GROUP",
            "BY",
            "T1.customer_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "1"
        ],
        "db_id": "tracking_orders"
    },
    {
        "question": "Which customers have ever canceled the purchase of the product \"food\" (the item status is \"Cancel\")?",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1",
        "query_toks": [
            "SELECT",
            "T1.customer_name",
            "FROM",
            "customers",
            "AS",
            "T1",
            "JOIN",
            "orders",
            "AS",
            "T2",
            "JOIN",
            "order_items",
            "AS",
            "T3",
            "JOIN",
            "products",
            "AS",
            "T4",
            "ON",
            "T1.customer_id",
            "=",
            "T2.customer_id",
            "AND",
            "T2.order_id",
            "=",
            "T3.order_id",
            "AND",
            "T3.product_id",
            "=",
            "T4.product_id",
            "WHERE",
            "T3.order_item_status",
            "=",
            "``",
            "Cancel",
            "''",
            "AND",
            "T4.product_name",
            "=",
            "``",
            "food",
            "''",
            "GROUP",
            "BY",
            "T1.customer_id",
            "HAVING",
            "count",
            "(",
            "*",
            ")",
            ">",
            "=",
            "1"
        ],
        "db_id": "tracking_orders"
    }
]