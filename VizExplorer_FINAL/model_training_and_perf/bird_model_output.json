[
    {
        "question": "What is the highest eligible free rate for K-12 students in the schools in Alameda County?",
        "SQL": "SELECT MAX(\"Percent (%) Eligible Free (K-12)\") AS highest_eligible_free_rate\nFROM public.frpm\nWHERE \"County Name\" = 'Alameda'",
        "db_id": "california_schools"
    },
    {
        "question": "Please list the lowest three eligible free rates for students aged 5-17 in continuation schools.",
        "SQL": "SELECT \"School Name\", \"Percent (%) Eligible Free (Ages 5-17)\"\nFROM public.frpm\nWHERE \"School Type\" = 'Continuation'\nORDER BY \"Percent (%) Eligible Free (Ages 5-17)\" ASC\nLIMIT 3;",
        "db_id": "california_schools"
    },
    {
        "question": "Please list the zip code of all the charter schools in Fresno County Office of Education.",
        "SQL": "SELECT s.Zip\nFROM public.schools s\nJOIN public.frpm f ON s.CDSCode = f.CDSCode\nWHERE f.\"County Name\" = 'Fresno' AND f.\"District Name\" = 'Fresno County Office of Education' AND f.\"Charter School (Y/N)\" = 1;",
        "db_id": "california_schools"
    },
    {
        "question": "What is the unabbreviated mailing street address of the school with the highest FRPM count for K-12 students?",
        "SQL": "WITH MaxFRPM AS (\n    SELECT \"CDSCode\", MAX(\"FRPM Count (K-12)\") AS MaxFRPMCount\n    FROM public.frpm\n    GROUP BY \"CDSCode\"\n)\nSELECT s.\"MailStreet\"\nFROM public.schools s\nJOIN MaxFRPM f ON s.\"CDSCode\" = f.\"CDSCode\"\nORDER BY f.MaxFRPMCount DESC\nLIMIT 1;",
        "db_id": "california_schools"
    },
    {
        "question": "Please list the phone numbers of the direct charter-funded schools that are opened after 2000/1/1.",
        "SQL": "SELECT Phone \nFROM public.schools \nWHERE Charter = 1 AND FundingType = 'Direct' AND OpenDate > '2000-01-01';",
        "db_id": "california_schools"
    },
    {
        "question": "How many schools with an average score in Math greater than 400 in the SAT test are exclusively virtual?",
        "SQL": "SELECT COUNT(*)\nFROM public.satscores s\nJOIN public.schools sc ON s.cds = sc.\"CDSCode\"\nWHERE s.\"AvgScrMath\" > 400 AND sc.\"Virtual\" = 'Yes';",
        "db_id": "california_schools"
    },
    {
        "question": "Among the schools with the SAT test takers of over 500, please list the schools that are magnet schools or offer a magnet program.",
        "SQL": "SELECT s.\"School\", s.\"District\", s.\"County\"\nFROM public.schools s\nJOIN public.satscores ss ON s.\"CDSCode\" = ss.cds\nWHERE ss.\"NumTstTakr\" > 500 AND s.\"Magnet\" = 1;",
        "db_id": "california_schools"
    },
    {
        "question": "What is the phone number of the school that has the highest number of test takers with an SAT score of over 1500?",
        "SQL": "SELECT s.Phone\nFROM public.satscores ss\nJOIN public.schools s ON ss.cds = s.CDSCode\nORDER BY ss.\"NumGE1500\" DESC\nLIMIT 1;",
        "db_id": "california_schools"
    },
    {
        "question": "What is the number of SAT test takers of the schools with the highest FRPM count for K-12 students?",
        "SQL": "SELECT s.sname, s.NumTstTakr\nFROM public.satscores s\nJOIN public.frpm f ON s.cds = f.\"CDSCode\"\nWHERE f.\"FRPM Count (K-12)\" = (\n    SELECT MAX(\"FRPM Count (K-12)\")\n    FROM public.frpm\n)",
        "db_id": "california_schools"
    },
    {
        "question": "Among the schools with the average score in Math over 560 in the SAT test, how many schools are directly charter-funded?",
        "SQL": "",
        "db_id": "californiSELECT COUNT(DISTINCT s.\"CDSCode\") AS charter_funded_school_count\nFROM public.satscores sat\nJOIN public.schools s ON sat.cds = s.\"CDSCode\"\nWHERE sat.\"AvgScrMath\" > 560 \nAND s.\"FundingType\" = 'Directly funded'\nAND s.\"Charter\" = 1;a_schools"
    },
    {
        "question": "For the school with the highest average score in Reading in the SAT test, what is its FRPM count for students aged 5-17?",
        "SQL": "WITH highest_avg_read_school AS (\n    SELECT cds, MAX(AvgScrRead) as MaxAvgScrRead\n    FROM public.satscores\n    GROUP BY cds\n    ORDER BY MaxAvgScrRead DESC\n    LIMIT 1\n)\nSELECT f.\"FRPM Count (Ages 5-17)\"\nFROM public.frpm f\nJOIN highest_avg_read_school h ON f.\"CDSCode\" = h.cds;",
        "db_id": "california_schools"
    },
    {
        "question": "Please list the codes of the schools with a total enrollment of over 500.",
        "SQL": "SELECT \"CDSCode\" \nFROM public.frpm \nWHERE \"Enrollment (K-12)\" > 500;",
        "db_id": "california_schools"
    },
    {
        "question": "Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17?",
        "SQL": "SELECT MAX(f.\"Percent (%) Eligible Free (Ages 5-17)\") AS highest_eligible_free_rate\nFROM public.satscores s\nJOIN public.frpm f ON s.cds = f.\"CDSCode\"\nWHERE (s.\"NumGE1500\"::FLOAT / s.\"NumTstTakr\") > 0.3;",
        "db_id": "california_schools"
    },
    {
        "question": "Please list the phone numbers of the schools with the top 3 SAT excellence rate.",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no column that directly indicates the \"SAT excellence rate\" in the given tables. We would need a clear definition or column that represents the \"SAT excellence rate\" to proceed.",
        "db_id": "california_schools"
    },
    {
        "question": "List the top five schools, by descending order, from the highest to the lowest, the most number of Enrollment (Ages 5-17). Please give their NCES school identification number.",
        "SQL": "SELECT \"NCESSchool\", \"Enrollment (Ages 5-17)\"\nFROM public.frpm\nORDER BY \"Enrollment (Ages 5-17)\" DESC\nLIMIT 5;",
        "db_id": "california_schools"
    },
    {
        "question": "Which active district has the highest average score in Reading?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information about which districts are considered \"active.\" Additionally, there is no direct link between district activity status and the SAT scores in the given tables.",
        "db_id": "california_schools"
    },
    {
        "question": "How many schools in merged Alameda have number of test takers less than 100?",
        "SQL": "SELECT COUNT(*)\nFROM public.satscores\nWHERE \"dname\" = 'Alameda' AND \"NumTstTakr\" < 100;",
        "db_id": "california_schools"
    },
    {
        "question": "Rank schools by their average score in Writing where the score is greater than 499, showing their charter numbers.",
        "SQL": "SELECT s.\"School\", s.\"CharterNum\", sat.\"AvgScrWrite\"\nFROM public.schools s\nJOIN public.satscores sat ON s.\"CDSCode\" = sat.\"cds\"\nWHERE sat.\"AvgScrWrite\" > 499\nORDER BY sat.\"AvgScrWrite\" DESC;",
        "db_id": "california_schools"
    },
    {
        "question": "How many schools in Fresno (directly funded) have number of test takers not more than 250?",
        "SQL": "SELECT COUNT(*)\nFROM public.satscores AS s\nJOIN public.schools AS sch ON s.cds = sch.\"CDSCode\"\nWHERE sch.County = 'Fresno' AND sch.FundingType = 'Directly Funded' AND s.\"NumTstTakr\" <= 250;",
        "db_id": "california_schools"
    },
    {
        "question": "What is the phone number of the school that has the highest average score in Math?",
        "SQL": "SELECT s.Phone\nFROM public.satscores sat\nJOIN public.schools s ON sat.cds = s.\"CDSCode\"\nORDER BY sat.\"AvgScrMath\" DESC\nLIMIT 1;",
        "db_id": "california_schools"
    },
    {
        "question": "How many schools in Amador which the Low Grade is 9 and the High Grade is 12?",
        "SQL": "SELECT COUNT(*) \nFROM public.frpm \nWHERE \"County Name\" = 'Amador' \nAND \"Low Grade\" = '9' \nAND \"High Grade\" = '12';",
        "db_id": "california_schools"
    },
    {
        "question": "In Los Angeles how many schools have more than 500 free meals but less than 700 free or reduced price meals for K-12?",
        "SQL": "SELECT COUNT(*)\nFROM public.frpm\nWHERE \"County Name\" = 'Los Angeles'\n  AND \"Free Meal Count (K-12)\" > 500\n  AND \"FRPM Count (K-12)\" < 700;",
        "db_id": "california_schools"
    },
    {
        "question": "Which school in Contra Costa has the highest number of test takers?",
        "SQL": "SELECT s.School, ss.NumTstTakr\nFROM public.schools s\nJOIN public.satscores ss ON s.CDSCode = ss.cds\nWHERE s.County = 'Contra Costa'\nORDER BY ss.NumTstTakr DESC\nLIMIT 1;",
        "db_id": "california_schools"
    },
    {
        "question": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools.",
        "SQL": "SELECT \n    s.\"School\" AS school_name,\n    s.\"Street\" AS street_address,\n    s.\"City\" AS city,\n    s.\"Zip\" AS zip\nFROM \n    public.schools s\nJOIN \n    public.frpm f ON s.\"CDSCode\" = f.\"CDSCode\"\nWHERE \n    ABS(f.\"Enrollment (K-12)\" - f.\"Enrollment (Ages 5-17)\") > 30;",
        "db_id": "california_schools"
    },
    {
        "question": "Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500?",
        "SQL": "SELECT s.School\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.\"CDSCode\"\nJOIN satscores ss ON s.CDSCode = ss.cds\nWHERE f.\"Percent (%) Eligible Free (K-12)\" > 0.1\nAND ss.\"NumGE1500\" > 0;",
        "db_id": "california_schools"
    },
    {
        "question": "Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools?",
        "SQL": "SELECT s.School, s.FundingType\nFROM public.schools s\nJOIN public.satscores sat ON s.CDSCode = sat.cds\nWHERE s.County = 'Riverside' \nGROUP BY s.School, s.FundingType\nHAVING AVG(sat.\"AvgScrMath\") > 400;",
        "db_id": "california_schools"
    },
    {
        "question": "State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?",
        "SQL": "The provided context is insufficient because it does not include details on how to identify high schools within the given tables, nor does it directly relate schools to their communication addresses. Additionally, it does not specify how to filter by ages 15-17 in relation to free or reduced price meals. The necessary tables and relationships to derive the required information are not fully provided.",
        "db_id": "california_schools"
    },
    {
        "question": "What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any.",
        "SQL": "SELECT \n    sch.School AS school_name, \n    sat.AvgScrWrite AS average_score_writing, \n    sch.Phone AS communication_number\nFROM \n    public.schools sch\nJOIN \n    public.satscores sat ON sch.CDSCode = sat.cds\nWHERE \n    (sch.OpenDate > '1991-12-31' OR sch.ClosedDate < '2000-01-01')",
        "db_id": "california_schools"
    },
    {
        "question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.",
        "SQL": "WITH enrollment_difference AS (\n    SELECT \n        s.\"School\",\n        s.\"DOCType\",\n        (f.\"Enrollment (K-12)\" - f.\"Enrollment (Ages 5-17)\") AS enrollment_diff\n    FROM \n        public.frpm f\n    JOIN \n        public.schools s ON f.\"CDSCode\" = s.\"CDSCode\"\n    WHERE \n        s.\"FundingType\" = 'Locally Funded'\n),\naverage_difference AS (\n    SELECT \n        AVG(enrollment_diff) AS avg_diff\n    FROM \n        enrollment_difference\n)\nSELECT \n    ed.\"School\",\n    ed.\"DOCType\"\nFROM \n    enrollment_difference ed,\n    average_difference ad\nWHERE \n    ed.enrollment_diff > ad.avg_diff;",
        "db_id": "california_schools"
    },
    {
        "question": "When did the first-through-twelfth-grade school with the largest enrollment open?",
        "SQL": "SELECT s.\"OpenDate\"\nFROM public.schools s\nJOIN public.frpm f ON s.\"CDSCode\" = f.\"CDSCode\"\nWHERE f.\"Low Grade\" = '1' AND f.\"High Grade\" = '12'\nORDER BY f.\"Enrollment (K-12)\" DESC\nLIMIT 1;",
        "db_id": "california_schools"
    },
    {
        "question": "Which cities have the top 5 lowest enrollment number for students in grades 1 through 12?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information about enrollment numbers for students in grades 1 through 12 at the city level in the given tables.",
        "db_id": "california_schools"
    },
    {
        "question": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12?",
        "SQL": "SELECT \"School Name\", \"Enrollment (K-12)\", \"Percent (%) Eligible Free (K-12)\"\nFROM public.frpm\nORDER BY \"Enrollment (K-12)\" DESC\nLIMIT 2 OFFSET 9",
        "db_id": "california_schools"
    },
    {
        "question": "What is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66?",
        "SQL": "The provided context is insufficient because there is no information about an \"ownership code\" in the available tables. Therefore, the query cannot be generated.",
        "db_id": "california_schools"
    },
    {
        "question": "If there are any, what are the websites address of the schools with a free meal count of 1,900-2,000 to students aged 5-17? Include the name of the school.",
        "SQL": "SELECT s.School, s.Website\nFROM public.frpm f\nJOIN public.schools s ON f.CDSCode = s.CDSCode\nWHERE f.\"Free Meal Count (Ages 5-17)\" BETWEEN 1900 AND 2000;",
        "db_id": "california_schools"
    },
    {
        "question": "What is the free rate for students between the ages of 5 and 17 at the school run by Kacey Gibson?",
        "SQL": "The provided context does not contain information about a school run by Kacey Gibson or any direct link between school administrators and the free rate for students. Therefore, it is not possible to generate the SQL query needed to answer the question based on the given context.",
        "db_id": "california_schools"
    },
    {
        "question": "What is the administrator's email address of the chartered school with the fewest students enrolled in grades 1 through 12?",
        "SQL": "SELECT s.\"AdmEmail1\"\nFROM public.schools s\nJOIN public.frpm f ON s.\"CDSCode\" = f.\"CDSCode\"\nWHERE s.\"Charter\" = 1\nORDER BY f.\"Enrollment (K-12)\" ASC\nLIMIT 1;",
        "db_id": "california_schools"
    },
    {
        "question": "Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names.",
        "SQL": "SELECT s.\"AdmFName1\", s.\"AdmLName1\"\nFROM public.satscores ss\nJOIN public.schools s ON ss.cds = s.\"CDSCode\"\nWHERE ss.\"NumGE1500\" = (\n    SELECT MAX(\"NumGE1500\") FROM public.satscores\n)",
        "db_id": "california_schools"
    },
    {
        "question": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State.",
        "SQL": "The provided context is insufficient because there is no column explicitly named \"excellence rate\" or similar in the available tables. Therefore, I cannot generate the required SQL query to find the school with the lowest excellence rate and its complete address.",
        "db_id": "california_schools"
    },
    {
        "question": "What are the webpages for the Los Angeles County school that has between 2,000 and 3,000 test takers?",
        "SQL": "SELECT s.Website\nFROM public.satscores ss\nJOIN public.schools s ON ss.cds = s.CDSCode\nWHERE ss.dname = 'Los Angeles'\nAND ss.\"NumTstTakr\" BETWEEN 2000 AND 3000;",
        "db_id": "california_schools"
    },
    {
        "question": "What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?",
        "SQL": "SELECT AVG(s.NumTstTakr) AS average_test_takers\nFROM public.satscores s\nJOIN public.schools sch ON s.cds = sch.CDSCode\nWHERE sch.County = 'Fresno'\nAND sch.OpenDate BETWEEN '1980-01-01' AND '1980-12-31';",
        "db_id": "california_schools"
    },
    {
        "question": "What is the telephone number for the school with the lowest average score in reading in Fresno Unified?",
        "SQL": "SELECT s.Phone\nFROM public.satscores sa\nJOIN public.schools s ON sa.cds = s.\"CDSCode\"\nWHERE sa.dname = 'Fresno Unified'\nORDER BY sa.\"AvgScrRead\" ASC\nLIMIT 1;",
        "db_id": "california_schools"
    },
    {
        "question": "List the names of virtual schools that are among the top 5 in their respective counties based on average reading scores.",
        "SQL": "SELECT s.School\nFROM public.satscores sa\nJOIN public.schools s ON sa.cds = s.CDSCode\nWHERE s.Virtual = 'Yes'\nAND sa.rtype = 'School'\nORDER BY sa.AvgScrRead DESC\nLIMIT 5;",
        "db_id": "california_schools"
    },
    {
        "question": "What is the type of education offered in the school who scored the highest average in Math?",
        "SQL": "SELECT s.\"Educational Option Type\"\nFROM public.satscores sat\nJOIN public.frpm f ON sat.cds = f.\"CDSCode\"\nORDER BY sat.\"AvgScrMath\" DESC\nLIMIT 1;",
        "db_id": "california_schools"
    },
    {
        "question": "What is the average math score of the school with the lowest average score for all subjects, and in which county is it located?",
        "SQL": "SELECT s.cname AS county, s.sname AS school_name, s.\"AvgScrMath\" AS average_math_score\nFROM public.satscores s\nWHERE (s.\"AvgScrRead\" + s.\"AvgScrMath\" + s.\"AvgScrWrite\") = (\n    SELECT MIN(\"AvgScrRead\" + \"AvgScrMath\" + \"AvgScrWrite\")\n    FROM public.satscores\n)\nLIMIT 1;",
        "db_id": "california_schools"
    },
    {
        "question": "What is the average writing score of the school who has the highest number of test takers whose total SAT sscores are greater or equal to 1500? Indicate the city to where the school is situated.",
        "SQL": "SELECT s.City, AVG(sat.AvgScrWrite) AS AverageWritingScore\nFROM public.satscores sat\nJOIN public.schools s ON sat.cds = s.CDSCode\nWHERE sat.NumTstTakr = (\n    SELECT MAX(NumTstTakr)\n    FROM public.satscores\n    WHERE NumGE1500 >= 1500\n)\nGROUP BY s.City;",
        "db_id": "california_schools"
    },
    {
        "question": "What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores.",
        "SQL": "The provided context does not contain information about the management of schools, specifically by someone named Ricci Ulrich. Therefore, it is not possible to generate the SQL query to answer the question based on the given data.",
        "db_id": "california_schools"
    },
    {
        "question": "Which state special schools have the highest number of enrollees from grades 1 through 12?",
        "SQL": "SELECT School, \"Enrollment (K-12)\"\nFROM public.frpm\nWHERE \"School Type\" = 'State Special Schools'\nORDER BY \"Enrollment (K-12)\" DESC\nLIMIT 1;",
        "db_id": "california_schools"
    },
    {
        "question": "What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980?",
        "SQL": "SELECT EXTRACT(MONTH FROM \"OpenDate\") AS month, \n       COUNT(*) / 12.0 AS average_number_of_schools\nFROM public.schools\nWHERE \"County\" = 'Alameda'\n  AND \"District\" = 'Elementary School District'\n  AND EXTRACT(YEAR FROM \"OpenDate\") = 1980\nGROUP BY EXTRACT(MONTH FROM \"OpenDate\");",
        "db_id": "california_schools"
    },
    {
        "question": "What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools?",
        "SQL": "SELECT \n    (SUM(CASE WHEN \"District Type\" = 'Unified School District' AND \"County Name\" = 'Orange' THEN 1 ELSE 0 END) * 1.0 /\n    NULLIF(SUM(CASE WHEN \"District Type\" = 'Elementary School District' AND \"County Name\" = 'Orange' THEN 1 ELSE 0 END), 0)) AS unified_to_elementary_ratio\nFROM public.frpm;",
        "db_id": "california_schools"
    },
    {
        "question": "Which different county has the most number of closed schools? Please provide the name of each school as well as the closure date.",
        "SQL": "SELECT County, School, ClosedDate\nFROM public.schools\nWHERE ClosedDate IS NOT NULL\nORDER BY County, ClosedDate;",
        "db_id": "california_schools"
    },
    {
        "question": "How many accounts who choose issuance after transaction are staying in East Bohemia region?",
        "SQL": "SELECT COUNT(DISTINCT a.account_id)\nFROM public.account a\nJOIN public.district d ON a.district_id = d.district_id\nWHERE a.frequency = 'issuance after transaction' AND d.A2 = 'East Bohemia'",
        "db_id": "financial"
    },
    {
        "question": "How many accounts who have region in Prague are eligible for loans?",
        "SQL": "It can't be generated. The provided context does not include information on regions or their relation to Prague. The tables given do not have a column that specifies the region or location of the accounts.",
        "db_id": "financial"
    },
    {
        "question": "The average unemployment ratio of 1995 and 1996, which one has higher percentage?",
        "SQL": "The provided context is insufficient to generate a SQL query for the question because there is no table containing unemployment data or related information for the years 1995 and 1996.",
        "db_id": "financial"
    },
    {
        "question": "List out the no. of districts that have female average salary is more than 6000 but less than 10000?",
        "SQL": "It can't be generated because the provided context does not include any table or column related to salaries or any specific information about gender-based salaries in districts.",
        "db_id": "financial"
    },
    {
        "question": "How many male customers who are living in North Bohemia have average salary greater than 8000?",
        "SQL": "It can't be generated because the provided context does not include any information about the region \"North Bohemia\" or salary information for customers. The tables available do not have relevant columns to determine customer location specifically in North Bohemia or their salary details.",
        "db_id": "financial"
    },
    {
        "question": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?",
        "SQL": "The provided context is insufficient to generate the SQL query. The available tables do not contain information about salaries or how to calculate an average salary. Additionally, the tables do not have a direct link between account numbers and client genders.",
        "db_id": "financial"
    },
    {
        "question": "List out the account numbers of clients who are youngest and have highest average salary?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information about the salary of clients in any of the tables. The \"income\" table provides amounts received, but it is not linked to clients or accounts, nor is there an indication that it represents a salary.",
        "db_id": "financial"
    },
    {
        "question": "How many customers who choose statement of weekly issuance are Owner?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information or column in the given tables that directly relates to customers being \"Owner\" or choosing a \"statement of weekly issuance.\"",
        "db_id": "financial"
    },
    {
        "question": "List out the id number of client who choose statement of issuance after transaction are Disponent?",
        "SQL": "SELECT c.client_id\nFROM public.client c\nJOIN public.disp d ON c.client_id = d.client_id\nJOIN public.account a ON d.account_id = a.account_id\nWHERE d.type = 'DISPONENT' AND a.frequency = 'statement of issuance after transaction';",
        "db_id": "financial"
    },
    {
        "question": "Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.",
        "SQL": "SELECT a.account_id, l.amount, a.frequency\nFROM public.loan l\nJOIN public.account a ON l.account_id = a.account_id\nWHERE EXTRACT(YEAR FROM l.date) = 1997\nAND l.status = 'approved'\nAND a.frequency = 'weekly'\nORDER BY l.amount ASC\nLIMIT 1;",
        "db_id": "financial"
    },
    {
        "question": "Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993.",
        "SQL": "SELECT l.account_id, l.amount\nFROM public.loan l\nJOIN public.account a ON l.account_id = a.account_id\nWHERE l.duration > 12\nAND EXTRACT(YEAR FROM a.date) = 1993\nORDER BY l.amount DESC\nLIMIT 1;",
        "db_id": "financial"
    },
    {
        "question": "Among the account opened, how many female customers who were born before 1950 and stayed in Sokolov?",
        "SQL": "SELECT COUNT(DISTINCT c.client_id) AS female_customers_count\nFROM public.client c\nJOIN public.account a ON c.district_id = a.district_id\nWHERE c.gender = 'female'\nAND c.birth_date < '1950-01-01'\nAND c.district_id = (SELECT district_id FROM public.district WHERE name = 'Sokolov');",
        "db_id": "financial"
    },
    {
        "question": "List out the accounts who have the earliest trading date in 1995 ?",
        "SQL": "SELECT account_id, MIN(date) as earliest_date\nFROM public.account\nWHERE date >= '1995-01-01' AND date < '1996-01-01'\nGROUP BY account_id\nORDER BY earliest_date\nLIMIT 1;",
        "db_id": "financial"
    },
    {
        "question": "State different accounts who have account opening date before 1997 and own an amount of money greater than 3000USD",
        "SQL": "SELECT DISTINCT a.account_id\nFROM public.account a\nJOIN public.loan l ON a.account_id = l.account_id\nWHERE a.date < '1997-01-01' AND l.amount > 3000;",
        "db_id": "financial"
    },
    {
        "question": "Which client issued his/her card in 1994/3/3, give his/her client id.",
        "SQL": "SELECT client.client_id\nFROM client\nJOIN card ON client.client_id = card.disp_id\nWHERE card.issued = '1994-03-03';",
        "db_id": "financial"
    },
    {
        "question": "The transaction of 840 USD happened in 1998/10/14, when was this account opened?",
        "SQL": "SELECT a.date AS account_opened_date\nFROM public.transactions_1k t\nJOIN public.account a ON t.CustomerID = a.account_id\nWHERE t.Amount = 840 AND t.Date = '1998-10-14';",
        "db_id": "financial"
    },
    {
        "question": "There was a loan approved in 1994/8/25, where was that account opened, give the district Id of the branch.",
        "SQL": "SELECT d.district_id\nFROM public.loan l\nJOIN public.account a ON l.account_id = a.account_id\nJOIN public.district d ON a.district_id = d.district_id\nWHERE l.date = '1994-08-25' AND l.status = 'approved';",
        "db_id": "financial"
    },
    {
        "question": "What is the biggest amount of transaction that the client whose card was opened in 1996/10/21 made?",
        "SQL": "SELECT MAX(t.Amount) AS max_transaction_amount\nFROM public.transactions_1k t\nJOIN public.card c ON t.CardID = c.card_id\nWHERE c.issued = '1996-10-21';",
        "db_id": "financial"
    },
    {
        "question": "What is the gender of the oldest client who opened his/her account in the highest average salary branch?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information about the salary or income associated with a branch. The tables do not have columns that relate account districts to income amounts to determine which branch has the highest average salary.",
        "db_id": "financial"
    },
    {
        "question": "For the client who applied the biggest loan, what was his/her first amount of transaction after opened the account?",
        "SQL": "SELECT t1.\"Amount\"\nFROM public.transactions_1k t1\nJOIN public.loan l ON t1.\"CustomerID\" = l.account_id\nJOIN (\n    SELECT account_id, MIN(date) as account_open_date\n    FROM public.account\n    GROUP BY account_id\n) a ON l.account_id = a.account_id\nWHERE l.amount = (\n    SELECT MAX(amount)\n    FROM public.loan\n)\nAND t1.\"Date\" = (\n    SELECT MIN(t2.\"Date\")\n    FROM public.transactions_1k t2\n    WHERE t2.\"CustomerID\" = t1.\"CustomerID\" AND t2.\"Date\" >= a.account_open_date\n)\nLIMIT 1;",
        "db_id": "financial"
    },
    {
        "question": "How many clients opened their accounts in Jesenik branch were women?",
        "SQL": "It can't be generated.",
        "db_id": "financial"
    },
    {
        "question": "What is the disposition id of the client who made 5100 USD transaction in 1998/9/2?",
        "SQL": "SELECT d.disp_id\nFROM public.transactions_1k t\nJOIN public.card c ON t.CardID = c.card_id\nJOIN public.disp d ON c.disp_id = d.disp_id\nWHERE t.Amount = 5100 AND t.Date = '1998-09-02';",
        "db_id": "financial"
    },
    {
        "question": "How many accounts were opened in Litomerice in 1996?",
        "SQL": "Error running intermediate SQL: You need to connect to a database first by running vn.connect_to_snowflake(), vn.connect_to_postgres(), similar function, or manually set vn.run_sql",
        "db_id": "financial"
    },
    {
        "question": "For the female client who was born in 1976/1/29, which district did she opened her account?",
        "SQL": "SELECT d.*\nFROM public.client c\nJOIN public.account a ON c.district_id = a.district_id\nJOIN public.district d ON a.district_id = d.district_id\nWHERE c.gender = 'female' AND c.birth_date = '1976-01-29';",
        "db_id": "financial"
    },
    {
        "question": "For the client who applied 98832 USD loan in 1996/1/3, when was his/her birthday?",
        "SQL": "SELECT c.birth_date\nFROM public.loan l\nJOIN public.account a ON l.account_id = a.account_id\nJOIN public.client c ON a.district_id = c.district_id\nWHERE l.amount = 98832 AND l.date = '1996-01-03';",
        "db_id": "financial"
    },
    {
        "question": "For the first client who opened his/her account in Prague, what is his/her account ID?",
        "SQL": "SELECT a.account_id\nFROM public.account a\nJOIN public.client c ON a.district_id = c.district_id\nWHERE c.district_id = (\n    SELECT district_id\n    FROM public.client\n    WHERE district_id IN (\n        SELECT district_id\n        FROM public.client\n        WHERE district_id = (SELECT district_id FROM public.client WHERE district_id = (SELECT MIN(district_id) FROM public.client WHERE district_id IS NOT NULL))\n    )\n) \nORDER BY a.date\nLIMIT 1;",
        "db_id": "financial"
    },
    {
        "question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information about branch locations or how to determine which branch is located in the south Bohemia with the biggest number of inhabitants. The necessary data, such as a table linking branches to locations or additional geographical information, is missing.",
        "db_id": "financial"
    },
    {
        "question": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?",
        "SQL": "The provided context is insufficient to answer the question because there are no tables or columns that provide information about account balances over time. We have the `loan`, `account`, and `client` tables, but there is no data related to account balances or transactions that would allow us to calculate the increase rate in account balance.",
        "db_id": "financial"
    },
    {
        "question": "What is the percentage of loan amount that has been fully paid with no issue.",
        "SQL": "SELECT \n    (SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) / SUM(amount) * 100) AS percentage_fully_paid\nFROM \n    public.loan;",
        "db_id": "financial"
    },
    {
        "question": "For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue.",
        "SQL": "SELECT \n    (COUNT(CASE WHEN status = 'running' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_running\nFROM \n    public.loan\nWHERE \n    amount < 100000;",
        "db_id": "financial"
    },
    {
        "question": "For accounts in 1993 with statement issued after transaction, list the account ID, district name and district region.",
        "SQL": "SELECT a.account_id, d.A2 AS district_name, d.A3 AS district_region\nFROM public.account a\nJOIN public.district d ON a.district_id = d.district_id\nWHERE a.date >= '1993-01-01' AND a.date <= '1993-12-31'\nAND a.frequency = 'issued_after_transaction';",
        "db_id": "financial"
    },
    {
        "question": "From Year 1995 to 2000, who are the accounts holders from 'east Bohemia'. State the account ID the frequency of statement issuance.",
        "SQL": "SELECT a.account_id, a.frequency\nFROM public.account a\nJOIN public.district d ON a.district_id = d.district_id\nWHERE d.A2 = 'east Bohemia'\nAND a.date BETWEEN '1995-01-01' AND '2000-12-31';",
        "db_id": "financial"
    },
    {
        "question": "List account ID and account opening date for accounts from 'Prachatice'.",
        "SQL": "The provided context does not include information on how to connect the `account` table with a location such as 'Prachatice'. Therefore, it is not possible to generate a SQL query to answer the question with the given context.",
        "db_id": "financial"
    },
    {
        "question": "State the district and region for loan ID '4990'.",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information in the given table schemas that links loan IDs directly to any specific region information. The \"district\" table is likely relevant, but there is no clear connection between its columns and a \"region\" or a specific way to determine the district name or region based on the loan ID.",
        "db_id": "financial"
    },
    {
        "question": "Provide the account ID, district and region for loan amount greater than USD300,000.",
        "SQL": "SELECT a.account_id, d.district_id, d.A2 AS region\nFROM public.loan l\nJOIN public.account a ON l.account_id = a.account_id\nJOIN public.district d ON a.district_id = d.district_id\nWHERE l.amount > 300000;",
        "db_id": "financial"
    },
    {
        "question": "List the loan ID, district and average salary for loan with duration of 60 months.",
        "SQL": "SELECT l.loan_id, d.A2 AS district_name, d.A10 AS average_salary\nFROM public.loan l\nJOIN public.account a ON l.account_id = a.account_id\nJOIN public.district d ON a.district_id = d.district_id\nWHERE l.duration = 60;",
        "db_id": "financial"
    },
    {
        "question": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information about the unemployment rate or how it changed from 1995 to 1996 in the given tables.",
        "db_id": "financial"
    },
    {
        "question": "Calculate the percentage of account from 'Decin' district for all accounts are opened in 1993.",
        "SQL": "SELECT \n    (COUNT(a.account_id) FILTER (WHERE d.A3 = 'Decin')::FLOAT / COUNT(a.account_id) * 100) AS percentage_decin\nFROM \n    public.account a\nJOIN \n    public.district d ON a.district_id = d.district_id\nWHERE \n    EXTRACT(YEAR FROM a.date) = 1993;",
        "db_id": "financial"
    },
    {
        "question": "List the account IDs with monthly issuance of statements.",
        "SQL": "SELECT account_id \nFROM public.account \nWHERE frequency = 'monthly';",
        "db_id": "financial"
    },
    {
        "question": "List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders.",
        "SQL": "SELECT d.district_id, COUNT(c.client_id) AS female_account_holders\nFROM public.client c\nJOIN public.account a ON c.district_id = a.district_id\nJOIN public.district d ON a.district_id = d.district_id\nWHERE c.gender = 'female'\nGROUP BY d.district_id\nORDER BY female_account_holders DESC\nLIMIT 9;",
        "db_id": "financial"
    },
    {
        "question": "Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996?",
        "SQL": "It can't be generated because the provided context does not include any table or columns that clearly indicate a record of withdrawals, nor is there a direct relationship between transactions and district names. Additionally, the context does not specify which transactions are non-credit card withdrawals.",
        "db_id": "financial"
    },
    {
        "question": "How many of the account holders in South Bohemia still do not own credit cards?",
        "SQL": "It can't be generated because the provided context does not contain any information about the region or location of account holders, such as \"South Bohemia\". The tables provided do not include any geographical data related to account holders.",
        "db_id": "financial"
    },
    {
        "question": "Which district has highest active loan?",
        "SQL": "The provided context is insufficient to generate a SQL query to answer the question. The \"loan\" table contains information about loans including their status, but there is no direct link or column indicating which loans are \"active.\" Additionally, the \"district\" table is separate and does not have a direct relationship with the \"loan\" table in the given schema. More information is needed on how to determine if a loan is active and how to associate loans with districts.",
        "db_id": "financial"
    },
    {
        "question": "What is the average loan amount by male borrowers?",
        "SQL": "SELECT AVG(l.amount) AS average_loan_amount\nFROM public.loan l\nJOIN public.client c ON l.account_id = c.client_id\nWHERE c.gender = 'male';",
        "db_id": "financial"
    },
    {
        "question": "In 1996, which districts have the highest unemployment rate? List their branch location and district name.",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information on unemployment rates in any of the tables.",
        "db_id": "financial"
    },
    {
        "question": "In the branch where the largest number of crimes were committed in 1996, how many accounts were opened?",
        "SQL": "The provided context is insufficient because there is no information related to branches or crimes committed in 1996 in the available tables. The context only includes tables related to accounts, SAT scores, loans, transactions, yearmonth data, members, zip codes, income, majors, and votes.",
        "db_id": "financial"
    },
    {
        "question": "After making a credit card withdrawal, how many account/s with monthly issuance has a negative balance?",
        "SQL": "The provided context is insufficient to generate the SQL query. The available tables do not contain information about account balances or withdrawals. Additionally, there is no direct link between card transactions and account balances in the provided schema.",
        "db_id": "financial"
    },
    {
        "question": "Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?",
        "SQL": "SELECT COUNT(DISTINCT l.account_id) AS num_loans\nFROM public.loan l\nJOIN public.account a ON l.account_id = a.account_id\nWHERE l.date BETWEEN '1995-01-01' AND '1997-12-31'\n  AND l.amount >= 250000\n  AND a.frequency = 'monthly'\n  AND l.status = 'approved';",
        "db_id": "financial"
    },
    {
        "question": "How many accounts have running contracts in Branch location 1?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information about \"Branch location 1\" or any column in the tables that corresponds to branch locations.",
        "db_id": "financial"
    },
    {
        "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information given about crimes, branches, or how they relate to clients in the available tables.",
        "db_id": "financial"
    },
    {
        "question": "What is the most common bond type?",
        "SQL": "SELECT bond_type, COUNT(*) AS bond_count\nFROM public.bond\nGROUP BY bond_type\nORDER BY bond_count DESC\nLIMIT 1;",
        "db_id": "toxicology"
    },
    {
        "question": "In the non-carcinogenic molecules, how many contain chlorine atoms?",
        "SQL": "The provided context is insufficient to generate the SQL query because it does not include any information about whether a molecule is carcinogenic or non-carcinogenic. Additional data or context is needed to identify non-carcinogenic molecules.",
        "db_id": "toxicology"
    },
    {
        "question": "Calculate the average number of oxygen atoms in single-bonded molecules.",
        "SQL": "SELECT AVG(oxygen_count) AS average_oxygen_atoms\nFROM (\n    SELECT m.molecule_id, COUNT(a.atom_id) AS oxygen_count\n    FROM molecule m\n    JOIN atom a ON m.molecule_id = a.molecule_id\n    JOIN bond b ON m.molecule_id = b.molecule_id\n    WHERE a.element = 'O' AND b.bond_type = 'single'\n    GROUP BY m.molecule_id\n) AS oxygen_counts;",
        "db_id": "toxicology"
    },
    {
        "question": "On average how many carcinogenic molecules are single bonded?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information on which molecules are carcinogenic, and there is no explicit mention of single bonds in the tables.",
        "db_id": "toxicology"
    },
    {
        "question": "In the molecule containing sodium atoms, how many are non-carcinogenic?",
        "SQL": "The provided context does not contain information regarding whether a molecule is carcinogenic or non-carcinogenic. Therefore, it is insufficient to generate a SQL query to answer the question.",
        "db_id": "toxicology"
    },
    {
        "question": "Find the triple-bonded molecules which are carcinogenic.",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information regarding molecules being carcinogenic or any related column in the given tables.",
        "db_id": "toxicology"
    },
    {
        "question": "What is the percentage of carbon in double-bond molecules?",
        "SQL": "SELECT \n    (CAST(COUNT(DISTINCT a.atom_id) AS FLOAT) / CAST(COUNT(DISTINCT b.molecule_id) AS FLOAT)) * 100 AS percentage_of_carbon\nFROM \n    bond b\nJOIN \n    atom a ON b.molecule_id = a.molecule_id\nWHERE \n    b.bond_type = 'double' AND a.element = 'C';",
        "db_id": "toxicology"
    },
    {
        "question": "How many triple type bonds are there?",
        "SQL": "SELECT COUNT(*) FROM public.bond WHERE bond_type = 'triple';",
        "db_id": "toxicology"
    },
    {
        "question": "In how many atoms is there no bromine?",
        "SQL": "SELECT COUNT(*) \nFROM atom \nWHERE element != 'bromine';",
        "db_id": "toxicology"
    },
    {
        "question": "Of the first 100 molecules in number order, how many are carcinogenic?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information or column in the given tables that indicates whether a molecule is carcinogenic or not.",
        "db_id": "toxicology"
    },
    {
        "question": "Identify by their ID the molecules in which there is carbon.",
        "SQL": "SELECT DISTINCT m.molecule_id\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE a.element = 'carbon';",
        "db_id": "toxicology"
    },
    {
        "question": "What elements are in the TR004_8_9 bond atoms?",
        "SQL": "SELECT DISTINCT a.element\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id\nWHERE c.bond_id = 'TR004_8_9';",
        "db_id": "toxicology"
    },
    {
        "question": "What elements are in a double type bond?",
        "SQL": "SELECT DISTINCT a.element\nFROM atom a\nJOIN bond b ON a.molecule_id = b.molecule_id\nWHERE b.bond_type = 'double';",
        "db_id": "toxicology"
    },
    {
        "question": "Which type of label is the most numerous in atoms with hydrogen?",
        "SQL": "SELECT m.label, COUNT(*) AS count\nFROM public.atom a\nJOIN public.molecule m ON a.molecule_id = m.molecule_id\nWHERE a.element = 'hydrogen'\nGROUP BY m.label\nORDER BY count DESC\nLIMIT 1;",
        "db_id": "toxicology"
    },
    {
        "question": "Chlorine is in what type of bond?",
        "SQL": "SELECT DISTINCT b.bond_type\nFROM public.atom a\nJOIN public.connected c ON a.atom_id = c.atom_id\nJOIN public.bond b ON c.bond_id = b.bond_id\nWHERE a.element = 'Chlorine';",
        "db_id": "toxicology"
    },
    {
        "question": "What atoms are connected in single type bonds?",
        "SQL": "SELECT c.atom_id, c.atom_id2\nFROM public.connected c\nJOIN public.bond b ON c.bond_id = b.bond_id\nWHERE b.bond_type = 'single';",
        "db_id": "toxicology"
    },
    {
        "question": "Indicate which atoms are connected in non-carcinogenic type molecules.",
        "SQL": "The provided context is insufficient to generate the query. To determine which atoms are connected in non-carcinogenic type molecules, we would need additional information about which molecules are considered non-carcinogenic. This information is not present in the given tables.",
        "db_id": "toxicology"
    },
    {
        "question": "Which element is the least numerous in non-carcinogenic molecules?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information about which molecules are non-carcinogenic. Additional data or criteria are needed to identify non-carcinogenic molecules within the tables.",
        "db_id": "toxicology"
    },
    {
        "question": "What type of bond is there between the atoms TR004_8 and TR004_20?",
        "SQL": "SELECT b.bond_type\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE (c.atom_id = 'TR004_8' AND c.atom_id2 = 'TR004_20')\n   OR (c.atom_id = 'TR004_20' AND c.atom_id2 = 'TR004_8');",
        "db_id": "toxicology"
    },
    {
        "question": "What type of label is not on molecules with atoms with tin?",
        "SQL": "SELECT DISTINCT m.label\nFROM molecule m\nWHERE m.molecule_id NOT IN (\n    SELECT a.molecule_id\n    FROM atom a\n    WHERE a.element = 'tin'\n);",
        "db_id": "toxicology"
    },
    {
        "question": "How many atoms with iodine and with sulfur type elements are there in single bond molecules?",
        "SQL": "SELECT COUNT(DISTINCT a.atom_id) AS count_of_atoms\nFROM atom a\nJOIN bond b ON a.molecule_id = b.molecule_id\nWHERE a.element IN ('iodine', 'sulfur') AND b.bond_type = 'single';",
        "db_id": "toxicology"
    },
    {
        "question": "Identify all connected atoms with a triple bond.",
        "SQL": "SELECT c.atom_id, c.atom_id2\nFROM public.connected c\nJOIN public.bond b ON c.bond_id = b.bond_id\nWHERE b.bond_type = 'triple';",
        "db_id": "toxicology"
    },
    {
        "question": "Identify all the atoms that are connected to the atoms of the TR181 molecule.",
        "SQL": "SELECT a.atom_id\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id2\nWHERE a.molecule_id = 'TR181';",
        "db_id": "toxicology"
    },
    {
        "question": "What percentage of carcinogenic-type molecules does not contain fluorine?",
        "SQL": "SELECT \n    (COUNT(DISTINCT m.molecule_id) FILTER(WHERE a.atom_id IS NULL) * 100.0 / COUNT(DISTINCT m.molecule_id)) AS percentage_without_fluorine\nFROM \n    molecule m\nLEFT JOIN \n    atom a ON m.molecule_id = a.molecule_id AND a.element = 'Fluorine'\nJOIN \n    bond b ON m.molecule_id = b.molecule_id AND b.bond_type = 'carcinogenic'",
        "db_id": "toxicology"
    },
    {
        "question": "What is the percentage of carcinogenic molecules in triple type bonds?",
        "SQL": "The provided context is insufficient to determine the percentage of carcinogenic molecules in triple type bonds. There is no information or column in the given tables that indicates whether a molecule is carcinogenic or not.",
        "db_id": "toxicology"
    },
    {
        "question": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order.",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information on toxicology or any related data in the context. The available tables do not contain any columns or data related to toxicology.",
        "db_id": "toxicology"
    },
    {
        "question": "What are the atoms that are bonded in the molecule TR001 with the bond ID of TR001_2_6?",
        "SQL": "SELECT a.atom_id, a.element\nFROM atom a\nJOIN bond b ON a.molecule_id = b.molecule_id\nJOIN connected c ON b.bond_id = c.bond_id\nWHERE b.bond_id = 'TR001_2_6' AND b.molecule_id = \n    (SELECT molecule_id FROM molecule WHERE label = 'TR001');",
        "db_id": "toxicology"
    },
    {
        "question": "What is the difference between the number of molecules that are carcinogenic and those that are not?",
        "SQL": "It can't be generated because there is no information in the provided context that indicates whether a molecule is carcinogenic or not.",
        "db_id": "toxicology"
    },
    {
        "question": "What are the atom IDs of the bond TR000_2_5?",
        "SQL": "SELECT atom_id, atom_id2\nFROM public.connected\nWHERE bond_id = 'TR000_2_5';",
        "db_id": "toxicology"
    },
    {
        "question": "What are the bond IDs that have the same atom ID 2 of TR000_2?",
        "SQL": "SELECT bond_id\nFROM public.connected\nWHERE atom_id2 = 'TR000_2';",
        "db_id": "toxicology"
    },
    {
        "question": "Please list top five molecules that have double bonds in alphabetical order.",
        "SQL": "SELECT m.label\nFROM public.molecule m\nJOIN public.bond b ON m.molecule_id = b.molecule_id\nWHERE b.bond_type = 'double'\nGROUP BY m.label\nORDER BY m.label\nLIMIT 5;",
        "db_id": "toxicology"
    },
    {
        "question": "What is the percentage of double bonds in the molecule TR008? Please provide your answer as a percentage with five decimal places.",
        "SQL": "WITH double_bonds AS (\n    SELECT COUNT(*) AS double_bond_count\n    FROM bond\n    WHERE bond_type = 'double'\n    AND molecule_id = 'TR008'\n),\ntotal_bonds AS (\n    SELECT COUNT(*) AS total_bond_count\n    FROM bond\n    WHERE molecule_id = 'TR008'\n)\nSELECT \n    (CAST(double_bond_count AS DECIMAL) / total_bond_count) * 100 AS double_bond_percentage\nFROM double_bonds, total_bonds;",
        "db_id": "toxicology"
    },
    {
        "question": "What is the percentage of molecules that are carcinogenic? Please provide your answer as a percentage with three decimal places.",
        "SQL": "It is not possible to generate the SQL query because the provided context does not include any information about which molecules are carcinogenic.",
        "db_id": "toxicology"
    },
    {
        "question": "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer as a percentage with four decimal places.",
        "SQL": "SELECT \n    (COUNT(a.atom_id) FILTER (WHERE a.element = 'H')::FLOAT / COUNT(a.atom_id)::FLOAT) * 100 AS hydrogen_percentage\nFROM \n    molecule m\nJOIN \n    atom a ON m.molecule_id = a.molecule_id\nWHERE \n    m.label = 'TR206';",
        "db_id": "toxicology"
    },
    {
        "question": "What is the type of bond that molecule TR000 has when involved in any bonds?",
        "SQL": "SELECT DISTINCT b.bond_type\nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nWHERE m.label = 'TR000';",
        "db_id": "toxicology"
    },
    {
        "question": "What are the elements of the toxicology and label of molecule TR060?",
        "SQL": "SELECT a.element, m.label\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE m.label = 'TR060';",
        "db_id": "toxicology"
    },
    {
        "question": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?",
        "SQL": "SELECT bond_type, COUNT(*) as bond_count\nFROM bond\nWHERE molecule_id = 'TR010'\nGROUP BY bond_type\nORDER BY bond_count DESC\nLIMIT 1;",
        "db_id": "toxicology"
    },
    {
        "question": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order.",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information about whether a molecule is carcinogenic or not in the given tables.",
        "db_id": "toxicology"
    },
    {
        "question": "Please list top two bonds that happened with the molecule TR006 in alphabetical order.",
        "SQL": "SELECT bond_id\nFROM bond\nWHERE molecule_id = 'TR006'\nORDER BY bond_id\nLIMIT 2;",
        "db_id": "toxicology"
    },
    {
        "question": "How many bonds which involved atom 12 does molecule TR009 have?",
        "SQL": "SELECT COUNT(b.bond_id) AS bond_count\nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN atom a ON (c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id)\nWHERE m.label = 'TR009' AND a.atom_id = '12';",
        "db_id": "toxicology"
    },
    {
        "question": "How many molecules are carcinogenic and have the bromine element?",
        "SQL": "It can't be generated. The provided context does not include any information about whether molecules are carcinogenic.",
        "db_id": "toxicology"
    },
    {
        "question": "What are the bond type and the atoms of the bond ID of TR001_6_9?",
        "SQL": "SELECT \n    b.bond_type,\n    a1.element AS atom1,\n    a2.element AS atom2\nFROM \n    bond b\nJOIN \n    connected c ON b.bond_id = c.bond_id\nJOIN \n    atom a1 ON c.atom_id = a1.atom_id\nJOIN \n    atom a2 ON c.atom_id2 = a2.atom_id\nWHERE \n    b.bond_id = 'TR001_6_9';",
        "db_id": "toxicology"
    },
    {
        "question": "Which molecule does the atom TR001_10 belong to? Please state whether this molecule is carcinogenic or not.",
        "SQL": "SELECT m.molecule_id, m.label\nFROM public.atom a\nJOIN public.molecule m ON a.molecule_id = m.molecule_id\nWHERE a.atom_id = 'TR001_10';",
        "db_id": "toxicology"
    },
    {
        "question": "How many molecules have a triple bond type?",
        "SQL": "SELECT COUNT(DISTINCT m.molecule_id) AS num_molecules_with_triple_bond\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nWHERE b.bond_type = 'triple';",
        "db_id": "toxicology"
    },
    {
        "question": "How many connections does the atom 19 have?",
        "SQL": "SELECT COUNT(*) AS connection_count\nFROM public.connected\nWHERE atom_id = '19' OR atom_id2 = '19';",
        "db_id": "toxicology"
    },
    {
        "question": "List all the elements of the toxicology of the molecule \"TR004\".",
        "SQL": "SELECT a.element\nFROM public.atom a\nJOIN public.molecule m ON a.molecule_id = m.molecule_id\nWHERE m.label = 'TR004';",
        "db_id": "toxicology"
    },
    {
        "question": "How many of the molecules are not carcinogenic?",
        "SQL": "The provided context is insufficient to determine whether a molecule is carcinogenic or not. The tables given do not contain any information related to the carcinogenicity of molecules.",
        "db_id": "toxicology"
    },
    {
        "question": "Among all the atoms from 21 to 25, list all the molecules that are carcinogenic.",
        "SQL": "The provided context is insufficient to generate the query because there is no information regarding which molecules are carcinogenic. Additional data or a table specifying carcinogenic molecules is required.",
        "db_id": "toxicology"
    },
    {
        "question": "What are the bonds that have phosphorus and nitrogen as their atom elements?",
        "SQL": "SELECT b.bond_id\nFROM bond b\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE (a1.element = 'Phosphorus' AND a2.element = 'Nitrogen')\n   OR (a1.element = 'Nitrogen' AND a2.element = 'Phosphorus');",
        "db_id": "toxicology"
    },
    {
        "question": "Is the molecule with the most double bonds carcinogenic?",
        "SQL": "The provided context is insufficient to determine if the molecule with the most double bonds is carcinogenic. The tables do not contain any information about the carcinogenic properties of molecules. Additional data or context about the carcinogenic properties of molecules would be necessary to answer this question.",
        "db_id": "toxicology"
    },
    {
        "question": "Which are the cards that have incredibly powerful foils.",
        "SQL": "The provided context does not contain specific information about what constitutes \"incredibly powerful foils\" for cards. Therefore, it's not possible to generate a SQL query to answer this question without additional context or criteria for what makes a foil \"incredibly powerful\".",
        "db_id": "card_games"
    },
    {
        "question": "What are the borderless cards available without powerful foils?",
        "SQL": "SELECT * \nFROM public.cards\nWHERE \"isFullArt\" = 1 AND \"hasFoil\" = 0;",
        "db_id": "card_games"
    },
    {
        "question": "List the card names with value that cost more converted mana for the face.",
        "SQL": "SELECT name \nFROM public.cards \nWHERE faceConvertedManaCost > convertedManaCost;",
        "db_id": "card_games"
    },
    {
        "question": "Name all cards with 2015 frame style ranking below 100 on EDHRec.",
        "SQL": "SELECT name \nFROM public.cards \nWHERE frameVersion = '2015' AND edhrecRank < 100;",
        "db_id": "card_games"
    },
    {
        "question": "List all the mythic rarity print cards banned in gladiator format.",
        "SQL": "SELECT c.*\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.rarity = 'mythic' AND l.format = 'gladiator' AND l.status = 'banned';",
        "db_id": "card_games"
    },
    {
        "question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
        "SQL": "SELECT c.name, l.status\nFROM public.cards c\nJOIN public.legalities l ON c.uuid = l.uuid\nWHERE c.type LIKE '%Artifact%'\n  AND c.layout NOT IN ('split', 'flip', 'transform', 'modal_dfc', 'meld', 'adventure', 'saga', 'leveler', 'class', 'planes')\n  AND l.format = 'Vintage';",
        "db_id": "card_games"
    },
    {
        "question": "List all the card id and artist with unknown power which are legal for commander play format.",
        "SQL": "The provided context is insufficient to generate the query. The tables provided do not have a direct relation or column that indicates a power is \"unknown,\" nor is there a clear indication of how to determine cards that are legal for the \"commander\" format. Additionally, the relationship between card IDs and power is not established in the given tables.",
        "db_id": "card_games"
    },
    {
        "question": "Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values.",
        "SQL": "SELECT c.name, r.text AS ruling_text\nFROM public.cards c\nJOIN public.rulings r ON c.uuid = r.uuid\nWHERE c.artist = 'Stephen Daniel';",
        "db_id": "card_games"
    },
    {
        "question": "Describe the information about rulings for card named 'Sublime Epiphany' with number 74s.",
        "SQL": "SELECT r.*\nFROM public.rulings r\nJOIN public.cards c ON r.uuid = c.uuid\nWHERE c.name = 'Sublime Epiphany' AND c.number = '74s';",
        "db_id": "card_games"
    },
    {
        "question": "Name the card and artist with the most ruling information. Also state if the card is a promotional printing.",
        "SQL": "SELECT c.name AS card_name, c.artist, c.isPromo, COUNT(r.id) AS ruling_count\nFROM cards c\nJOIN rulings r ON c.uuid = r.uuid\nGROUP BY c.name, c.artist, c.isPromo\nORDER BY ruling_count DESC\nLIMIT 1;",
        "db_id": "card_games"
    },
    {
        "question": "State the alternative languages available for card named Annul numbered 29.",
        "SQL": "SELECT st.language\nFROM public.cards c\nJOIN public.set_translations st ON c.\"setCode\" = st.\"setCode\"\nWHERE c.name = 'Annul' AND c.number = '29';",
        "db_id": "card_games"
    },
    {
        "question": "Name all the cards which have alternative language in Japanese.",
        "SQL": "SELECT c.name \nFROM public.cards c\nJOIN public.foreign_data fd ON c.uuid = fd.uuid\nWHERE fd.language = 'Japanese';",
        "db_id": "card_games"
    },
    {
        "question": "Calculate the percentage of the cards availabe in Chinese Simplified.",
        "SQL": "SELECT \n    (COUNT(*) FILTER (WHERE availability LIKE '%Chinese Simplified%')::FLOAT / COUNT(*)) * 100 AS percentage_chinese_simplified\nFROM \n    public.cards;",
        "db_id": "card_games"
    },
    {
        "question": "List all the sets available in Italian translation. State the total number of cards per set.",
        "SQL": "SELECT s.name AS set_name, st.language, COUNT(c.id) AS total_cards\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nJOIN cards c ON s.code = c.setCode\nWHERE st.language = 'Italian'\nGROUP BY s.name, st.language;",
        "db_id": "card_games"
    },
    {
        "question": "How many types of cards does the artist Aaron Boyd illustrated about card art?",
        "SQL": "SELECT COUNT(DISTINCT type) AS card_types_count\nFROM public.cards\nWHERE artist = 'Aaron Boyd';",
        "db_id": "card_games"
    },
    {
        "question": "What is the keyword found on card 'Angel of Mercy'?",
        "SQL": "SELECT keywords \nFROM public.cards \nWHERE name = 'Angel of Mercy';",
        "db_id": "card_games"
    },
    {
        "question": "How many cards have infinite power?",
        "SQL": "Error running intermediate SQL: You need to connect to a database first by running vn.connect_to_snowflake(), vn.connect_to_postgres(), similar function, or manually set vn.run_sql",
        "db_id": "card_games"
    },
    {
        "question": "What type of promotion is of card 'Duress'?",
        "SQL": "SELECT \"promoTypes\" \nFROM public.cards \nWHERE name = 'Duress';",
        "db_id": "card_games"
    },
    {
        "question": "What is the border color of card \"Ancestor's Chosen\"?",
        "SQL": "SELECT borderColor FROM public.cards WHERE name = 'Ancestor''s Chosen';",
        "db_id": "card_games"
    },
    {
        "question": "What is the type of the card \"Ancestor's Chosen\" as originally printed?",
        "SQL": "SELECT \"originalType\" \nFROM public.cards \nWHERE name = 'Ancestor''s Chosen';",
        "db_id": "card_games"
    },
    {
        "question": "cards are not directly linked to language but through table 'set'. you need to add set in covered table & rephrase your question\nWhat are the languages available for the set that card 'Angel of Mercy' is in?",
        "SQL": "SELECT DISTINCT st.language\nFROM public.cards c\nJOIN public.sets s ON c.\"setCode\" = s.code\nJOIN public.set_translations st ON s.code = st.\"setCode\"\nWHERE c.name = 'Angel of Mercy';",
        "db_id": "card_games"
    },
    {
        "question": "How many cards of legalities whose status is restricted have text boxes?",
        "SQL": "SELECT COUNT(DISTINCT l.uuid) \nFROM public.legalities l\nJOIN public.cards c ON l.uuid = c.uuid\nWHERE l.status = 'restricted' AND c.text IS NOT NULL;",
        "db_id": "card_games"
    },
    {
        "question": "What is the description about the ruling of card \"Condemn\"?",
        "SQL": "SELECT r.text\nFROM public.rulings r\nJOIN public.cards c ON r.uuid = c.uuid\nWHERE c.name = 'Condemn';",
        "db_id": "card_games"
    },
    {
        "question": "How many cards of legalities whose status is restricted are found in a starter deck?",
        "SQL": "SELECT COUNT(DISTINCT l.uuid) AS restricted_card_count\nFROM public.legalities l\nJOIN public.cards c ON l.uuid = c.uuid\nWHERE l.status = 'restricted' AND c.\"isStarter\" = 1;",
        "db_id": "card_games"
    },
    {
        "question": "What is the status of card \"Cloudchaser Eagle\"?",
        "SQL": "The provided context is insufficient to determine the status of the card \"Cloudchaser Eagle\" as there is no direct relationship or linking information between the `cards` table and the `status` table.",
        "db_id": "card_games"
    },
    {
        "question": "What is the type of card \"Benalish Knight\"?",
        "SQL": "SELECT type FROM public.cards WHERE name = 'Benalish Knight';",
        "db_id": "card_games"
    },
    {
        "question": "What is the rule of playing card \"Benalish Knight\"?",
        "SQL": "SELECT text \nFROM public.rulings \nWHERE uuid = (SELECT uuid FROM public.cards WHERE \"asciiName\" = 'Benalish Knight');",
        "db_id": "card_games"
    },
    {
        "question": "Please provide the names of the artists who illustrated the card art in Phyrexian.",
        "SQL": "SELECT DISTINCT artist \nFROM public.cards \nWHERE \"asciiName\" = 'Phyrexian';",
        "db_id": "card_games"
    },
    {
        "question": "What is the percentage of borderless cards?",
        "SQL": "The provided context does not specify a column that indicates whether a card is borderless. Therefore, it is not possible to generate a SQL query to determine the percentage of borderless cards.",
        "db_id": "card_games"
    },
    {
        "question": "How many cards that illusrtated in German have been reprinted?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information about the language in which the cards were illustrated. There is also no column indicating the language of the illustration in the given tables.",
        "db_id": "card_games"
    },
    {
        "question": "How many borderless cards are illustrated in Russian?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information about the language in which the cards are illustrated or any indication of borderless cards in the tables. The `cards` table does have a `borderColor` column, but it does not specifically denote \"borderless\" cards, and there is no direct linkage to the `foreign_data` table to identify illustrations in Russian. Additional context or tables are needed to establish these connections.",
        "db_id": "card_games"
    },
    {
        "question": "What is the percentage of cards whose language is French among the Story Spotlight cards?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no direct information about which cards are Story Spotlight cards or how to identify them in the given tables. Additionally, there is no direct link between card languages and Story Spotlight attributes in the tables provided.",
        "db_id": "card_games"
    },
    {
        "question": "How many cards are there with toughness of 99?",
        "SQL": "SELECT COUNT(*) \nFROM public.cards \nWHERE toughness = '99';",
        "db_id": "card_games"
    },
    {
        "question": "Name the cards that were illustrated by Aaron Boyd.",
        "SQL": "SELECT name \nFROM public.cards \nWHERE artist = 'Aaron Boyd';",
        "db_id": "card_games"
    },
    {
        "question": "How many black border cards are only available on mtgo?",
        "SQL": "SELECT COUNT(*) \nFROM public.cards \nWHERE \"borderColor\" = 'black' \nAND \"availability\" = 'mtgo'\nAND \"availability\" NOT LIKE '%paper%'\nAND \"availability\" NOT LIKE '%arena%'\nAND \"availability\" NOT LIKE '%mtgo,arena%'\nAND \"availability\" NOT LIKE '%paper,arena%'\nAND \"availability\" NOT LIKE '%paper,mtgo%'\nAND \"availability\" NOT LIKE '%paper,mtgo,arena%';",
        "db_id": "card_games"
    },
    {
        "question": "List down all the card IDs with converted mana cost of 0.",
        "SQL": "SELECT id FROM public.cards WHERE \"convertedManaCost\" = 0;",
        "db_id": "card_games"
    },
    {
        "question": "What are the card layout of cards with keyword of flying?",
        "SQL": "SELECT DISTINCT layout\nFROM public.cards\nWHERE keywords LIKE '%flying%'",
        "db_id": "card_games"
    },
    {
        "question": "How many cards with original type of \"Summon - Angel\" have subtype other than \"Angel\"?",
        "SQL": "SELECT COUNT(*)\nFROM public.cards\nWHERE \"originalType\" = 'Summon - Angel' \nAND subtypes IS NOT NULL \nAND subtypes <> 'Angel';",
        "db_id": "card_games"
    },
    {
        "question": "What are the foiled cards that are incredibly powerful when paired with non foiled cards? List the IDs.",
        "SQL": "The provided context does not have sufficient information to determine which foiled cards are incredibly powerful when paired with non-foiled cards. The context includes the `cards` table with a `hasFoil` column indicating if a card has a foil version, but it does not include any criteria or attributes to evaluate whether a card is \"incredibly powerful\" when paired with another card. Additional information or context is required to generate the desired SQL query.",
        "db_id": "card_games"
    },
    {
        "question": "What are the cards belong to duel deck a? List the ID.",
        "SQL": "SELECT id \nFROM public.cards \nWHERE \"duelDeck\" = 'a';",
        "db_id": "card_games"
    },
    {
        "question": "List the edhrecRank for cards with frame version 2015.",
        "SQL": "SELECT edhrecRank \nFROM public.cards \nWHERE \"frameVersion\" = '2015';",
        "db_id": "card_games"
    },
    {
        "question": "List down the name of artists for cards in Chinese Simplified.",
        "SQL": "SELECT DISTINCT artist \nFROM public.cards \nWHERE availability LIKE '%Chinese Simplified%'",
        "db_id": "card_games"
    },
    {
        "question": "What are the cards that only available in paper and Japanese language?",
        "SQL": "The provided context is insufficient to generate the query because it doesn't contain any columns related to the availability format (such as paper) or the language of the cards in the available tables.",
        "db_id": "card_games"
    },
    {
        "question": "How many of the banned cards are white border?",
        "SQL": "The provided context does not contain sufficient information to generate a SQL query to answer the question about banned cards with a white border. The context does not include any information about banned cards.",
        "db_id": "card_games"
    },
    {
        "question": "List down the uuid for legacy cards and the foreign language of these cards.",
        "SQL": "SELECT c.uuid, fd.language\nFROM public.cards c\nJOIN public.legalities l ON c.uuid = l.uuid\nJOIN public.foreign_data fd ON c.uuid = fd.uuid\nWHERE l.format = 'Legacy';",
        "db_id": "card_games"
    },
    {
        "question": "Write down the ruling of Beacon of Immortality.",
        "SQL": "The provided context does not contain information about the ruling of \"Beacon of Immortality.\" The `rulings` table seems relevant, but without specific knowledge that \"Beacon of Immortality\" is included in the `text` or `uuid` columns, a direct query cannot be generated. \n\nTo proceed, we would need to know how \"Beacon of Immortality\" is referenced within the `rulings` table.",
        "db_id": "card_games"
    },
    {
        "question": "How many cards are having future frame version and what are the legality status of these cards?",
        "SQL": "SELECT COUNT(DISTINCT c.uuid) AS card_count, l.status\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.\"frameVersion\" = 'future'\nGROUP BY l.status;",
        "db_id": "card_games"
    },
    {
        "question": "What are the cards for set OGW? State the colour for these cards.",
        "SQL": "SELECT c.name, cl.colour\nFROM public.cards c\nJOIN public.colour cl ON c.id = cl.id\nWHERE c.setCode = 'OGW';",
        "db_id": "card_games"
    },
    {
        "question": "What are the cards in set 10E with converted mana of 5 have translation and what are the languages?",
        "SQL": "SELECT c.name AS card_name, st.language\nFROM cards c\nJOIN set_translations st ON c.setCode = st.setCode\nWHERE c.setCode = '10E' AND c.convertedManaCost = 5;",
        "db_id": "card_games"
    },
    {
        "question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
        "SQL": "SELECT c.name, r.date AS ruling_date\nFROM public.cards c\nJOIN public.rulings r ON c.uuid = r.uuid\nWHERE c.\"originalType\" = 'Creature - Elf';",
        "db_id": "card_games"
    },
    {
        "question": "Which user has a higher reputation, Harlan or Jarrod Dixon?",
        "SQL": "SELECT \"DisplayName\", \"Reputation\"\nFROM public.users\nWHERE \"DisplayName\" IN ('Harlan', 'Jarrod Dixon')\nORDER BY \"Reputation\" DESC;",
        "db_id": "codebase_community"
    },
    {
        "question": "Please list the display names of all the users whose accounts were created in the year 2011.",
        "SQL": "SELECT \"DisplayName\"\nFROM public.users\nWHERE EXTRACT(YEAR FROM \"CreationDate\") = 2011;",
        "db_id": "codebase_community"
    },
    {
        "question": "How many users last accessed the website after 2014/9/1?",
        "SQL": "SELECT COUNT(*) \nFROM public.users \nWHERE \"LastAccessDate\" > '2014-09-01';",
        "db_id": "codebase_community"
    },
    {
        "question": "What is the display name of the user who has the most number of views?",
        "SQL": "SELECT \"DisplayName\"\nFROM public.users\nORDER BY \"Views\" DESC\nLIMIT 1;",
        "db_id": "codebase_community"
    },
    {
        "question": "Among the users who have more than 100 upvotes, how many of them have more then 1 downvotes?",
        "SQL": "SELECT COUNT(*) \nFROM public.users \nWHERE UpVotes > 100 AND DownVotes > 1;",
        "db_id": "codebase_community"
    },
    {
        "question": "How many users with more than 10 views created their account after the year 2013?",
        "SQL": "SELECT COUNT(*) \nFROM public.users \nWHERE Views > 10 AND CreationDate > '2013-12-31';",
        "db_id": "codebase_community"
    },
    {
        "question": "How many posts does the user csgillespie own?",
        "SQL": "SELECT COUNT(*)\nFROM public.posts p\nJOIN public.users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'csgillespie';",
        "db_id": "codebase_community"
    },
    {
        "question": "Please list the titles of the posts owned by the user csgillespie?",
        "SQL": "SELECT p.Title \nFROM public.posts p\nJOIN public.users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'csgillespie';",
        "db_id": "codebase_community"
    },
    {
        "question": "Who is the owner of the post \"Eliciting priors from experts\"?",
        "SQL": "SELECT \"OwnerDisplayName\"\nFROM public.posts\nWHERE \"Title\" = 'Eliciting priors from experts';",
        "db_id": "codebase_community"
    },
    {
        "question": "What is the title of the post that is owned by csgillespie and has the highest popularity?",
        "SQL": "SELECT Title \nFROM public.posts \nWHERE OwnerDisplayName = 'csgillespie' \nORDER BY ViewCount DESC \nLIMIT 1;",
        "db_id": "codebase_community"
    },
    {
        "question": "What is the display name of the user who is the owner of the most valuable post?",
        "SQL": "SELECT u.DisplayName\nFROM public.posts p\nJOIN public.users u ON p.OwnerUserId = u.Id\nORDER BY p.Score DESC\nLIMIT 1;",
        "db_id": "codebase_community"
    },
    {
        "question": "What is the total number of comments of all the posts owned by csgillespie?",
        "SQL": "SELECT SUM(CommentCount) AS TotalComments\nFROM posts\nWHERE OwnerDisplayName = 'csgillespie';",
        "db_id": "codebase_community"
    },
    {
        "question": "For the post that got the most number of answers owned by csgillespie, how many answers did it get?",
        "SQL": "SELECT MAX(AnswerCount) AS MostAnswers\nFROM posts\nWHERE OwnerDisplayName = 'csgillespie';",
        "db_id": "codebase_community"
    },
    {
        "question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
        "SQL": "SELECT p.\"LastEditorDisplayName\"\nFROM public.posts p\nWHERE p.\"Title\" = 'Examples for teaching: Correlation does not mean causation';",
        "db_id": "codebase_community"
    },
    {
        "question": "Among the posts owned by csgillespie, how many of them are root posts?",
        "SQL": "SELECT COUNT(*) AS root_post_count\nFROM posts\nWHERE OwnerDisplayName = 'csgillespie' AND ParentId IS NULL;",
        "db_id": "codebase_community"
    },
    {
        "question": "Please list the display names of all the users who owns a post that is well-finished.",
        "SQL": "It seems that the context provided does not define what constitutes a \"well-finished\" post. To generate the SQL query, we need a specific criterion for what makes a post well-finished, such as a high score, a certain number of views, or another measurable attribute. Without this information, the query cannot be accurately generated. Please provide the specific criteria for a \"well-finished\" post.",
        "db_id": "codebase_community"
    },
    {
        "question": "Among the posts owned by an elder user, how many of them have a score of over 19?",
        "SQL": "The provided context is insufficient to generate the SQL query. The available tables do not include a direct way to determine if a user is an \"elder user\". Additional information or criteria defining \"elder user\" is needed to construct the query.",
        "db_id": "codebase_community"
    },
    {
        "question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
        "SQL": "The provided context does not contain information about the location of the owner of a post. Therefore, it can't be generated.",
        "db_id": "codebase_community"
    },
    {
        "question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.",
        "SQL": "SELECT p.Body\nFROM posts p\nJOIN tags t ON p.Id = t.ExcerptPostId\nWHERE t.TagName = 'bayesian';",
        "db_id": "codebase_community"
    },
    {
        "question": "From which post is the most popular tag excerpted from? Please give the body of the post.",
        "SQL": "SELECT p.Body\nFROM public.tags t\nJOIN public.posts p ON t.ExcerptPostId = p.Id\nORDER BY t.Count DESC\nLIMIT 1;",
        "db_id": "codebase_community"
    },
    {
        "question": "How many badges has the user csgillespie obtained?",
        "SQL": "The provided context is insufficient because the necessary information to link a user display name, such as \"csgillespie\", to a user ID is missing. The query would require joining the `users` table with the `badges` table using the `UserId`, but there is no direct reference to display names in the badges context provided.",
        "db_id": "codebase_community"
    },
    {
        "question": "Please list the names of the badges obtained by csgillespie.",
        "SQL": "SELECT b.Name\nFROM badges b\nJOIN posts p ON b.UserId = p.OwnerUserId\nWHERE p.OwnerDisplayName = 'csgillespie';",
        "db_id": "codebase_community"
    },
    {
        "question": "Among the badges obtained by csgillespie, how many of them were obtained in the year 2011?",
        "SQL": "The provided context does not include information about the relationship between user names such as \"csgillespie\" and the \"UserId\" in the badges table. Therefore, it is not possible to generate the SQL query to answer the question.",
        "db_id": "codebase_community"
    },
    {
        "question": "What is the display name of the user who has obtained the most number of badges?",
        "SQL": "SELECT u.DisplayName\nFROM public.users u\nJOIN (\n    SELECT UserId, COUNT(*) AS BadgeCount\n    FROM public.badges\n    GROUP BY UserId\n    ORDER BY BadgeCount DESC\n    LIMIT 1\n) AS b ON u.Id = b.UserId;",
        "db_id": "codebase_community"
    },
    {
        "question": "What is the average score of the posts owned by the user csgillespie?",
        "SQL": "SELECT AVG(p.\"Score\") AS average_score\nFROM public.posts p\nJOIN public.users u ON p.\"OwnerUserId\" = u.\"Id\"\nWHERE u.\"DisplayName\" = 'csgillespie';",
        "db_id": "codebase_community"
    },
    {
        "question": "What is the average number of badges obtained by a user with over 200 views?",
        "SQL": "SELECT AVG(badge_count) AS average_badges\nFROM (\n    SELECT u.Id, COUNT(b.Id) AS badge_count\n    FROM public.users u\n    JOIN public.badges b ON u.Id = b.UserId\n    WHERE u.Views > 200\n    GROUP BY u.Id\n) AS user_badge_counts;",
        "db_id": "codebase_community"
    },
    {
        "question": "Among the posts with a score of over 5, what is the percentage of them being owned by an elder user?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no definition of what constitutes an \"elder user\" in the given tables. We need additional information or criteria to determine which users are considered elder users, such as a specific age range or account creation date threshold.",
        "db_id": "codebase_community"
    },
    {
        "question": "How many votes did the user No.58 take on 2010/7/19?",
        "SQL": "SELECT COUNT(*) AS vote_count\nFROM votes\nWHERE UserId = 58 AND CreationDate = '2010-07-19';",
        "db_id": "codebase_community"
    },
    {
        "question": "Indicate the creation date of the maximum number of votes.",
        "SQL": "SELECT \"CreationDate\", COUNT(*) as vote_count\nFROM public.votes\nGROUP BY \"CreationDate\"\nORDER BY vote_count DESC\nLIMIT 1;",
        "db_id": "codebase_community"
    },
    {
        "question": "Give the number of \"Revival\" badges.",
        "SQL": "SELECT COUNT(*) \nFROM public.badges \nWHERE \"Name\" = 'Revival';",
        "db_id": "codebase_community"
    },
    {
        "question": "What is the title for the post which got the highest score comment?",
        "SQL": "SELECT p.Title\nFROM public.posts p\nJOIN public.comments c ON p.Id = c.PostId\nWHERE c.Score = (SELECT MAX(Score) FROM public.comments);",
        "db_id": "codebase_community"
    },
    {
        "question": "For the post which got 1910 view counts, how many comments does it get?",
        "SQL": "SELECT p.Id, p.ViewCount, p.CommentCount\nFROM public.posts p\nWHERE p.ViewCount = 1910;",
        "db_id": "codebase_community"
    },
    {
        "question": "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?",
        "SQL": "SELECT p.FavoriteCount\nFROM posts p\nJOIN comments c ON p.Id = c.PostId\nWHERE c.UserId = 3025\n  AND c.CreationDate = '2014-04-23 20:29:39';",
        "db_id": "codebase_community"
    },
    {
        "question": "Give the only one comment text of the post with parent id 107829.",
        "SQL": "SELECT c.\"Text\"\nFROM public.comments c\nJOIN public.posts p ON c.\"PostId\" = p.\"Id\"\nWHERE p.\"ParentId\" = 107829\nLIMIT 1;",
        "db_id": "codebase_community"
    },
    {
        "question": "User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?",
        "SQL": "The provided context is insufficient to determine whether the post was well-finished. The context does not define what qualifies a post as \"well-finished\" and there is no specific column or criteria provided to evaluate this. Additional information or criteria for what constitutes a \"well-finished\" post is needed.",
        "db_id": "codebase_community"
    },
    {
        "question": "For the owner user of post No. 65041, what is his/her reputation points?",
        "SQL": "SELECT u.Reputation\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Id = 65041;",
        "db_id": "codebase_community"
    },
    {
        "question": "For the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own?",
        "SQL": "SELECT COUNT(*) AS post_count\nFROM public.posts\nJOIN public.users ON posts.OwnerUserId = users.Id\nWHERE users.DisplayName = 'Tiago Pasqualini';",
        "db_id": "codebase_community"
    },
    {
        "question": "Provide the display name of the user who made the vote No.6347.",
        "SQL": "SELECT u.DisplayName\nFROM votes v\nJOIN users u ON v.UserId = u.Id\nWHERE v.Id = 6347;",
        "db_id": "codebase_community"
    },
    {
        "question": "Give the number of votes for the post about data visualization.",
        "SQL": "SELECT COUNT(*) AS NumberOfVotes\nFROM votes\nWHERE PostId IN (\n    SELECT Id\n    FROM posts\n    WHERE Title LIKE '%data visualization%'\n);",
        "db_id": "codebase_community"
    },
    {
        "question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
        "SQL": "SELECT b.Name \nFROM public.users u\nJOIN public.badges b ON u.Id = b.UserId\nWHERE u.DisplayName = 'DatEpicCoderGuyWhoPrograms';",
        "db_id": "codebase_community"
    },
    {
        "question": "For the user No.24, how many times is the number of his/her posts compared to his/her votes?",
        "SQL": "SELECT \n    (SELECT COUNT(*) FROM posts WHERE OwnerUserId = 24) AS PostCount,\n    (SELECT COUNT(*) FROM votes WHERE UserId = 24) AS VoteCount",
        "db_id": "codebase_community"
    },
    {
        "question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
        "SQL": "SELECT \"ViewCount\"\nFROM public.posts\nWHERE \"Title\" = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';",
        "db_id": "codebase_community"
    },
    {
        "question": "Write the contents of comments with a score of 17.",
        "SQL": "SELECT * FROM public.comments WHERE \"Score\" = 17;",
        "db_id": "codebase_community"
    },
    {
        "question": "Which user has the website URL listed at 'http://stackoverflow.com'",
        "SQL": "SELECT \"DisplayName\" \nFROM public.users \nWHERE \"WebsiteUrl\" = 'http://stackoverflow.com';",
        "db_id": "codebase_community"
    },
    {
        "question": "What is the badge name that user 'SilentGhost' obtained?",
        "SQL": "SELECT b.Name\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.DisplayName = 'SilentGhost';",
        "db_id": "codebase_community"
    },
    {
        "question": "Name the user that commented 'thank you user93!'",
        "SQL": "SELECT UserDisplayName \nFROM public.comments \nWHERE Text = 'thank you user93!';",
        "db_id": "codebase_community"
    },
    {
        "question": "Write all comments made by user 'A Lion.'",
        "SQL": "SELECT *\nFROM public.comments\nWHERE \"UserDisplayName\" = 'A Lion.'",
        "db_id": "codebase_community"
    },
    {
        "question": "Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?",
        "SQL": "SELECT u.DisplayName, u.Reputation\nFROM public.users u\nJOIN public.posts p ON u.Id = p.OwnerUserId\nWHERE p.Title = 'Understanding what Dassault iSight is doing?';",
        "db_id": "codebase_community"
    },
    {
        "question": "Write all comments made on the post titled 'How does gentle boosting differ from AdaBoost?'",
        "SQL": "SELECT c.*\nFROM public.comments c\nJOIN public.posts p ON c.PostId = p.Id\nWHERE p.Title = 'How does gentle boosting differ from AdaBoost?'",
        "db_id": "codebase_community"
    },
    {
        "question": "Name 10 users with the badge name 'Necromancer.'",
        "SQL": "SELECT u.DisplayName\nFROM users u\nJOIN badges b ON u.Id = b.UserId\nWHERE b.Name = 'Necromancer'\nLIMIT 10;",
        "db_id": "codebase_community"
    },
    {
        "question": "Please list all the superpowers of 3-D Man.",
        "SQL": "SELECT sp.power_name\nFROM public.superhero sh\nJOIN public.hero_power hp ON sh.id = hp.hero_id\nJOIN public.superpower sp ON hp.power_id = sp.id\nWHERE sh.superhero_name = '3-D Man';",
        "db_id": "superhero"
    },
    {
        "question": "How many superheroes have the super power of \"Super Strength\"?",
        "SQL": "SELECT COUNT(DISTINCT hero_id) AS superhero_count\nFROM public.hero_power\nJOIN public.superpower ON hero_power.power_id = superpower.id\nWHERE superpower.power_name = 'Super Strength';",
        "db_id": "superhero"
    },
    {
        "question": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?",
        "SQL": "SELECT COUNT(DISTINCT s.id) AS num_superheroes\nFROM public.superhero s\nJOIN public.hero_power hp ON s.id = hp.hero_id\nJOIN public.superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Super Strength' AND s.height_cm > 200;",
        "db_id": "superhero"
    },
    {
        "question": "Please list the full names of all the superheroes with over 15 super powers.",
        "SQL": "SELECT sh.full_name\nFROM public.superhero sh\nJOIN public.hero_power hp ON sh.id = hp.hero_id\nGROUP BY sh.id, sh.full_name\nHAVING COUNT(hp.power_id) > 15;",
        "db_id": "superhero"
    },
    {
        "question": "How many superheroes have blue eyes?",
        "SQL": "SELECT COUNT(*) \nFROM public.superhero\nWHERE eye_colour_id = (\n    SELECT id \n    FROM public.colour\n    WHERE colour = 'blue'\n);",
        "db_id": "superhero"
    },
    {
        "question": "What is the colour of Apocalypse's skin?",
        "SQL": "SELECT c.colour\nFROM public.superhero s\nJOIN public.colour c ON s.skin_colour_id = c.id\nWHERE s.superhero_name = 'Apocalypse';",
        "db_id": "superhero"
    },
    {
        "question": "Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"?",
        "SQL": "Error running intermediate SQL: You need to connect to a database first by running vn.connect_to_snowflake(), vn.connect_to_postgres(), similar function, or manually set vn.run_sql",
        "db_id": "superhero"
    },
    {
        "question": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
        "SQL": "SELECT s.superhero_name\nFROM public.superhero s\nJOIN public.colour ec ON s.eye_colour_id = ec.id\nJOIN public.colour hc ON s.hair_colour_id = hc.id\nWHERE ec.colour = 'blue' AND hc.colour = 'blond';",
        "db_id": "superhero"
    },
    {
        "question": "How many superheroes are published by Marvel Comics?",
        "SQL": "SELECT COUNT(*) \nFROM public.superhero \nJOIN public.publisher ON public.superhero.publisher_id = public.publisher.id \nWHERE public.publisher.publisher_name = 'Marvel Comics';",
        "db_id": "superhero"
    },
    {
        "question": "Rank heroes published by Marvel Comics by their height in descending order.",
        "SQL": "SELECT superhero_name, height_cm\nFROM public.superhero\nWHERE publisher_id = (SELECT id FROM public.publisher WHERE publisher_name = 'Marvel Comics')\nORDER BY height_cm DESC;",
        "db_id": "superhero"
    },
    {
        "question": "Who is the publisher of Sauron?",
        "SQL": "SELECT p.publisher_name\nFROM public.superhero s\nJOIN public.publisher p ON s.publisher_id = p.id\nWHERE s.superhero_name = 'Sauron';",
        "db_id": "superhero"
    },
    {
        "question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
        "SQL": "SELECT c.colour AS eye_color, COUNT(*) AS superhero_count\nFROM public.superhero s\nJOIN public.colour c ON s.eye_colour_id = c.id\nJOIN public.publisher p ON s.publisher_id = p.id\nWHERE p.name = 'Marvel Comics'\nGROUP BY c.colour\nORDER BY superhero_count DESC;",
        "db_id": "superhero"
    },
    {
        "question": "What is the average height of the superheroes from Marvel Comics?",
        "SQL": "SELECT AVG(height_cm) AS average_height\nFROM public.superhero\nWHERE publisher_id = (SELECT id FROM public.publisher WHERE name = 'Marvel Comics');",
        "db_id": "superhero"
    },
    {
        "question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
        "SQL": "SELECT s.superhero_name\nFROM public.superhero s\nJOIN public.hero_power hp ON s.id = hp.hero_id\nJOIN public.superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Super Strength' AND s.publisher_id = (\n    SELECT id FROM public.superhero WHERE superhero_name = 'Marvel Comics'\n);",
        "db_id": "superhero"
    },
    {
        "question": "How many superheroes did DC Comics publish?",
        "SQL": "SELECT COUNT(*) \nFROM public.superhero\nWHERE publisher_id = (SELECT id FROM public.publisher WHERE publisher_name = 'DC Comics');",
        "db_id": "superhero"
    },
    {
        "question": "Which publisher published the slowest superhero?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information about the speed attribute of superheroes, and how to associate it with the publisher. The tables related to superheroes don't contain any specific attribute indicating speed that could be used to determine the slowest superhero.",
        "db_id": "superhero"
    },
    {
        "question": "How many gold-eyed superheroes did Marvel Comics publish?",
        "SQL": "SELECT COUNT(*) AS gold_eyed_superheroes_count\nFROM public.superhero\nJOIN public.colour ON public.superhero.eye_colour_id = public.colour.id\nJOIN public.publisher ON public.superhero.publisher_id = public.publisher.id\nWHERE public.colour.colour = 'Gold' AND public.publisher.publisher_name = 'Marvel Comics';",
        "db_id": "superhero"
    },
    {
        "question": "What is the publisher's name of Blue Beetle II?",
        "SQL": "SELECT publisher.publisher_name\nFROM superhero\nJOIN publisher ON superhero.publisher_id = publisher.id\nWHERE superhero.superhero_name = 'Blue Beetle II';",
        "db_id": "superhero"
    },
    {
        "question": "How many superheroes with blonde hair are there?",
        "SQL": "SELECT COUNT(*) \nFROM public.superhero s\nJOIN public.colour c ON s.hair_colour_id = c.id\nWHERE c.colour = 'Blonde';",
        "db_id": "superhero"
    },
    {
        "question": "Who is the dumbest superhero?",
        "SQL": "The provided context is insufficient to determine who the dumbest superhero is, as it does not contain information about the intelligence or attributes related to intelligence of superheroes.",
        "db_id": "superhero"
    },
    {
        "question": "What is Copycat's race?",
        "SQL": "SELECT race.race\nFROM superhero\nJOIN race ON superhero.race_id = race.id\nWHERE superhero.superhero_name = 'Copycat';",
        "db_id": "superhero"
    },
    {
        "question": "Which superheroes have a durability attribute value of less than 50?",
        "SQL": "SELECT s.superhero_name\nFROM public.superhero s\nJOIN public.hero_attribute ha ON s.id = ha.hero_id\nJOIN public.attribute a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'durability' AND ha.attribute_value < 50;",
        "db_id": "superhero"
    },
    {
        "question": "What are the names of the superheroes with the power of death touch?",
        "SQL": "SELECT s.superhero_name\nFROM public.superhero s\nJOIN public.hero_power hp ON s.id = hp.hero_id\nJOIN public.superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Death Touch';",
        "db_id": "superhero"
    },
    {
        "question": "How many female superheroes have a strength value of 100?",
        "SQL": "SELECT COUNT(*) \nFROM public.superhero AS s\nJOIN public.hero_attribute AS ha ON s.id = ha.hero_id\nJOIN public.gender AS g ON s.gender_id = g.id\nWHERE g.gender = 'Female' AND ha.attribute_id = (SELECT id FROM public.hero_attribute WHERE attribute_id = 'strength') AND ha.attribute_value = 100;",
        "db_id": "superhero"
    },
    {
        "question": "What is the name of the superhero that has the most powers?",
        "SQL": "SELECT s.superhero_name\nFROM public.superhero s\nJOIN public.hero_power hp ON s.id = hp.hero_id\nGROUP BY s.superhero_name\nORDER BY COUNT(hp.power_id) DESC\nLIMIT 1;",
        "db_id": "superhero"
    },
    {
        "question": "How many vampire superheroes are there?",
        "SQL": "SELECT COUNT(*) AS vampire_superheroes_count\nFROM public.superhero\nJOIN public.hero_attribute ON public.superhero.id = public.hero_attribute.hero_id\nWHERE public.hero_attribute.attribute_id = (\n    SELECT id FROM public.superpower WHERE power_name = 'vampire'\n);",
        "db_id": "superhero"
    },
    {
        "question": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.",
        "SQL": "SELECT \n    (COUNT(*) FILTER (WHERE alignment_id = (SELECT id FROM public.alignment WHERE alignment_name = 'neutral')) * 100.0 / COUNT(*)) AS percentage_self_interest,\n    COUNT(*) FILTER (WHERE alignment_id = (SELECT id FROM public.alignment WHERE alignment_name = 'neutral') AND publisher_id = (SELECT id FROM public.publisher WHERE publisher_name = 'Marvel Comics')) AS marvel_neutral_superheroes\nFROM \n    public.superhero;",
        "db_id": "superhero"
    },
    {
        "question": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published.",
        "SQL": "SELECT \n    (SELECT publisher_name FROM public.publisher WHERE id = dc_publisher_id) AS publisher_dc,\n    (SELECT COUNT(*) FROM public.superhero WHERE publisher_id = dc_publisher_id) AS count_dc,\n    (SELECT publisher_name FROM public.publisher WHERE id = marvel_publisher_id) AS publisher_marvel,\n    (SELECT COUNT(*) FROM public.superhero WHERE publisher_id = marvel_publisher_id) AS count_marvel,\n    ABS((SELECT COUNT(*) FROM public.superhero WHERE publisher_id = dc_publisher_id) - \n        (SELECT COUNT(*) FROM public.superhero WHERE publisher_id = marvel_publisher_id)) AS difference\nFROM\n    (SELECT id AS dc_publisher_id FROM public.publisher WHERE publisher_name = 'DC Comics') AS dc_table,\n    (SELECT id AS marvel_publisher_id FROM public.publisher WHERE publisher_name = 'Marvel Comics') AS marvel_table;",
        "db_id": "superhero"
    },
    {
        "question": "Give the publisher ID of Star Trek.",
        "SQL": "SELECT id FROM public.publisher WHERE publisher_name = 'Star Trek';",
        "db_id": "superhero"
    },
    {
        "question": "Calculate the average attribute value of all superheroes.",
        "SQL": "SELECT AVG(attribute_value) AS average_attribute_value\nFROM public.hero_attribute;",
        "db_id": "superhero"
    },
    {
        "question": "What is the total number of superheroes without full name?",
        "SQL": "SELECT COUNT(*) AS total_superheroes_without_full_name\nFROM public.superhero\nWHERE full_name IS NULL OR full_name = '';",
        "db_id": "superhero"
    },
    {
        "question": "What is the eye colour of superhero with superhero ID 75?",
        "SQL": "SELECT c.colour AS eye_colour\nFROM public.superhero s\nJOIN public.colour c ON s.eye_colour_id = c.id\nWHERE s.id = 75;",
        "db_id": "superhero"
    },
    {
        "question": "Provide the superpowers of the superhero called Deathlok.",
        "SQL": "SELECT sp.power_name\nFROM public.superpower sp\nJOIN public.hero_power hp ON sp.id = hp.power_id\nJOIN public.superhero sh ON hp.hero_id = sh.id\nWHERE sh.superhero_name = 'Deathlok';",
        "db_id": "superhero"
    },
    {
        "question": "What is the average weight of all female superheroes?",
        "SQL": "SELECT AVG(weight_kg) AS average_weight_of_female_superheroes\nFROM public.superhero\nJOIN public.gender ON public.superhero.gender_id = public.gender.id\nWHERE public.gender.gender = 'Female';",
        "db_id": "superhero"
    },
    {
        "question": "List down at least five superpowers of male superheroes.",
        "SQL": "SELECT DISTINCT sp.power_name\nFROM superhero sh\nJOIN hero_power hp ON sh.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nJOIN gender g ON sh.gender_id = g.id\nWHERE g.gender = 'Male'\nLIMIT 5;",
        "db_id": "superhero"
    },
    {
        "question": "Give the name of the alien superheroes.",
        "SQL": "SELECT DISTINCT s.superhero_name\nFROM public.superhero s\nJOIN public.hero_attribute ha ON s.id = ha.hero_id\nWHERE ha.attribute_id = (\n    SELECT id \n    FROM public.hero_attribute \n    WHERE attribute_value = 'alien'\n)",
        "db_id": "superhero"
    },
    {
        "question": "Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color.",
        "SQL": "SELECT superhero_name \nFROM public.superhero\nWHERE height_cm BETWEEN 170 AND 190\nAND eye_colour_id IS NULL;",
        "db_id": "superhero"
    },
    {
        "question": "What is the superpower of hero ID 56?",
        "SQL": "SELECT sp.power_name\nFROM public.hero_power hp\nJOIN public.superpower sp ON hp.power_id = sp.id\nWHERE hp.hero_id = 56;",
        "db_id": "superhero"
    },
    {
        "question": "List down at least five full name of Demi-God superheroes.",
        "SQL": "SELECT full_name\nFROM public.superhero\nWHERE race_id = (\n    SELECT id\n    FROM public.race\n    WHERE race_name = 'Demi-God'\n)\nLIMIT 5;",
        "db_id": "superhero"
    },
    {
        "question": "How many bad superheroes are there?",
        "SQL": "SELECT COUNT(*) \nFROM public.superhero \nWHERE alignment_id = (SELECT id FROM public.alignment WHERE alignment = 'bad');",
        "db_id": "superhero"
    },
    {
        "question": "Identify the race of the superhero who weighed 169 kg.",
        "SQL": "SELECT r.race\nFROM public.superhero AS s\nJOIN public.race AS r ON s.race_id = r.id\nWHERE s.weight_kg = 169;",
        "db_id": "superhero"
    },
    {
        "question": "Provide the hair colour of the human superhero who is 185 cm tall.",
        "SQL": "SELECT c.colour AS hair_colour\nFROM public.superhero s\nJOIN public.colour c ON s.hair_colour_id = c.id\nJOIN public.race r ON s.race_id = r.id\nWHERE s.height_cm = 185 AND r.race = 'Human';",
        "db_id": "superhero"
    },
    {
        "question": "What is the eye clolour of the heaviest superhero?",
        "SQL": "SELECT c.colour AS eye_colour\nFROM public.superhero s\nJOIN public.colour c ON s.eye_colour_id = c.id\nORDER BY s.weight_kg DESC\nLIMIT 1;",
        "db_id": "superhero"
    },
    {
        "question": "In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics?",
        "SQL": "SELECT \n    (COUNT(*) FILTER (WHERE publisher_id = (SELECT id FROM public.superhero WHERE superhero_name = 'Marvel Comics'))::decimal / COUNT(*)) * 100 AS marvel_percentage \nFROM \n    public.superhero\nWHERE \n    height_cm BETWEEN 150 AND 180;",
        "db_id": "superhero"
    },
    {
        "question": "Among the male superheroes, list the super hero names of superheroes with weight greater than the 79% average weight of all superheroes.",
        "SQL": "SELECT s.superhero_name\nFROM public.superhero s\nJOIN public.gender g ON s.gender_id = g.id\nWHERE g.gender = 'Male'\nAND s.weight_kg > (\n    SELECT 0.79 * AVG(weight_kg)\n    FROM public.superhero\n)",
        "db_id": "superhero"
    },
    {
        "question": "Which power do superheroes have the most of?",
        "SQL": "SELECT sp.power_name, COUNT(*) as power_count\nFROM hero_power hp\nJOIN superpower sp ON hp.power_id = sp.id\nGROUP BY sp.power_name\nORDER BY power_count DESC\nLIMIT 1;",
        "db_id": "superhero"
    },
    {
        "question": "Indicate the attribute value of superhero Abomination.",
        "SQL": "SELECT ha.attribute_value\nFROM public.hero_attribute ha\nJOIN public.superhero s ON ha.hero_id = s.id\nWHERE s.superhero_name = 'Abomination';",
        "db_id": "superhero"
    },
    {
        "question": "What are the superpowers of heroes with ID 1?",
        "SQL": "SELECT sp.power_name\nFROM public.hero_power hp\nJOIN public.superpower sp ON hp.power_id = sp.id\nWHERE hp.hero_id = 1;",
        "db_id": "superhero"
    },
    {
        "question": "How many heroes have stealth power?",
        "SQL": "SELECT COUNT(DISTINCT h.hero_id) AS hero_count\nFROM hero_power h\nJOIN superpower s ON h.power_id = s.id\nWHERE s.power_name = 'Stealth';",
        "db_id": "superhero"
    },
    {
        "question": "What is the hero's full name with the highest attribute in strength?",
        "SQL": "SELECT s.full_name\nFROM public.superhero s\nJOIN public.hero_attribute ha ON s.id = ha.hero_id\nJOIN public.attribute a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'strength'\nORDER BY ha.attribute_value DESC\nLIMIT 1;",
        "db_id": "superhero"
    },
    {
        "question": "Please list the reference names of the drivers who are eliminated in the first period in race number 20.",
        "SQL": "SELECT d.driverRef\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 20 AND q.q1 IS NOT NULL AND q.q2 IS NULL;",
        "db_id": "formula_1"
    },
    {
        "question": "What is the surname of the driver with the best lap time in race number 19 in the second qualifying period?",
        "SQL": "SELECT d.surname \nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 19\nORDER BY q.q2 \nLIMIT 1;",
        "db_id": "formula_1"
    },
    {
        "question": "Please list the year during which the race is held on circuits in Shanghai.",
        "SQL": "SELECT DISTINCT r.year\nFROM races r\nJOIN circuits c ON r.\"circuitId\" = c.\"circuitId\"\nWHERE c.location = 'Shanghai';",
        "db_id": "formula_1"
    },
    {
        "question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
        "SQL": "SELECT url \nFROM public.circuits \nWHERE name = 'Circuit de Barcelona-Catalunya';",
        "db_id": "formula_1"
    },
    {
        "question": "Please give the name of the race held on the circuits in Germany.",
        "SQL": "SELECT r.name\nFROM public.races r\nJOIN public.circuits c ON r.\"circuitId\" = c.\"circuitId\"\nWHERE c.country = 'Germany';",
        "db_id": "formula_1"
    },
    {
        "question": "Please list the positions of the circuits built by the constructor Renault.",
        "SQL": "SELECT c.circuitId, c.name, c.location, c.country\nFROM constructors con\nJOIN qualifying q ON con.constructorId = q.constructorId\nJOIN races r ON q.raceId = r.raceId\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE con.name = 'Renault';",
        "db_id": "formula_1"
    },
    {
        "question": "How many races in the year 2010 are held on grand prixs outside Asia and Europe?",
        "SQL": "The provided context is insufficient to determine which races are held outside Asia and Europe. There is no information on the location or continent of the circuits in the given tables. Therefore, it is not possible to generate the SQL query.",
        "db_id": "formula_1"
    },
    {
        "question": "Please give the names of the races held on the circuits in Spain.",
        "SQL": "SELECT r.name AS race_name\nFROM public.races r\nJOIN public.circuits c ON r.\"circuitId\" = c.\"circuitId\"\nWHERE c.country = 'Spain';",
        "db_id": "formula_1"
    },
    {
        "question": "What is the coordinates location of the circuits for Australian grand prix?",
        "SQL": "SELECT c.lat, c.lng\nFROM public.circuits c\nJOIN public.races r ON c.\"circuitId\" = r.\"circuitId\"\nWHERE r.name = 'Australian Grand Prix';",
        "db_id": "formula_1"
    },
    {
        "question": "Where can I find the information about the races held on Sepang International Circuit?",
        "SQL": "SELECT * \nFROM public.races\nJOIN public.circuits ON races.\"circuitId\" = circuits.\"circuitId\"\nWHERE circuits.name = 'Sepang International Circuit';",
        "db_id": "formula_1"
    },
    {
        "question": "Please list the time of the races held on Sepang International Circuit.",
        "SQL": "SELECT r.\"time\"\nFROM public.races r\nJOIN public.circuits c ON r.\"circuitId\" = c.\"circuitId\"\nWHERE c.name = 'Sepang International Circuit';",
        "db_id": "formula_1"
    },
    {
        "question": "Give the coordinate position for Abu Dhabi Grand Prix.",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information about the coordinates or location details for circuits or specific races like the Abu Dhabi Grand Prix in the given tables.",
        "db_id": "formula_1"
    },
    {
        "question": "Which country is the constructor which got 1 point in the race No. 24 from?",
        "SQL": "SELECT c.nationality\nFROM constructorResults cr\nJOIN constructors c ON cr.constructorId = c.constructorId\nWHERE cr.raceId = 24 AND cr.points = 1;",
        "db_id": "formula_1"
    },
    {
        "question": "What's Bruno Senna's Q1 result in the qualifying race No. 354?",
        "SQL": "SELECT q1 \nFROM public.qualifying q\nJOIN public.drivers d ON q.driverId = d.driverId\nWHERE d.forename = 'Bruno' AND d.surname = 'Senna' AND q.raceId = 354;",
        "db_id": "formula_1"
    },
    {
        "question": "For the driver who had the Q2 time as 0:01:40 in the qualifying race No. 355, what is his nationality?",
        "SQL": "SELECT d.nationality\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 355 AND q.q2 = '0:01:40';",
        "db_id": "formula_1"
    },
    {
        "question": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?",
        "SQL": "SELECT d.number\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 903 AND q.q3 = '0:01:54';",
        "db_id": "formula_1"
    },
    {
        "question": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",
        "SQL": "SELECT COUNT(*) AS not_finished_drivers_count\nFROM results r\nJOIN races ra ON r.raceId = ra.raceId\nWHERE ra.name = 'Bahrain Grand Prix' AND ra.year = 2007 AND r.position IS NULL;",
        "db_id": "formula_1"
    },
    {
        "question": "Show me the season page of year when the race No. 901 took place.",
        "SQL": "SELECT s.*\nFROM races r\nJOIN seasons s ON r.year = s.year\nWHERE r.raceId = 901;",
        "db_id": "formula_1"
    },
    {
        "question": "For the race happened on 2015/11/29, how many drivers finished the game?",
        "SQL": "SELECT COUNT(DISTINCT driverId) AS drivers_finished\nFROM results\nWHERE raceId = (\n    SELECT raceId\n    FROM races\n    WHERE date = '2015-11-29'\n);",
        "db_id": "formula_1"
    },
    {
        "question": "For all the drivers who finished the game in race No. 592, who is the oldest?",
        "SQL": "SELECT d.forename, d.surname, d.dob\nFROM public.results r\nJOIN public.drivers d ON r.driverId = d.driverId\nWHERE r.raceId = 592 AND r.position IS NOT NULL\nORDER BY d.dob ASC\nLIMIT 1;",
        "db_id": "formula_1"
    },
    {
        "question": "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.",
        "SQL": "SELECT d.url\nFROM public.\"lapTimes\" lt\nJOIN public.drivers d ON lt.driverId = d.driverId\nWHERE lt.raceId = 161 AND lt.time = '0:01:27';",
        "db_id": "formula_1"
    },
    {
        "question": "For the driver who set the fastest lap speed in race No.933, where does he come from?",
        "SQL": "SELECT d.nationality\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nWHERE r.raceId = 933\nORDER BY r.fastestLapSpeed DESC\nLIMIT 1;",
        "db_id": "formula_1"
    },
    {
        "question": "Where is Malaysian Grand Prix held? Give the location coordinates.",
        "SQL": "SELECT c.location, c.lat, c.lng \nFROM public.circuits c\nJOIN public.races r ON c.circuitId = r.\"circuitId\"\nWHERE r.name = 'Malaysian Grand Prix';",
        "db_id": "formula_1"
    },
    {
        "question": "For the constructor which got the highest point in the race No. 9 , what is its introduction website?",
        "SQL": "SELECT c.url \nFROM public.\"constructorResults\" cr\nJOIN public.constructors c ON cr.constructorId = c.constructorId\nWHERE cr.raceId = 9\nORDER BY cr.points DESC\nLIMIT 1;",
        "db_id": "formula_1"
    },
    {
        "question": "What's Lucas di Grassi's Q1 result in the race No. 345?",
        "SQL": "SELECT q1 \nFROM public.qualifying \nWHERE \"driverId\" = (SELECT DISTINCT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driver",
        "db_id": "formula_1"
    },
    {
        "question": "For the driver who had the Q2 time as 0:01:15 in race No. 347, where is he from?",
        "SQL": "SELECT d.nationality \nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.q2 = '0:01:15' AND q.raceId = 347;",
        "db_id": "formula_1"
    },
    {
        "question": "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",
        "SQL": "SELECT d.code\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 45 AND q.q3 = '0:01:33';",
        "db_id": "formula_1"
    },
    {
        "question": "What is the actual finish time for Bruce McLaren in the race No.743?",
        "SQL": "The provided context is insufficient to generate the SQL query because it does not contain any information about Bruce McLaren or any driver names associated with driver IDs.",
        "db_id": "formula_1"
    },
    {
        "question": "Who finished second in the San Marino Grand Prix in 2006?",
        "SQL": "SELECT d.forename, d.surname\nFROM results r\nJOIN races ra ON r.raceId = ra.raceId\nJOIN drivers d ON r.driverId = d.driverId\nWHERE ra.year = 2006 AND ra.name = 'San Marino Grand Prix' AND r.positionOrder = 2;",
        "db_id": "formula_1"
    },
    {
        "question": "Show me the season page of year when the race No. 901 took place.",
        "SQL": "SELECT s.*\nFROM races r\nJOIN seasons s ON r.year = s.year\nWHERE r.raceId = 901;",
        "db_id": "formula_1"
    },
    {
        "question": "For the race happened in 2015/11/29, how many drivers did not finish the game?",
        "SQL": "SELECT COUNT(DISTINCT d.\"driverId\") AS non_finishers\nFROM public.results r\nJOIN public.races ra ON r.\"raceId\" = ra.\"raceId\"\nJOIN public.drivers d ON r.\"driverId\" = d.\"driverId\"\nWHERE ra.\"date\" = '2015-11-29' AND r.\"statusId\" != 1;",
        "db_id": "formula_1"
    },
    {
        "question": "For all the drivers who finished the game in race No. 872, who is the youngest?",
        "SQL": "SELECT d.forename, d.surname, d.dob\nFROM public.results r\nJOIN public.drivers d ON r.driverId = d.driverId\nWHERE r.raceId = 872\nORDER BY d.dob DESC\nLIMIT 1;",
        "db_id": "formula_1"
    },
    {
        "question": "Who was the driver that got the best lap time in the race No. 348? Give his full name.",
        "SQL": "SELECT d.forename, d.surname\nFROM public.\"lapTimes\" lt\nJOIN public.drivers d ON lt.\"driverId\" = d.\"driverId\"\nWHERE lt.\"raceId\" = 348\nORDER BY lt.milliseconds ASC\nLIMIT 1;",
        "db_id": "formula_1"
    },
    {
        "question": "For the driver who set the fastest lap speed, what is his nationality?",
        "SQL": "SELECT d.nationality\nFROM public.results r\nJOIN public.drivers d ON r.driverId = d.driverId\nWHERE r.fastestLapSpeed = (\n    SELECT MAX(CAST(fastestLapSpeed AS FLOAT))\n    FROM public.results\n)\nLIMIT 1;",
        "db_id": "formula_1"
    },
    {
        "question": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?",
        "SQL": "The provided context is insufficient to generate the SQL query. The context does not provide information to directly link Paul di Resta's driverId or any specific details about the fastest lap speed for his races. Additionally, the context does not specify which columns or tables contain information about the fastest lap speed necessary to calculate the percentage difference.",
        "db_id": "formula_1"
    },
    {
        "question": "For the drivers who took part in the race in 1983/7/16, what's their race completion rate?",
        "SQL": "SELECT d.driverId, d.forename, d.surname, \n       COUNT(CASE WHEN r.positionText = 'Finished' THEN 1 END)::FLOAT / COUNT(*) AS completion_rate\nFROM races ra\nJOIN results r ON ra.raceId = r.raceId\nJOIN drivers d ON r.driverId = d.driverId\nWHERE ra.date = '1983-07-16'\nGROUP BY d.driverId, d.forename, d.surname;",
        "db_id": "formula_1"
    },
    {
        "question": "Which year was the first Singapore Grand Prix?",
        "SQL": "SELECT MIN(year) AS first_singapore_gp_year\nFROM races\nWHERE name ILIKE '%Singapore Grand Prix%';",
        "db_id": "formula_1"
    },
    {
        "question": "How many races were there in 2005? Name all the races in descending order.",
        "SQL": "SELECT name \nFROM public.races \nWHERE year = 2005 \nORDER BY name DESC;",
        "db_id": "formula_1"
    },
    {
        "question": "List the names of all races that occurred in the earliest recorded year and month.",
        "SQL": "WITH earliest_date AS (\n    SELECT MIN(date) AS min_date\n    FROM public.races\n),\nearliest_races AS (\n    SELECT name\n    FROM public.races\n    WHERE date = (SELECT min_date FROM earliest_date)\n)\nSELECT name\nFROM earliest_races;",
        "db_id": "formula_1"
    },
    {
        "question": "State the name and date of the last round of race in year 1999.",
        "SQL": "SELECT name, date\nFROM public.races\nWHERE year = 1999\nORDER BY round DESC\nLIMIT 1;",
        "db_id": "formula_1"
    },
    {
        "question": "Which year has the most number of races?",
        "SQL": "SELECT year, COUNT(*) AS number_of_races\nFROM public.races\nGROUP BY year\nORDER BY number_of_races DESC\nLIMIT 1;",
        "db_id": "formula_1"
    },
    {
        "question": "Name the races in year 2017 that are not hosted in year 2000.",
        "SQL": "SELECT DISTINCT r1.name \nFROM public.races r1\nWHERE r1.year = 2017\nAND r1.name NOT IN (\n    SELECT r2.name \n    FROM public.races r2 \n    WHERE r2.year = 2000\n);",
        "db_id": "formula_1"
    },
    {
        "question": "In which country was the first European Grand Prix hosted? Name the circuit and location.",
        "SQL": "SELECT c.country, c.name AS circuit_name, c.location\nFROM races r\nJOIN circuits c ON r.\"circuitId\" = c.\"circuitId\"\nWHERE r.name = 'European Grand Prix'\nORDER BY r.year, r.round\nLIMIT 1;",
        "db_id": "formula_1"
    },
    {
        "question": "When was the last f1 season whereby Brands Hatch hosted the British Grand Prix?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information about the circuits, including circuit names like \"Brands Hatch,\" in the given tables.",
        "db_id": "formula_1"
    },
    {
        "question": "How many seasons has Silverstone Circuit hosted the United Kindom grand prix?",
        "SQL": "SELECT COUNT(DISTINCT r.year) AS number_of_seasons\nFROM races r\nJOIN circuits c ON r.\"circuitId\" = c.\"circuitId\"\nWHERE c.name = 'Silverstone Circuit' AND r.name ILIKE '%United Kingdom Grand Prix%';",
        "db_id": "formula_1"
    },
    {
        "question": "Name all drivers in the 2010 Singapore Grand Prix order by their position stands.",
        "SQL": "SELECT d.forename, d.surname\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nJOIN races ra ON r.raceId = ra.raceId\nWHERE ra.year = 2010 AND ra.name = 'Singapore Grand Prix'\nORDER BY r.positionOrder;",
        "db_id": "formula_1"
    },
    {
        "question": "State the driver with the most points scored. Find his full name with that points.",
        "SQL": "SELECT d.forename, d.surname, MAX(ds.points) as max_points\nFROM public.\"driverStandings\" ds\nJOIN public.drivers d ON ds.driverId = d.driverId\nGROUP BY d.forename, d.surname\nORDER BY max_points DESC\nLIMIT 1;",
        "db_id": "formula_1"
    },
    {
        "question": "Name the top 3 drivers and the points they scored in the 2017 Chinese Grand Prix.",
        "SQL": "SELECT d.forename, d.surname, ds.points\nFROM driverStandings ds\nJOIN races r ON ds.raceId = r.raceId\nJOIN drivers d ON ds.driverId = d.driverId\nWHERE r.year = 2017 AND r.name = 'Chinese Grand Prix'\nORDER BY ds.points DESC\nLIMIT 3;",
        "db_id": "formula_1"
    },
    {
        "question": "What is the best lap time recorded? List the driver and race with such recorded lap time.",
        "SQL": "SELECT d.forename, d.surname, r.name AS race_name, lt.time\nFROM public.\"lapTimes\" lt\nJOIN public.drivers d ON lt.driverId = d.driverId\nJOIN public.races r ON lt.raceId = r.raceId\nWHERE lt.milliseconds = (SELECT MIN(milliseconds) FROM public.\"lapTimes\");",
        "db_id": "formula_1"
    },
    {
        "question": "What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix?",
        "SQL": "The provided context is insufficient because the tables given do not contain data about driver names or the specific race names. Therefore, it is not possible to directly generate a SQL query to get the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix without additional information linking driver names to `driverId` and race names to `raceId`.",
        "db_id": "formula_1"
    },
    {
        "question": "Which player has the highest overall rating? Indicate the player's api id.",
        "SQL": "SELECT player_api_id, MAX(overall_rating) AS highest_overall_rating\nFROM public.\"Player_Attributes\"\nGROUP BY player_api_id\nORDER BY highest_overall_rating DESC\nLIMIT 1;",
        "db_id": "european_football_2"
    },
    {
        "question": "What is the height of the tallest player? Indicate his name.",
        "SQL": "SELECT player_name, height\nFROM public.\"Player\"\nORDER BY height DESC\nLIMIT 1;",
        "db_id": "european_football_2"
    },
    {
        "question": "What is the preferred foot when attacking of the player with the lowest potential?",
        "SQL": "SELECT preferred_foot \nFROM public.\"Player_Attributes\" \nORDER BY potential ASC \nLIMIT 1;",
        "db_id": "european_football_2"
    },
    {
        "question": "Among the players with an overall rating between 60 to 65, how many players whose going to be in all of your attack moves instead of defensing?",
        "SQL": "SELECT COUNT(*) \nFROM public.\"Player_Attributes\" \nWHERE overall_rating BETWEEN 60 AND 65 \nAND preferred_foot = 'Right' \nAND attacking_work_rate = 'High' \nAND defensive_work_rate = 'Low';",
        "db_id": "european_football_2"
    },
    {
        "question": "Who are the top 5 players who perform better in crossing actions? Indicate their player id.",
        "SQL": "SELECT player_api_id \nFROM public.\"Player_Attributes\" \nORDER BY crossing DESC \nLIMIT 5;",
        "db_id": "european_football_2"
    },
    {
        "question": "Give the name of the league had the most goals in the 2016 season?",
        "SQL": "SELECT l.name, SUM(m.home_team_goal + m.away_team_goal) AS total_goals\nFROM public.\"Match\" m\nJOIN public.\"League\" l ON m.league_id = l.id\nWHERE m.season = '2016'\nGROUP BY l.name\nORDER BY total_goals DESC\nLIMIT 1;",
        "db_id": "european_football_2"
    },
    {
        "question": "Which home team had lost the fewest matches in the 2016 season?",
        "SQL": "SELECT t.team_long_name AS home_team, COUNT(m.id) AS losses\nFROM public.\"Match\" m\nJOIN public.\"Team\" t ON m.home_team_api_id = t.team_api_id\nWHERE m.season = '2016' AND m.home_team_goal < m.away_team_goal\nGROUP BY t.team_long_name\nORDER BY losses ASC\nLIMIT 1;",
        "db_id": "european_football_2"
    },
    {
        "question": "Indicate the full names of the top 10 players with the highest number of penalties.",
        "SQL": "SELECT P.player_name, SUM(PA.penalties) AS total_penalties\nFROM public.\"Player\" P\nJOIN public.\"Player_Attributes\" PA ON P.player_api_id = PA.player_api_id\nGROUP BY P.player_name\nORDER BY total_penalties DESC\nLIMIT 10;",
        "db_id": "european_football_2"
    },
    {
        "question": "In Scotland Premier League, which away team won the most during the 2010 season?",
        "SQL": "SELECT T.team_long_name AS away_team, COUNT(*) AS wins\nFROM public.\"Match\" M\nJOIN public.\"League\" L ON M.league_id = L.id\nJOIN public.\"Team\" T ON M.away_team_api_id = T.team_api_id\nWHERE L.name = 'Scotland Premier League' AND M.season = '2010/2011' AND M.away_team_goal > M.home_team_goal\nGROUP BY T.team_long_name\nORDER BY wins DESC\nLIMIT 1;",
        "db_id": "european_football_2"
    },
    {
        "question": "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?",
        "SQL": "SELECT t.team_long_name, ta.\"buildUpPlaySpeed\"\nFROM \"Team_Attributes\" ta\nJOIN \"Team\" t ON ta.team_api_id = t.team_api_id\nORDER BY ta.\"buildUpPlaySpeed\" DESC\nLIMIT 4;",
        "db_id": "european_football_2"
    },
    {
        "question": "Give the name of the league had the most matches end as draw in the 2016 season?",
        "SQL": "SELECT l.name, COUNT(*) AS draw_count\nFROM public.\"Match\" m\nJOIN public.\"League\" l ON m.league_id = l.id\nWHERE m.season = '2016'\nAND m.home_team_goal = m.away_team_goal\nGROUP BY l.name\nORDER BY draw_count DESC\nLIMIT 1;",
        "db_id": "european_football_2"
    },
    {
        "question": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.",
        "SQL": "SELECT \n    P.player_name,\n    EXTRACT(YEAR FROM AGE(PA.date::date, P.birthday::date)) AS age\nFROM \n    public.\"Player\" P\nJOIN \n    public.\"Player_Attributes\" PA ON P.player_api_id = PA.player_api_id\nWHERE \n    PA.sprint_speed >= 97\n    AND PA.date BETWEEN '2013-01-01' AND '2015-12-31';",
        "db_id": "european_football_2"
    },
    {
        "question": "Give the name of the league with the highest matches of all time and how many matches were played in the said league.",
        "SQL": "SELECT l.name AS league_name, COUNT(m.id) AS total_matches\nFROM public.\"League\" l\nJOIN public.\"Match\" m ON l.id = m.league_id\nGROUP BY l.name\nORDER BY total_matches DESC\nLIMIT 1;",
        "db_id": "european_football_2"
    },
    {
        "question": "What is the average height of players born between 1990 and 1995?",
        "SQL": "SELECT AVG(height) AS average_height\nFROM public.\"Player\"\nWHERE birthday BETWEEN '1990-01-01' AND '1995-12-31';",
        "db_id": "european_football_2"
    },
    {
        "question": "List the players' api id who had the highest above average overall ratings in 2010.",
        "SQL": "WITH PlayerAverageRating AS (\n    SELECT \n        player_api_id,\n        AVG(overall_rating) AS avg_rating\n    FROM \n        public.\"Player_Attributes\"\n    WHERE \n        date LIKE '2010%'\n    GROUP BY \n        player_api_id\n),\nHighestAboveAverage AS (\n    SELECT \n        player_api_id,\n        overall_rating,\n        avg_rating\n    FROM \n        public.\"Player_Attributes\" pa\n    JOIN \n        PlayerAverageRating par ON pa.player_api_id = par.player_api_id\n    WHERE \n        pa.date LIKE '2010%' AND overall_rating > avg_rating\n)\nSELECT \n    player_api_id\nFROM \n    HighestAboveAverage\nORDER BY \n    overall_rating DESC\nLIMIT 1;",
        "db_id": "european_football_2"
    },
    {
        "question": "Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.",
        "SQL": "SELECT DISTINCT team_fifa_api_id \nFROM public.\"Team_Attributes\"\nWHERE \"buildUpPlaySpeed\" > 50 AND \"buildUpPlaySpeed\" < 60;",
        "db_id": "european_football_2"
    },
    {
        "question": "List the long name of teams with above-average build-up play passing in 2012.",
        "SQL": "SELECT t.team_long_name\nFROM public.\"Team_Attributes\" ta\nJOIN public.\"Team\" t ON ta.team_fifa_api_id = t.team_fifa_api_id\nWHERE ta.date LIKE '2012%' AND ta.\"buildUpPlayPassing\" > (\n    SELECT AVG(\"buildUpPlayPassing\")\n    FROM public.\"Team_Attributes\"\n    WHERE date LIKE '2012%'\n)",
        "db_id": "european_football_2"
    },
    {
        "question": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.",
        "SQL": "SELECT \n    (COUNT(CASE WHEN preferred_foot = 'left' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_left_foot\nFROM \n    public.\"Player_Attributes\" pa\nJOIN \n    public.\"Player\" p ON pa.player_api_id = p.player_api_id\nWHERE \n    SUBSTRING(p.birthday, 1, 4)::INT BETWEEN 1987 AND 1992;",
        "db_id": "european_football_2"
    },
    {
        "question": "List the top 5 leagues in ascending order of the number of goals made in all seasons combined.",
        "SQL": "SELECT l.name AS league_name, SUM(m.home_team_goal + m.away_team_goal) AS total_goals\nFROM public.\"League\" l\nJOIN public.\"Match\" m ON l.id = m.league_id\nGROUP BY l.name\nORDER BY total_goals ASC\nLIMIT 5;",
        "db_id": "european_football_2"
    },
    {
        "question": "Find the average number of long-shot done by Ahmed Samir Farag.",
        "SQL": "The provided context is insufficient to generate the SQL query as there is no table that contains information about a person named Ahmed Samir Farag or associates a person with long-shots.",
        "db_id": "european_football_2"
    },
    {
        "question": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.",
        "SQL": "SELECT p.player_name\nFROM public.\"Player\" p\nJOIN public.\"Player_Attributes\" pa ON p.player_api_id = pa.player_api_id\nWHERE p.height > 180\nGROUP BY p.player_name\nORDER BY AVG(pa.heading_accuracy) DESC\nLIMIT 10;",
        "db_id": "european_football_2"
    },
    {
        "question": "For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing.",
        "SQL": "SELECT T.team_long_name, TA.chanceCreationPassing\nFROM public.\"Team_Attributes\" TA\nJOIN public.\"Team\" T ON TA.team_api_id = T.team_api_id\nWHERE TA.\"buildUpPlayDribblingClass\" = 'Normal'\n  AND TA.\"date\" LIKE '2014%'\n  AND TA.\"chanceCreationPassing\" < (\n    SELECT AVG(\"chanceCreationPassing\")\n    FROM public.\"Team_Attributes\"\n    WHERE \"date\" LIKE '2014%'\n  )\nORDER BY TA.\"chanceCreationPassing\" DESC;",
        "db_id": "european_football_2"
    },
    {
        "question": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.",
        "SQL": "SELECT l.name\nFROM public.\"League\" l\nJOIN public.\"Match\" m ON l.id = m.league_id\nWHERE m.season = '2009/2010'\nGROUP BY l.name\nHAVING AVG(m.home_team_goal) > AVG(m.away_team_goal);",
        "db_id": "european_football_2"
    },
    {
        "question": "What is the short name of the football team Queens Park Rangers?",
        "SQL": "SELECT team_short_name \nFROM public.\"Team\" \nWHERE team_long_name = 'Queens Park Rangers';",
        "db_id": "european_football_2"
    },
    {
        "question": "List the football players with a birthyear of 1970 and a birthmonth of October.",
        "SQL": "SELECT player_name\nFROM public.\"Player\"\nWHERE birthday LIKE '1970-10-%';",
        "db_id": "european_football_2"
    },
    {
        "question": "What is the attacking work rate of the football playerr Franco Zennaro?",
        "SQL": "SELECT pa.attacking_work_rate\nFROM public.\"Player\" p\nJOIN public.\"Player_Attributes\" pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Franco Zennaro';",
        "db_id": "european_football_2"
    },
    {
        "question": "What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?",
        "SQL": "The provided context does not contain information about \"freedom of movement\" specifically related to a team or any metric that can be directly mapped to it. Therefore, it is not possible to generate a SQL query to answer the question based on the given context.",
        "db_id": "european_football_2"
    },
    {
        "question": "What is the football player Francois Affolter header's finishing rate on 18/09/2014?",
        "SQL": "SELECT pa.finishing \nFROM public.\"Player\" p\nJOIN public.\"Player_Attributes\" pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Francois Affolter' AND pa.date = '2014-09-18';",
        "db_id": "european_football_2"
    },
    {
        "question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
        "SQL": "SELECT pa.overall_rating\nFROM public.\"Player\" p\nJOIN public.\"Player_Attributes\" pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Gabriel Tamas' AND pa.date LIKE '2011%';",
        "db_id": "european_football_2"
    },
    {
        "question": "How many matches in the 2015/2016 season were held in Scotland Premier League\n?",
        "SQL": "SELECT COUNT(*) \nFROM public.\"Match\" m\nJOIN public.\"League\" l ON m.league_id = l.id\nWHERE m.season = '2015/2016' \nAND l.name = 'Scotland Premier League';",
        "db_id": "european_football_2"
    },
    {
        "question": "What is the preferred foot when attacking of the youngest football player?",
        "SQL": "SELECT pa.preferred_foot \nFROM public.\"Player_Attributes\" pa\nJOIN public.\"Player\" p ON pa.player_api_id = p.player_api_id\nORDER BY p.birthday DESC\nLIMIT 1;",
        "db_id": "european_football_2"
    },
    {
        "question": "List all the football player with the highest potential score.",
        "SQL": "SELECT player_name\nFROM public.\"Player\" p\nJOIN public.\"Player_Attributes\" pa ON p.player_api_id = pa.player_api_id\nWHERE pa.potential = (SELECT MAX(potential) FROM public.\"Player_Attributes\");",
        "db_id": "european_football_2"
    },
    {
        "question": "Among all the players whose weight is under 130, how many of them preferred foot in attacking is left?",
        "SQL": "SELECT COUNT(DISTINCT pa.player_api_id) AS left_footed_players_under_130\nFROM public.\"Player_Attributes\" pa\nJOIN public.\"Player\" p ON pa.player_api_id = p.player_api_id\nWHERE p.weight < 130 AND pa.preferred_foot = 'left';",
        "db_id": "european_football_2"
    },
    {
        "question": "List the football teams that has a chance creation passing class of Risky. Inidcate its short name only.",
        "SQL": "SELECT T.team_short_name\nFROM public.\"Team\" T\nJOIN public.\"Team_Attributes\" TA ON T.team_api_id = TA.team_api_id\nWHERE TA.\"chanceCreationPassingClass\" = 'Risky';",
        "db_id": "european_football_2"
    },
    {
        "question": "What is the defensive work rate of the football player David Wilson\n?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information about the player \"David Wilson\" in the given tables. To retrieve the defensive work rate, we need to know the `player_api_id` or `player_fifa_api_id` of David Wilson, which would allow us to join the `Player` and `Player_Attributes` tables.",
        "db_id": "european_football_2"
    },
    {
        "question": "When is the birthday of the football player who has the highest overall rating?",
        "SQL": "SELECT p.birthday\nFROM public.\"Player_Attributes\" pa\nJOIN public.\"Player\" p ON pa.player_api_id = p.player_api_id\nORDER BY pa.overall_rating DESC\nLIMIT 1;",
        "db_id": "european_football_2"
    },
    {
        "question": "What is the name of the football league in the country of Netherlands?",
        "SQL": "SELECT l.name \nFROM public.\"League\" l\nJOIN public.\"Country\" c ON l.country_id = c.id\nWHERE c.name = 'Netherlands';",
        "db_id": "european_football_2"
    },
    {
        "question": "Calculate the average home team goal in the 2010/2011 season in the country of Poland.",
        "SQL": "SELECT AVG(home_team_goal) AS average_home_team_goal\nFROM public.\"Match\" m\nJOIN public.\"League\" l ON m.league_id = l.id\nWHERE m.season = '2010/2011'\nAND l.name = 'Poland';",
        "db_id": "european_football_2"
    },
    {
        "question": "Who has the highest average finishing rate between the highest and shortest football player?",
        "SQL": "The provided context is insufficient to generate the SQL query to answer this question. The context does not include instructions or data to calculate the height of each player and compare it. Additionally, it lacks details on how to link the player attributes to the player for calculating the average finishing rate based on the height.",
        "db_id": "european_football_2"
    },
    {
        "question": "Please list player names which are higher than 180.",
        "SQL": "SELECT player_name \nFROM public.\"Player\" \nWHERE height > 180;",
        "db_id": "european_football_2"
    },
    {
        "question": "How many players were born after 1990?",
        "SQL": "SELECT COUNT(*) \nFROM public.\"Player\" \nWHERE birthday > '1990-12-31';",
        "db_id": "european_football_2"
    },
    {
        "question": "How many players whose first names are Adam and weigh more than 170?",
        "SQL": "SELECT COUNT(*) \nFROM public.\"Player\"\nWHERE player_name LIKE 'Adam%' AND weight > 170;",
        "db_id": "european_football_2"
    },
    {
        "question": "Which players had an overall rating of over 80 from 2008 to 2010? Please list player names.",
        "SQL": "SELECT DISTINCT p.player_name\nFROM public.\"Player_Attributes\" pa\nJOIN public.\"Player\" p ON pa.player_api_id = p.player_api_id\nWHERE pa.overall_rating > 80\nAND pa.date BETWEEN '2008-01-01' AND '2010-12-31';",
        "db_id": "european_football_2"
    },
    {
        "question": "What is Aaron Doran's potential score?",
        "SQL": "The provided context does not contain information about specific players like Aaron Doran. Therefore, it is not possible to generate a SQL query to find Aaron Doran's potential score. The context lacks specific data on player names and their corresponding scores.",
        "db_id": "european_football_2"
    },
    {
        "question": "List out of players whose preferred foot is left.",
        "SQL": "SELECT player_name \nFROM public.\"Player\" p\nJOIN public.\"Player_Attributes\" pa ON p.player_api_id = pa.player_api_id\nWHERE pa.preferred_foot = 'left';",
        "db_id": "european_football_2"
    },
    {
        "question": "Please list all team names which the speed class is fast.",
        "SQL": "SELECT t.team_long_name\nFROM public.\"Team\" t\nJOIN public.\"Team_Attributes\" ta ON t.team_api_id = ta.team_api_id\nWHERE ta.\"buildUpPlaySpeedClass\" = 'fast';",
        "db_id": "european_football_2"
    },
    {
        "question": "What is the passing class of CLB team?",
        "SQL": "SELECT t.team_long_name, ta.\"buildUpPlayPassingClass\"\nFROM public.\"Team\" t\nJOIN public.\"Team_Attributes\" ta ON t.team_fifa_api_id = ta.team_fifa_api_id\nWHERE t.team_short_name = 'CLB';",
        "db_id": "european_football_2"
    },
    {
        "question": "Which teams have build up play passing more than 70? Please list their short names.",
        "SQL": "SELECT T.team_short_name \nFROM public.\"Team_Attributes\" TA\nJOIN public.\"Team\" T ON TA.team_api_id = T.team_api_id\nWHERE TA.\"buildUpPlayPassing\" > 70;",
        "db_id": "european_football_2"
    },
    {
        "question": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?",
        "SQL": "SELECT AVG(overall_rating) AS average_overall_rating\nFROM public.\"Player_Attributes\" pa\nJOIN public.\"Player\" p ON pa.player_api_id = p.player_api_id\nWHERE p.height > 170\nAND pa.date BETWEEN '2010-01-01' AND '2015-12-31';",
        "db_id": "european_football_2"
    },
    {
        "question": "Which football player has the shortest height?",
        "SQL": "SELECT player_name, height \nFROM public.\"Player\" \nWHERE height = (SELECT MIN(height) FROM public.\"Player\");",
        "db_id": "european_football_2"
    },
    {
        "question": "Are there more in-patient or outpatient who were male? What is the deviation in percentage?",
        "SQL": "The provided context is insufficient to generate a SQL query because it does not provide information on distinguishing between in-patient and outpatient records. The \"Patient\" table does not have a column that specifies whether a patient is in-patient or outpatient, and no other table in the provided schema contains this information.",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "What is the percentage of female patient were born after 1930?",
        "SQL": "SELECT \n    (COUNT(*) FILTER (WHERE \"SEX\" = 'female' AND \"Birthday\" > '1930-12-31')::FLOAT / COUNT(*)) * 100 AS percentage_female_born_after_1930\nFROM \n    public.\"Patient\";",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "For patient born between Year 1930 to 1940, how many percent of them were inpatient?",
        "SQL": "SELECT \n    (COUNT(CASE WHEN \"Admission\" = 'inpatient' THEN 1 END)::FLOAT / COUNT(*)) * 100 AS percent_inpatient\nFROM \n    public.\"Patient\"\nWHERE \n    EXTRACT(YEAR FROM \"Birthday\") BETWEEN 1930 AND 1940;",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?",
        "SQL": "SELECT \n    SUM(CASE WHEN \"Admission\" = 'outpatient' THEN 1 ELSE 0 END) * 1.0 /\n    NULLIF(SUM(CASE WHEN \"Admission\" = 'inpatient' THEN 1 ELSE 0 END), 0) AS outpatient_to_inpatient_ratio\nFROM \n    public.\"Patient\" \nWHERE \n    \"Diagnosis\" = 'SLE';",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.",
        "SQL": "SELECT p.Diagnosis, l.Date\nFROM public.\"Patient\" p\nJOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\nWHERE p.\"ID\" = 30609;",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "State the sex and birthday of patient ID '163109'. When was the examination taken and what symptom does the patient had.",
        "SQL": "SELECT \n    p.SEX, \n    p.Birthday, \n    e.\"Examination Date\", \n    e.Symptoms\nFROM \n    public.\"Patient\" p\nJOIN \n    public.\"Examination\" e ON p.\"ID\" = e.\"ID\"\nWHERE \n    p.\"ID\" = 163109;",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "List the patient ID, sex and birthday of patient with LDH beyond normal range.",
        "SQL": "SELECT p.\"ID\", p.\"SEX\", p.\"Birthday\"\nFROM public.\"Patient\" p\nJOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\nWHERE l.\"LDH\" > 250 OR l.\"LDH\" < 140;",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "State the ID and age of patient with positive degree of coagulation.",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information about how the \"degree of coagulation\" is represented in the tables. There are columns related to examinations and laboratory tests, but it's unclear which one indicates a positive degree of coagulation.",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.",
        "SQL": "SELECT p.\"ID\", p.\"SEX\", p.\"Diagnosis\"\nFROM public.\"Patient\" p\nJOIN public.\"Examination\" e ON p.\"ID\" = e.\"ID\"\nWHERE e.\"Thrombosis\" = 3;",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "List all patients who were born in 1937 whose total cholesterol was beyond the normal range.",
        "SQL": "SELECT p.\"ID\", p.\"SEX\", p.\"Birthday\", l.\"T-CHO\"\nFROM public.\"Patient\" p\nJOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\nWHERE EXTRACT(YEAR FROM p.\"Birthday\") = 1937\nAND (l.\"T-CHO\" < 125 OR l.\"T-CHO\" > 200);",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "For patient with albumin level lower than 3.5, list their ID, sex and diagnosis.",
        "SQL": "SELECT p.\"ID\", p.\"SEX\", p.\"Diagnosis\"\nFROM public.\"Patient\" p\nJOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\nWHERE l.\"ALB\" < 3.5;",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "What is the percentage of female patient had total protein not within the normal range?",
        "SQL": "SELECT \n    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM public.\"Patient\" p WHERE p.\"SEX\" = 'Female')) AS percentage_of_female_patients_out_of_range\nFROM \n    public.\"Patient\" p\nJOIN \n    public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\nWHERE \n    p.\"SEX\" = 'Female' AND (l.\"TP\" < 6.4 OR l.\"TP\" > 8.3);",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "For in-patient age 50 and above, what is their average anti-cardiolipin antibody (IgG) concentration?",
        "SQL": "SELECT AVG(e.\"aCL IgG\") AS average_aCL_IgG\nFROM public.\"Examination\" e\nJOIN public.\"Patient\" p ON e.\"ID\" = p.\"ID\"\nWHERE p.\"Admission\" = 'In-Patient' \nAND EXTRACT(YEAR FROM AGE(p.\"Birthday\")) >= 50;",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?",
        "SQL": "SELECT COUNT(*) \nFROM public.\"Patient\"\nWHERE SEX = 'Female' \nAND \"First Date\" BETWEEN '1997-01-01' AND '1997-12-31'\nAND \"Admission\" = 'Outpatient Clinic Immediately Followed'",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "What was the age of the youngest patient when they initially arrived at the hospital?",
        "SQL": "SELECT MIN(EXTRACT(YEAR FROM AGE(\"First Date\", \"Birthday\"))) AS youngest_age\nFROM public.\"Patient\";",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "How many of the patients with the most serious thrombosis cases examined in 1997 are women?",
        "SQL": "SELECT COUNT(DISTINCT p.\"ID\") AS female_patients_with_serious_thrombosis\nFROM public.\"Examination\" e\nJOIN public.\"Patient\" p ON e.\"ID\" = p.\"ID\"\nWHERE e.\"Thrombosis\" = (SELECT MAX(\"Thrombosis\") FROM public.\"Examination\" WHERE EXTRACT(YEAR FROM \"Examination Date\") = 1997)\nAND EXTRACT(YEAR FROM e.\"Examination Date\") = 1997\nAND p.\"SEX\" = 'Female';",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "What is the age gap between the youngest and oldest patient with a normal triglyceride recorded?",
        "SQL": "SELECT MAX(age) - MIN(age) AS age_gap\nFROM (\n    SELECT EXTRACT(YEAR FROM AGE(l.\"Date\", p.\"Birthday\")) AS age\n    FROM public.\"Laboratory\" l\n    JOIN public.\"Patient\" p ON l.\"ID\" = p.\"ID\"\n    WHERE l.\"TG\" BETWEEN 150 AND 199\n) AS patient_ages;",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.",
        "SQL": "SELECT e.\"Symptoms\", e.\"Diagnosis\"\nFROM public.\"Examination\" e\nJOIN public.\"Patient\" p ON e.\"ID\" = p.\"ID\"\nORDER BY p.\"Birthday\" DESC\nLIMIT 1;",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "For the year that concluded on December 31, 1998, how many male patients on average were tested in the lab each month?",
        "SQL": "SELECT AVG(monthly_count) AS average_male_patients_per_month\nFROM (\n    SELECT EXTRACT(MONTH FROM l.\"Date\") AS month, COUNT(DISTINCT l.\"ID\") AS monthly_count\n    FROM public.\"Laboratory\" l\n    JOIN public.\"Patient\" p ON l.\"ID\" = p.\"ID\"\n    WHERE p.\"SEX\" = 'Male' AND l.\"Date\" BETWEEN '1998-01-01' AND '1998-12-31'\n    GROUP BY EXTRACT(MONTH FROM l.\"Date\")\n) AS monthly_counts;",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
        "SQL": "SELECT \n    p.\"ID\",\n    l.\"Date\" AS \"Laboratory Work Date\",\n    EXTRACT(YEAR FROM AGE(p.\"First Date\", p.\"Birthday\")) AS \"Age at First Date\"\nFROM \n    public.\"Patient\" p\nJOIN \n    public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\nWHERE \n    p.\"Diagnosis\" = 'SJS'\nORDER BY \n    p.\"Birthday\" ASC, l.\"Date\" DESC\nLIMIT 1;",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "What is the ratio of male to female patients among all those with abnormal uric acid counts?",
        "SQL": "SELECT \n    (SELECT COUNT(*) FROM public.\"Patient\" p\n     JOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\n     WHERE p.\"SEX\" = 'Male' AND (l.\"UA\" < 3.5 OR l.\"UA\" > 7.2))::FLOAT /\n    NULLIF((SELECT COUNT(*) FROM public.\"Patient\" p\n     JOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\n     WHERE p.\"SEX\" = 'Female' AND (l.\"UA\" < 2.6 OR l.\"UA\" > 6.0)), 0) AS male_to_female_ratio",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "How many patients hadn't undergone a medical examination until at least a year following their initial hospital visit?",
        "SQL": "SELECT COUNT(DISTINCT p.\"ID\") AS num_patients\nFROM public.\"Patient\" p\nLEFT JOIN public.\"Examination\" e ON p.\"ID\" = e.\"ID\" AND e.\"Examination Date\" <= p.\"First Date\" + INTERVAL '1 year'\nWHERE e.\"ID\" IS NULL;",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "How many underage patients were examined during the course of the three-year period from 1990 to 1993?",
        "SQL": "The provided context does not include the necessary information to determine the age of the patients at the time of their examination. Specifically, we need the birth date of the patients and the examination date to calculate if they were underage (typically under 18). Therefore, it is not possible to generate the SQL query without additional context on how to define \"underage\" based on the given tables.",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "How many male patients have elevated total bilirubin count?",
        "SQL": "SELECT COUNT(DISTINCT p.\"ID\") AS male_patients_with_elevated_bilirubin\nFROM public.\"Patient\" p\nJOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\nWHERE p.\"SEX\" = 'Male' AND l.\"T-BIL\" > 1.2;",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "What is the most common illness that doctors identified among the patients whose lab work was done between 1/1/1985, and 12/31/1995?",
        "SQL": "SELECT p.\"Diagnosis\", COUNT(*) AS diagnosis_count\nFROM public.\"Patient\" p\nJOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\nWHERE l.\"Date\" BETWEEN '1985-01-01' AND '1995-12-31'\nGROUP BY p.\"Diagnosis\"\nORDER BY diagnosis_count DESC\nLIMIT 1;",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "What is the average age of patients as of year 1999 examined in the laboratory for the October of the year 1991?",
        "SQL": "SELECT AVG(EXTRACT(YEAR FROM AGE('1999-01-01', p.\"Birthday\"))) AS average_age\nFROM public.\"Patient\" p\nJOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\nWHERE l.\"Date\" BETWEEN '1991-10-01' AND '1991-10-31';",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?",
        "SQL": "SELECT \n    EXTRACT(YEAR FROM AGE(e.\"Examination Date\", p.\"Birthday\")) AS age_at_examination,\n    l.\"HGB\" AS hemoglobin_count,\n    e.\"Diagnosis\"\nFROM \n    public.\"Patient\" p\nJOIN \n    public.\"Examination\" e ON p.\"ID\" = e.\"ID\"\nJOIN \n    public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\" AND e.\"Examination Date\" = l.\"Date\"\nORDER BY \n    l.\"HGB\" DESC\nLIMIT 1;",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "What was the anti-nucleus antibody concentration level for the patient id 3605340 on 1996/12/2?",
        "SQL": "SELECT \"ANA\" \nFROM public.\"Examination\" \nWHERE \"ID\" = 3605340 AND \"Examination Date\" = '1996-12-02';",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "Was the total cholesterol status for the patient id 2927464 on 1995-9-4 at the normal level?",
        "SQL": "SELECT \"T-CHO\"\nFROM public.\"Laboratory\"\nWHERE \"ID\" = 2927464 AND \"Date\" = '1995-09-04';",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "What was the gender of the first AORTITIS diagnosed patient?",
        "SQL": "SELECT p.\"SEX\"\nFROM public.\"Patient\" p\nWHERE p.\"Diagnosis\" = 'AORTITIS'\nORDER BY p.\"First Date\" ASC\nLIMIT 1;",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?",
        "SQL": "SELECT e.\"aCL IgG\", e.\"aCL IgM\", e.\"aCL IgA\"\nFROM public.\"Examination\" e\nJOIN public.\"Patient\" p ON e.\"ID\" = p.\"ID\"\nWHERE p.\"Diagnosis\" = 'SLE' AND p.\"First Date\" = '1994-02-19' AND e.\"Examination Date\" = '1993-11-12';",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "Was the patient a man or a women whose ALT glutamic pylvic transaminase status got 9 on 1992-6-12?",
        "SQL": "SELECT p.SEX\nFROM public.\"Patient\" p\nJOIN public.\"Laboratory\" l ON p.ID = l.ID\nWHERE l.\"GPT\" = 9 AND l.\"Date\" = '1992-06-12';",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "For the patient who got the laboratory test of uric acid level as 8.4 on 1991-10-21, how old was he/she at that time?",
        "SQL": "SELECT EXTRACT(YEAR FROM AGE(l.\"Date\", p.\"Birthday\")) AS age_at_test\nFROM public.\"Laboratory\" l\nJOIN public.\"Patient\" p ON l.\"ID\" = p.\"ID\"\nWHERE l.\"UA\" = 8.4 AND l.\"Date\" = '1991-10-21';",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "For the patient who first came to the hospital on 1991/6/13 who was diagnosed with SJS, what is the total number of his/her Laboratory tests in 1995?",
        "SQL": "SELECT COUNT(*) AS total_tests\nFROM public.\"Laboratory\" l\nJOIN public.\"Patient\" p ON l.\"ID\" = p.\"ID\"\nWHERE p.\"First Date\" = '1991-06-13'\n  AND p.\"Diagnosis\" = 'SJS'\n  AND EXTRACT(YEAR FROM l.\"Date\") = 1995;",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "For the patient who was diagnosed SLE on 1997/1/27, what was his/her original diagnose when he/she came to the hospital for the first time?",
        "SQL": "SELECT \"Description\" \nFROM public.\"Patient\" \nWHERE \"ID\" = (\n    SELECT \"ID\" \n    FROM public.\"Examination\" \n    WHERE \"Diagnosis\" = 'SLE' \n    AND \"Examination Date\" = '1997-01-27'\n)",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "For the patient whose birthday was 1959/3/1, what symptoms did he/she have during the examination on 1993/9/27?",
        "SQL": "SELECT e.Symptoms\nFROM public.\"Patient\" p\nJOIN public.\"Examination\" e ON p.ID = e.ID\nWHERE p.Birthday = '1959-03-01' AND e.\"Examination Date\" = '1993-09-27';",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?",
        "SQL": "SELECT \n    ((MAX(\"T-CHO\") FILTER (WHERE EXTRACT(MONTH FROM \"Date\") = 11) - MAX(\"T-CHO\") FILTER (WHERE EXTRACT(MONTH FROM \"Date\") = 12))::FLOAT / NULLIF(MAX(\"T-CHO\") FILTER (WHERE EXTRACT(MONTH FROM \"Date\") = 11), 0)) * 100 AS decrease_rate\nFROM \n    public.\"Laboratory\" \nWHERE \n    \"ID\" = (SELECT \"ID\" FROM public.\"Patient\" WHERE \"Birthday\" = '1959-02-18')\n    AND EXTRACT(YEAR FROM \"Date\") = 1981;",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "Lists all patients by ID who were diagnosed with Behcet's and had their exams between 01/01/197 and 12/31/1997.",
        "SQL": "SELECT DISTINCT p.\"ID\"\nFROM public.\"Patient\" p\nJOIN public.\"Examination\" e ON p.\"ID\" = e.\"ID\"\nWHERE p.\"Diagnosis\" = 'Behcet''s'\nAND e.\"Examination Date\" BETWEEN '1970-01-01' AND '1997-12-31';",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID.",
        "SQL": "SELECT DISTINCT e.\"ID\"\nFROM public.\"Examination\" e\nJOIN public.\"Laboratory\" l ON e.\"ID\" = l.\"ID\"\nWHERE e.\"Examination Date\" BETWEEN '1987-07-06' AND '1996-01-31'\nAND l.\"GPT\" > 30\nAND l.\"ALB\" < 4;",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "How many female patients born in 1964 were admitted to the hospital? List them by ID.",
        "SQL": "SELECT \"ID\"\nFROM public.\"Patient\"\nWHERE \"SEX\" = 'female' AND EXTRACT(YEAR FROM \"Birthday\") = 1964 AND \"Admission\" IS NOT NULL;",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?",
        "SQL": "The provided context is insufficient to generate the SQL query because the degree of thrombosis level is not specified in the table definitions, and the specific string indicating \"S\" for ANA pattern is not provided. Additionally, the calculation for \"anti-Cardiolip in antibody (IgM) 20% higher than average\" requires knowledge of the average value which is not directly available in the context.",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "What percentage of patients with a proteinuria level within the normal range have a uric acid level below the normal range?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information about the normal range for proteinuria and uric acid levels.",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "What percentage of male patients who first presented to the hospital in 1981 were diagnosed with BEHCET?",
        "SQL": "SELECT \n    (COUNT(CASE WHEN Diagnosis = 'BEHCET' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_of_male_patients\nFROM \n    public.\"Patient\"\nWHERE \n    SEX = 'Male' \n    AND EXTRACT(YEAR FROM \"First Date\") = 1981;",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.",
        "SQL": "SELECT DISTINCT p.ID\nFROM public.\"Patient\" p\nJOIN public.\"Laboratory\" l ON p.ID = l.ID\nWHERE p.Description IS NOT NULL\nAND l.Date BETWEEN '1991-10-01' AND '1991-10-31'\nAND l.\"T-BIL\" BETWEEN 0.1 AND 1.2;",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "Excluding all P only ANA Pattern patients, how many of the remainder are women born between 1980 and 1989?",
        "SQL": "SELECT COUNT(DISTINCT e.ID) \nFROM public.\"Examination\" e\nJOIN public.\"Patient\" p ON e.ID = p.ID\nWHERE e.\"ANA Pattern\" != 'P'\nAND p.\"SEX\" = 'female'\nAND p.\"Birthday\" BETWEEN '1980-01-01' AND '1989-12-31';",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "What sex is the patient who in a medical examination was diagnosed with PSS and in a laboratory examination had a blood level of C-reactive protein de 2+, createnine 1 and LDH 123?",
        "SQL": "SELECT p.SEX\nFROM public.\"Patient\" p\nJOIN public.\"Examination\" e ON p.ID = e.ID\nJOIN public.\"Laboratory\" l ON p.ID = l.ID\nWHERE e.Diagnosis = 'PSS'\n  AND l.\"CRP\" = '2+'\n  AND l.\"CRE\" = 1\n  AND l.\"LDH\" = 123;",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE?",
        "SQL": "SELECT AVG(l.\"ALB\") AS average_albumin_level\nFROM public.\"Laboratory\" l\nJOIN public.\"Patient\" p ON l.\"ID\" = p.\"ID\"\nWHERE p.\"SEX\" = 'Female' AND l.\"PLT\" > 400 AND p.\"Diagnosis\" = 'SLE';",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "What is the most common sign of patients with SLE disease?",
        "SQL": "The provided context is insufficient to generate a SQL query for the question because there is no information about SLE disease or specific signs/symptoms associated with it in the given tables.",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "When was the medical information on patient number 48473 first documented, and what disease did she have?",
        "SQL": "SELECT \"First Date\", \"Diagnosis\"\nFROM public.\"Patient\"\nWHERE \"ID\" = 48473;",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "How many female patients were given an APS diagnosis?",
        "SQL": "SELECT COUNT(*) AS Female_APS_Patients_Count\nFROM public.\"Patient\"\nWHERE \"SEX\" = 'Female' AND \"Diagnosis\" = 'APS';",
        "db_id": "thrombosis_prediction"
    },
    {
        "question": "What's Angela Sanders's major?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no direct information available about Angela Sanders or her major in the given tables. The context does not include any reference to a table or columns that would store members' names alongside their majors.",
        "db_id": "student_club"
    },
    {
        "question": "How many students in the Student_Club are from the College of Engineering?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no table named `Student_Club` and no table that directly associates students with their colleges or majors. The `major` table contains information about majors and colleges, but there is no clear link between students and the College of Engineering. Additional context or tables linking students to their majors or colleges would be needed.",
        "db_id": "student_club"
    },
    {
        "question": "Please list the full names of the students in the Student_Club that come from the Art and Design Department.",
        "SQL": "The provided context is insufficient because there is no table named `Student_Club` or any direct reference to student club membership or the Art and Design Department. The `major` and `member` tables could potentially be relevant, but without specific information linking members to the Art and Design Department, a query cannot be generated.",
        "db_id": "student_club"
    },
    {
        "question": "How many students of the Student_Club have attended the event \"Women's Soccer\"?",
        "SQL": "It can't be generated because there is no table named \"Student_Club\" in the provided context. Additionally, the \"attendance\" and \"event\" tables do not have a direct connection to identify students belonging to a specific club, nor is there a specific event name \"Women's Soccer\" mentioned in the context.",
        "db_id": "student_club"
    },
    {
        "question": "Please list the phone numbers of the students from the Student_Club that has attended the event \"Women's Soccer\".",
        "SQL": "SELECT m.phone\nFROM public.attendance a\nJOIN public.member m ON a.link_to_member = m.member_id\nJOIN public.event e ON a.link_to_event = e.event_id\nWHERE e.event_name = 'Women''s Soccer';",
        "db_id": "student_club"
    },
    {
        "question": "Among the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size?",
        "SQL": "SELECT COUNT(*) \nFROM member \nJOIN attendance ON member.member_id = attendance.link_to_member\nJOIN event ON attendance.link_to_event = event.event_id\nWHERE event.event_name = 'Women''s Soccer' AND member.t_shirt_size = 'M';",
        "db_id": "student_club"
    },
    {
        "question": "What is the event that has the highest attendance of the students from the Student_Club?",
        "SQL": "It is not possible to generate the SQL query because the provided context does not include a table named \"Student_Club\" or any information about identifying students or members in the \"attendance\" or \"event\" tables. Additionally, there is no direct link between attendance records and event details that would specify which events are attended by students or members of a \"Student_Club.\"",
        "db_id": "student_club"
    },
    {
        "question": "Which college is the vice president of the Student_Club from?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information on the structure or data of a \"Student_Club\" table or any table that contains a record of positions such as \"vice president\" associated with a college.",
        "db_id": "student_club"
    },
    {
        "question": "Please list the event names of all the events attended by Maya Mclean.",
        "SQL": "SELECT e.event_name\nFROM public.event e\nJOIN public.attendance a ON e.event_id = a.link_to_event\nJOIN public.member m ON a.link_to_member = m.member_id\nWHERE m.first_name = 'Maya' AND m.last_name = 'Mclean';",
        "db_id": "student_club"
    },
    {
        "question": "How many events of the Student_Club did Sacha Harrison attend in 2019?",
        "SQL": "The provided context is insufficient because there is no information about the \"Student_Club\" or the specific attendance records related to \"Sacha Harrison\" in the available tables. The tables do not contain information linking members to events with their names or specific club details.",
        "db_id": "student_club"
    },
    {
        "question": "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?",
        "SQL": "SELECT COUNT(DISTINCT e.event_id) AS meeting_count\nFROM event e\nJOIN attendance a ON e.event_id = a.link_to_event\nGROUP BY e.event_id, e.type\nHAVING COUNT(DISTINCT a.link_to_member) > 10 AND e.type = 'meeting';",
        "db_id": "student_club"
    },
    {
        "question": "List all the names of events that had an attendance of over 20 students but were not fundraisers.",
        "SQL": "SELECT e.event_name \nFROM public.event e\nJOIN public.attendance a ON e.event_id = a.link_to_event\nWHERE e.type != 'Fundraiser'\nGROUP BY e.event_name\nHAVING COUNT(a.link_to_member) > 20;",
        "db_id": "student_club"
    },
    {
        "question": "What is the average attendance of meetings in 2020?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information on how attendance is recorded in relation to events, such as the number of attendees per event or how to filter events held in 2020. Additional information or tables are needed to compute the average attendance of meetings in 2020.",
        "db_id": "student_club"
    },
    {
        "question": "What is the most expensive item that was spent in support of club events?",
        "SQL": "SELECT expense_description, MAX(cost) as max_cost\nFROM public.expense\nJOIN public.budget ON public.expense.link_to_budget = public.budget.budget_id\nWHERE public.budget.category = 'club events'\nGROUP BY expense_description\nORDER BY max_cost DESC\nLIMIT 1;",
        "db_id": "student_club"
    },
    {
        "question": "How many members of the Student_Club have majored Environmental Engineering?\n",
        "SQL": "The provided context is insufficient because there is no information available about the Student_Club or its members' association with the major of Environmental Engineering. The `member` table does not contain a clear relationship with the `major` table that would allow us to determine the major of each member.",
        "db_id": "student_club"
    },
    {
        "question": "List the full name of all the members of the Student_Club who attended the \"Laugh Out Loud\" event.",
        "SQL": "SELECT m.first_name || ' ' || m.last_name AS full_name\nFROM attendance a\nJOIN event e ON a.link_to_event = e.event_id\nJOIN member m ON a.link_to_member = m.member_id\nWHERE e.event_name = 'Laugh Out Loud';",
        "db_id": "student_club"
    },
    {
        "question": "List the last name of all the students who majored Law and Constitutional Studies. \n",
        "SQL": "The provided context is insufficient because there is no information available regarding the majors of students or a direct link between the \"major\" table and the \"member\" table that indicates what major a student is pursuing.",
        "db_id": "student_club"
    },
    {
        "question": "What county did Sherri Ramsey grew up?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information about Sherri Ramsey or any related data in the given tables.",
        "db_id": "student_club"
    },
    {
        "question": "What college offers the major that Tyler Hewitt took?",
        "SQL": "SELECT m.college\nFROM public.member mem\nJOIN public.major m ON mem.link_to_major = m.major_id\nWHERE mem.first_name = 'Tyler' AND mem.last_name = 'Hewitt';",
        "db_id": "student_club"
    },
    {
        "question": "What is the amount of the funds that the Vice President received?",
        "SQL": "SELECT SUM(amount) AS total_amount_received\nFROM public.income\nWHERE source = 'Vice President';",
        "db_id": "student_club"
    },
    {
        "question": "How much did the Student_Club members spend on food in September Meeting?",
        "SQL": "It can't be generated because the provided context does not specify which table or column contains information about the \"Student_Club,\" \"food,\" or \"September Meeting.\" Additional details are needed to create an accurate query.",
        "db_id": "student_club"
    },
    {
        "question": "What city and state did the President of the Student_Club grow up?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information about the \"President of the Student_Club\" or any related details that can link to their city and state. The available tables do not contain relevant information about the Student_Club or any position related to a president.",
        "db_id": "student_club"
    },
    {
        "question": "List the full name of the Student_Club members that grew up in Illinois state.",
        "SQL": "SELECT first_name || ' ' || last_name AS full_name\nFROM public.member\nJOIN public.zip_code ON public.member.zip = public.zip_code.zip_code\nWHERE public.zip_code.state = 'Illinois';",
        "db_id": "student_club"
    },
    {
        "question": "How much did the Student_Club members spend on advertisement in September Meeting?",
        "SQL": "It can't be generated because the provided context does not include information on the \"Student_Club,\" \"advertisement,\" or \"September Meeting.\" Additionally, there is no direct relationship between expenses and specific events or categories such as advertisement or meetings.",
        "db_id": "student_club"
    },
    {
        "question": "What department offers the major that Pierce and Guidi took?",
        "SQL": "SELECT m.first_name, m.last_name, maj.department\nFROM public.member m\nJOIN public.major maj ON m.link_to_major = maj.major_id\nWHERE (m.first_name = 'Pierce' AND m.last_name = 'Guidi');",
        "db_id": "student_club"
    },
    {
        "question": "What is the total budgeted amount for all category in \"October Speaker\" event?",
        "SQL": "SELECT SUM(amount) AS total_budgeted_amount\nFROM public.budget\nWHERE link_to_event = (\n    SELECT event_id\n    FROM public.event\n    WHERE event_name = 'October Speaker'\n);",
        "db_id": "student_club"
    },
    {
        "question": "Was each expense in October Meeting on October 8, 2019 approved?",
        "SQL": "SELECT expense_id, expense_description, approved\nFROM public.expense\nWHERE expense_date = '2019-10-08' AND expense_description = 'October Meeting';",
        "db_id": "student_club"
    },
    {
        "question": "Calculate the total average cost that Elijah Allen spent in the events on September and October.",
        "SQL": "The provided context is insufficient to generate the query because it does not contain information about the specific member names linked to expenses, nor does it provide a way to filter expenses by month. Additional details about member names and date filtering are needed to accurately calculate the total average cost for Elijah Allen.",
        "db_id": "student_club"
    },
    {
        "question": "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information about the year associated with the events in the `budget` table, nor a direct link between the `event` table and the `budget` table that specifies the year or the organization (e.g., \"Student_Club\") responsible for the events.",
        "db_id": "student_club"
    },
    {
        "question": "Give the location for \"Spring Budget Review\".",
        "SQL": "SELECT location \nFROM public.event \nWHERE event_name = 'Spring Budget Review';",
        "db_id": "student_club"
    },
    {
        "question": "What was the cost for the \"Posters\" on 2019/9/4?",
        "SQL": "SELECT cost \nFROM public.expense \nWHERE expense_description = 'Posters' AND expense_date = '2019/9/4';",
        "db_id": "student_club"
    },
    {
        "question": "With the biggest budget for the \"Food\", what was the remaining of it?",
        "SQL": "SELECT remaining \nFROM public.budget \nWHERE category = 'Food' \nORDER BY amount DESC \nLIMIT 1;",
        "db_id": "student_club"
    },
    {
        "question": "What was the notes of the fundraising on 2019/9/14?",
        "SQL": "SELECT notes \nFROM public.event \nWHERE event_name = 'fundraising' AND event_date = '2019/9/14';",
        "db_id": "student_club"
    },
    {
        "question": "How many majors are there in \"College of Humanities and Social Sciences\"?",
        "SQL": "SELECT COUNT(*) AS total_majors\nFROM public.major\nWHERE college = 'College of Humanities and Social Sciences';",
        "db_id": "student_club"
    },
    {
        "question": "Tell the phone number of \"Carlo Jacobs\".",
        "SQL": "SELECT phone \nFROM public.member \nWHERE first_name = 'Carlo' AND last_name = 'Jacobs';",
        "db_id": "student_club"
    },
    {
        "question": "Tell the hometown county for \"Adela O'Gallagher\".",
        "SQL": "The provided context is insufficient because there is no direct link between the \"superhero\" table, which contains the name \"Adela O'Gallagher\", and the \"zip_code\" table, which contains county information. There is no information about which table or column links a person's name to their hometown or county.",
        "db_id": "student_club"
    },
    {
        "question": "For all the budgets for \"November Meeting\", how many of them had exceeded the budget?",
        "SQL": "SELECT COUNT(*) AS exceeded_budget_count\nFROM budget\nWHERE link_to_event = 'November Meeting' AND spent > amount;",
        "db_id": "student_club"
    },
    {
        "question": "Provide the total number of the budget amount for \"September Speaker\" event.",
        "SQL": "SELECT SUM(amount) AS total_budget_amount\nFROM public.budget\nWHERE link_to_event = (\n    SELECT event_id\n    FROM public.event\n    WHERE event_name = 'September Speaker'\n);",
        "db_id": "student_club"
    },
    {
        "question": "What is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no direct relationship established between the `event` table and any table containing information about purchases or products related to \"Post Cards, Posters\" on the specified date.",
        "db_id": "student_club"
    },
    {
        "question": "What was Brent Thomason's major?",
        "SQL": "SELECT m.major_name \nFROM member mb\nJOIN major m ON mb.link_to_major = m.major_id\nWHERE mb.first_name = 'Brent' AND mb.last_name = 'Thomason';",
        "db_id": "student_club"
    },
    {
        "question": "For all the club members from \"Business\" major, how many of them wear medium size t-shirt?",
        "SQL": "SELECT COUNT(*) \nFROM public.member m\nJOIN public.major maj ON m.link_to_major = maj.major_id\nWHERE maj.major_name = 'Business' AND m.t_shirt_size = 'Medium';",
        "db_id": "student_club"
    },
    {
        "question": "What's Christof Nielson's zip code type?",
        "SQL": "The provided context does not contain information about Christof Nielson or an association between individuals and the zip_code table. Therefore, it is insufficient to generate the SQL query.",
        "db_id": "student_club"
    },
    {
        "question": "State the major name for the Vice President of the club.",
        "SQL": "SELECT major.major_name\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE member.position = 'Vice President';",
        "db_id": "student_club"
    },
    {
        "question": "Where is the hometown state for \"Sacha Harrison\"?",
        "SQL": "The provided context is insufficient to determine the hometown state for \"Sacha Harrison\" as there is no information or table related to individuals and their hometown states.",
        "db_id": "student_club"
    },
    {
        "question": "Which department was the President of the club in?",
        "SQL": "The provided context does not contain sufficient information to determine which department the President of the club was in. The `member` table contains a \"position\" column, but there is no information linking a \"President\" position to a specific department. Additional data would be needed to answer this question.",
        "db_id": "student_club"
    },
    {
        "question": "State the date Connor Hilton paid his/her dues.",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no direct information linking a member's name (e.g., Connor Hilton) to the payment of dues. We would need a table that associates members with their payments or dues, which is not available in the current context.",
        "db_id": "student_club"
    },
    {
        "question": "Who was the first one paid his/her dues? Tell the full name.",
        "SQL": "SELECT m.first_name, m.last_name\nFROM public.income i\nJOIN public.member m ON i.link_to_member = m.member_id\nORDER BY i.date_received ASC\nLIMIT 1;",
        "db_id": "student_club"
    },
    {
        "question": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?",
        "SQL": "The provided context is insufficient to generate the SQL query. The context does not include information about the events named \"Yearly Kickoff\" meeting and \"October Meeting\" within the `budget` table or any related table that could help identify these specific events and their associated budgets.",
        "db_id": "student_club"
    },
    {
        "question": "What percentage was the budget for Parking to the total budget for the \"November Speaker\"?",
        "SQL": "SELECT \n    (SUM(CASE WHEN category = 'Parking' THEN amount ELSE 0 END) * 100.0 / SUM(amount)) AS percentage_parking_budget\nFROM \n    public.budget\nWHERE \n    event_status = 'November Speaker';",
        "db_id": "student_club"
    },
    {
        "question": "What is the total cost of the pizzas for all the events?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information about pizzas or a related product category in the given table schemas.",
        "db_id": "student_club"
    },
    {
        "question": "How many gas stations in CZE has Premium gas?",
        "SQL": "It can't be generated. The provided context does not contain information about the types of gas (such as \"Premium\") available at each gas station. The context only includes tables related to gas stations and transactions, but no details about gas types.",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "What is the ratio of customers who pay in EUR against customers who pay in CZK?",
        "SQL": "SELECT \n    (SELECT COUNT(*) FROM public.customers WHERE \"Currency\" = 'EUR')::FLOAT /\n    (SELECT COUNT(*) FROM public.customers WHERE \"Currency\" = 'CZK')::FLOAT AS eur_to_czk_ratio;",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "In 2012, who had the least consumption in LAM?",
        "SQL": "It can't be generated. The provided context does not include information about regions or specific consumption data that can be linked to \"LAM\" for the year 2012. The `yearmonth` table includes \"CustomerID,\" \"Date,\" and \"Consumption,\" but there is no explicit mention of \"LAM\" or a method to filter by region or location.",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "What was the average monthly consumption of customers in SME for the year 2013?",
        "SQL": "SELECT AVG(y.Consumption) AS Average_Monthly_Consumption\nFROM yearmonth y\nJOIN customers c ON y.CustomerID = c.CustomerID\nWHERE c.Segment = 'SME' AND y.Date LIKE '2013%'",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "Which customers, paying in CZK, consumed the most gas in 2011?",
        "SQL": "SELECT y.CustomerID, SUM(y.Consumption) AS TotalConsumption\nFROM yearmonth y\nJOIN customers c ON y.CustomerID = c.CustomerID\nWHERE c.Currency = 'CZK' AND y.Date LIKE '2011%'\nGROUP BY y.CustomerID\nORDER BY TotalConsumption DESC\nLIMIT 1;",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "How many customers in KAM had a consumption of less than 30,000 for the year 2012?",
        "SQL": "SELECT COUNT(DISTINCT y.CustomerID) AS CustomerCount\nFROM yearmonth y\nJOIN customers c ON y.CustomerID = c.CustomerID\nWHERE c.Segment = 'KAM' \n  AND y.Date LIKE '2012%' \n  AND y.Consumption < 30000;",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?",
        "SQL": "SELECT \n    c.Currency, \n    SUM(y.Consumption) AS TotalConsumption\nFROM \n    public.yearmonth y\nJOIN \n    public.customers c ON y.CustomerID = c.CustomerID\nWHERE \n    y.Date LIKE '2012%'\nGROUP BY \n    c.Currency;",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "Which year recorded the most gas use paid in EUR?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information about the currency used in transactions or any indication of whether the amounts in the \"transactions_1k\" table are in EUR. Additional context or a specific column indicating the currency is required to answer this question.",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "Which segment had the least consumption?",
        "SQL": "SELECT c.Segment, SUM(y.Consumption) AS TotalConsumption\nFROM public.yearmonth y\nJOIN public.customers c ON y.CustomerID = c.CustomerID\nGROUP BY c.Segment\nORDER BY TotalConsumption ASC\nLIMIT 1;",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "Which year recorded the most consumption of gas paid in CZK?",
        "SQL": "The provided context is insufficient to generate the SQL query. There is no information regarding the currency in which the gas was paid (e.g., CZK) in the available tables. Additionally, the context does not specify how to associate transactions with currency types.",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "What was the gas consumption peak month for SME customers in 2013?",
        "SQL": "SELECT SUBSTRING(y.\"Date\", 1, 7) AS YearMonth, SUM(y.\"Consumption\") AS TotalConsumption\nFROM public.yearmonth y\nJOIN public.customers c ON y.\"CustomerID\" = c.\"CustomerID\"\nWHERE c.\"Segment\" = 'SME' AND SUBSTRING(y.\"Date\", 1, 4) = '2013'\nGROUP BY YearMonth\nORDER BY TotalConsumption DESC\nLIMIT 1;",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?",
        "SQL": "The provided context is insufficient to generate the SQL query because the necessary information about the currency used for consumption payments, the segmentation of customers, and the specific consumption data for the year 2013 is not available in the given tables. The context does not include any details about currency conversion or consumption payments in CZK, nor does it specify how to identify the least amount of consumption.",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information about the \"Year\" or segment types such as \"SME, LAM, and KAM\" in the tables. Additionally, there's no indication of currency in the \"yearmonth\" table to filter payments made in EUR. Therefore, I cannot generate the query based on the given context.",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "How much did customer 6 consume in total between August and November 2013?",
        "SQL": "SELECT SUM(\"Consumption\") AS total_consumption\nFROM public.yearmonth\nWHERE \"CustomerID\" = 6 \n  AND \"Date\" BETWEEN '2013-08' AND '2013-11'",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "How many more \"discount\" gas stations does the Czech Republic have compared to Slovakia?",
        "SQL": "SELECT \n    c1.name AS country, \n    COUNT(gs.GasStationID) AS discount_gas_stations\nFROM \n    public.gasstations gs\nJOIN \n    public.\"Country\" c1 ON gs.Country = c1.name\nWHERE \n    gs.Segment = 'discount'\n    AND (c1.name = 'Czech Republic' OR c1.name = 'Slovakia')\nGROUP BY \n    c1.name;",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "How much more was customer 7 consuming in April 2013 than customer 5?",
        "SQL": "SELECT \n    (SELECT SUM(Consumption) FROM public.yearmonth WHERE CustomerID = 7 AND Date LIKE '2013-04%') -\n    (SELECT SUM(Consumption) FROM public.yearmonth WHERE CustomerID = 5 AND Date LIKE '2013-04%') AS Consumption_Difference",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?",
        "SQL": "The provided context does not contain information on the currency used by SMEs (Small and Medium Enterprises) for payments. The \"customers\" table contains a \"Currency\" column, but there is no information linking SMEs specifically to their payment currencies. Therefore, the query cannot be generated with the given context.",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "Which LAM customer used the Euro as their currency and had the highest consumption in October 2013?",
        "SQL": "SELECT y.CustomerID, MAX(y.Consumption) AS MaxConsumption\nFROM yearmonth y\nJOIN customers c ON y.CustomerID = c.CustomerID\nWHERE c.Segment = 'LAM'\nAND c.Currency = 'Euro'\nAND y.Date BETWEEN '2013-10-01' AND '2013-10-31'\nGROUP BY y.CustomerID\nORDER BY MaxConsumption DESC\nLIMIT 1;",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "Who among KAM's customers consumed the most? How much did it consume?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information linking a specific customer or entity named \"KAM\" to the tables, and there is no direct relationship between customers and the \"yearmonth\" table where consumption is recorded.",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "How much did the KAM customers consume in total in May 2013?",
        "SQL": "SELECT SUM(y.Consumption) AS TotalConsumption\nFROM yearmonth y\nJOIN customers c ON y.\"CustomerID\" = c.\"CustomerID\"\nWHERE c.\"Segment\" = 'KAM' AND y.\"Date\" LIKE '2013-05%'",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "How many percent of LAM customer consumed more than 46.73?",
        "SQL": "SELECT \n    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM public.yearmonth ym JOIN public.customers c ON ym.\"CustomerID\" = c.\"CustomerID\" WHERE c.\"Segment\" = 'LAM')) AS percentage\nFROM \n    public.yearmonth ym\nJOIN \n    public.customers c ON ym.\"CustomerID\" = c.\"CustomerID\"\nWHERE \n    c.\"Segment\" = 'LAM' AND ym.\"Consumption\" > 46.73;",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "Which country has more \"value for money\" gas stations? Please give a total number of \"value for money\" gas stations in each country.",
        "SQL": "SELECT g.Country, COUNT(*) AS total_value_for_money_gas_stations\nFROM public.gasstations g\nWHERE g.Segment = 'value for money'\nGROUP BY g.Country;",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "What percentage of KAM customers pay in euros?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no information available about what \"KAM customers\" refers to, nor is there any connection between customer segments and the currency they pay in within the given tables.",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "In February 2012, what percentage of customers consumed more than 528.3?",
        "SQL": "SELECT \n    (COUNT(CASE WHEN \"Consumption\" > 528.3 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_consumed_more_than_528_3\nFROM \n    public.yearmonth\nWHERE \n    \"Date\" LIKE '2012-02%';",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "What percentage of Slovakian gas stations are premium?",
        "SQL": "SELECT \n    (COUNT(CASE WHEN Segment = 'Premium' THEN 1 END)::DECIMAL / COUNT(*)) * 100 AS percentage_premium\nFROM \n    public.gasstations\nWHERE \n    Country = 'Slovakian';",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "Which client ID consumed the most in September 2013?",
        "SQL": "SELECT \"CustomerID\", SUM(\"Consumption\") as TotalConsumption\nFROM public.yearmonth\nWHERE \"Date\" LIKE '2013-09%'\nGROUP BY \"CustomerID\"\nORDER BY TotalConsumption DESC\nLIMIT 1;",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "Which client segment consumed the least in September 2013?",
        "SQL": "SELECT c.\"Segment\", SUM(y.\"Consumption\") AS total_consumption\nFROM public.yearmonth y\nJOIN public.customers c ON y.\"CustomerID\" = c.\"CustomerID\"\nWHERE y.\"Date\" LIKE '2013-09%'\nGROUP BY c.\"Segment\"\nORDER BY total_consumption ASC\nLIMIT 1;",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "Which SME customer consumed the least in June 2012?",
        "SQL": "SELECT c.\"CustomerID\", MIN(y.\"Consumption\") AS MinConsumption\nFROM public.yearmonth y\nJOIN public.customers c ON y.\"CustomerID\" = c.\"CustomerID\"\nWHERE c.\"Segment\" = 'SME' AND y.\"Date\" LIKE '2012-06%'\nGROUP BY c.\"CustomerID\"\nORDER BY MinConsumption ASC\nLIMIT 1;",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "What is the highest monthly consumption in the year 2012?",
        "SQL": "SELECT MAX(Consumption) AS highest_monthly_consumption\nFROM public.yearmonth\nWHERE Date LIKE '2012%';",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "What is the biggest monthly consumption of the customers who use euro as their currency?",
        "SQL": "SELECT MAX(ym.Consumption) AS BiggestMonthlyConsumption\nFROM public.yearmonth ym\nJOIN public.customers c ON ym.CustomerID = c.CustomerID\nWHERE c.Currency = 'euro';",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "Please list the product description of the products consumed in September, 2013.",
        "SQL": "SELECT DISTINCT p.Description\nFROM public.transactions_1k t\nJOIN public.products p ON t.ProductID = p.ProductID\nWHERE t.Date >= '2013-09-01' AND t.Date <= '2013-09-30';",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "Please list the countries of the gas stations with transactions taken place in June, 2013.",
        "SQL": "SELECT DISTINCT g.Country\nFROM public.gasstations g\nJOIN public.transactions_1k t ON g.GasStationID = t.GasStationID\nWHERE t.Date BETWEEN '2013-06-01' AND '2013-06-30';",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "Please list the chains of the gas stations with transactions in euro.",
        "SQL": "SELECT DISTINCT gasstations.ChainID\nFROM gasstations\nJOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID\nWHERE transactions_1k.Price = 'euro';",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "Please list the product description of the products bought in transactions in euro.",
        "SQL": "SELECT DISTINCT p.Description\nFROM public.transactions_1k t\nJOIN public.products p ON t.ProductID = p.ProductID\nJOIN public.customers c ON t.CustomerID = c.CustomerID\nWHERE c.Currency = 'Euro';",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "What is the average total price of the transactions taken place in January, 2012?",
        "SQL": "SELECT AVG(Price) AS AveragePrice\nFROM public.transactions_1k\nWHERE Date BETWEEN '2012-01-01' AND '2012-01-31';",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?",
        "SQL": "SELECT COUNT(DISTINCT y.CustomerID) AS CustomerCount\nFROM public.yearmonth y\nJOIN public.customers c ON y.CustomerID = c.CustomerID\nWHERE c.Currency = 'euro' AND y.Consumption > 1000;",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic.",
        "SQL": "SELECT DISTINCT p.Description\nFROM public.transactions_1k t\nJOIN public.gasstations g ON t.GasStationID = g.GasStationID\nJOIN public.products p ON t.ProductID = p.ProductID\nWHERE g.Country = 'Czech Republic';",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.",
        "SQL": "SELECT DISTINCT t.Time\nFROM public.transactions_1k t\nJOIN public.gasstations g ON t.GasStationID = g.GasStationID\nWHERE g.ChainID = 11;",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "How many transactions taken place in the gas station in the Czech Republic are with a price of over 1000?",
        "SQL": "SELECT COUNT(*)\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE g.Country = 'Czech Republic' AND t.Price > 1000;",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?",
        "SQL": "SELECT COUNT(*) \nFROM public.transactions_1k t\nJOIN public.gasstations g ON t.GasStationID = g.GasStationID\nWHERE g.Country = 'Czech Republic' AND t.Date > '2012-01-01';",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "What is the average total price of the transactions taken place in gas stations in the Czech Republic?",
        "SQL": "SELECT AVG(Amount * Price) AS average_total_price\nFROM public.transactions_1k t\nJOIN public.gasstations g ON t.GasStationID = g.GasStationID\nWHERE g.Country = 'Czech Republic';",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "For the customers who paid in the euro, what is their average total price of the transactions?",
        "SQL": "SELECT AVG(t.TotalPrice) AS AverageTotalPrice\nFROM (\n    SELECT c.CustomerID, SUM(t.Price) AS TotalPrice\n    FROM public.customers c\n    JOIN public.transactions_1k t ON c.CustomerID = t.CustomerID\n    WHERE c.Currency = 'euro'\n    GROUP BY c.CustomerID\n) AS t;",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "Which customer paid the most in 2012/8/25?",
        "SQL": "SELECT t.CustomerID, SUM(t.Amount * t.Price) AS TotalSpent\nFROM public.transactions_1k t\nWHERE t.Date = '2012-08-25'\nGROUP BY t.CustomerID\nORDER BY TotalSpent DESC\nLIMIT 1;",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "Which country's gas station had the first paid cusomer in 2012/8/25?",
        "SQL": "SELECT c.name AS CountryName\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nJOIN \"Country\" c ON g.Country = c.id\nWHERE t.Date = '2012-08-25'\nORDER BY t.Time\nLIMIT 1;",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?",
        "SQL": "SELECT c.Currency \nFROM public.transactions_1k t\nJOIN public.customers c ON t.CustomerID = c.CustomerID\nWHERE t.Date = '2012-08-24' AND t.Time = '16:25:00';",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "What segment did the customer have at 2012/8/23 21:20:00?",
        "SQL": "The provided context is insufficient to generate the SQL query because there is no direct relationship or timestamp information linking the \"customers\" table with the \"transactions_1k\" table, which contains date and time information.",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "How many transactions were paid in CZK in the morning of 2012/8/26?",
        "SQL": "SELECT COUNT(*) \nFROM public.transactions_1k t\nJOIN public.customers c ON t.\"CustomerID\" = c.\"CustomerID\"\nWHERE t.\"Date\" = '2012-08-26' \nAND t.\"Time\" < '12:00:00'\nAND c.\"Currency\" = 'CZK';",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "For the earliest customer, what segment did he/she have?",
        "SQL": "SELECT c.\"Segment\"\nFROM public.customers c\nJOIN (\n    SELECT \"CustomerID\"\n    FROM public.yearmonth\n    ORDER BY \"Date\" ASC\n    LIMIT 1\n) earliest_customer ON c.\"CustomerID\" = earliest_customer.\"CustomerID\"",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "For the deal happened at 2012/8/24 12:42:00, which country was it?",
        "SQL": "SELECT g.Country\nFROM public.transactions_1k t\nJOIN public.gasstations g ON t.GasStationID = g.GasStationID\nWHERE t.Date = '2012-08-24' AND t.Time = '12:42:00';",
        "db_id": "debit_card_specializing"
    },
    {
        "question": "What was the product id of the transaction happened at 2012/8/23 21:20:00?",
        "SQL": "SELECT \"ProductID\" \nFROM public.transactions_1k \nWHERE \"Date\" = '2012-08-23' AND \"Time\" = '21:20:00';",
        "db_id": "debit_card_specializing"
    }
]