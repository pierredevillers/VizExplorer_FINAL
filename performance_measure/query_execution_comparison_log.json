[
    {
        "question": "What is the highest eligible free rate for K-12 students in the schools in Alameda County?",
        "reference_query": "SELECT\"Free Meal Count (K-12)\"/\"Enrollment (K-12)\"FROM frpm WHERE \"County Name\"= 'Alameda' ORDER BY (CAST(\"Free Meal Count (K-12)\"AS REAL) /\"Enrollment (K-12)\") DESC LIMIT 1",
        "normalized_reference_query": "SELECT\"Free Meal Count (K-12)\"/\"Enrollment (K-12)\" FROM frpm WHERE \"County Name\"= 'Alameda' ORDER BY (CAST(\"Free Meal Count (K-12)\"AS REAL) /\"Enrollment (K-12)\") DESC LIMIT 1",
        "reference_sample_result": [
            [
                null
            ]
        ],
        "reference_column_names": [
            "?column?"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT MAX(\"Percent (%) Eligible Free (K-12)\") AS highest_eligible_free_rate\nFROM public.frpm\nWHERE \"County Name\" = 'Alameda'",
        "normalized_output_query": "SELECT MAX(\"Percent (%) Eligible Free (K-12)\") AS highest_eligible_free_rate FROM public.frpm WHERE \"County Name\" = 'Alameda'",
        "output_sample_result": [
            [
                1.0
            ]
        ],
        "output_column_names": [
            "highest_eligible_free_rate"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.4214046822742475,
        "bleu_similarity_score": 3.437448255867478e-155,
        "execution_accuracy": false
    },
    {
        "question": "Please list the lowest three eligible free rates for students aged 5-17 in continuation schools.",
        "reference_query": "SELECT\"Free Meal Count (Ages 5-17)\"/\"Enrollment (Ages 5-17)\"FROM frpm WHERE\"Educational Option Type\"= 'Continuation \"School\"' AND\"Free Meal Count (Ages 5-17)\"/\"Enrollment (Ages 5-17)\"IS NOT NULL ORDER BY\"Free Meal Count (Ages 5-17)\"/\"Enrollment (Ages 5-17)\"ASC LIMIT 3",
        "normalized_reference_query": "SELECT\"Free Meal Count (Ages 5-17)\"/\"Enrollment (Ages 5-17)\" FROM frpm WHERE\"Educational Option Type\"= 'Continuation \"School\"' AND\"Free Meal Count (Ages 5-17)\"/\"Enrollment (Ages 5-17)\"IS NOT NULL ORDER BY\"Free Meal Count (Ages 5-17)\"/\"Enrollment (Ages 5-17)\"ASC LIMIT 3",
        "reference_sample_result": [],
        "reference_column_names": [
            "?column?"
        ],
        "reference_row_count": 0,
        "reference_column_count": 1,
        "output_query": "SELECT \"School Name\", \"Percent (%) Eligible Free (Ages 5-17)\"\nFROM public.frpm\nWHERE \"School Type\" = 'Continuation'\nORDER BY \"Percent (%) Eligible Free (Ages 5-17)\" ASC\nLIMIT 3;",
        "normalized_output_query": "SELECT \"School Name\", \"Percent (%) Eligible Free (Ages 5-17)\" FROM public.frpm WHERE \"School Type\" = 'Continuation' ORDER BY \"Percent (%) Eligible Free (Ages 5-17)\" ASC LIMIT 3;",
        "output_sample_result": [],
        "output_column_names": [
            "School Name",
            "Percent (%) Eligible Free (Ages 5-17)"
        ],
        "output_row_count": 0,
        "output_column_count": 2,
        "sequence_similarity_score": 0.4439461883408072,
        "bleu_similarity_score": 1.5814383064253725e-78,
        "execution_accuracy": true
    },
    {
        "question": "What is the unabbreviated mailing street address of the school with the highest FRPM count for K-12 students?",
        "reference_query": "SELECT T2.\"MailStreet\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.\"CDSCode\" = T2.\"CDSCode\" ORDER BY T1.\"FRPM Count (K-12)\"DESC LIMIT 1",
        "normalized_reference_query": "SELECT T2.\"MailStreet\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.\"CDSCode\" = T2.\"CDSCode\" ORDER BY T1.\"FRPM Count (K-12)\"DESC LIMIT 1",
        "reference_sample_result": [
            [
                "3550 64th Avenue"
            ]
        ],
        "reference_column_names": [
            "MailStreet"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "WITH MaxFRPM AS (\n    SELECT \"CDSCode\", MAX(\"FRPM Count (K-12)\") AS MaxFRPMCount\n    FROM public.frpm\n    GROUP BY \"CDSCode\"\n)\nSELECT s.\"MailStreet\"\nFROM public.schools s\nJOIN MaxFRPM f ON s.\"CDSCode\" = f.\"CDSCode\"\nORDER BY f.MaxFRPMCount DESC\nLIMIT 1;",
        "normalized_output_query": "WITH MaxFRPM AS (SELECT \"CDSCode\", MAX(\"FRPM Count (K-12)\") AS MaxFRPMCount FROM public.frpm GROUP BY \"CDSCode\") SELECT s.\"MailStreet\" FROM public.schools s JOIN MaxFRPM f ON s.\"CDSCode\" = f.\"CDSCode\" ORDER BY f.MaxFRPMCount DESC LIMIT 1;",
        "output_sample_result": [
            [
                "3550 64th Avenue"
            ]
        ],
        "output_column_names": [
            "MailStreet"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.18085106382978725,
        "bleu_similarity_score": 4.7654553793195306e-155,
        "execution_accuracy": false
    },
    {
        "question": "How many schools with an average score in Math greater than 400 in the SAT test are exclusively virtual?",
        "reference_query": "SELECT COUNT(DISTINCT T2.\"School\") FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.\"cds\" = T2.\"CDSCode\" WHERE T2.\"Virtual\" = 'F' AND T1.\"AvgScrMath\" > 400",
        "normalized_reference_query": "SELECT COUNT(DISTINCT T2.\"School\") FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.\"cds\" = T2.\"CDSCode\" WHERE T2.\"Virtual\" = 'F' AND T1.\"AvgScrMath\" > 400",
        "reference_sample_result": [
            [
                4
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*)\nFROM public.satscores s\nJOIN public.schools sc ON s.cds = sc.\"CDSCode\"\nWHERE s.\"AvgScrMath\" > 400 AND sc.\"Virtual\" = 'Yes';",
        "normalized_output_query": "SELECT COUNT(*) FROM public.satscores s JOIN public.schools sc ON s.cds = sc.\"CDSCode\" WHERE s.\"AvgScrMath\" > 400 AND sc.\"Virtual\" = 'Yes';",
        "output_sample_result": [
            [
                0
            ]
        ],
        "output_column_names": [
            "count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6127946127946128,
        "bleu_similarity_score": 4.918893505787738e-155,
        "execution_accuracy": false
    },
    {
        "question": "What is the number of SAT test takers of the schools with the highest FRPM count for K-12 students?",
        "reference_query": "SELECT \"NumTstTakr\" FROM satscores WHERE \"cds\" = ( SELECT \"CDSCode\" FROM frpm ORDER BY\"FRPM Count (K-12)\"DESC LIMIT 1 )",
        "normalized_reference_query": "SELECT \"NumTstTakr\" FROM satscores WHERE \"cds\" = (SELECT \"CDSCode\" FROM frpm ORDER BY\"FRPM Count (K-12)\"DESC LIMIT 1)",
        "reference_error": null,
        "output_query": "SELECT s.sname, s.NumTstTakr\nFROM public.satscores s\nJOIN public.frpm f ON s.cds = f.\"CDSCode\"\nWHERE f.\"FRPM Count (K-12)\" = (\n    SELECT MAX(\"FRPM Count (K-12)\")\n    FROM public.frpm\n)",
        "normalized_output_query": "SELECT s.sname, s.NumTstTakr FROM public.satscores s JOIN public.frpm f ON s.cds = f.\"CDSCode\" WHERE f.\"FRPM Count (K-12)\" = (SELECT MAX(\"FRPM Count (K-12)\") FROM public.frpm)",
        "output_error": "column s.numtsttakr does not exist\nLINE 1: SELECT s.sname, s.NumTstTakr FROM public.satscores s JOIN pu...\n                        ^\nHINT:  Perhaps you meant to reference the column \"s.NumTstTakr\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "For the school with the highest average score in Reading in the SAT test, what is its FRPM count for students aged 5-17?",
        "reference_query": "SELECT T2.\"FRPM Count (Ages 5-17)\"FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.\"cds\" = T2.\"CDSCode\" ORDER BY T1.\"AvgScrRead\" DESC LIMIT 1",
        "normalized_reference_query": "SELECT T2.\"FRPM Count (Ages 5-17)\" FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.\"cds\" = T2.\"CDSCode\" ORDER BY T1.\"AvgScrRead\" DESC LIMIT 1",
        "reference_error": null,
        "output_query": "WITH highest_avg_read_school AS (\n    SELECT cds, MAX(AvgScrRead) as MaxAvgScrRead\n    FROM public.satscores\n    GROUP BY cds\n    ORDER BY MaxAvgScrRead DESC\n    LIMIT 1\n)\nSELECT f.\"FRPM Count (Ages 5-17)\"\nFROM public.frpm f\nJOIN highest_avg_read_school h ON f.\"CDSCode\" = h.cds;",
        "normalized_output_query": "WITH highest_avg_read_school AS (SELECT cds, MAX(AvgScrRead) AS MaxAvgScrRead FROM public.satscores GROUP BY cds ORDER BY MaxAvgScrRead DESC LIMIT 1) SELECT f.\"FRPM Count (Ages 5-17)\" FROM public.frpm f JOIN highest_avg_read_school h ON f.\"CDSCode\" = h.cds;",
        "output_error": "column \"avgscrread\" does not exist\nLINE 1: WITH highest_avg_read_school AS (SELECT cds, MAX(AvgScrRead)...\n                                                         ^\nHINT:  Perhaps you meant to reference the column \"satscores.AvgScrRead\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Please list the codes of the schools with a total enrollment of over 500.",
        "reference_query": "SELECT T2.\"CDSCode\" FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.\"CDSCode\" = T2.\"CDSCode\" WHERE T2.\"Enrollment (K-12)\"+ T2.\"Enrollment (Ages 5-17)\"> 500",
        "normalized_reference_query": "SELECT T2.\"CDSCode\" FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.\"CDSCode\" = T2.\"CDSCode\" WHERE T2.\"Enrollment (K-12)\"+ T2.\"Enrollment (Ages 5-17)\"> 500",
        "reference_sample_result": [
            [
                "01100170109835"
            ],
            [
                "01100170112607"
            ],
            [
                "01100170124172"
            ],
            [
                "01100170125567"
            ],
            [
                "01100176001788"
            ]
        ],
        "reference_column_names": [
            "CDSCode"
        ],
        "reference_row_count": 7806,
        "reference_column_count": 1,
        "output_query": "SELECT \"CDSCode\" \nFROM public.frpm \nWHERE \"Enrollment (K-12)\" > 500;",
        "normalized_output_query": "SELECT \"CDSCode\" FROM public.frpm WHERE \"Enrollment (K-12)\" > 500;",
        "output_sample_result": [
            [
                "01100170109835"
            ],
            [
                "01100176001788"
            ],
            [
                "01611190111765"
            ],
            [
                "01611190122085"
            ],
            [
                "01611190130229"
            ]
        ],
        "output_column_names": [
            "CDSCode"
        ],
        "output_row_count": 5362,
        "output_column_count": 1,
        "sequence_similarity_score": 0.5363636363636364,
        "bleu_similarity_score": 3.265229851293573e-232,
        "execution_accuracy": false
    },
    {
        "question": "Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17?",
        "reference_query": "SELECT MAX(CAST(T1.\"Free Meal Count (Ages 5-17)\"AS REAL) / T1.\"Enrollment (Ages 5-17)\") FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.\"CDSCode\" = T2.\"cds\" WHERE CAST(T2.\"NumGE1500\" AS DOUBLE PRECISION) / T2.\"NumTstTakr\" > 0.3",
        "normalized_reference_query": "SELECT MAX(CAST(T1.\"Free Meal Count (Ages 5-17)\"AS REAL) / T1.\"Enrollment (Ages 5-17)\") FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.\"CDSCode\" = T2.\"cds\" WHERE CAST(T2.\"NumGE1500\" AS DOUBLE PRECISION) / T2.\"NumTstTakr\" > 0.3",
        "reference_sample_result": [
            [
                0.904908
            ]
        ],
        "reference_column_names": [
            "max"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT MAX(f.\"Percent (%) Eligible Free (Ages 5-17)\") AS highest_eligible_free_rate\nFROM public.satscores s\nJOIN public.frpm f ON s.cds = f.\"CDSCode\"\nWHERE (s.\"NumGE1500\"::FLOAT / s.\"NumTstTakr\") > 0.3;",
        "normalized_output_query": "SELECT MAX(f.\"Percent (%) Eligible Free (Ages 5-17)\") AS highest_eligible_free_rate FROM public.satscores s JOIN public.frpm f ON s.cds = f.\"CDSCode\" WHERE (s.\"NumGE1500\"::FLOAT / s.\"NumTstTakr\") > 0.3;",
        "output_sample_result": [
            [
                0.904908
            ]
        ],
        "output_column_names": [
            "highest_eligible_free_rate"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.4372093023255814,
        "bleu_similarity_score": 3.9857342644306985e-155,
        "execution_accuracy": false
    },
    {
        "question": "List the top five schools, by descending order, from the highest to the lowest, the most number of Enrollment (Ages 5-17). Please give their NCES school identification number.",
        "reference_query": "SELECT T1.\"NCESSchool\" FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.\"CDSCode\" = T2.\"CDSCode\" ORDER BY T2.\"Enrollment (Ages 5-17)\"DESC LIMIT 5",
        "normalized_reference_query": "SELECT T1.\"NCESSchool\" FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.\"CDSCode\" = T2.\"CDSCode\" ORDER BY T2.\"Enrollment (Ages 5-17)\"DESC LIMIT 5",
        "reference_error": null,
        "output_query": "SELECT \"NCESSchool\", \"Enrollment (Ages 5-17)\"\nFROM public.frpm\nORDER BY \"Enrollment (Ages 5-17)\" DESC\nLIMIT 5;",
        "normalized_output_query": "SELECT \"NCESSchool\", \"Enrollment (Ages 5-17)\" FROM public.frpm ORDER BY \"Enrollment (Ages 5-17)\" DESC LIMIT 5;",
        "output_error": "column \"NCESSchool\" does not exist\nLINE 1: SELECT \"NCESSchool\", \"Enrollment (Ages 5-17)\" FROM public.fr...\n               ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Which active district has the highest average score in Reading?",
        "reference_query": "SELECT T1.\"District\" FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.\"CDSCode\" = T2.\"cds\" WHERE T1.\"StatusType\" = 'Active' ORDER BY T2.\"AvgScrRead\" DESC LIMIT 1",
        "normalized_reference_query": "SELECT T1.\"District\" FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.\"CDSCode\" = T2.\"cds\" WHERE T1.\"StatusType\" = 'Active' ORDER BY T2.\"AvgScrRead\" DESC LIMIT 1",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information about which districts are considered \"active.\" Additionally, there is no direct link between district activity status and the SAT scores in the given tables.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information about which districts ARE considered \"active.\" Additionally, there IS NO direct LINK BETWEEN district activity status AND the SAT scores IN the given tables.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many schools in merged Alameda have number of test takers less than 100?",
        "reference_query": "SELECT COUNT(T1.\"CDSCode\") FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.\"CDSCode\" = T2.\"cds\" WHERE T1.\"StatusType\" = 'Merged' AND T2.\"NumTstTakr\" < 100 AND T1.\"County\"= 'Lake'",
        "normalized_reference_query": "SELECT COUNT(T1.\"CDSCode\") FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.\"CDSCode\" = T2.\"cds\" WHERE T1.\"StatusType\" = 'Merged' AND T2.\"NumTstTakr\" < 100 AND T1.\"County\"= 'Lake'",
        "reference_sample_result": [
            [
                1
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*)\nFROM public.satscores\nWHERE \"dname\" = 'Alameda' AND \"NumTstTakr\" < 100;",
        "normalized_output_query": "SELECT COUNT(*) FROM public.satscores WHERE \"dname\" = 'Alameda' AND \"NumTstTakr\" < 100;",
        "output_sample_result": [
            [
                0
            ]
        ],
        "output_column_names": [
            "count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.5278810408921933,
        "bleu_similarity_score": 4.7706101635859015e-232,
        "execution_accuracy": false
    },
    {
        "question": "Rank schools by their average score in Writing where the score is greater than 499, showing their charter numbers.",
        "reference_query": "SELECT \"CharterNum\", \"AvgScrWrite\", RANK() OVER (ORDER BY \"AvgScrWrite\" DESC) AS WritingScoreRank FROM schools AS T1  INNER JOIN satscores AS T2 ON T1.\"CDSCode\" = T2.\"cds\" WHERE T2.\"AvgScrWrite\" > 499 AND \"CharterNum\" is not null",
        "normalized_reference_query": "SELECT \"CharterNum\", \"AvgScrWrite\", RANK() OVER (ORDER BY \"AvgScrWrite\" DESC) AS WritingScoreRank FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.\"CDSCode\" = T2.\"cds\" WHERE T2.\"AvgScrWrite\" > 499 AND \"CharterNum\" IS NOT NULL",
        "reference_sample_result": [
            [
                "0210",
                630,
                1
            ],
            [
                "0890",
                593,
                2
            ],
            [
                "0290",
                582,
                3
            ],
            [
                "0930",
                579,
                4
            ],
            [
                "1169",
                576,
                5
            ]
        ],
        "reference_column_names": [
            "CharterNum",
            "AvgScrWrite",
            "writingscorerank"
        ],
        "reference_row_count": 50,
        "reference_column_count": 3,
        "output_query": "SELECT s.\"School\", s.\"CharterNum\", sat.\"AvgScrWrite\"\nFROM public.schools s\nJOIN public.satscores sat ON s.\"CDSCode\" = sat.\"cds\"\nWHERE sat.\"AvgScrWrite\" > 499\nORDER BY sat.\"AvgScrWrite\" DESC;",
        "normalized_output_query": "SELECT s.\"School\", s.\"CharterNum\", sat.\"AvgScrWrite\" FROM public.schools s JOIN public.satscores sat ON s.\"CDSCode\" = sat.\"cds\" WHERE sat.\"AvgScrWrite\" > 499 ORDER BY sat.\"AvgScrWrite\" DESC;",
        "output_sample_result": [
            [
                "Lynbrook High",
                null,
                664
            ],
            [
                "Whitney (Gretchen) High",
                null,
                661
            ],
            [
                "Monta Vista High",
                null,
                657
            ],
            [
                "Saratoga High",
                null,
                650
            ],
            [
                "Henry M. Gunn High",
                null,
                646
            ]
        ],
        "output_column_names": [
            "School",
            "CharterNum",
            "AvgScrWrite"
        ],
        "output_row_count": 430,
        "output_column_count": 3,
        "sequence_similarity_score": 0.5885167464114832,
        "bleu_similarity_score": 3.380065437479801e-155,
        "execution_accuracy": false
    },
    {
        "question": "How many schools in Fresno (directly funded) have number of test takers not more than 250?",
        "reference_query": "SELECT COUNT(T1.\"CDSCode\") FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.\"CDSCode\" = T2.\"cds\" WHERE T1.\"Charter Funding Type\"= 'Directly funded' AND T1.\"County Name\"= 'Fresno' AND T2.\"NumTstTakr\" <= 250",
        "normalized_reference_query": "SELECT COUNT(T1.\"CDSCode\") FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.\"CDSCode\" = T2.\"cds\" WHERE T1.\"Charter Funding Type\"= 'Directly funded' AND T1.\"County Name\"= 'Fresno' AND T2.\"NumTstTakr\" <= 250",
        "reference_error": null,
        "output_query": "SELECT COUNT(*)\nFROM public.satscores AS s\nJOIN public.schools AS sch ON s.cds = sch.\"CDSCode\"\nWHERE sch.County = 'Fresno' AND sch.FundingType = 'Directly Funded' AND s.\"NumTstTakr\" <= 250;",
        "normalized_output_query": "SELECT COUNT(*) FROM public.satscores AS s JOIN public.schools AS sch ON s.cds = sch.\"CDSCode\" WHERE sch.County = 'Fresno' AND sch.FundingType = 'Directly Funded' AND s.\"NumTstTakr\" <= 250;",
        "output_error": "column sch.county does not exist\nLINE 1: ...lic.schools AS sch ON s.cds = sch.\"CDSCode\" WHERE sch.County...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"sch.County\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many schools in Amador which the Low Grade is 9 and the High Grade is 12?",
        "reference_query": "SELECT COUNT(T1.\"School Name\") FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.\"CDSCode\" = T2.\"CDSCode\" WHERE T2.\"County\"= 'Amador' AND T1.\"Low Grade\"= '9' AND T1.\"High Grade\"= '12'",
        "normalized_reference_query": "SELECT COUNT(T1.\"School Name\") FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.\"CDSCode\" = T2.\"CDSCode\" WHERE T2.\"County\"= 'Amador' AND T1.\"Low Grade\"= '9' AND T1.\"High Grade\"= '12'",
        "reference_sample_result": [
            [
                3
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*) \nFROM public.frpm \nWHERE \"County Name\" = 'Amador' \nAND \"Low Grade\" = '9' \nAND \"High Grade\" = '12';",
        "normalized_output_query": "SELECT COUNT(*) FROM public.frpm WHERE \"County Name\" = 'Amador' AND \"Low Grade\" = '9' AND \"High Grade\" = '12';",
        "output_sample_result": [
            [
                3
            ]
        ],
        "output_column_names": [
            "count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6413793103448275,
        "bleu_similarity_score": 4.553390009872418e-155,
        "execution_accuracy": false
    },
    {
        "question": "In Los Angeles how many schools have more than 500 free meals but less than 700 free or reduced price meals for K-12?",
        "reference_query": "SELECT COUNT(\"CDSCode\") FROM frpm WHERE\"County Name\"= 'Los Angeles' AND\"Free Meal Count (K-12)\"> 500 AND\"FRPM Count (K-12)\"< 700",
        "normalized_reference_query": "SELECT COUNT(\"CDSCode\") FROM frpm WHERE\"County Name\"= 'Los Angeles' AND\"Free Meal Count (K-12)\"> 500 AND\"FRPM Count (K-12)\"< 700",
        "reference_sample_result": [
            [
                249
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*)\nFROM public.frpm\nWHERE \"County Name\" = 'Los Angeles'\n  AND \"Free Meal Count (K-12)\" > 500\n  AND \"FRPM Count (K-12)\" < 700;",
        "normalized_output_query": "SELECT COUNT(*) FROM public.frpm WHERE \"County Name\" = 'Los Angeles' AND \"Free Meal Count (K-12)\" > 500 AND \"FRPM Count (K-12)\" < 700;",
        "output_sample_result": [
            [
                249
            ]
        ],
        "output_column_names": [
            "count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.9083969465648855,
        "bleu_similarity_score": 6.2902018522998635e-155,
        "execution_accuracy": false
    },
    {
        "question": "Which school in Contra Costa has the highest number of test takers?",
        "reference_query": "SELECT sname FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ORDER BY \"NumTstTakr\" DESC LIMIT 1",
        "normalized_reference_query": "SELECT sname FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ORDER BY \"NumTstTakr\" DESC LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT s.School, ss.NumTstTakr\nFROM public.schools s\nJOIN public.satscores ss ON s.CDSCode = ss.cds\nWHERE s.County = 'Contra Costa'\nORDER BY ss.NumTstTakr DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT s.School, ss.NumTstTakr FROM public.schools s JOIN public.satscores ss ON s.CDSCode = ss.cds WHERE s.County = 'Contra Costa' ORDER BY ss.NumTstTakr DESC LIMIT 1;",
        "output_error": "column s.cdscode does not exist\nLINE 1: ...FROM public.schools s JOIN public.satscores ss ON s.CDSCode ...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools.",
        "reference_query": "SELECT T1.\"School\", T1.\"Street\" FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.\"CDSCode\" = T2.\"CDSCode\" WHERE T2.\"Enrollment (K-12)\"- T2.\"Enrollment (Ages 5-17)\"> 30",
        "normalized_reference_query": "SELECT T1.\"School\", T1.\"Street\" FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.\"CDSCode\" = T2.\"CDSCode\" WHERE T2.\"Enrollment (K-12)\"- T2.\"Enrollment (Ages 5-17)\"> 30",
        "reference_sample_result": [
            [
                "Alameda County Community",
                "313 West Winton Avenue"
            ],
            [
                "California School for the Deaf-Fremont",
                "39350 Gallaudet Drive"
            ],
            [
                "Alameda High",
                "2201 Encinal Avenue"
            ],
            [
                "Encinal High",
                "210 Central Avenue"
            ],
            [
                "Island High (Continuation)",
                "1900 Third Street"
            ]
        ],
        "reference_column_names": [
            "School",
            "Street"
        ],
        "reference_row_count": 1239,
        "reference_column_count": 2,
        "output_query": "SELECT \n    s.\"School\" AS school_name,\n    s.\"Street\" AS street_address,\n    s.\"City\" AS city,\n    s.\"Zip\" AS zip\nFROM \n    public.schools s\nJOIN \n    public.frpm f ON s.\"CDSCode\" = f.\"CDSCode\"\nWHERE \n    ABS(f.\"Enrollment (K-12)\" - f.\"Enrollment (Ages 5-17)\") > 30;",
        "normalized_output_query": "SELECT s.\"School\" AS school_name, s.\"Street\" AS street_address, s.\"City\" AS city, s.\"Zip\" AS zip FROM public.schools s JOIN public.frpm f ON s.\"CDSCode\" = f.\"CDSCode\" WHERE ABS(f.\"Enrollment (K-12)\" - f.\"Enrollment (Ages 5-17)\") > 30;",
        "output_sample_result": [
            [
                "Alameda County Community",
                "313 West Winton Avenue",
                "Hayward",
                "94544-1136"
            ],
            [
                "California School for the Deaf-Fremont",
                "39350 Gallaudet Drive",
                "Fremont",
                "94538-2308"
            ],
            [
                "Alameda High",
                "2201 Encinal Avenue",
                "Alameda",
                "94501-4406"
            ],
            [
                "Encinal High",
                "210 Central Avenue",
                "Alameda",
                "94501-3278"
            ],
            [
                "Island High (Continuation)",
                "1900 Third Street",
                "Alameda",
                "94501-1851"
            ]
        ],
        "output_column_names": [
            "school_name",
            "street_address",
            "city",
            "zip"
        ],
        "output_row_count": 1239,
        "output_column_count": 4,
        "sequence_similarity_score": 0.6165413533834586,
        "bleu_similarity_score": 1.3267266604633973e-231,
        "execution_accuracy": false
    },
    {
        "question": "Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500?",
        "reference_query": "SELECT T2.\"School Name\"FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.\"cds\" = T2.\"CDSCode\" WHERE CAST(T2.\"Free Meal Count (K-12)\"AS REAL) / T2.\"Enrollment (K-12)\"> 0.1 AND T1.\"NumGE1500\" > 0",
        "normalized_reference_query": "SELECT T2.\"School Name\" FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.\"cds\" = T2.\"CDSCode\" WHERE CAST(T2.\"Free Meal Count (K-12)\"AS REAL) / T2.\"Enrollment (K-12)\"> 0.1 AND T1.\"NumGE1500\" > 0",
        "reference_error": null,
        "output_query": "SELECT s.School\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.\"CDSCode\"\nJOIN satscores ss ON s.CDSCode = ss.cds\nWHERE f.\"Percent (%) Eligible Free (K-12)\" > 0.1\nAND ss.\"NumGE1500\" > 0;",
        "normalized_output_query": "SELECT s.School FROM schools s JOIN frpm f ON s.CDSCode = f.\"CDSCode\" JOIN satscores ss ON s.CDSCode = ss.cds WHERE f.\"Percent (%) Eligible Free (K-12)\" > 0.1 AND ss.\"NumGE1500\" > 0;",
        "output_error": "column s.cdscode does not exist\nLINE 1: SELECT s.School FROM schools s JOIN frpm f ON s.CDSCode = f....\n                                                      ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools?",
        "reference_query": "SELECT T1.sname, T2.\"Charter Funding Type\"FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.\"cds\" = T2.\"CDSCode\" WHERE T2.\"District Name\"LIKE 'Riverside%' GROUP BY T1.sname, T2.\"Charter Funding Type\"HAVING CAST(SUM(T1.\"AvgScrMath\") AS DOUBLE PRECISION) / COUNT(T1.\"cds\") > 400",
        "normalized_reference_query": "SELECT T1.sname, T2.\"Charter Funding Type\" FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.\"cds\" = T2.\"CDSCode\" WHERE T2.\"District Name\"LIKE 'Riverside%' GROUP BY T1.sname, T2.\"Charter Funding Type\" HAVING CAST(SUM(T1.\"AvgScrMath\") AS DOUBLE PRECISION) / COUNT(T1.\"cds\") > 400",
        "reference_error": null,
        "output_query": "SELECT s.School, s.FundingType\nFROM public.schools s\nJOIN public.satscores sat ON s.CDSCode = sat.cds\nWHERE s.County = 'Riverside' \nGROUP BY s.School, s.FundingType\nHAVING AVG(sat.\"AvgScrMath\") > 400;",
        "normalized_output_query": "SELECT s.School, s.FundingType FROM public.schools s JOIN public.satscores sat ON s.CDSCode = sat.cds WHERE s.County = 'Riverside' GROUP BY s.School, s.FundingType HAVING AVG(sat.\"AvgScrMath\") > 400;",
        "output_error": "column s.cdscode does not exist\nLINE 1: ...ROM public.schools s JOIN public.satscores sat ON s.CDSCode ...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?",
        "reference_query": "SELECT T1.\"School Name\", T2.\"Street\", T2.\"City\", T2.\"State\", T2.\"Zip\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.\"CDSCode\" = T2.\"CDSCode\" WHERE T2.\"County\"= 'Monterey' AND T1.\"Free Meal Count (Ages 5-17)\"> 800 AND T1.\"School Type\"= 'High Schools (Public)'",
        "normalized_reference_query": "SELECT T1.\"School Name\", T2.\"Street\", T2.\"City\", T2.\"State\", T2.\"Zip\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.\"CDSCode\" = T2.\"CDSCode\" WHERE T2.\"County\"= 'Monterey' AND T1.\"Free Meal Count (Ages 5-17)\"> 800 AND T1.\"School Type\"= 'High Schools (Public)'",
        "reference_error": null,
        "output_query": "The provided context is insufficient because it does not include details on how to identify high schools within the given tables, nor does it directly relate schools to their communication addresses. Additionally, it does not specify how to filter by ages 15-17 in relation to free or reduced price meals. The necessary tables and relationships to derive the required information are not fully provided.",
        "normalized_output_query": "The provided context IS insufficient because it does NOT INCLUDE details ON how TO identify high schools within the given TABLES, nor does it directly relate schools TO their communication addresses. Additionally, it does NOT specify how TO filter BY ages 15-17 IN relation TO FREE OR reduced price meals. The necessary TABLES AND relationships TO derive the required information ARE NOT fully provided.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient because it does NOT INC...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any.",
        "reference_query": "SELECT T2.\"School\", T1.\"AvgScrWrite\", T2.\"Phone\" FROM schools AS T2 LEFT JOIN satscores AS T1 ON T2.\"CDSCode\" = T1.\"cds\" WHERE EXTRACT(YEAR FROM T2.\"OpenDate\") > '1991' OR EXTRACT(YEAR FROM T2.\"ClosedDate\") < '2000'",
        "normalized_reference_query": "SELECT T2.\"School\", T1.\"AvgScrWrite\", T2.\"Phone\" FROM schools AS T2 LEFT JOIN satscores AS T1 ON T2.\"CDSCode\" = T1.\"cds\" WHERE EXTRACT(YEAR FROM T2.\"OpenDate\") > '1991' OR EXTRACT(YEAR FROM T2.\"ClosedDate\") < '2000'",
        "reference_error": null,
        "output_query": "SELECT \n    sch.School AS school_name, \n    sat.AvgScrWrite AS average_score_writing, \n    sch.Phone AS communication_number\nFROM \n    public.schools sch\nJOIN \n    public.satscores sat ON sch.CDSCode = sat.cds\nWHERE \n    (sch.OpenDate > '1991-12-31' OR sch.ClosedDate < '2000-01-01')",
        "normalized_output_query": "SELECT sch.School AS school_name, sat.AvgScrWrite AS average_score_writing, sch.Phone AS communication_number FROM public.schools sch JOIN public.satscores sat ON sch.CDSCode = sat.cds WHERE (sch.OpenDate > '1991-12-31' OR sch.ClosedDate < '2000-01-01')",
        "output_error": "column sch.cdscode does not exist\nLINE 1: ...M public.schools sch JOIN public.satscores sat ON sch.CDSCod...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "When did the first-through-twelfth-grade school with the largest enrollment open?",
        "reference_query": "SELECT T2.\"OpenDate\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.\"CDSCode\" = T2.\"CDSCode\" ORDER BY T1.\"Enrollment (K-12)\"DESC LIMIT 1",
        "normalized_reference_query": "SELECT T2.\"OpenDate\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.\"CDSCode\" = T2.\"CDSCode\" ORDER BY T1.\"Enrollment (K-12)\"DESC LIMIT 1",
        "reference_sample_result": [
            [
                "2006-08-29"
            ]
        ],
        "reference_column_names": [
            "OpenDate"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT s.\"OpenDate\"\nFROM public.schools s\nJOIN public.frpm f ON s.\"CDSCode\" = f.\"CDSCode\"\nWHERE f.\"Low Grade\" = '1' AND f.\"High Grade\" = '12'\nORDER BY f.\"Enrollment (K-12)\" DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT s.\"OpenDate\" FROM public.schools s JOIN public.frpm f ON s.\"CDSCode\" = f.\"CDSCode\" WHERE f.\"Low Grade\" = '1' AND f.\"High Grade\" = '12' ORDER BY f.\"Enrollment (K-12)\" DESC LIMIT 1;",
        "output_sample_result": [
            [
                "2014-08-18"
            ]
        ],
        "output_column_names": [
            "OpenDate"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.639751552795031,
        "bleu_similarity_score": 4.6995438382983534e-155,
        "execution_accuracy": false
    },
    {
        "question": "Which cities have the top 5 lowest enrollment number for students in grades 1 through 12?",
        "reference_query": "SELECT T2.\"City\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.\"CDSCode\" = T2.\"CDSCode\" GROUP BY T2.\"City\" ORDER BY SUM(T1.\"Enrollment (K-12)\") ASC LIMIT 5",
        "normalized_reference_query": "SELECT T2.\"City\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.\"CDSCode\" = T2.\"CDSCode\" GROUP BY T2.\"City\" ORDER BY SUM(T1.\"Enrollment (K-12)\") ASC LIMIT 5",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information about enrollment numbers for students in grades 1 through 12 at the city level in the given tables.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information about enrollment numbers FOR students IN grades 1 through 12 AT the city LEVEL IN the given tables.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12?",
        "reference_query": "SELECT CAST(\"Free Meal Count (K-12)\"AS REAL) /\"Enrollment (K-12)\"FROM frpm ORDER BY\"Enrollment (K-12)\"DESC LIMIT 2 OFFSET 9",
        "normalized_reference_query": "SELECT CAST(\"Free Meal Count (K-12)\"AS REAL) /\"Enrollment (K-12)\" FROM frpm ORDER BY\"Enrollment (K-12)\"DESC LIMIT 2 OFFSET 9",
        "reference_sample_result": [
            [
                0.1344364
            ],
            [
                0.29058945
            ]
        ],
        "reference_column_names": [
            "?column?"
        ],
        "reference_row_count": 2,
        "reference_column_count": 1,
        "output_query": "SELECT \"School Name\", \"Enrollment (K-12)\", \"Percent (%) Eligible Free (K-12)\"\nFROM public.frpm\nORDER BY \"Enrollment (K-12)\" DESC\nLIMIT 2 OFFSET 9",
        "normalized_output_query": "SELECT \"School Name\", \"Enrollment (K-12)\", \"Percent (%) Eligible Free (K-12)\" FROM public.frpm ORDER BY \"Enrollment (K-12)\" DESC LIMIT 2 OFFSET 9",
        "output_sample_result": [
            [
                "El Camino Real Charter High",
                3868.0,
                0.1344364
            ],
            [
                "Eleanor Roosevelt High",
                3868.0,
                0.29058945
            ]
        ],
        "output_column_names": [
            "School Name",
            "Enrollment (K-12)",
            "Percent (%) Eligible Free (K-12)"
        ],
        "output_row_count": 2,
        "output_column_count": 3,
        "sequence_similarity_score": 0.483271375464684,
        "bleu_similarity_score": 0.14528679532351443,
        "execution_accuracy": false
    },
    {
        "question": "What is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66?",
        "reference_query": "SELECT CAST(T1.\"FRPM Count (K-12)\"AS REAL) / T1.\"Enrollment (K-12)\"FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.\"CDSCode\" = T2.\"CDSCode\" WHERE T2.\"SOC\" = '66' ORDER BY T1.\"FRPM Count (K-12)\"DESC LIMIT 5",
        "normalized_reference_query": "SELECT CAST(T1.\"FRPM Count (K-12)\"AS REAL) / T1.\"Enrollment (K-12)\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.\"CDSCode\" = T2.\"CDSCode\" WHERE T2.\"SOC\" = '66' ORDER BY T1.\"FRPM Count (K-12)\"DESC LIMIT 5",
        "reference_error": null,
        "output_query": "The provided context is insufficient because there is no information about an \"ownership code\" in the available tables. Therefore, the query cannot be generated.",
        "normalized_output_query": "The provided context IS insufficient because there IS NO information about an \"ownership code\" IN the available tables. Therefore, the query cannot be generated.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient because there IS NO inf...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "If there are any, what are the websites address of the schools with a free meal count of 1,900-2,000 to students aged 5-17? Include the name of the school.",
        "reference_query": "SELECT T2.\"Website\", T1.\"School Name\"FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.\"CDSCode\" = T2.\"CDSCode\" WHERE T1.\"Free Meal Count (Ages 5-17)\"BETWEEN 1900 AND 2000 AND T2.\"Website\" IS NOT NULL",
        "normalized_reference_query": "SELECT T2.\"Website\", T1.\"School Name\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.\"CDSCode\" = T2.\"CDSCode\" WHERE T1.\"Free Meal Count (Ages 5-17)\"BETWEEN 1900 AND 2000 AND T2.\"Website\" IS NOT NULL",
        "reference_error": null,
        "output_query": "SELECT s.School, s.Website\nFROM public.frpm f\nJOIN public.schools s ON f.CDSCode = s.CDSCode\nWHERE f.\"Free Meal Count (Ages 5-17)\" BETWEEN 1900 AND 2000;",
        "normalized_output_query": "SELECT s.School, s.Website FROM public.frpm f JOIN public.schools s ON f.CDSCode = s.CDSCode WHERE f.\"Free Meal Count (Ages 5-17)\" BETWEEN 1900 AND 2000;",
        "output_error": "column f.cdscode does not exist\nLINE 1: ...bsite FROM public.frpm f JOIN public.schools s ON f.CDSCode ...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the free rate for students between the ages of 5 and 17 at the school run by Kacey Gibson?",
        "reference_query": "SELECT CAST(T2.\"Free Meal Count (Ages 5-17)\"AS REAL) / T2.\"Enrollment (Ages 5-17)\"FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.\"CDSCode\" = T2.\"CDSCode\" WHERE T1.\"AdmFName1\" = 'Kacey' AND T1.\"AdmLName1\" = 'Gibson'",
        "normalized_reference_query": "SELECT CAST(T2.\"Free Meal Count (Ages 5-17)\"AS REAL) / T2.\"Enrollment (Ages 5-17)\" FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.\"CDSCode\" = T2.\"CDSCode\" WHERE T1.\"AdmFName1\" = 'Kacey' AND T1.\"AdmLName1\" = 'Gibson'",
        "reference_error": null,
        "output_query": "The provided context does not contain information about a school run by Kacey Gibson or any direct link between school administrators and the free rate for students. Therefore, it is not possible to generate the SQL query needed to answer the question based on the given context.",
        "normalized_output_query": "The provided context does NOT contain information about a school run BY Kacey Gibson OR ANY direct LINK BETWEEN school administrators AND the FREE rate FOR students. Therefore, it IS NOT possible TO generate the SQL query needed TO answer the question based ON the given context.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context does NOT contain information about a sc...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the administrator's email address of the chartered school with the fewest students enrolled in grades 1 through 12?",
        "reference_query": "SELECT T2.\"AdmEmail1\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.\"CDSCode\" = T2.\"CDSCode\" WHERE T1.\"Charter School (Y/N)\"= 1 ORDER BY T1.\"Enrollment (K-12)\"ASC LIMIT 1",
        "normalized_reference_query": "SELECT T2.\"AdmEmail1\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.\"CDSCode\" = T2.\"CDSCode\" WHERE T1.\"Charter School (Y/N)\"= 1 ORDER BY T1.\"Enrollment (K-12)\"ASC LIMIT 1",
        "reference_sample_result": [
            [
                "mjennings@kesd.org"
            ]
        ],
        "reference_column_names": [
            "AdmEmail1"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT s.\"AdmEmail1\"\nFROM public.schools s\nJOIN public.frpm f ON s.\"CDSCode\" = f.\"CDSCode\"\nWHERE s.\"Charter\" = 1\nORDER BY f.\"Enrollment (K-12)\" ASC\nLIMIT 1;",
        "normalized_output_query": "SELECT s.\"AdmEmail1\" FROM public.schools s JOIN public.frpm f ON s.\"CDSCode\" = f.\"CDSCode\" WHERE s.\"Charter\" = 1 ORDER BY f.\"Enrollment (K-12)\" ASC LIMIT 1;",
        "output_sample_result": [
            [
                "mjennings@kesd.org"
            ]
        ],
        "output_column_names": [
            "AdmEmail1"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7522935779816514,
        "bleu_similarity_score": 2.232821716891446e-78,
        "execution_accuracy": false
    },
    {
        "question": "Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names.",
        "reference_query": "SELECT T2.\"AdmFName1\", T2.\"AdmLName1\", T2.\"AdmFName2\", T2.\"AdmLName2\", T2.\"AdmFName3\", T2.\"AdmLName3\" FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.\"cds\" = T2.\"CDSCode\" ORDER BY T1.\"NumGE1500\" DESC LIMIT 1",
        "normalized_reference_query": "SELECT T2.\"AdmFName1\", T2.\"AdmLName1\", T2.\"AdmFName2\", T2.\"AdmLName2\", T2.\"AdmFName3\", T2.\"AdmLName3\" FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.\"cds\" = T2.\"CDSCode\" ORDER BY T1.\"NumGE1500\" DESC LIMIT 1",
        "reference_sample_result": [
            [
                "Jim",
                "Yovino",
                null,
                null,
                null,
                null
            ]
        ],
        "reference_column_names": [
            "AdmFName1",
            "AdmLName1",
            "AdmFName2",
            "AdmLName2",
            "AdmFName3",
            "AdmLName3"
        ],
        "reference_row_count": 1,
        "reference_column_count": 6,
        "output_query": "SELECT s.\"AdmFName1\", s.\"AdmLName1\"\nFROM public.satscores ss\nJOIN public.schools s ON ss.cds = s.\"CDSCode\"\nWHERE ss.\"NumGE1500\" = (\n    SELECT MAX(\"NumGE1500\") FROM public.satscores\n)",
        "normalized_output_query": "SELECT s.\"AdmFName1\", s.\"AdmLName1\" FROM public.satscores ss JOIN public.schools s ON ss.cds = s.\"CDSCode\" WHERE ss.\"NumGE1500\" = (SELECT MAX(\"NumGE1500\") FROM public.satscores)",
        "output_sample_result": [
            [
                "Michelle",
                "King"
            ]
        ],
        "output_column_names": [
            "AdmFName1",
            "AdmLName1"
        ],
        "output_row_count": 1,
        "output_column_count": 2,
        "sequence_similarity_score": 0.5463917525773195,
        "bleu_similarity_score": 9.543440741278285e-232,
        "execution_accuracy": false
    },
    {
        "question": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State.",
        "reference_query": "SELECT T2.\"Street\", T2.\"City\", T2.\"State\", T2.\"Zip\" FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.\"cds\" = T2.\"CDSCode\" ORDER BY CAST(T1.\"NumGE1500\" AS DOUBLE PRECISION) / T1.\"NumTstTakr\" ASC LIMIT 1",
        "normalized_reference_query": "SELECT T2.\"Street\", T2.\"City\", T2.\"State\", T2.\"Zip\" FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.\"cds\" = T2.\"CDSCode\" ORDER BY CAST(T1.\"NumGE1500\" AS DOUBLE PRECISION) / T1.\"NumTstTakr\" ASC LIMIT 1",
        "reference_error": null,
        "output_query": "The provided context is insufficient because there is no column explicitly named \"excellence rate\" or similar in the available tables. Therefore, I cannot generate the required SQL query to find the school with the lowest excellence rate and its complete address.",
        "normalized_output_query": "The provided context IS insufficient because there IS NO COLUMN explicitly named \"excellence rate\" OR SIMILAR IN the available tables. Therefore, I cannot generate the required SQL query TO find the school WITH the lowest excellence rate AND its complete address.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient because there IS NO COL...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What are the webpages for the Los Angeles County school that has between 2,000 and 3,000 test takers?",
        "reference_query": "SELECT T2.\"Website\" FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.\"cds\" = T2.\"CDSCode\" WHERE T1.\"NumTstTakr\" BETWEEN 2000 AND 3000 AND T2.\"County\"= 'Los Angeles'",
        "normalized_reference_query": "SELECT T2.\"Website\" FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.\"cds\" = T2.\"CDSCode\" WHERE T1.\"NumTstTakr\" BETWEEN 2000 AND 3000 AND T2.\"County\"= 'Los Angeles'",
        "reference_error": null,
        "output_query": "SELECT s.Website\nFROM public.satscores ss\nJOIN public.schools s ON ss.cds = s.CDSCode\nWHERE ss.dname = 'Los Angeles'\nAND ss.\"NumTstTakr\" BETWEEN 2000 AND 3000;",
        "normalized_output_query": "SELECT s.Website FROM public.satscores ss JOIN public.schools s ON ss.cds = s.CDSCode WHERE ss.dname = 'Los Angeles' AND ss.\"NumTstTakr\" BETWEEN 2000 AND 3000;",
        "output_error": "column s.cdscode does not exist\nLINE 1: ...ic.satscores ss JOIN public.schools s ON ss.cds = s.CDSCode ...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?",
        "reference_query": "SELECT AVG(T1.\"NumTstTakr\") FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.\"cds\" = T2.\"CDSCode\" WHERE EXTRACT(YEAR FROM T2.\"OpenDate\") = '1980' AND T2.\"County\"= 'Fresno'",
        "normalized_reference_query": "SELECT AVG(T1.\"NumTstTakr\") FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.\"cds\" = T2.\"CDSCode\" WHERE EXTRACT(YEAR FROM T2.\"OpenDate\") = '1980' AND T2.\"County\"= 'Fresno'",
        "reference_error": null,
        "output_query": "SELECT AVG(s.NumTstTakr) AS average_test_takers\nFROM public.satscores s\nJOIN public.schools sch ON s.cds = sch.CDSCode\nWHERE sch.County = 'Fresno'\nAND sch.OpenDate BETWEEN '1980-01-01' AND '1980-12-31';",
        "normalized_output_query": "SELECT AVG(s.NumTstTakr) AS average_test_takers FROM public.satscores s JOIN public.schools sch ON s.cds = sch.CDSCode WHERE sch.County = 'Fresno' AND sch.OpenDate BETWEEN '1980-01-01' AND '1980-12-31';",
        "output_error": "column sch.cdscode does not exist\nLINE 1: ...ic.satscores s JOIN public.schools sch ON s.cds = sch.CDSCod...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "List the names of virtual schools that are among the top 5 in their respective counties based on average reading scores.",
        "reference_query": "SELECT \"School\" FROM (SELECT T2.\"School\",T1.\"AvgScrRead\", RANK() OVER (PARTITION BY T2.\"County\" ORDER BY T1.\"AvgScrRead\" DESC) AS rnk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.\"cds\" = T2.\"CDSCode\" WHERE T2.\"Virtual\" = 'F' ) ranked_schools WHERE rnk <= 5",
        "normalized_reference_query": "SELECT \"School\" FROM (SELECT T2.\"School\", T1.\"AvgScrRead\", RANK() OVER (PARTITION BY T2.\"County\" ORDER BY T1.\"AvgScrRead\" DESC) AS rnk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.\"cds\" = T2.\"CDSCode\" WHERE T2.\"Virtual\" = 'F') ranked_schools WHERE rnk <= 5",
        "reference_error": null,
        "output_query": "SELECT s.School\nFROM public.satscores sa\nJOIN public.schools s ON sa.cds = s.CDSCode\nWHERE s.Virtual = 'Yes'\nAND sa.rtype = 'School'\nORDER BY sa.AvgScrRead DESC\nLIMIT 5;",
        "normalized_output_query": "SELECT s.School FROM public.satscores sa JOIN public.schools s ON sa.cds = s.CDSCode WHERE s.Virtual = 'Yes' AND sa.rtype = 'School' ORDER BY sa.AvgScrRead DESC LIMIT 5;",
        "output_error": "column s.cdscode does not exist\nLINE 1: ...ic.satscores sa JOIN public.schools s ON sa.cds = s.CDSCode ...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the type of education offered in the school who scored the highest average in Math?",
        "reference_query": "SELECT T2.\"EdOpsName\" FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.\"cds\" = T2.\"CDSCode\" ORDER BY T1.\"AvgScrMath\" DESC LIMIT 1",
        "normalized_reference_query": "SELECT T2.\"EdOpsName\" FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.\"cds\" = T2.\"CDSCode\" ORDER BY T1.\"AvgScrMath\" DESC LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT s.\"Educational Option Type\"\nFROM public.satscores sat\nJOIN public.frpm f ON sat.cds = f.\"CDSCode\"\nORDER BY sat.\"AvgScrMath\" DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT s.\"Educational Option Type\" FROM public.satscores sat JOIN public.frpm f ON sat.cds = f.\"CDSCode\" ORDER BY sat.\"AvgScrMath\" DESC LIMIT 1;",
        "output_error": "missing FROM-clause entry for table \"s\"\nLINE 1: SELECT s.\"Educational Option Type\" FROM public.satscores sat...\n               ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the average math score of the school with the lowest average score for all subjects, and in which county is it located?",
        "reference_query": "SELECT T1.\"AvgScrMath\", T2.\"County\" FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.\"cds\" = T2.\"CDSCode\" WHERE T1.\"AvgScrMath\" IS NOT NULL ORDER BY T1.\"AvgScrMath\" + T1.\"AvgScrRead\" + T1.\"AvgScrWrite\" ASC LIMIT 1",
        "normalized_reference_query": "SELECT T1.\"AvgScrMath\", T2.\"County\" FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.\"cds\" = T2.\"CDSCode\" WHERE T1.\"AvgScrMath\" IS NOT NULL ORDER BY T1.\"AvgScrMath\" + T1.\"AvgScrRead\" + T1.\"AvgScrWrite\" ASC LIMIT 1",
        "reference_sample_result": [
            [
                314,
                "Los Angeles"
            ]
        ],
        "reference_column_names": [
            "AvgScrMath",
            "County"
        ],
        "reference_row_count": 1,
        "reference_column_count": 2,
        "output_query": "SELECT s.cname AS county, s.sname AS school_name, s.\"AvgScrMath\" AS average_math_score\nFROM public.satscores s\nWHERE (s.\"AvgScrRead\" + s.\"AvgScrMath\" + s.\"AvgScrWrite\") = (\n    SELECT MIN(\"AvgScrRead\" + \"AvgScrMath\" + \"AvgScrWrite\")\n    FROM public.satscores\n)\nLIMIT 1;",
        "normalized_output_query": "SELECT s.cname AS county, s.sname AS school_name, s.\"AvgScrMath\" AS average_math_score FROM public.satscores s WHERE (s.\"AvgScrRead\" + s.\"AvgScrMath\" + s.\"AvgScrWrite\") = (SELECT MIN(\"AvgScrRead\" + \"AvgScrMath\" + \"AvgScrWrite\") FROM public.satscores) LIMIT 1;",
        "output_sample_result": [
            [
                "Contra Costa",
                "Gompers (Samuel) Continuation",
                289
            ]
        ],
        "output_column_names": [
            "county",
            "school_name",
            "average_math_score"
        ],
        "output_row_count": 1,
        "output_column_count": 3,
        "sequence_similarity_score": 0.08421052631578947,
        "bleu_similarity_score": 1.3041037823271445e-231,
        "execution_accuracy": false
    },
    {
        "question": "What is the average writing score of the school who has the highest number of test takers whose total SAT sscores are greater or equal to 1500? Indicate the city to where the school is situated.",
        "reference_query": "SELECT T1.\"AvgScrWrite\", T2.\"City\" FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.\"cds\" = T2.\"CDSCode\" ORDER BY T1.\"NumGE1500\" DESC LIMIT 1",
        "normalized_reference_query": "SELECT T1.\"AvgScrWrite\", T2.\"City\" FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.\"cds\" = T2.\"CDSCode\" ORDER BY T1.\"NumGE1500\" DESC LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT s.City, AVG(sat.AvgScrWrite) AS AverageWritingScore\nFROM public.satscores sat\nJOIN public.schools s ON sat.cds = s.CDSCode\nWHERE sat.NumTstTakr = (\n    SELECT MAX(NumTstTakr)\n    FROM public.satscores\n    WHERE NumGE1500 >= 1500\n)\nGROUP BY s.City;",
        "normalized_output_query": "SELECT s.City, AVG(sat.AvgScrWrite) AS AverageWritingScore FROM public.satscores sat JOIN public.schools s ON sat.cds = s.CDSCode WHERE sat.NumTstTakr = (SELECT MAX(NumTstTakr) FROM public.satscores WHERE NumGE1500 >= 1500) GROUP BY s.City;",
        "output_error": "column s.cdscode does not exist\nLINE 1: ....satscores sat JOIN public.schools s ON sat.cds = s.CDSCode ...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores.",
        "reference_query": "SELECT T2.\"School\", T1.\"AvgScrWrite\" FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.\"cds\" = T2.\"CDSCode\" WHERE T2.\"AdmFName1\" = 'Ricci' AND T2.\"AdmLName1\" = 'Ulrich'",
        "normalized_reference_query": "SELECT T2.\"School\", T1.\"AvgScrWrite\" FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.\"cds\" = T2.\"CDSCode\" WHERE T2.\"AdmFName1\" = 'Ricci' AND T2.\"AdmLName1\" = 'Ulrich'",
        "reference_error": null,
        "output_query": "The provided context does not contain information about the management of schools, specifically by someone named Ricci Ulrich. Therefore, it is not possible to generate the SQL query to answer the question based on the given data.",
        "normalized_output_query": "The provided context does NOT contain information about the management OF schools, specifically BY someone named Ricci Ulrich. Therefore, it IS NOT possible TO generate the SQL query TO answer the question based ON the given data.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context does NOT contain information about the ...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Which state special schools have the highest number of enrollees from grades 1 through 12?",
        "reference_query": "SELECT T2.\"School\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.\"CDSCode\" = T2.\"CDSCode\" WHERE T2.\"DOC\" = '31' ORDER BY T1.\"Enrollment (K-12)\"DESC LIMIT 1",
        "normalized_reference_query": "SELECT T2.\"School\" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.\"CDSCode\" = T2.\"CDSCode\" WHERE T2.\"DOC\" = '31' ORDER BY T1.\"Enrollment (K-12)\"DESC LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT School, \"Enrollment (K-12)\"\nFROM public.frpm\nWHERE \"School Type\" = 'State Special Schools'\nORDER BY \"Enrollment (K-12)\" DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT School, \"Enrollment (K-12)\" FROM public.frpm WHERE \"School Type\" = 'State Special Schools' ORDER BY \"Enrollment (K-12)\" DESC LIMIT 1;",
        "output_error": "column \"school\" does not exist\nLINE 1: SELECT School, \"Enrollment (K-12)\" FROM public.frpm WHERE \"S...\n               ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980?",
        "reference_query": "SELECT CAST(COUNT(\"School\") AS DOUBLE PRECISION) / 12 FROM schools WHERE \"DOC\" = '52' AND \"County\"= 'Alameda' AND EXTRACT(YEAR FROM \"OpenDate\") = '1980'",
        "normalized_reference_query": "SELECT CAST(COUNT(\"School\") AS DOUBLE PRECISION) / 12 FROM schools WHERE \"DOC\" = '52' AND \"County\"= 'Alameda' AND EXTRACT(YEAR FROM \"OpenDate\") = '1980'",
        "reference_sample_result": [
            [
                1.4166666666666667
            ]
        ],
        "reference_column_names": [
            "?column?"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT EXTRACT(MONTH FROM \"OpenDate\") AS month, \n       COUNT(*) / 12.0 AS average_number_of_schools\nFROM public.schools\nWHERE \"County\" = 'Alameda'\n  AND \"District\" = 'Elementary School District'\n  AND EXTRACT(YEAR FROM \"OpenDate\") = 1980\nGROUP BY EXTRACT(MONTH FROM \"OpenDate\");",
        "normalized_output_query": "SELECT EXTRACT(MONTH FROM \"OpenDate\") AS MONTH, COUNT(*) / 12.0 AS average_number_of_schools FROM public.schools WHERE \"County\" = 'Alameda' AND \"District\" = 'Elementary School District' AND EXTRACT(YEAR FROM \"OpenDate\") = 1980 GROUP BY EXTRACT(MONTH FROM \"OpenDate\");",
        "output_sample_result": [],
        "output_column_names": [
            "month",
            "average_number_of_schools"
        ],
        "output_row_count": 0,
        "output_column_count": 2,
        "sequence_similarity_score": 0.21957040572792363,
        "bleu_similarity_score": 0.1368169861743195,
        "execution_accuracy": false
    },
    {
        "question": "What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools?",
        "reference_query": "SELECT CAST(SUM(CASE WHEN \"DOC\" = '54' THEN 1 ELSE 0 END) AS DOUBLE PRECISION) / SUM(CASE WHEN \"DOC\" = '52' THEN 1 ELSE 0 END) FROM schools WHERE \"StatusType\" = 'Merged' AND \"County\"= 'Orange'",
        "normalized_reference_query": "SELECT CAST(SUM(CASE WHEN \"DOC\" = '54' THEN 1 ELSE 0 END) AS DOUBLE PRECISION) / SUM(CASE WHEN \"DOC\" = '52' THEN 1 ELSE 0 END) FROM schools WHERE \"StatusType\" = 'Merged' AND \"County\"= 'Orange'",
        "reference_sample_result": [
            [
                0.5714285714285714
            ]
        ],
        "reference_column_names": [
            "?column?"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT \n    (SUM(CASE WHEN \"District Type\" = 'Unified School District' AND \"County Name\" = 'Orange' THEN 1 ELSE 0 END) * 1.0 /\n    NULLIF(SUM(CASE WHEN \"District Type\" = 'Elementary School District' AND \"County Name\" = 'Orange' THEN 1 ELSE 0 END), 0)) AS unified_to_elementary_ratio\nFROM public.frpm;",
        "normalized_output_query": "SELECT (SUM(CASE WHEN \"District Type\" = 'Unified School District' AND \"County Name\" = 'Orange' THEN 1 ELSE 0 END) * 1.0 / NULLIF(SUM(CASE WHEN \"District Type\" = 'Elementary School District' AND \"County Name\" = 'Orange' THEN 1 ELSE 0 END), 0)) AS unified_to_elementary_ratio FROM public.frpm;",
        "output_sample_result": [
            [
                "3.6725663716814159"
            ]
        ],
        "output_column_names": [
            "unified_to_elementary_ratio"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.3022774327122153,
        "bleu_similarity_score": 0.15567149264052613,
        "execution_accuracy": false
    },
    {
        "question": "Which different county has the most number of closed schools? Please provide the name of each school as well as the closure date.",
        "reference_query": "SELECT DISTINCT \"County\", \"School\", \"ClosedDate\" FROM schools WHERE \"County\"= ( SELECT \"County\" FROM schools WHERE \"StatusType\" = 'Closed' GROUP BY \"County\" ORDER BY COUNT(\"School\") DESC LIMIT 1 ) AND \"StatusType\" = 'Closed' AND \"School\" IS NOT NULL",
        "normalized_reference_query": "SELECT DISTINCT \"County\", \"School\", \"ClosedDate\" FROM schools WHERE \"County\"= (SELECT \"County\" FROM schools WHERE \"StatusType\" = 'Closed' GROUP BY \"County\" ORDER BY COUNT(\"School\") DESC LIMIT 1) AND \"StatusType\" = 'Closed' AND \"School\" IS NOT NULL",
        "reference_error": null,
        "output_query": "SELECT County, School, ClosedDate\nFROM public.schools\nWHERE ClosedDate IS NOT NULL\nORDER BY County, ClosedDate;",
        "normalized_output_query": "SELECT County, School, ClosedDate FROM public.schools WHERE ClosedDate IS NOT NULL ORDER BY County, ClosedDate;",
        "output_error": "column \"county\" does not exist\nLINE 1: SELECT County, School, ClosedDate FROM public.schools WHERE ...\n               ^\nHINT:  Perhaps you meant to reference the column \"schools.County\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many accounts who choose issuance after transaction are staying in East Bohemia region?",
        "reference_query": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.\"A3\" = 'east Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU'",
        "normalized_reference_query": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN ACCOUNT AS T2 ON T1.district_id = T2.district_id WHERE T1.\"A3\" = 'east Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU'",
        "reference_error": null,
        "output_query": "SELECT COUNT(DISTINCT a.account_id)\nFROM public.account a\nJOIN public.district d ON a.district_id = d.district_id\nWHERE a.frequency = 'issuance after transaction' AND d.A2 = 'East Bohemia'",
        "normalized_output_query": "SELECT COUNT(DISTINCT a.account_id) FROM public.account a JOIN public.district d ON a.district_id = d.district_id WHERE a.frequency = 'issuance after transaction' AND d.A2 = 'East Bohemia'",
        "output_error": "column d.a2 does not exist\nLINE 1: ...RE a.frequency = 'issuance after transaction' AND d.A2 = 'Ea...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"d.A2\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many accounts who have region in Prague are eligible for loans?",
        "reference_query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.\"A3\" = 'Prague'",
        "normalized_reference_query": "SELECT COUNT(T1.account_id) FROM ACCOUNT AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.\"A3\" = 'Prague'",
        "reference_error": null,
        "output_query": "It can't be generated. The provided context does not include information on regions or their relation to Prague. The tables given do not have a column that specifies the region or location of the accounts.",
        "normalized_output_query": "It can't be generated. The provided context does NOT INCLUDE information ON regions OR their relation TO Prague. The TABLES given DO NOT have a COLUMN that specifies the region OR LOCATION OF the accounts.",
        "output_error": "syntax error at or near \"It\"\nLINE 1: It can't be generated. The provided context does NOT INCLUDE...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "The average unemployment ratio of 1995 and 1996, which one has higher percentage?",
        "reference_query": "SELECT DISTINCT CASE WHEN AVG(\"A13\") > AVG(\"A12\") THEN '1996' ELSE '1995' END FROM district",
        "normalized_reference_query": "SELECT DISTINCT CASE WHEN AVG(\"A13\") > AVG(\"A12\") THEN '1996' ELSE '1995' END FROM district",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate a SQL query for the question because there is no table containing unemployment data or related information for the years 1995 and 1996.",
        "normalized_output_query": "The provided context IS insufficient TO generate a SQL query FOR the question because there IS NO TABLE containing unemployment DATA OR related information FOR the years 1995 AND 1996.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate a SQL query...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "List out the no. of districts that have female average salary is more than 6000 but less than 10000?",
        "reference_query": "SELECT COUNT(DISTINCT T2.district_id)  FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.\"A11\" BETWEEN 6000 AND 10000",
        "normalized_reference_query": "SELECT COUNT(DISTINCT T2.district_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.\"A11\" BETWEEN 6000 AND 10000",
        "reference_error": null,
        "output_query": "It can't be generated because the provided context does not include any table or column related to salaries or any specific information about gender-based salaries in districts.",
        "normalized_output_query": "It can't be GENERATED because the provided context does NOT INCLUDE ANY TABLE OR COLUMN related TO salaries OR ANY SPECIFIC information about gender-based salaries IN districts.",
        "output_error": "syntax error at or near \"It\"\nLINE 1: It can't be GENERATED because the provided context does NOT ...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many male customers who are living in North Bohemia have average salary greater than 8000?",
        "reference_query": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.\"A3\" = 'north Bohemia' AND T2.\"A11\" > 8000",
        "normalized_reference_query": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.\"A3\" = 'north Bohemia' AND T2.\"A11\" > 8000",
        "reference_error": null,
        "output_query": "It can't be generated because the provided context does not include any information about the region \"North Bohemia\" or salary information for customers. The tables available do not have relevant columns to determine customer location specifically in North Bohemia or their salary details.",
        "normalized_output_query": "It can't be GENERATED because the provided context does NOT INCLUDE ANY information about the region \"North Bohemia\" OR salary information FOR customers. The TABLES available DO NOT have relevant columns TO determine customer LOCATION specifically IN North Bohemia OR their salary details.",
        "output_error": "syntax error at or near \"It\"\nLINE 1: It can't be GENERATED because the provided context does NOT ...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?",
        "reference_query": "SELECT T1.account_id , ( SELECT MAX(\"A11\") - MIN(\"A11\") FROM district ) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T2.district_id = ( SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1 ) ORDER BY T2.\"A11\" DESC LIMIT 1",
        "normalized_reference_query": "SELECT T1.account_id , (SELECT MAX(\"A11\") - MIN(\"A11\") FROM district) FROM ACCOUNT AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T2.district_id = (SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1) ORDER BY T2.\"A11\" DESC LIMIT 1",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query. The available tables do not contain information about salaries or how to calculate an average salary. Additionally, the tables do not have a direct link between account numbers and client genders.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query. The available TABLES DO NOT contain information about salaries OR how TO calculate an average salary. Additionally, the TABLES DO NOT have a direct LINK BETWEEN ACCOUNT numbers AND client genders.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "List out the account numbers of clients who are youngest and have highest average salary?",
        "reference_query": "SELECT T1.account_id  FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 on T4.district_id = T1.district_id WHERE T2.client_id = ( SELECT client_id FROM client ORDER BY birth_date DESC LIMIT 1) GROUP BY T4.\"A11\", T1.account_id",
        "normalized_reference_query": "SELECT T1.account_id FROM ACCOUNT AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 ON T4.district_id = T1.district_id WHERE T2.client_id = (SELECT client_id FROM client ORDER BY birth_date DESC LIMIT 1) GROUP BY T4.\"A11\", T1.account_id",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information about the salary of clients in any of the tables. The \"income\" table provides amounts received, but it is not linked to clients or accounts, nor is there an indication that it represents a salary.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information about the salary OF clients IN ANY OF the tables. The \"income\" TABLE provides amounts received, but it IS NOT linked TO clients OR accounts, nor IS there an indication that it represents a salary.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many customers who choose statement of weekly issuance are Owner?",
        "reference_query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK TYDNE'",
        "normalized_reference_query": "SELECT COUNT(T1.account_id) FROM ACCOUNT AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK TYDNE'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information or column in the given tables that directly relates to customers being \"Owner\" or choosing a \"statement of weekly issuance.\"",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information OR COLUMN IN the given TABLES that directly relates TO customers being \"Owner\" OR choosing a \"statement of weekly issuance.\"",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "List out the id number of client who choose statement of issuance after transaction are Disponent?",
        "reference_query": "SELECT T2.client_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.type = 'DISPONENT'",
        "normalized_reference_query": "SELECT T2.client_id FROM ACCOUNT AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.type = 'DISPONENT'",
        "reference_sample_result": [
            [
                159
            ],
            [
                384
            ],
            [
                1261
            ],
            [
                1706
            ],
            [
                2304
            ]
        ],
        "reference_column_names": [
            "client_id"
        ],
        "reference_row_count": 14,
        "reference_column_count": 1,
        "output_query": "SELECT c.client_id\nFROM public.client c\nJOIN public.disp d ON c.client_id = d.client_id\nJOIN public.account a ON d.account_id = a.account_id\nWHERE d.type = 'DISPONENT' AND a.frequency = 'statement of issuance after transaction';",
        "normalized_output_query": "SELECT c.client_id FROM public.client c JOIN public.disp d ON c.client_id = d.client_id JOIN public.account a ON d.account_id = a.account_id WHERE d.type = 'DISPONENT' AND a.frequency = 'statement of issuance after transaction';",
        "output_sample_result": [],
        "output_column_names": [
            "client_id"
        ],
        "output_row_count": 0,
        "output_column_count": 1,
        "sequence_similarity_score": 0.3496143958868895,
        "bleu_similarity_score": 4.803430137390974e-155,
        "execution_accuracy": false
    },
    {
        "question": "Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.",
        "reference_query": "SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE EXTRACT(YEAR FROM T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount LIMIT 1",
        "normalized_reference_query": "SELECT T2.account_id FROM loan AS T1 INNER JOIN ACCOUNT AS T2 ON T1.account_id = T2.account_id WHERE EXTRACT(YEAR FROM T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount LIMIT 1",
        "reference_sample_result": [
            [
                176
            ]
        ],
        "reference_column_names": [
            "account_id"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT a.account_id, l.amount, a.frequency\nFROM public.loan l\nJOIN public.account a ON l.account_id = a.account_id\nWHERE EXTRACT(YEAR FROM l.date) = 1997\nAND l.status = 'approved'\nAND a.frequency = 'weekly'\nORDER BY l.amount ASC\nLIMIT 1;",
        "normalized_output_query": "SELECT a.account_id, l.amount, a.frequency FROM public.loan l JOIN public.account a ON l.account_id = a.account_id WHERE EXTRACT(YEAR FROM l.date) = 1997 AND l.status = 'approved' AND a.frequency = 'weekly' ORDER BY l.amount ASC LIMIT 1;",
        "output_sample_result": [],
        "output_column_names": [
            "account_id",
            "amount",
            "frequency"
        ],
        "output_row_count": 0,
        "output_column_count": 3,
        "sequence_similarity_score": 0.6146788990825688,
        "bleu_similarity_score": 2.2587216865101518e-78,
        "execution_accuracy": false
    },
    {
        "question": "Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993.",
        "reference_query": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE EXTRACT(YEAR FROM T2.date) = '1993' AND T1.duration > 12 ORDER BY T1.amount DESC LIMIT 1",
        "normalized_reference_query": "SELECT T1.account_id FROM loan AS T1 INNER JOIN ACCOUNT AS T2 ON T1.account_id = T2.account_id WHERE EXTRACT(YEAR FROM T2.date) = '1993' AND T1.duration > 12 ORDER BY T1.amount DESC LIMIT 1",
        "reference_sample_result": [
            [
                10451
            ]
        ],
        "reference_column_names": [
            "account_id"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT l.account_id, l.amount\nFROM public.loan l\nJOIN public.account a ON l.account_id = a.account_id\nWHERE l.duration > 12\nAND EXTRACT(YEAR FROM a.date) = 1993\nORDER BY l.amount DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT l.account_id, l.amount FROM public.loan l JOIN public.account a ON l.account_id = a.account_id WHERE l.duration > 12 AND EXTRACT(YEAR FROM a.date) = 1993 ORDER BY l.amount DESC LIMIT 1;",
        "output_sample_result": [
            [
                10451,
                482940
            ]
        ],
        "output_column_names": [
            "account_id",
            "amount"
        ],
        "output_row_count": 1,
        "output_column_count": 2,
        "sequence_similarity_score": 0.6981627296587927,
        "bleu_similarity_score": 7.37695031312874e-155,
        "execution_accuracy": false
    },
    {
        "question": "Among the account opened, how many female customers who were born before 1950 and stayed in Sokolov?",
        "reference_query": "SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND EXTRACT(YEAR FROM T2.birth_date) < '1950' AND T1.\"A2\" = 'Sokolov'",
        "normalized_reference_query": "SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND EXTRACT(YEAR FROM T2.birth_date) < '1950' AND T1.\"A2\" = 'Sokolov'",
        "reference_error": null,
        "output_query": "SELECT COUNT(DISTINCT c.client_id) AS female_customers_count\nFROM public.client c\nJOIN public.account a ON c.district_id = a.district_id\nWHERE c.gender = 'female'\nAND c.birth_date < '1950-01-01'\nAND c.district_id = (SELECT district_id FROM public.district WHERE name = 'Sokolov');",
        "normalized_output_query": "SELECT COUNT(DISTINCT c.client_id) AS female_customers_count FROM public.client c JOIN public.account a ON c.district_id = a.district_id WHERE c.gender = 'female' AND c.birth_date < '1950-01-01' AND c.district_id = (SELECT district_id FROM public.district WHERE name = 'Sokolov');",
        "output_error": "column \"name\" does not exist\nLINE 1: ... = (SELECT district_id FROM public.district WHERE name = 'So...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"a.date\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "List out the accounts who have the earliest trading date in 1995 ?",
        "reference_query": "SELECT account_id FROM trans WHERE EXTRACT(YEAR FROM date) = '1995' ORDER BY date ASC LIMIT 1",
        "normalized_reference_query": "SELECT account_id FROM trans WHERE EXTRACT(YEAR FROM date) = '1995' ORDER BY date ASC LIMIT 1",
        "reference_sample_result": [
            [
                9
            ]
        ],
        "reference_column_names": [
            "account_id"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT account_id, MIN(date) as earliest_date\nFROM public.account\nWHERE date >= '1995-01-01' AND date < '1996-01-01'\nGROUP BY account_id\nORDER BY earliest_date\nLIMIT 1;",
        "normalized_output_query": "SELECT account_id, MIN(date) AS earliest_date FROM public.account WHERE date >= '1995-01-01' AND date < '1996-01-01' GROUP BY account_id ORDER BY earliest_date LIMIT 1;",
        "output_sample_result": [
            [
                3006,
                "1995-01-01"
            ]
        ],
        "output_column_names": [
            "account_id",
            "earliest_date"
        ],
        "output_row_count": 1,
        "output_column_count": 2,
        "sequence_similarity_score": 0.5057471264367817,
        "bleu_similarity_score": 5.289408188821303e-155,
        "execution_accuracy": false
    },
    {
        "question": "State different accounts who have account opening date before 1997 and own an amount of money greater than 3000USD",
        "reference_query": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE EXTRACT(YEAR FROM T2.date) < '1997' AND T1.amount > 3000",
        "normalized_reference_query": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN ACCOUNT AS T2 ON T1.account_id = T2.account_id WHERE EXTRACT(YEAR FROM T2.date) < '1997' AND T1.amount > 3000",
        "reference_sample_result": [
            [
                1
            ],
            [
                2
            ],
            [
                4
            ],
            [
                6
            ],
            [
                7
            ]
        ],
        "reference_column_names": [
            "account_id"
        ],
        "reference_row_count": 3591,
        "reference_column_count": 1,
        "output_query": "SELECT DISTINCT a.account_id\nFROM public.account a\nJOIN public.loan l ON a.account_id = l.account_id\nWHERE a.date < '1997-01-01' AND l.amount > 3000;",
        "normalized_output_query": "SELECT DISTINCT a.account_id FROM public.account a JOIN public.loan l ON a.account_id = l.account_id WHERE a.date < '1997-01-01' AND l.amount > 3000;",
        "output_sample_result": [
            [
                6062
            ],
            [
                3230
            ],
            [
                2335
            ],
            [
                1580
            ],
            [
                7546
            ]
        ],
        "output_column_names": [
            "account_id"
        ],
        "output_row_count": 560,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7025316455696202,
        "bleu_similarity_score": 4.618026758370281e-155,
        "execution_accuracy": false
    },
    {
        "question": "Which client issued his/her card in 1994/3/3, give his/her client id.",
        "reference_query": "SELECT T2.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1994-03-03'",
        "normalized_reference_query": "SELECT T2.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1994-03-03'",
        "reference_sample_result": [
            [
                2429
            ]
        ],
        "reference_column_names": [
            "client_id"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT client.client_id\nFROM client\nJOIN card ON client.client_id = card.disp_id\nWHERE card.issued = '1994-03-03';",
        "normalized_output_query": "SELECT client.client_id FROM client JOIN card ON client.client_id = card.disp_id WHERE card.issued = '1994-03-03';",
        "output_sample_result": [
            [
                2429
            ]
        ],
        "output_column_names": [
            "client_id"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6619718309859155,
        "bleu_similarity_score": 3.0773579353338367e-155,
        "execution_accuracy": false
    },
    {
        "question": "The transaction of 840 USD happened in 1998/10/14, when was this account opened?",
        "reference_query": "SELECT T1.date FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 840 AND T2.date = '1998-10-14'",
        "normalized_reference_query": "SELECT T1.date FROM ACCOUNT AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 840 AND T2.date = '1998-10-14'",
        "reference_error": null,
        "output_query": "SELECT a.date AS account_opened_date\nFROM public.transactions_1k t\nJOIN public.account a ON t.CustomerID = a.account_id\nWHERE t.Amount = 840 AND t.Date = '1998-10-14';",
        "normalized_output_query": "SELECT a.date AS account_opened_date FROM public.transactions_1k t JOIN public.account a ON t.CustomerID = a.account_id WHERE t.Amount = 840 AND t.Date = '1998-10-14';",
        "output_error": "relation \"public.transactions_1k\" does not exist\nLINE 1: SELECT a.date AS account_opened_date FROM public.transaction...\n                                                  ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "There was a loan approved in 1994/8/25, where was that account opened, give the district Id of the branch.",
        "reference_query": "SELECT T1.district_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1994-08-25'",
        "normalized_reference_query": "SELECT T1.district_id FROM ACCOUNT AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1994-08-25'",
        "reference_sample_result": [
            [
                31
            ]
        ],
        "reference_column_names": [
            "district_id"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT d.district_id\nFROM public.loan l\nJOIN public.account a ON l.account_id = a.account_id\nJOIN public.district d ON a.district_id = d.district_id\nWHERE l.date = '1994-08-25' AND l.status = 'approved';",
        "normalized_output_query": "SELECT d.district_id FROM public.loan l JOIN public.account a ON l.account_id = a.account_id JOIN public.district d ON a.district_id = d.district_id WHERE l.date = '1994-08-25' AND l.status = 'approved';",
        "output_sample_result": [],
        "output_column_names": [
            "district_id"
        ],
        "output_row_count": 0,
        "output_column_count": 1,
        "sequence_similarity_score": 0.39143730886850153,
        "bleu_similarity_score": 4.87371842328988e-155,
        "execution_accuracy": false
    },
    {
        "question": "What is the biggest amount of transaction that the client whose card was opened in 1996/10/21 made?",
        "reference_query": "SELECT T4.amount FROM card AS T1 JOIN disp AS T2 ON T1.disp_id = T2.disp_id JOIN account AS T3 on T2.account_id = T3.account_id JOIN trans AS T4 on T3.account_id = T4.account_id WHERE T1.issued = '1996-10-21' ORDER BY T4.amount DESC LIMIT 1",
        "normalized_reference_query": "SELECT T4.amount FROM card AS T1 JOIN disp AS T2 ON T1.disp_id = T2.disp_id JOIN ACCOUNT AS T3 ON T2.account_id = T3.account_id JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.issued = '1996-10-21' ORDER BY T4.amount DESC LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT MAX(t.Amount) AS max_transaction_amount\nFROM public.transactions_1k t\nJOIN public.card c ON t.CardID = c.card_id\nWHERE c.issued = '1996-10-21';",
        "normalized_output_query": "SELECT MAX(t.Amount) AS max_transaction_amount FROM public.transactions_1k t JOIN public.card c ON t.CardID = c.card_id WHERE c.issued = '1996-10-21';",
        "output_error": "relation \"public.transactions_1k\" does not exist\nLINE 1: ...LECT MAX(t.Amount) AS max_transaction_amount FROM public.tra...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the gender of the oldest client who opened his/her account in the highest average salary branch?",
        "reference_query": "SELECT T2.gender FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id ORDER BY T1.\"A11\" DESC, T2.birth_date ASC LIMIT 1",
        "normalized_reference_query": "SELECT T2.gender FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id ORDER BY T1.\"A11\" DESC, T2.birth_date ASC LIMIT 1",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information about the salary or income associated with a branch. The tables do not have columns that relate account districts to income amounts to determine which branch has the highest average salary.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information about the salary OR income associated WITH a branch. The TABLES DO NOT have columns that relate ACCOUNT districts TO income amounts TO determine which branch has the highest average salary.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "For the client who applied the biggest loan, what was his/her first amount of transaction after opened the account?",
        "reference_query": "SELECT T3.amount FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id ORDER BY T1.amount DESC, T3.date ASC LIMIT 1",
        "normalized_reference_query": "SELECT T3.amount FROM loan AS T1 INNER JOIN ACCOUNT AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id ORDER BY T1.amount DESC, T3.date ASC LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT t1.\"Amount\"\nFROM public.transactions_1k t1\nJOIN public.loan l ON t1.\"CustomerID\" = l.account_id\nJOIN (\n    SELECT account_id, MIN(date) as account_open_date\n    FROM public.account\n    GROUP BY account_id\n) a ON l.account_id = a.account_id\nWHERE l.amount = (\n    SELECT MAX(amount)\n    FROM public.loan\n)\nAND t1.\"Date\" = (\n    SELECT MIN(t2.\"Date\")\n    FROM public.transactions_1k t2\n    WHERE t2.\"CustomerID\" = t1.\"CustomerID\" AND t2.\"Date\" >= a.account_open_date\n)\nLIMIT 1;",
        "normalized_output_query": "SELECT t1.\"Amount\" FROM public.transactions_1k t1 JOIN public.loan l ON t1.\"CustomerID\" = l.account_id JOIN (SELECT account_id, MIN(date) AS account_open_date FROM public.account GROUP BY account_id) a ON l.account_id = a.account_id WHERE l.amount = (SELECT MAX(amount) FROM public.loan) AND t1.\"Date\" = (SELECT MIN(t2.\"Date\") FROM public.transactions_1k t2 WHERE t2.\"CustomerID\" = t1.\"CustomerID\" AND t2.\"Date\" >= a.account_open_date) LIMIT 1;",
        "output_error": "relation \"public.transactions_1k\" does not exist\nLINE 1: SELECT t1.\"Amount\" FROM public.transactions_1k t1 JOIN publi...\n                                ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many clients opened their accounts in Jesenik branch were women?",
        "reference_query": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.\"A2\" = 'Jesenik'",
        "normalized_reference_query": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.\"A2\" = 'Jesenik'",
        "reference_error": null,
        "output_query": "It can't be generated.",
        "normalized_output_query": "It can't be generated.",
        "output_error": "syntax error at or near \"It\"\nLINE 1: It can't be generated.\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the disposition id of the client who made 5100 USD transaction in 1998/9/2?",
        "reference_query": "SELECT T1.disp_id FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.date='1997-08-20' AND T3.amount = 5100",
        "normalized_reference_query": "SELECT T1.disp_id FROM disp AS T1 INNER JOIN ACCOUNT AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.date='1997-08-20' AND T3.amount = 5100",
        "reference_error": null,
        "output_query": "SELECT d.disp_id\nFROM public.transactions_1k t\nJOIN public.card c ON t.CardID = c.card_id\nJOIN public.disp d ON c.disp_id = d.disp_id\nWHERE t.Amount = 5100 AND t.Date = '1998-09-02';",
        "normalized_output_query": "SELECT d.disp_id FROM public.transactions_1k t JOIN public.card c ON t.CardID = c.card_id JOIN public.disp d ON c.disp_id = d.disp_id WHERE t.Amount = 5100 AND t.Date = '1998-09-02';",
        "output_error": "relation \"public.transactions_1k\" does not exist\nLINE 1: SELECT d.disp_id FROM public.transactions_1k t JOIN public.c...\n                              ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many accounts were opened in Litomerice in 1996?",
        "reference_query": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE EXTRACT(YEAR FROM T2.date) = '1996' AND T1.\"A2\" = 'Litomerice'",
        "normalized_reference_query": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN ACCOUNT AS T2 ON T1.district_id = T2.district_id WHERE EXTRACT(YEAR FROM T2.date) = '1996' AND T1.\"A2\" = 'Litomerice'",
        "reference_error": null,
        "output_query": "Error running intermediate SQL: You need to connect to a database first by running vn.connect_to_snowflake(), vn.connect_to_postgres(), similar function, or manually set vn.run_sql",
        "normalized_output_query": "Error running intermediate SQL: You need TO CONNECT TO a DATABASE FIRST BY running vn.connect_to_snowflake(), vn.connect_to_postgres(), SIMILAR FUNCTION, OR manually SET vn.run_sql",
        "output_error": "syntax error at or near \"Error\"\nLINE 1: Error running intermediate SQL: You need TO CONNECT TO a DAT...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "For the female client who was born in 1976/1/29, which district did she opened her account?",
        "reference_query": "SELECT T1.\"A2\" FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.birth_date = '1976-01-29' AND T2.gender = 'F'",
        "normalized_reference_query": "SELECT T1.\"A2\" FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.birth_date = '1976-01-29' AND T2.gender = 'F'",
        "reference_sample_result": [
            [
                "Tachov"
            ]
        ],
        "reference_column_names": [
            "A2"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT d.*\nFROM public.client c\nJOIN public.account a ON c.district_id = a.district_id\nJOIN public.district d ON a.district_id = d.district_id\nWHERE c.gender = 'female' AND c.birth_date = '1976-01-29';",
        "normalized_output_query": "SELECT d.* FROM public.client c JOIN public.account a ON c.district_id = a.district_id JOIN public.district d ON a.district_id = d.district_id WHERE c.gender = 'female' AND c.birth_date = '1976-01-29';",
        "output_sample_result": [],
        "output_column_names": [
            "district_id",
            "A2",
            "A3",
            "A4",
            "A5",
            "A6",
            "A7",
            "A8",
            "A9",
            "A10",
            "A11",
            "A12",
            "A13",
            "A14",
            "A15",
            "A16"
        ],
        "output_row_count": 0,
        "output_column_count": 16,
        "sequence_similarity_score": 0.37822349570200575,
        "bleu_similarity_score": 1.384292958842266e-231,
        "execution_accuracy": false
    },
    {
        "question": "For the client who applied 98832 USD loan in 1996/1/3, when was his/her birthday?",
        "reference_query": "SELECT T4.birth_date FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T1.date = '1996-01-03' AND T1.amount = 98832",
        "normalized_reference_query": "SELECT T4.birth_date FROM loan AS T1 INNER JOIN ACCOUNT AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T1.date = '1996-01-03' AND T1.amount = 98832",
        "reference_sample_result": [
            [
                "1970-09-10"
            ]
        ],
        "reference_column_names": [
            "birth_date"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT c.birth_date\nFROM public.loan l\nJOIN public.account a ON l.account_id = a.account_id\nJOIN public.client c ON a.district_id = c.district_id\nWHERE l.amount = 98832 AND l.date = '1996-01-03';",
        "normalized_output_query": "SELECT c.birth_date FROM public.loan l JOIN public.account a ON l.account_id = a.account_id JOIN public.client c ON a.district_id = c.district_id WHERE l.amount = 98832 AND l.date = '1996-01-03';",
        "output_sample_result": [
            [
                "1973-05-26"
            ],
            [
                "1967-04-20"
            ],
            [
                "1922-05-24"
            ],
            [
                "1946-05-17"
            ],
            [
                "1943-07-30"
            ]
        ],
        "output_column_names": [
            "birth_date"
        ],
        "output_row_count": 59,
        "output_column_count": 1,
        "sequence_similarity_score": 0.5288888888888889,
        "bleu_similarity_score": 3.276302886080089e-155,
        "execution_accuracy": false
    },
    {
        "question": "For the first client who opened his/her account in Prague, what is his/her account ID?",
        "reference_query": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.\"A3\" = 'Prague' ORDER BY T1.date ASC LIMIT 1",
        "normalized_reference_query": "SELECT T1.account_id FROM ACCOUNT AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.\"A3\" = 'Prague' ORDER BY T1.date ASC LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT a.account_id\nFROM public.account a\nJOIN public.client c ON a.district_id = c.district_id\nWHERE c.district_id = (\n    SELECT district_id\n    FROM public.client\n    WHERE district_id IN (\n        SELECT district_id\n        FROM public.client\n        WHERE district_id = (SELECT district_id FROM public.client WHERE district_id = (SELECT MIN(district_id) FROM public.client WHERE district_id IS NOT NULL))\n    )\n) \nORDER BY a.date\nLIMIT 1;",
        "normalized_output_query": "SELECT a.account_id FROM public.account a JOIN public.client c ON a.district_id = c.district_id WHERE c.district_id = (SELECT district_id FROM public.client WHERE district_id IN (SELECT district_id FROM public.client WHERE district_id = (SELECT district_id FROM public.client WHERE district_id = (SELECT MIN(district_id) FROM public.client WHERE district_id IS NOT NULL)))) ORDER BY a.date LIMIT 1;",
        "output_error": "more than one row returned by a subquery used as an expression\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
        "reference_query": "SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.\"A3\" = 'south Bohemia' GROUP BY T2.\"A4\" ORDER BY T2.\"A4\" DESC LIMIT 1",
        "normalized_reference_query": "SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.\"A3\" = 'south Bohemia' GROUP BY T2.\"A4\" ORDER BY T2.\"A4\" DESC LIMIT 1",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information about branch locations or how to determine which branch is located in the south Bohemia with the biggest number of inhabitants. The necessary data, such as a table linking branches to locations or additional geographical information, is missing.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information about branch locations OR how TO determine which branch IS located IN the south Bohemia WITH the biggest number OF inhabitants. The necessary DATA, such AS a TABLE linking branches TO locations OR additional geographical information, IS missing.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?",
        "reference_query": "SELECT CAST((SUM(CASE WHEN T3.date = '1998-12-27' THEN T3.balance ELSE 0 END) - SUM(CASE WHEN T3.date = '1993-03-22' THEN T3.balance ELSE 0 END)) AS DOUBLE PRECISION) * 100 / SUM(CASE WHEN T3.date = '1993-03-22' THEN T3.balance ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T3.account_id = T2.account_id WHERE T1.date = '1993-07-05'",
        "normalized_reference_query": "SELECT CAST((SUM(CASE WHEN T3.date = '1998-12-27' THEN T3.balance ELSE 0 END) - SUM(CASE WHEN T3.date = '1993-03-22' THEN T3.balance ELSE 0 END)) AS DOUBLE PRECISION) * 100 / SUM(CASE WHEN T3.date = '1993-03-22' THEN T3.balance ELSE 0 END) FROM loan AS T1 INNER JOIN ACCOUNT AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T3.account_id = T2.account_id WHERE T1.date = '1993-07-05'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to answer the question because there are no tables or columns that provide information about account balances over time. We have the `loan`, `account`, and `client` tables, but there is no data related to account balances or transactions that would allow us to calculate the increase rate in account balance.",
        "normalized_output_query": "The provided context IS insufficient TO answer the question because there ARE NO TABLES OR columns that provide information about ACCOUNT balances OVER time. We have the `loan`, `account`, AND `client` TABLES, but there IS NO DATA related TO ACCOUNT balances OR transactions that would allow us TO calculate the increase rate IN ACCOUNT balance.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO answer the question ...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the percentage of loan amount that has been fully paid with no issue.",
        "reference_query": "SELECT (CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS DOUBLE PRECISION) * 100) / SUM(amount) FROM loan",
        "normalized_reference_query": "SELECT (CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS DOUBLE PRECISION) * 100) / SUM(amount) FROM loan",
        "reference_sample_result": [
            [
                18.01559415907576
            ]
        ],
        "reference_column_names": [
            "?column?"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT \n    (SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) / SUM(amount) * 100) AS percentage_fully_paid\nFROM \n    public.loan;",
        "normalized_output_query": "SELECT (SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) / SUM(amount) * 100) AS percentage_fully_paid FROM public.loan;",
        "output_sample_result": [
            [
                0
            ]
        ],
        "output_column_names": [
            "percentage_fully_paid"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6919831223628692,
        "bleu_similarity_score": 0.4918537211621339,
        "execution_accuracy": false
    },
    {
        "question": "For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue.",
        "reference_query": "SELECT CAST(SUM(CASE WHEN status = 'C' THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(account_id) FROM loan WHERE amount < 100000",
        "normalized_reference_query": "SELECT CAST(SUM(CASE WHEN status = 'C' THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(account_id) FROM loan WHERE amount < 100000",
        "reference_sample_result": [
            [
                46.885245901639344
            ]
        ],
        "reference_column_names": [
            "?column?"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT \n    (COUNT(CASE WHEN status = 'running' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_running\nFROM \n    public.loan\nWHERE \n    amount < 100000;",
        "normalized_output_query": "SELECT (COUNT(CASE WHEN status = 'running' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_running FROM public.loan WHERE amount < 100000;",
        "output_sample_result": [
            [
                "0E-20"
            ]
        ],
        "output_column_names": [
            "percentage_running"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6911764705882353,
        "bleu_similarity_score": 3.8532334796462844e-78,
        "execution_accuracy": false
    },
    {
        "question": "For accounts in 1993 with statement issued after transaction, list the account ID, district name and district region.",
        "reference_query": "SELECT T1.account_id, T2.\"A2\", T2.\"A3\" FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND EXTRACT(YEAR FROM T1.date)= '1993'",
        "normalized_reference_query": "SELECT T1.account_id, T2.\"A2\", T2.\"A3\" FROM ACCOUNT AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND EXTRACT(YEAR FROM T1.date)= '1993'",
        "reference_error": null,
        "output_query": "SELECT a.account_id, d.A2 AS district_name, d.A3 AS district_region\nFROM public.account a\nJOIN public.district d ON a.district_id = d.district_id\nWHERE a.date >= '1993-01-01' AND a.date <= '1993-12-31'\nAND a.frequency = 'issued_after_transaction';",
        "normalized_output_query": "SELECT a.account_id, d.A2 AS district_name, d.A3 AS district_region FROM public.account a JOIN public.district d ON a.district_id = d.district_id WHERE a.date >= '1993-01-01' AND a.date <= '1993-12-31' AND a.frequency = 'issued_after_transaction';",
        "output_error": "column d.a2 does not exist\nLINE 1: SELECT a.account_id, d.A2 AS district_name, d.A3 AS district...\n                             ^\nHINT:  Perhaps you meant to reference the column \"d.A2\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "From Year 1995 to 2000, who are the accounts holders from 'east Bohemia'. State the account ID the frequency of statement issuance.",
        "reference_query": "SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.\"A3\" = 'east Bohemia' AND EXTRACT(YEAR FROM T1.date) BETWEEN '1995' AND '2000'",
        "normalized_reference_query": "SELECT T1.account_id, T1.frequency FROM ACCOUNT AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.\"A3\" = 'east Bohemia' AND EXTRACT(YEAR FROM T1.date) BETWEEN '1995' AND '2000'",
        "reference_error": null,
        "output_query": "SELECT a.account_id, a.frequency\nFROM public.account a\nJOIN public.district d ON a.district_id = d.district_id\nWHERE d.A2 = 'east Bohemia'\nAND a.date BETWEEN '1995-01-01' AND '2000-12-31';",
        "normalized_output_query": "SELECT a.account_id, a.frequency FROM public.account a JOIN public.district d ON a.district_id = d.district_id WHERE d.A2 = 'east Bohemia' AND a.date BETWEEN '1995-01-01' AND '2000-12-31';",
        "output_error": "column d.a2 does not exist\nLINE 1: ...district d ON a.district_id = d.district_id WHERE d.A2 = 'ea...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"d.A2\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "List account ID and account opening date for accounts from 'Prachatice'.",
        "reference_query": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.\"A2\" = 'Prachatice'",
        "normalized_reference_query": "SELECT T1.account_id, T1.date FROM ACCOUNT AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.\"A2\" = 'Prachatice'",
        "reference_error": null,
        "output_query": "The provided context does not include information on how to connect the `account` table with a location such as 'Prachatice'. Therefore, it is not possible to generate a SQL query to answer the question with the given context.",
        "normalized_output_query": "The provided context does NOT INCLUDE information ON how TO CONNECT the `account` TABLE WITH a LOCATION such AS 'Prachatice'. Therefore, it IS NOT possible TO generate a SQL query TO answer the question WITH the given context.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context does NOT INCLUDE information ON how TO ...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "State the district and region for loan ID '4990'.",
        "reference_query": "SELECT T2.\"A2\", T2.\"A3\" FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.loan_id = 4990",
        "normalized_reference_query": "SELECT T2.\"A2\", T2.\"A3\" FROM ACCOUNT AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.loan_id = 4990",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information in the given table schemas that links loan IDs directly to any specific region information. The \"district\" table is likely relevant, but there is no clear connection between its columns and a \"region\" or a specific way to determine the district name or region based on the loan ID.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information IN the given TABLE schemas that links loan IDs directly TO ANY SPECIFIC region information. The \"district\" TABLE IS likely relevant, but there IS NO clear CONNECTION BETWEEN its columns AND a \"region\" OR a SPECIFIC way TO determine the district name OR region based ON the loan ID.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Provide the account ID, district and region for loan amount greater than USD300,000.",
        "reference_query": "SELECT T1.account_id, T2.\"A2\", T2.\"A3\" FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.amount > 300000",
        "normalized_reference_query": "SELECT T1.account_id, T2.\"A2\", T2.\"A3\" FROM ACCOUNT AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.amount > 300000",
        "reference_error": null,
        "output_query": "SELECT a.account_id, d.district_id, d.A2 AS region\nFROM public.loan l\nJOIN public.account a ON l.account_id = a.account_id\nJOIN public.district d ON a.district_id = d.district_id\nWHERE l.amount > 300000;",
        "normalized_output_query": "SELECT a.account_id, d.district_id, d.A2 AS region FROM public.loan l JOIN public.account a ON l.account_id = a.account_id JOIN public.district d ON a.district_id = d.district_id WHERE l.amount > 300000;",
        "output_error": "column d.a2 does not exist\nLINE 1: SELECT a.account_id, d.district_id, d.A2 AS region FROM publ...\n                                            ^\nHINT:  Perhaps you meant to reference the column \"d.A2\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "List the loan ID, district and average salary for loan with duration of 60 months.",
        "reference_query": "SELECT T3.loan_id, T2.\"A2\", T2.\"A11\" FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration = 60",
        "normalized_reference_query": "SELECT T3.loan_id, T2.\"A2\", T2.\"A11\" FROM ACCOUNT AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration = 60",
        "reference_error": null,
        "output_query": "SELECT l.loan_id, d.A2 AS district_name, d.A10 AS average_salary\nFROM public.loan l\nJOIN public.account a ON l.account_id = a.account_id\nJOIN public.district d ON a.district_id = d.district_id\nWHERE l.duration = 60;",
        "normalized_output_query": "SELECT l.loan_id, d.A2 AS district_name, d.A10 AS average_salary FROM public.loan l JOIN public.account a ON l.account_id = a.account_id JOIN public.district d ON a.district_id = d.district_id WHERE l.duration = 60;",
        "output_error": "column d.a2 does not exist\nLINE 1: SELECT l.loan_id, d.A2 AS district_name, d.A10 AS average_sa...\n                          ^\nHINT:  Perhaps you meant to reference the column \"d.A2\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.",
        "reference_query": "SELECT CAST((T3.\"A13\" - T3.\"A12\") AS DOUBLE PRECISION) * 100 / T3.\"A12\" FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'",
        "normalized_reference_query": "SELECT CAST((T3.\"A13\" - T3.\"A12\") AS DOUBLE PRECISION) * 100 / T3.\"A12\" FROM loan AS T1 INNER JOIN ACCOUNT AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information about the unemployment rate or how it changed from 1995 to 1996 in the given tables.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information about the unemployment rate OR how it changed FROM 1995 TO 1996 IN the given tables.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Calculate the percentage of account from 'Decin' district for all accounts are opened in 1993.",
        "reference_query": "SELECT CAST(SUM(CASE WHEN T1.\"A2\" = 'Decin' THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE EXTRACT(YEAR FROM T2.date) = '1993'",
        "normalized_reference_query": "SELECT CAST(SUM(CASE WHEN T1.\"A2\" = 'Decin' THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(account_id) FROM district AS T1 INNER JOIN ACCOUNT AS T2 ON T1.district_id = T2.district_id WHERE EXTRACT(YEAR FROM T2.date) = '1993'",
        "reference_error": null,
        "output_query": "SELECT \n    (COUNT(a.account_id) FILTER (WHERE d.A3 = 'Decin')::FLOAT / COUNT(a.account_id) * 100) AS percentage_decin\nFROM \n    public.account a\nJOIN \n    public.district d ON a.district_id = d.district_id\nWHERE \n    EXTRACT(YEAR FROM a.date) = 1993;",
        "normalized_output_query": "SELECT (COUNT(a.account_id) FILTER (WHERE d.A3 = 'Decin')::FLOAT / COUNT(a.account_id) * 100) AS percentage_decin FROM public.account a JOIN public.district d ON a.district_id = d.district_id WHERE EXTRACT(YEAR FROM a.date) = 1993;",
        "output_error": "column d.a3 does not exist\nLINE 1: SELECT (COUNT(a.account_id) FILTER (WHERE d.A3 = 'Decin')::F...\n                                                  ^\nHINT:  Perhaps you meant to reference the column \"d.A3\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "List the account IDs with monthly issuance of statements.",
        "reference_query": "SELECT account_id FROM account WHERE Frequency = 'POPLATEK MESICNE'",
        "normalized_reference_query": "SELECT account_id FROM ACCOUNT WHERE Frequency = 'POPLATEK MESICNE'",
        "reference_sample_result": [
            [
                1
            ],
            [
                2
            ],
            [
                3
            ],
            [
                4
            ],
            [
                5
            ]
        ],
        "reference_column_names": [
            "account_id"
        ],
        "reference_row_count": 4167,
        "reference_column_count": 1,
        "output_query": "SELECT account_id \nFROM public.account \nWHERE frequency = 'monthly';",
        "normalized_output_query": "SELECT account_id FROM public.account WHERE frequency = 'monthly';",
        "output_sample_result": [],
        "output_column_names": [
            "account_id"
        ],
        "output_row_count": 0,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6466165413533834,
        "bleu_similarity_score": 4.476766863915479e-78,
        "execution_accuracy": false
    },
    {
        "question": "List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders.",
        "reference_query": "SELECT T2.\"A2\", COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.district_id, T2.\"A2\" ORDER BY COUNT(T1.client_id) DESC LIMIT 9",
        "normalized_reference_query": "SELECT T2.\"A2\", COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.district_id, T2.\"A2\" ORDER BY COUNT(T1.client_id) DESC LIMIT 9",
        "reference_sample_result": [
            [
                "Hl.m. Praha",
                324
            ],
            [
                "Karvina",
                88
            ],
            [
                "Ostrava - mesto",
                84
            ],
            [
                "Brno - mesto",
                75
            ],
            [
                "Zlin",
                57
            ]
        ],
        "reference_column_names": [
            "A2",
            "count"
        ],
        "reference_row_count": 9,
        "reference_column_count": 2,
        "output_query": "SELECT d.district_id, COUNT(c.client_id) AS female_account_holders\nFROM public.client c\nJOIN public.account a ON c.district_id = a.district_id\nJOIN public.district d ON a.district_id = d.district_id\nWHERE c.gender = 'female'\nGROUP BY d.district_id\nORDER BY female_account_holders DESC\nLIMIT 9;",
        "normalized_output_query": "SELECT d.district_id, COUNT(c.client_id) AS female_account_holders FROM public.client c JOIN public.account a ON c.district_id = a.district_id JOIN public.district d ON a.district_id = d.district_id WHERE c.gender = 'female' GROUP BY d.district_id ORDER BY female_account_holders DESC LIMIT 9;",
        "output_sample_result": [],
        "output_column_names": [
            "district_id",
            "female_account_holders"
        ],
        "output_row_count": 0,
        "output_column_count": 2,
        "sequence_similarity_score": 0.45634920634920634,
        "bleu_similarity_score": 6.465435715377238e-155,
        "execution_accuracy": false
    },
    {
        "question": "Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996?",
        "reference_query": "SELECT DISTINCT T1.\"A2\" FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' AND T3.date::TEXT LIKE '1996-01%' ORDER BY \"A2\" ASC LIMIT 10",
        "normalized_reference_query": "SELECT DISTINCT T1.\"A2\" FROM district AS T1 INNER JOIN ACCOUNT AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' AND T3.date::TEXT LIKE '1996-01%' ORDER BY \"A2\" ASC LIMIT 10",
        "reference_error": null,
        "output_query": "It can't be generated because the provided context does not include any table or columns that clearly indicate a record of withdrawals, nor is there a direct relationship between transactions and district names. Additionally, the context does not specify which transactions are non-credit card withdrawals.",
        "normalized_output_query": "It can't be GENERATED because the provided context does NOT INCLUDE ANY TABLE OR columns that clearly indicate a record OF withdrawals, nor IS there a direct relationship BETWEEN transactions AND district names. Additionally, the context does NOT specify which transactions ARE non-credit card withdrawals.",
        "output_error": "syntax error at or near \"It\"\nLINE 1: It can't be GENERATED because the provided context does NOT ...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many of the account holders in South Bohemia still do not own credit cards?",
        "reference_query": "SELECT COUNT(T3.account_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.client_id = T3.client_id WHERE T1.\"A3\" = 'south Bohemia' AND T3.type != 'OWNER'",
        "normalized_reference_query": "SELECT COUNT(T3.account_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.client_id = T3.client_id WHERE T1.\"A3\" = 'south Bohemia' AND T3.type != 'OWNER'",
        "reference_error": null,
        "output_query": "It can't be generated because the provided context does not contain any information about the region or location of account holders, such as \"South Bohemia\". The tables provided do not include any geographical data related to account holders.",
        "normalized_output_query": "It can't be GENERATED because the provided context does NOT contain ANY information about the region OR LOCATION OF ACCOUNT holders, such AS \"South Bohemia\". The TABLES provided DO NOT INCLUDE ANY geographical DATA related TO ACCOUNT holders.",
        "output_error": "syntax error at or near \"It\"\nLINE 1: It can't be GENERATED because the provided context does NOT ...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Which district has highest active loan?",
        "reference_query": "SELECT T2.\"A3\" FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.status IN ('C', 'D') GROUP BY T2.\"A3\" ORDER BY SUM(T3.amount) DESC LIMIT 1",
        "normalized_reference_query": "SELECT T2.\"A3\" FROM ACCOUNT AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.status IN ('C', 'D') GROUP BY T2.\"A3\" ORDER BY SUM(T3.amount) DESC LIMIT 1",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate a SQL query to answer the question. The \"loan\" table contains information about loans including their status, but there is no direct link or column indicating which loans are \"active.\" Additionally, the \"district\" table is separate and does not have a direct relationship with the \"loan\" table in the given schema. More information is needed on how to determine if a loan is active and how to associate loans with districts.",
        "normalized_output_query": "The provided context IS insufficient TO generate a SQL query TO answer the question. The \"loan\" TABLE CONTAINS information about loans INCLUDING their status, but there IS NO direct LINK OR COLUMN indicating which loans ARE \"active.\" Additionally, the \"district\" TABLE IS separate AND does NOT have a direct relationship WITH the \"loan\" TABLE IN the given schema. MORE information IS needed ON how TO determine IF a loan IS active AND how TO associate loans WITH districts.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate a SQL query...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the average loan amount by male borrowers?",
        "reference_query": "SELECT AVG(T4.amount) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M'",
        "normalized_reference_query": "SELECT AVG(T4.amount) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN ACCOUNT AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M'",
        "reference_sample_result": [
            [
                "149609.180487804878"
            ]
        ],
        "reference_column_names": [
            "avg"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT AVG(l.amount) AS average_loan_amount\nFROM public.loan l\nJOIN public.client c ON l.account_id = c.client_id\nWHERE c.gender = 'male';",
        "normalized_output_query": "SELECT AVG(l.amount) AS average_loan_amount FROM public.loan l JOIN public.client c ON l.account_id = c.client_id WHERE c.gender = 'male';",
        "output_sample_result": [
            [
                null
            ]
        ],
        "output_column_names": [
            "average_loan_amount"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.4273972602739726,
        "bleu_similarity_score": 5.176553906213128e-232,
        "execution_accuracy": false
    },
    {
        "question": "In 1996, which districts have the highest unemployment rate? List their branch location and district name.",
        "reference_query": "SELECT district_id, \"A2\" FROM district ORDER BY \"A13\" DESC LIMIT 1",
        "normalized_reference_query": "SELECT district_id, \"A2\" FROM district ORDER BY \"A13\" DESC LIMIT 1",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information on unemployment rates in any of the tables.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information ON unemployment rates IN ANY OF the tables.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "In the branch where the largest number of crimes were committed in 1996, how many accounts were opened?",
        "reference_query": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id GROUP BY T1.\"A16\" ORDER BY T1.\"A16\" DESC LIMIT 1",
        "normalized_reference_query": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN ACCOUNT AS T2 ON T1.district_id = T2.district_id GROUP BY T1.\"A16\" ORDER BY T1.\"A16\" DESC LIMIT 1",
        "reference_error": null,
        "output_query": "The provided context is insufficient because there is no information related to branches or crimes committed in 1996 in the available tables. The context only includes tables related to accounts, SAT scores, loans, transactions, yearmonth data, members, zip codes, income, majors, and votes.",
        "normalized_output_query": "The provided context IS insufficient because there IS NO information related TO branches OR crimes COMMITTED IN 1996 IN the available tables. The context ONLY includes TABLES related TO accounts, SAT scores, loans, transactions, yearmonth DATA, members, zip codes, income, majors, AND votes.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient because there IS NO inf...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "After making a credit card withdrawal, how many account/s with monthly issuance has a negative balance?",
        "reference_query": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.balance < 0 AND T1.operation = 'VYBER KARTOU' AND T2.frequency = 'POPLATEK MESICNE'",
        "normalized_reference_query": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN ACCOUNT AS T2 ON T1.account_id = T2.account_id WHERE T1.balance < 0 AND T1.operation = 'VYBER KARTOU' AND T2.frequency = 'POPLATEK MESICNE'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query. The available tables do not contain information about account balances or withdrawals. Additionally, there is no direct link between card transactions and account balances in the provided schema.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query. The available TABLES DO NOT contain information about ACCOUNT balances OR withdrawals. Additionally, there IS NO direct LINK BETWEEN card transactions AND ACCOUNT balances IN the provided schema.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?",
        "reference_query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.frequency = 'POPLATEK MESICNE' AND T2.amount >= 250000",
        "normalized_reference_query": "SELECT COUNT(T1.account_id) FROM ACCOUNT AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.frequency = 'POPLATEK MESICNE' AND T2.amount >= 250000",
        "reference_sample_result": [
            [
                65
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(DISTINCT l.account_id) AS num_loans\nFROM public.loan l\nJOIN public.account a ON l.account_id = a.account_id\nWHERE l.date BETWEEN '1995-01-01' AND '1997-12-31'\n  AND l.amount >= 250000\n  AND a.frequency = 'monthly'\n  AND l.status = 'approved';",
        "normalized_output_query": "SELECT COUNT(DISTINCT l.account_id) AS num_loans FROM public.loan l JOIN public.account a ON l.account_id = a.account_id WHERE l.date BETWEEN '1995-01-01' AND '1997-12-31' AND l.amount >= 250000 AND a.frequency = 'monthly' AND l.status = 'approved';",
        "output_sample_result": [
            [
                0
            ]
        ],
        "output_column_names": [
            "num_loans"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.2974137931034483,
        "bleu_similarity_score": 0.1486872032633242,
        "execution_accuracy": false
    },
    {
        "question": "How many accounts have running contracts in Branch location 1?",
        "reference_query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D')",
        "normalized_reference_query": "SELECT COUNT(T1.account_id) FROM ACCOUNT AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D')",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information about \"Branch location 1\" or any column in the tables that corresponds to branch locations.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information about \"Branch location 1\" OR ANY COLUMN IN the TABLES that corresponds TO branch locations.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
        "reference_query": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.\"A15\" = (SELECT T3.\"A15\" FROM district AS T3 ORDER BY T3.\"A15\" DESC LIMIT 1 OFFSET 1)",
        "normalized_reference_query": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.\"A15\" = (SELECT T3.\"A15\" FROM district AS T3 ORDER BY T3.\"A15\" DESC LIMIT 1 OFFSET 1)",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information given about crimes, branches, or how they relate to clients in the available tables.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information given about crimes, branches, OR how they relate TO clients IN the available tables.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the most common bond type?",
        "reference_query": "SELECT T.bond_type FROM ( SELECT bond_type, COUNT(bond_id) FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1 ) AS T",
        "normalized_reference_query": "SELECT T.bond_type FROM (SELECT bond_type, COUNT(bond_id) FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1) AS T",
        "reference_sample_result": [
            [
                "-"
            ]
        ],
        "reference_column_names": [
            "bond_type"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT bond_type, COUNT(*) AS bond_count\nFROM public.bond\nGROUP BY bond_type\nORDER BY bond_count DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT bond_type, COUNT(*) AS bond_count FROM public.bond GROUP BY bond_type ORDER BY bond_count DESC LIMIT 1;",
        "output_sample_result": [
            [
                "-",
                10528
            ]
        ],
        "output_column_names": [
            "bond_type",
            "bond_count"
        ],
        "output_row_count": 1,
        "output_column_count": 2,
        "sequence_similarity_score": 0.7196652719665272,
        "bleu_similarity_score": 0.2444148630746174,
        "execution_accuracy": false
    },
    {
        "question": "In the non-carcinogenic molecules, how many contain chlorine atoms?",
        "reference_query": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'cl' AND T1.label = '-'",
        "normalized_reference_query": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'cl' AND T1.label = '-'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because it does not include any information about whether a molecule is carcinogenic or non-carcinogenic. Additional data or context is needed to identify non-carcinogenic molecules.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because it does NOT INCLUDE ANY information about whether a molecule IS carcinogenic OR non-carcinogenic. Additional DATA OR context IS needed TO identify non-carcinogenic molecules.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Calculate the average number of oxygen atoms in single-bonded molecules.",
        "reference_query": "SELECT AVG(oxygen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'o'  GROUP BY T1.molecule_id) AS oxygen_counts",
        "normalized_reference_query": "SELECT AVG(oxygen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-' AND T1.element = 'o' GROUP BY T1.molecule_id) AS oxygen_counts",
        "reference_sample_result": [
            [
                "116.6527331189710611"
            ]
        ],
        "reference_column_names": [
            "avg"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT AVG(oxygen_count) AS average_oxygen_atoms\nFROM (\n    SELECT m.molecule_id, COUNT(a.atom_id) AS oxygen_count\n    FROM molecule m\n    JOIN atom a ON m.molecule_id = a.molecule_id\n    JOIN bond b ON m.molecule_id = b.molecule_id\n    WHERE a.element = 'O' AND b.bond_type = 'single'\n    GROUP BY m.molecule_id\n) AS oxygen_counts;",
        "normalized_output_query": "SELECT AVG(oxygen_count) AS average_oxygen_atoms FROM (SELECT m.molecule_id, COUNT(a.atom_id) AS oxygen_count FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id WHERE a.element = 'O' AND b.bond_type = 'single' GROUP BY m.molecule_id) AS oxygen_counts;",
        "output_sample_result": [
            [
                null
            ]
        ],
        "output_column_names": [
            "average_oxygen_atoms"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6606498194945848,
        "bleu_similarity_score": 2.590623916681263e-78,
        "execution_accuracy": false
    },
    {
        "question": "On average how many carcinogenic molecules are single bonded?",
        "reference_query": "SELECT AVG(single_bond_count) FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS single_bond_count FROM bond AS T1  INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T3.label = '+' GROUP BY T3.molecule_id) AS subquery",
        "normalized_reference_query": "SELECT AVG(single_bond_count) FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS single_bond_count FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T3.label = '+' GROUP BY T3.molecule_id) AS subquery",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information on which molecules are carcinogenic, and there is no explicit mention of single bonds in the tables.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information ON which molecules ARE carcinogenic, AND there IS NO explicit mention OF single bonds IN the tables.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "In the molecule containing sodium atoms, how many are non-carcinogenic?",
        "reference_query": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'",
        "normalized_reference_query": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'",
        "reference_error": null,
        "output_query": "The provided context does not contain information regarding whether a molecule is carcinogenic or non-carcinogenic. Therefore, it is insufficient to generate a SQL query to answer the question.",
        "normalized_output_query": "The provided context does NOT contain information regarding whether a molecule IS carcinogenic OR non-carcinogenic. Therefore, it IS insufficient TO generate a SQL query TO answer the question.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context does NOT contain information regarding ...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Find the triple-bonded molecules which are carcinogenic.",
        "reference_query": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'",
        "normalized_reference_query": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information regarding molecules being carcinogenic or any related column in the given tables.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information regarding molecules being carcinogenic OR ANY related COLUMN IN the given tables.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the percentage of carbon in double-bond molecules?",
        "reference_query": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS DOUBLE PRECISION) * 100 / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='",
        "normalized_reference_query": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS DOUBLE PRECISION) * 100 / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='",
        "reference_error": null,
        "output_query": "SELECT \n    (CAST(COUNT(DISTINCT a.atom_id) AS FLOAT) / CAST(COUNT(DISTINCT b.molecule_id) AS FLOAT)) * 100 AS percentage_of_carbon\nFROM \n    bond b\nJOIN \n    atom a ON b.molecule_id = a.molecule_id\nWHERE \n    b.bond_type = 'double' AND a.element = 'C';",
        "normalized_output_query": "SELECT (CAST(COUNT(DISTINCT a.atom_id) AS FLOAT) / CAST(COUNT(DISTINCT b.molecule_id) AS FLOAT)) * 100 AS percentage_of_carbon FROM bond b JOIN atom a ON b.molecule_id = a.molecule_id WHERE b.bond_type = 'double' AND a.element = 'C';",
        "output_error": "division by zero\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many triple type bonds are there?",
        "reference_query": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '#'",
        "normalized_reference_query": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '#'",
        "reference_sample_result": [
            [
                6
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*) FROM public.bond WHERE bond_type = 'triple';",
        "normalized_output_query": "SELECT COUNT(*) FROM public.bond WHERE bond_type = 'triple';",
        "output_sample_result": [
            [
                0
            ]
        ],
        "output_column_names": [
            "count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7377049180327869,
        "bleu_similarity_score": 1.1931009847695213e-231,
        "execution_accuracy": false
    },
    {
        "question": "In how many atoms is there no bromine?",
        "reference_query": "SELECT COUNT(DISTINCT T.atom_id) FROM atom AS T WHERE T.element <> 'br'",
        "normalized_reference_query": "SELECT COUNT(DISTINCT T.atom_id) FROM atom AS T WHERE T.element <> 'br'",
        "reference_sample_result": [
            [
                12286
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*) \nFROM atom \nWHERE element != 'bromine';",
        "normalized_output_query": "SELECT COUNT(*) FROM atom WHERE element != 'bromine';",
        "output_sample_result": [
            [
                12333
            ]
        ],
        "output_column_names": [
            "count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7096774193548387,
        "bleu_similarity_score": 5.300047673625059e-155,
        "execution_accuracy": false
    },
    {
        "question": "Of the first 100 molecules in number order, how many are carcinogenic?",
        "reference_query": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND T.label = '+'",
        "normalized_reference_query": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND T.label = '+'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information or column in the given tables that indicates whether a molecule is carcinogenic or not.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information OR COLUMN IN the given TABLES that indicates whether a molecule IS carcinogenic OR not.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Identify by their ID the molecules in which there is carbon.",
        "reference_query": "SELECT T.molecule_id FROM atom AS T WHERE T.element = 'c'",
        "normalized_reference_query": "SELECT T.molecule_id FROM atom AS T WHERE T.element = 'c'",
        "reference_sample_result": [
            [
                "TR000"
            ],
            [
                "TR001"
            ],
            [
                "TR001"
            ],
            [
                "TR001"
            ],
            [
                "TR001"
            ]
        ],
        "reference_column_names": [
            "molecule_id"
        ],
        "reference_row_count": 4605,
        "reference_column_count": 1,
        "output_query": "SELECT DISTINCT m.molecule_id\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE a.element = 'carbon';",
        "normalized_output_query": "SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'carbon';",
        "output_sample_result": [],
        "output_column_names": [
            "molecule_id"
        ],
        "output_row_count": 0,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6057142857142858,
        "bleu_similarity_score": 1.3416480207402436e-231,
        "execution_accuracy": false
    },
    {
        "question": "What elements are in the TR004_8_9 bond atoms?",
        "reference_query": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'",
        "normalized_reference_query": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'",
        "reference_sample_result": [
            [
                "c"
            ]
        ],
        "reference_column_names": [
            "element"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT DISTINCT a.element\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id\nWHERE c.bond_id = 'TR004_8_9';",
        "normalized_output_query": "SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.bond_id = 'TR004_8_9';",
        "output_sample_result": [
            [
                "c"
            ]
        ],
        "output_column_names": [
            "element"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.869198312236287,
        "bleu_similarity_score": 7.2055991862277836e-155,
        "execution_accuracy": false
    },
    {
        "question": "What elements are in a double type bond?",
        "reference_query": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='",
        "normalized_reference_query": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='",
        "reference_sample_result": [
            [
                "sn"
            ],
            [
                "ca"
            ],
            [
                "cu"
            ],
            [
                "p"
            ],
            [
                "h"
            ]
        ],
        "reference_column_names": [
            "element"
        ],
        "reference_row_count": 14,
        "reference_column_count": 1,
        "output_query": "SELECT DISTINCT a.element\nFROM atom a\nJOIN bond b ON a.molecule_id = b.molecule_id\nWHERE b.bond_type = 'double';",
        "normalized_output_query": "SELECT DISTINCT a.element FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id WHERE b.bond_type = 'double';",
        "output_sample_result": [],
        "output_column_names": [
            "element"
        ],
        "output_row_count": 0,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6827586206896552,
        "bleu_similarity_score": 4.243747078266376e-155,
        "execution_accuracy": false
    },
    {
        "question": "Which type of label is the most numerous in atoms with hydrogen?",
        "reference_query": "SELECT T.label FROM ( SELECT T2.label, COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.molecule_id) DESC LIMIT 1 ) t",
        "normalized_reference_query": "SELECT T.label FROM (SELECT T2.label, COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.molecule_id) DESC LIMIT 1) t",
        "reference_sample_result": [
            [
                "-"
            ]
        ],
        "reference_column_names": [
            "label"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT m.label, COUNT(*) AS count\nFROM public.atom a\nJOIN public.molecule m ON a.molecule_id = m.molecule_id\nWHERE a.element = 'hydrogen'\nGROUP BY m.label\nORDER BY count DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT m.label, COUNT(*) AS COUNT FROM public.atom a JOIN public.molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'hydrogen' GROUP BY m.label ORDER BY COUNT DESC LIMIT 1;",
        "output_sample_result": [],
        "output_column_names": [
            "label",
            "count"
        ],
        "output_row_count": 0,
        "output_column_count": 2,
        "sequence_similarity_score": 0.6339066339066339,
        "bleu_similarity_score": 6.057612708050602e-155,
        "execution_accuracy": false
    },
    {
        "question": "Chlorine is in what type of bond?",
        "reference_query": "SELECT DISTINCT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'cl'",
        "normalized_reference_query": "SELECT DISTINCT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'cl'",
        "reference_sample_result": [
            [
                "-"
            ]
        ],
        "reference_column_names": [
            "bond_type"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT DISTINCT b.bond_type\nFROM public.atom a\nJOIN public.connected c ON a.atom_id = c.atom_id\nJOIN public.bond b ON c.bond_id = b.bond_id\nWHERE a.element = 'Chlorine';",
        "normalized_output_query": "SELECT DISTINCT b.bond_type FROM public.atom a JOIN public.connected c ON a.atom_id = c.atom_id JOIN public.bond b ON c.bond_id = b.bond_id WHERE a.element = 'Chlorine';",
        "output_sample_result": [],
        "output_column_names": [
            "bond_type"
        ],
        "output_row_count": 0,
        "output_column_count": 1,
        "sequence_similarity_score": 0.5588235294117647,
        "bleu_similarity_score": 4.550484092420588e-155,
        "execution_accuracy": false
    },
    {
        "question": "What atoms are connected in single type bonds?",
        "reference_query": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'",
        "normalized_reference_query": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'",
        "reference_sample_result": [
            [
                "TR000_1",
                "TR000_2"
            ],
            [
                "TR000_2",
                "TR000_1"
            ],
            [
                "TR000_2",
                "TR000_3"
            ],
            [
                "TR000_3",
                "TR000_2"
            ],
            [
                "TR000_2",
                "TR000_4"
            ]
        ],
        "reference_column_names": [
            "atom_id",
            "atom_id2"
        ],
        "reference_row_count": 21056,
        "reference_column_count": 2,
        "output_query": "SELECT c.atom_id, c.atom_id2\nFROM public.connected c\nJOIN public.bond b ON c.bond_id = b.bond_id\nWHERE b.bond_type = 'single';",
        "normalized_output_query": "SELECT c.atom_id, c.atom_id2 FROM public.connected c JOIN public.bond b ON c.bond_id = b.bond_id WHERE b.bond_type = 'single';",
        "output_sample_result": [],
        "output_column_names": [
            "atom_id",
            "atom_id2"
        ],
        "output_row_count": 0,
        "output_column_count": 2,
        "sequence_similarity_score": 0.7091633466135459,
        "bleu_similarity_score": 1.2232927463054318e-231,
        "execution_accuracy": false
    },
    {
        "question": "Indicate which atoms are connected in non-carcinogenic type molecules.",
        "reference_query": "SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.label = '-'",
        "normalized_reference_query": "SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.label = '-'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the query. To determine which atoms are connected in non-carcinogenic type molecules, we would need additional information about which molecules are considered non-carcinogenic. This information is not present in the given tables.",
        "normalized_output_query": "The provided context IS insufficient TO generate the query. TO determine which atoms ARE connected IN non-carcinogenic TYPE molecules, we would need additional information about which molecules ARE considered non-carcinogenic. This information IS NOT present IN the given tables.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the query. ...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Which element is the least numerous in non-carcinogenic molecules?",
        "reference_query": "SELECT T.element FROM (SELECT T1.element, COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(DISTINCT T1.molecule_id) ASC LIMIT 1) t",
        "normalized_reference_query": "SELECT T.element FROM (SELECT T1.element, COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(DISTINCT T1.molecule_id) ASC LIMIT 1) t",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information about which molecules are non-carcinogenic. Additional data or criteria are needed to identify non-carcinogenic molecules within the tables.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information about which molecules ARE non-carcinogenic. Additional DATA OR criteria ARE needed TO identify non-carcinogenic molecules within the tables.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What type of bond is there between the atoms TR004_8 and TR004_20?",
        "reference_query": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20' OR T2.atom_id2 = 'TR004_8' AND T2.atom_id = 'TR004_20'",
        "normalized_reference_query": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20' OR T2.atom_id2 = 'TR004_8' AND T2.atom_id = 'TR004_20'",
        "reference_sample_result": [
            [
                "-"
            ],
            [
                "-"
            ]
        ],
        "reference_column_names": [
            "bond_type"
        ],
        "reference_row_count": 2,
        "reference_column_count": 1,
        "output_query": "SELECT b.bond_type\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE (c.atom_id = 'TR004_8' AND c.atom_id2 = 'TR004_20')\n   OR (c.atom_id = 'TR004_20' AND c.atom_id2 = 'TR004_8');",
        "normalized_output_query": "SELECT b.bond_type FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE (c.atom_id = 'TR004_8' AND c.atom_id2 = 'TR004_20') OR (c.atom_id = 'TR004_20' AND c.atom_id2 = 'TR004_8');",
        "output_sample_result": [
            [
                "-"
            ],
            [
                "-"
            ]
        ],
        "output_column_names": [
            "bond_type"
        ],
        "output_row_count": 2,
        "output_column_count": 1,
        "sequence_similarity_score": 0.711340206185567,
        "bleu_similarity_score": 2.476414363891106e-78,
        "execution_accuracy": false
    },
    {
        "question": "What type of label is not on molecules with atoms with tin?",
        "reference_query": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element != 'sn'",
        "normalized_reference_query": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element != 'sn'",
        "reference_sample_result": [
            [
                "-"
            ],
            [
                "+"
            ]
        ],
        "reference_column_names": [
            "label"
        ],
        "reference_row_count": 2,
        "reference_column_count": 1,
        "output_query": "SELECT DISTINCT m.label\nFROM molecule m\nWHERE m.molecule_id NOT IN (\n    SELECT a.molecule_id\n    FROM atom a\n    WHERE a.element = 'tin'\n);",
        "normalized_output_query": "SELECT DISTINCT m.label FROM molecule m WHERE m.molecule_id NOT IN (SELECT a.molecule_id FROM atom a WHERE a.element = 'tin');",
        "output_sample_result": [
            [
                "-"
            ],
            [
                "+"
            ]
        ],
        "output_column_names": [
            "label"
        ],
        "output_row_count": 2,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6904761904761905,
        "bleu_similarity_score": 6.365610974651558e-155,
        "execution_accuracy": false
    },
    {
        "question": "How many atoms with iodine and with sulfur type elements are there in single bond molecules?",
        "reference_query": "SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",
        "normalized_reference_query": "SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums, COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",
        "reference_sample_result": [
            [
                6,
                92
            ]
        ],
        "reference_column_names": [
            "iodine_nums",
            "sulfur_nums"
        ],
        "reference_row_count": 1,
        "reference_column_count": 2,
        "output_query": "SELECT COUNT(DISTINCT a.atom_id) AS count_of_atoms\nFROM atom a\nJOIN bond b ON a.molecule_id = b.molecule_id\nWHERE a.element IN ('iodine', 'sulfur') AND b.bond_type = 'single';",
        "normalized_output_query": "SELECT COUNT(DISTINCT a.atom_id) AS count_of_atoms FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id WHERE a.element IN ('iodine', 'sulfur') AND b.bond_type = 'single';",
        "output_sample_result": [
            [
                0
            ]
        ],
        "output_column_names": [
            "count_of_atoms"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.42231075697211157,
        "bleu_similarity_score": 2.2031467810618716e-155,
        "execution_accuracy": false
    },
    {
        "question": "Identify all connected atoms with a triple bond.",
        "reference_query": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'",
        "normalized_reference_query": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'",
        "reference_sample_result": [
            [
                "TR041_10",
                "TR041_7"
            ],
            [
                "TR041_7",
                "TR041_10"
            ],
            [
                "TR041_8",
                "TR041_9"
            ],
            [
                "TR041_9",
                "TR041_8"
            ],
            [
                "TR377_3",
                "TR377_5"
            ]
        ],
        "reference_column_names": [
            "atom_id",
            "atom_id2"
        ],
        "reference_row_count": 12,
        "reference_column_count": 2,
        "output_query": "SELECT c.atom_id, c.atom_id2\nFROM public.connected c\nJOIN public.bond b ON c.bond_id = b.bond_id\nWHERE b.bond_type = 'triple';",
        "normalized_output_query": "SELECT c.atom_id, c.atom_id2 FROM public.connected c JOIN public.bond b ON c.bond_id = b.bond_id WHERE b.bond_type = 'triple';",
        "output_sample_result": [],
        "output_column_names": [
            "atom_id",
            "atom_id2"
        ],
        "output_row_count": 0,
        "output_column_count": 2,
        "sequence_similarity_score": 0.7091633466135459,
        "bleu_similarity_score": 1.2232927463054318e-231,
        "execution_accuracy": false
    },
    {
        "question": "Identify all the atoms that are connected to the atoms of the TR181 molecule.",
        "reference_query": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T1.molecule_id = 'TR181'",
        "normalized_reference_query": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T1.molecule_id = 'TR181'",
        "reference_sample_result": [
            [
                "TR181_10",
                "TR181_13"
            ],
            [
                "TR181_13",
                "TR181_10"
            ],
            [
                "TR181_10",
                "TR181_26"
            ],
            [
                "TR181_26",
                "TR181_10"
            ],
            [
                "TR181_11",
                "TR181_14"
            ]
        ],
        "reference_column_names": [
            "atom_id",
            "atom_id2"
        ],
        "reference_row_count": 82,
        "reference_column_count": 2,
        "output_query": "SELECT a.atom_id\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id2\nWHERE a.molecule_id = 'TR181';",
        "normalized_output_query": "SELECT a.atom_id FROM atom a JOIN connected c ON a.atom_id = c.atom_id2 WHERE a.molecule_id = 'TR181';",
        "output_sample_result": [
            [
                "TR181_13"
            ],
            [
                "TR181_10"
            ],
            [
                "TR181_26"
            ],
            [
                "TR181_10"
            ],
            [
                "TR181_14"
            ]
        ],
        "output_column_names": [
            "atom_id"
        ],
        "output_row_count": 82,
        "output_column_count": 1,
        "sequence_similarity_score": 0.8068669527896996,
        "bleu_similarity_score": 6.079444681843188e-155,
        "execution_accuracy": false
    },
    {
        "question": "What percentage of carcinogenic-type molecules does not contain fluorine?",
        "reference_query": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS DOUBLE PRECISION) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "normalized_reference_query": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS DOUBLE PRECISION) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "reference_error": null,
        "output_query": "SELECT \n    (COUNT(DISTINCT m.molecule_id) FILTER(WHERE a.atom_id IS NULL) * 100.0 / COUNT(DISTINCT m.molecule_id)) AS percentage_without_fluorine\nFROM \n    molecule m\nLEFT JOIN \n    atom a ON m.molecule_id = a.molecule_id AND a.element = 'Fluorine'\nJOIN \n    bond b ON m.molecule_id = b.molecule_id AND b.bond_type = 'carcinogenic'",
        "normalized_output_query": "SELECT (COUNT(DISTINCT m.molecule_id) FILTER(WHERE a.atom_id IS NULL) * 100.0 / COUNT(DISTINCT m.molecule_id)) AS percentage_without_fluorine FROM molecule m LEFT JOIN atom a ON m.molecule_id = a.molecule_id AND a.element = 'Fluorine' JOIN bond b ON m.molecule_id = b.molecule_id AND b.bond_type = 'carcinogenic'",
        "output_error": "division by zero\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the percentage of carcinogenic molecules in triple type bonds?",
        "reference_query": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS DOUBLE PRECISION) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'",
        "normalized_reference_query": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS DOUBLE PRECISION) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to determine the percentage of carcinogenic molecules in triple type bonds. There is no information or column in the given tables that indicates whether a molecule is carcinogenic or not.",
        "normalized_output_query": "The provided context IS insufficient TO determine the percentage OF carcinogenic molecules IN triple TYPE bonds. There IS NO information OR COLUMN IN the given TABLES that indicates whether a molecule IS carcinogenic OR not.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO determine the percen...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order.",
        "reference_query": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000' ORDER BY T.element LIMIT 3",
        "normalized_reference_query": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000' ORDER BY T.element LIMIT 3",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information on toxicology or any related data in the context. The available tables do not contain any columns or data related to toxicology.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information ON toxicology OR ANY related DATA IN the context. The available TABLES DO NOT contain ANY columns OR DATA related TO toxicology.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What are the atoms that are bonded in the molecule TR001 with the bond ID of TR001_2_6?",
        "reference_query": "SELECT SUBSTR(T.bond_id, 1, 7) AS atom_id1 , T.molecule_id || SUBSTR(T.bond_id, 8, 2) AS atom_id2 FROM bond AS T WHERE T.molecule_id = 'TR001' AND T.bond_id = 'TR001_2_6'",
        "normalized_reference_query": "SELECT SUBSTR(T.bond_id, 1, 7) AS atom_id1, T.molecule_id || SUBSTR(T.bond_id, 8, 2) AS atom_id2 FROM bond AS T WHERE T.molecule_id = 'TR001' AND T.bond_id = 'TR001_2_6'",
        "reference_sample_result": [
            [
                "TR001_2",
                "TR001_6"
            ]
        ],
        "reference_column_names": [
            "atom_id1",
            "atom_id2"
        ],
        "reference_row_count": 1,
        "reference_column_count": 2,
        "output_query": "SELECT a.atom_id, a.element\nFROM atom a\nJOIN bond b ON a.molecule_id = b.molecule_id\nJOIN connected c ON b.bond_id = c.bond_id\nWHERE b.bond_id = 'TR001_2_6' AND b.molecule_id = \n    (SELECT molecule_id FROM molecule WHERE label = 'TR001');",
        "normalized_output_query": "SELECT a.atom_id, a.element FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_id = 'TR001_2_6' AND b.molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR001');",
        "output_sample_result": [],
        "output_column_names": [
            "atom_id",
            "element"
        ],
        "output_row_count": 0,
        "output_column_count": 2,
        "sequence_similarity_score": 0.25806451612903225,
        "bleu_similarity_score": 4.2712793110891995e-155,
        "execution_accuracy": false
    },
    {
        "question": "What is the difference between the number of molecules that are carcinogenic and those that are not?",
        "reference_query": "SELECT COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) - COUNT(CASE WHEN T.label = '-' THEN T.molecule_id ELSE NULL END) AS diff_car_notcar FROM molecule t",
        "normalized_reference_query": "SELECT COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) - COUNT(CASE WHEN T.label = '-' THEN T.molecule_id ELSE NULL END) AS diff_car_notcar FROM molecule t",
        "reference_error": null,
        "output_query": "It can't be generated because there is no information in the provided context that indicates whether a molecule is carcinogenic or not.",
        "normalized_output_query": "It can't be GENERATED because there IS NO information IN the provided context that indicates whether a molecule IS carcinogenic OR not.",
        "output_error": "syntax error at or near \"It\"\nLINE 1: It can't be GENERATED because there IS NO information IN the...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What are the atom IDs of the bond TR000_2_5?",
        "reference_query": "SELECT T.atom_id FROM connected AS T WHERE T.bond_id = 'TR000_2_5'",
        "normalized_reference_query": "SELECT T.atom_id FROM connected AS T WHERE T.bond_id = 'TR000_2_5'",
        "reference_sample_result": [
            [
                "TR000_2"
            ],
            [
                "TR000_5"
            ]
        ],
        "reference_column_names": [
            "atom_id"
        ],
        "reference_row_count": 2,
        "reference_column_count": 1,
        "output_query": "SELECT atom_id, atom_id2\nFROM public.connected\nWHERE bond_id = 'TR000_2_5';",
        "normalized_output_query": "SELECT atom_id, atom_id2 FROM public.connected WHERE bond_id = 'TR000_2_5';",
        "output_sample_result": [
            [
                "TR000_2",
                "TR000_5"
            ],
            [
                "TR000_5",
                "TR000_2"
            ]
        ],
        "output_column_names": [
            "atom_id",
            "atom_id2"
        ],
        "output_row_count": 2,
        "output_column_count": 2,
        "sequence_similarity_score": 0.8085106382978723,
        "bleu_similarity_score": 1.331091014027761e-231,
        "execution_accuracy": false
    },
    {
        "question": "What are the bond IDs that have the same atom ID 2 of TR000_2?",
        "reference_query": "SELECT T.bond_id FROM connected AS T WHERE T.atom_id2 = 'TR000_2'",
        "normalized_reference_query": "SELECT T.bond_id FROM connected AS T WHERE T.atom_id2 = 'TR000_2'",
        "reference_sample_result": [
            [
                "TR000_1_2"
            ],
            [
                "TR000_2_3"
            ],
            [
                "TR000_2_4"
            ],
            [
                "TR000_2_5"
            ]
        ],
        "reference_column_names": [
            "bond_id"
        ],
        "reference_row_count": 4,
        "reference_column_count": 1,
        "output_query": "SELECT bond_id\nFROM public.connected\nWHERE atom_id2 = 'TR000_2';",
        "normalized_output_query": "SELECT bond_id FROM public.connected WHERE atom_id2 = 'TR000_2';",
        "output_sample_result": [
            [
                "TR000_1_2"
            ],
            [
                "TR000_2_3"
            ],
            [
                "TR000_2_4"
            ],
            [
                "TR000_2_5"
            ]
        ],
        "output_column_names": [
            "bond_id"
        ],
        "output_row_count": 4,
        "output_column_count": 1,
        "sequence_similarity_score": 0.8682170542635659,
        "bleu_similarity_score": 1.1931009847695213e-231,
        "execution_accuracy": false
    },
    {
        "question": "Please list top five molecules that have double bonds in alphabetical order.",
        "reference_query": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '=' ORDER BY T.molecule_id LIMIT 5",
        "normalized_reference_query": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '=' ORDER BY T.molecule_id LIMIT 5",
        "reference_sample_result": [
            [
                "TR001"
            ],
            [
                "TR002"
            ],
            [
                "TR004"
            ],
            [
                "TR005"
            ],
            [
                "TR006"
            ]
        ],
        "reference_column_names": [
            "molecule_id"
        ],
        "reference_row_count": 5,
        "reference_column_count": 1,
        "output_query": "SELECT m.label\nFROM public.molecule m\nJOIN public.bond b ON m.molecule_id = b.molecule_id\nWHERE b.bond_type = 'double'\nGROUP BY m.label\nORDER BY m.label\nLIMIT 5;",
        "normalized_output_query": "SELECT m.label FROM public.molecule m JOIN public.bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = 'double' GROUP BY m.label ORDER BY m.label LIMIT 5;",
        "output_sample_result": [],
        "output_column_names": [
            "label"
        ],
        "output_row_count": 0,
        "output_column_count": 1,
        "sequence_similarity_score": 0.5461538461538461,
        "bleu_similarity_score": 5.0056670151089064e-155,
        "execution_accuracy": false
    },
    {
        "question": "What is the percentage of double bonds in the molecule TR008? Please provide your answer as a percentage with five decimal places.",
        "reference_query": "SELECT ROUND(CASE WHEN COUNT(T.bond_id) > 0 THEN (COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END)::NUMERIC * 100 / COUNT(T.bond_id)) ELSE 0 END, 5) AS percentage FROM bond AS T WHERE T.molecule_id = 'TR008'",
        "normalized_reference_query": "SELECT ROUND(CASE WHEN COUNT(T.bond_id) > 0 THEN (COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END)::NUMERIC * 100 / COUNT(T.bond_id)) ELSE 0 END, 5) AS percentage FROM bond AS T WHERE T.molecule_id = 'TR008'",
        "reference_sample_result": [
            [
                "3.84615"
            ]
        ],
        "reference_column_names": [
            "percentage"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "WITH double_bonds AS (\n    SELECT COUNT(*) AS double_bond_count\n    FROM bond\n    WHERE bond_type = 'double'\n    AND molecule_id = 'TR008'\n),\ntotal_bonds AS (\n    SELECT COUNT(*) AS total_bond_count\n    FROM bond\n    WHERE molecule_id = 'TR008'\n)\nSELECT \n    (CAST(double_bond_count AS DECIMAL) / total_bond_count) * 100 AS double_bond_percentage\nFROM double_bonds, total_bonds;",
        "normalized_output_query": "WITH double_bonds AS (SELECT COUNT(*) AS double_bond_count FROM bond WHERE bond_type = 'double' AND molecule_id = 'TR008'), total_bonds AS (SELECT COUNT(*) AS total_bond_count FROM bond WHERE molecule_id = 'TR008') SELECT (CAST(double_bond_count AS DECIMAL) / total_bond_count) * 100 AS double_bond_percentage FROM double_bonds, total_bonds;",
        "output_sample_result": [
            [
                "0E-20"
            ]
        ],
        "output_column_names": [
            "double_bond_percentage"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.11012433392539965,
        "bleu_similarity_score": 5.0149845469221364e-155,
        "execution_accuracy": false
    },
    {
        "question": "What is the percentage of molecules that are carcinogenic? Please provide your answer as a percentage with three decimal places.",
        "reference_query": "SELECT ROUND(CASE WHEN COUNT(T.molecule_id) > 0 THEN (COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END)::NUMERIC * 100 / COUNT(T.molecule_id)) ELSE 0 END, 3) AS percentage FROM molecule AS T",
        "normalized_reference_query": "SELECT ROUND(CASE WHEN COUNT(T.molecule_id) > 0 THEN (COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END)::NUMERIC * 100 / COUNT(T.molecule_id)) ELSE 0 END, 3) AS percentage FROM molecule AS T",
        "reference_error": null,
        "output_query": "It is not possible to generate the SQL query because the provided context does not include any information about which molecules are carcinogenic.",
        "normalized_output_query": "It IS NOT possible TO generate the SQL query because the provided context does NOT INCLUDE ANY information about which molecules ARE carcinogenic.",
        "output_error": "syntax error at or near \"It\"\nLINE 1: It IS NOT possible TO generate the SQL query because the pro...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer as a percentage with four decimal places.",
        "reference_query": "SELECT ROUND(CASE WHEN COUNT(T.atom_id) > 0 THEN (COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END)::NUMERIC * 100 / COUNT(T.atom_id)) ELSE 0 END, 4) AS percentage FROM atom AS T WHERE T.molecule_id = 'TR206'",
        "normalized_reference_query": "SELECT ROUND(CASE WHEN COUNT(T.atom_id) > 0 THEN (COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END)::NUMERIC * 100 / COUNT(T.atom_id)) ELSE 0 END, 4) AS percentage FROM atom AS T WHERE T.molecule_id = 'TR206'",
        "reference_error": null,
        "output_query": "SELECT \n    (COUNT(a.atom_id) FILTER (WHERE a.element = 'H')::FLOAT / COUNT(a.atom_id)::FLOAT) * 100 AS hydrogen_percentage\nFROM \n    molecule m\nJOIN \n    atom a ON m.molecule_id = a.molecule_id\nWHERE \n    m.label = 'TR206';",
        "normalized_output_query": "SELECT (COUNT(a.atom_id) FILTER (WHERE a.element = 'H')::FLOAT / COUNT(a.atom_id)::FLOAT) * 100 AS hydrogen_percentage FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = 'TR206';",
        "output_error": "division by zero\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the type of bond that molecule TR000 has when involved in any bonds?",
        "reference_query": "SELECT DISTINCT T.bond_type FROM bond AS T WHERE T.molecule_id = 'TR000'",
        "normalized_reference_query": "SELECT DISTINCT T.bond_type FROM bond AS T WHERE T.molecule_id = 'TR000'",
        "reference_sample_result": [
            [
                "-"
            ]
        ],
        "reference_column_names": [
            "bond_type"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT DISTINCT b.bond_type\nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nWHERE m.label = 'TR000';",
        "normalized_output_query": "SELECT DISTINCT b.bond_type FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.label = 'TR000';",
        "output_sample_result": [],
        "output_column_names": [
            "bond_type"
        ],
        "output_row_count": 0,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6702702702702703,
        "bleu_similarity_score": 6.836365931062249e-155,
        "execution_accuracy": false
    },
    {
        "question": "What are the elements of the toxicology and label of molecule TR060?",
        "reference_query": "SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'",
        "normalized_reference_query": "SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'",
        "reference_sample_result": [
            [
                "o",
                "-"
            ],
            [
                "cl",
                "-"
            ],
            [
                "n",
                "-"
            ],
            [
                "h",
                "-"
            ],
            [
                "c",
                "-"
            ]
        ],
        "reference_column_names": [
            "element",
            "label"
        ],
        "reference_row_count": 5,
        "reference_column_count": 2,
        "output_query": "SELECT a.element, m.label\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE m.label = 'TR060';",
        "normalized_output_query": "SELECT a.element, m.label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = 'TR060';",
        "output_sample_result": [],
        "output_column_names": [
            "element",
            "label"
        ],
        "output_row_count": 0,
        "output_column_count": 2,
        "sequence_similarity_score": 0.792156862745098,
        "bleu_similarity_score": 5.9794491790779356e-155,
        "execution_accuracy": false
    },
    {
        "question": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?",
        "reference_query": "SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T",
        "normalized_reference_query": "SELECT T.bond_type FROM (SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1 WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1) AS T",
        "reference_sample_result": [
            [
                "-"
            ]
        ],
        "reference_column_names": [
            "bond_type"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT bond_type, COUNT(*) as bond_count\nFROM bond\nWHERE molecule_id = 'TR010'\nGROUP BY bond_type\nORDER BY bond_count DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT bond_type, COUNT(*) AS bond_count FROM bond WHERE molecule_id = 'TR010' GROUP BY bond_type ORDER BY bond_count DESC LIMIT 1;",
        "output_sample_result": [
            [
                "-",
                16
            ]
        ],
        "output_column_names": [
            "bond_type",
            "bond_count"
        ],
        "output_row_count": 1,
        "output_column_count": 2,
        "sequence_similarity_score": 0.694006309148265,
        "bleu_similarity_score": 0.14904975734713108,
        "execution_accuracy": false
    },
    {
        "question": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order.",
        "reference_query": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id LIMIT 3",
        "normalized_reference_query": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id LIMIT 3",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information about whether a molecule is carcinogenic or not in the given tables.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information about whether a molecule IS carcinogenic OR NOT IN the given tables.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Please list top two bonds that happened with the molecule TR006 in alphabetical order.",
        "reference_query": "SELECT DISTINCT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = 'TR006' ORDER BY T2.bond_id LIMIT 2",
        "normalized_reference_query": "SELECT DISTINCT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = 'TR006' ORDER BY T2.bond_id LIMIT 2",
        "reference_sample_result": [
            [
                "TR006_1_2"
            ],
            [
                "TR006_1_3"
            ]
        ],
        "reference_column_names": [
            "bond_id"
        ],
        "reference_row_count": 2,
        "reference_column_count": 1,
        "output_query": "SELECT bond_id\nFROM bond\nWHERE molecule_id = 'TR006'\nORDER BY bond_id\nLIMIT 2;",
        "normalized_output_query": "SELECT bond_id FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_id LIMIT 2;",
        "output_sample_result": [
            [
                "TR006_1_2"
            ],
            [
                "TR006_1_3"
            ]
        ],
        "output_column_names": [
            "bond_id"
        ],
        "output_row_count": 2,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6523605150214592,
        "bleu_similarity_score": 0.09136792760216281,
        "execution_accuracy": false
    },
    {
        "question": "How many bonds which involved atom 12 does molecule TR009 have?",
        "reference_query": "SELECT COUNT(T2.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND T2.atom_id = T1.molecule_id || '_1' AND T2.atom_id2 = T1.molecule_id || '_2'",
        "normalized_reference_query": "SELECT COUNT(T2.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND T2.atom_id = T1.molecule_id || '_1' AND T2.atom_id2 = T1.molecule_id || '_2'",
        "reference_sample_result": [
            [
                1
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(b.bond_id) AS bond_count\nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN atom a ON (c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id)\nWHERE m.label = 'TR009' AND a.atom_id = '12';",
        "normalized_output_query": "SELECT COUNT(b.bond_id) AS bond_count FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON (c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id) WHERE m.label = 'TR009' AND a.atom_id = '12';",
        "output_sample_result": [
            [
                0
            ]
        ],
        "output_column_names": [
            "bond_count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.30196936542669583,
        "bleu_similarity_score": 2.141194237232923e-78,
        "execution_accuracy": false
    },
    {
        "question": "How many molecules are carcinogenic and have the bromine element?",
        "reference_query": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'br'",
        "normalized_reference_query": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'br'",
        "reference_error": null,
        "output_query": "It can't be generated. The provided context does not include any information about whether molecules are carcinogenic.",
        "normalized_output_query": "It can't be generated. The provided context does NOT INCLUDE ANY information about whether molecules ARE carcinogenic.",
        "output_error": "syntax error at or near \"It\"\nLINE 1: It can't be generated. The provided context does NOT INCLUDE...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What are the bond type and the atoms of the bond ID of TR001_6_9?",
        "reference_query": "SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR001_6_9'",
        "normalized_reference_query": "SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR001_6_9'",
        "reference_sample_result": [
            [
                "-",
                "TR001_6",
                "TR001_9"
            ],
            [
                "-",
                "TR001_9",
                "TR001_6"
            ]
        ],
        "reference_column_names": [
            "bond_type",
            "atom_id",
            "atom_id2"
        ],
        "reference_row_count": 2,
        "reference_column_count": 3,
        "output_query": "SELECT \n    b.bond_type,\n    a1.element AS atom1,\n    a2.element AS atom2\nFROM \n    bond b\nJOIN \n    connected c ON b.bond_id = c.bond_id\nJOIN \n    atom a1 ON c.atom_id = a1.atom_id\nJOIN \n    atom a2 ON c.atom_id2 = a2.atom_id\nWHERE \n    b.bond_id = 'TR001_6_9';",
        "normalized_output_query": "SELECT b.bond_type, a1.element AS atom1, a2.element AS atom2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_id = 'TR001_6_9';",
        "output_sample_result": [
            [
                "-",
                "c",
                "c"
            ],
            [
                "-",
                "c",
                "c"
            ]
        ],
        "output_column_names": [
            "bond_type",
            "atom1",
            "atom2"
        ],
        "output_row_count": 2,
        "output_column_count": 3,
        "sequence_similarity_score": 0.3956639566395664,
        "bleu_similarity_score": 5.4223213184430215e-155,
        "execution_accuracy": false
    },
    {
        "question": "Which molecule does the atom TR001_10 belong to? Please state whether this molecule is carcinogenic or not.",
        "reference_query": "SELECT T2.molecule_id , CASE WHEN T2.label = '+' THEN 'YES' ELSE 'NO' END AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'",
        "normalized_reference_query": "SELECT T2.molecule_id, CASE WHEN T2.label = '+' THEN 'YES' ELSE 'NO' END AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'",
        "reference_sample_result": [
            [
                "TR001",
                "YES"
            ]
        ],
        "reference_column_names": [
            "molecule_id",
            "flag_carcinogenic"
        ],
        "reference_row_count": 1,
        "reference_column_count": 2,
        "output_query": "SELECT m.molecule_id, m.label\nFROM public.atom a\nJOIN public.molecule m ON a.molecule_id = m.molecule_id\nWHERE a.atom_id = 'TR001_10';",
        "normalized_output_query": "SELECT m.molecule_id, m.label FROM public.atom a JOIN public.molecule m ON a.molecule_id = m.molecule_id WHERE a.atom_id = 'TR001_10';",
        "output_sample_result": [
            [
                "TR001",
                "+"
            ]
        ],
        "output_column_names": [
            "molecule_id",
            "label"
        ],
        "output_row_count": 1,
        "output_column_count": 2,
        "sequence_similarity_score": 0.6706586826347305,
        "bleu_similarity_score": 6.4049585569461455e-232,
        "execution_accuracy": false
    },
    {
        "question": "How many molecules have a triple bond type?",
        "reference_query": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.bond_type = '#'",
        "normalized_reference_query": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.bond_type = '#'",
        "reference_sample_result": [
            [
                4
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(DISTINCT m.molecule_id) AS num_molecules_with_triple_bond\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nWHERE b.bond_type = 'triple';",
        "normalized_output_query": "SELECT COUNT(DISTINCT m.molecule_id) AS num_molecules_with_triple_bond FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = 'triple';",
        "output_sample_result": [
            [
                0
            ]
        ],
        "output_column_names": [
            "num_molecules_with_triple_bond"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.5847457627118644,
        "bleu_similarity_score": 5.642092463903971e-155,
        "execution_accuracy": false
    },
    {
        "question": "How many connections does the atom 19 have?",
        "reference_query": "SELECT COUNT(T.bond_id) FROM connected AS T WHERE SUBSTR(T.atom_id, -2) = '19'",
        "normalized_reference_query": "SELECT COUNT(T.bond_id) FROM connected AS T WHERE SUBSTR(T.atom_id, -2) = '19'",
        "reference_sample_result": [
            [
                0
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*) AS connection_count\nFROM public.connected\nWHERE atom_id = '19' OR atom_id2 = '19';",
        "normalized_output_query": "SELECT COUNT(*) AS connection_count FROM public.connected WHERE atom_id = '19' OR atom_id2 = '19';",
        "output_sample_result": [
            [
                0
            ]
        ],
        "output_column_names": [
            "connection_count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.5909090909090909,
        "bleu_similarity_score": 6.356121367760845e-155,
        "execution_accuracy": false
    },
    {
        "question": "List all the elements of the toxicology of the molecule \"TR004\".",
        "reference_query": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR004'",
        "normalized_reference_query": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR004'",
        "reference_sample_result": [
            [
                "c"
            ],
            [
                "h"
            ],
            [
                "n"
            ],
            [
                "o"
            ],
            [
                "p"
            ]
        ],
        "reference_column_names": [
            "element"
        ],
        "reference_row_count": 6,
        "reference_column_count": 1,
        "output_query": "SELECT a.element\nFROM public.atom a\nJOIN public.molecule m ON a.molecule_id = m.molecule_id\nWHERE m.label = 'TR004';",
        "normalized_output_query": "SELECT a.element FROM public.atom a JOIN public.molecule m ON a.molecule_id = m.molecule_id WHERE m.label = 'TR004';",
        "output_sample_result": [],
        "output_column_names": [
            "element"
        ],
        "output_row_count": 0,
        "output_column_count": 1,
        "sequence_similarity_score": 0.5483870967741935,
        "bleu_similarity_score": 1.2882297539194154e-231,
        "execution_accuracy": false
    },
    {
        "question": "How many of the molecules are not carcinogenic?",
        "reference_query": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '-'",
        "normalized_reference_query": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '-'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to determine whether a molecule is carcinogenic or not. The tables given do not contain any information related to the carcinogenicity of molecules.",
        "normalized_output_query": "The provided context IS insufficient TO determine whether a molecule IS carcinogenic OR not. The TABLES given DO NOT contain ANY information related TO the carcinogenicity OF molecules.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO determine whether a ...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Among all the atoms from 21 to 25, list all the molecules that are carcinogenic.",
        "reference_query": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, -2) BETWEEN '21' AND '25' AND T2.label = '+'",
        "normalized_reference_query": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, -2) BETWEEN '21' AND '25' AND T2.label = '+'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the query because there is no information regarding which molecules are carcinogenic. Additional data or a table specifying carcinogenic molecules is required.",
        "normalized_output_query": "The provided context IS insufficient TO generate the query because there IS NO information regarding which molecules ARE carcinogenic. Additional DATA OR a TABLE specifying carcinogenic molecules IS required.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the query b...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What are the bonds that have phosphorus and nitrogen as their atom elements?",
        "reference_query": "SELECT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id IN ( SELECT T3.bond_id FROM connected AS T3 INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T4.element = 'p' ) AND T1.element = 'n'",
        "normalized_reference_query": "SELECT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id IN (SELECT T3.bond_id FROM connected AS T3 INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T4.element = 'p') AND T1.element = 'n'",
        "reference_sample_result": [
            [
                "TR032_2_3"
            ],
            [
                "TR032_3_5"
            ],
            [
                "TR058_1_3"
            ],
            [
                "TR058_1_4"
            ],
            [
                "TR058_1_5"
            ]
        ],
        "reference_column_names": [
            "bond_id"
        ],
        "reference_row_count": 6,
        "reference_column_count": 1,
        "output_query": "SELECT b.bond_id\nFROM bond b\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE (a1.element = 'Phosphorus' AND a2.element = 'Nitrogen')\n   OR (a1.element = 'Nitrogen' AND a2.element = 'Phosphorus');",
        "normalized_output_query": "SELECT b.bond_id FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE (a1.element = 'Phosphorus' AND a2.element = 'Nitrogen') OR (a1.element = 'Nitrogen' AND a2.element = 'Phosphorus');",
        "output_sample_result": [],
        "output_column_names": [
            "bond_id"
        ],
        "output_row_count": 0,
        "output_column_count": 1,
        "sequence_similarity_score": 0.203125,
        "bleu_similarity_score": 5.419313094640011e-155,
        "execution_accuracy": false
    },
    {
        "question": "Is the molecule with the most double bonds carcinogenic?",
        "reference_query": "SELECT T1.label FROM molecule AS T1 INNER JOIN ( SELECT T.molecule_id, COUNT(T.bond_type) FROM bond AS T WHERE T.bond_type = '=' GROUP BY T.molecule_id ORDER BY COUNT(T.bond_type) DESC LIMIT 1 ) AS T2 ON T1.molecule_id = T2.molecule_id",
        "normalized_reference_query": "SELECT T1.label FROM molecule AS T1 INNER JOIN (SELECT T.molecule_id, COUNT(T.bond_type) FROM bond AS T WHERE T.bond_type = '=' GROUP BY T.molecule_id ORDER BY COUNT(T.bond_type) DESC LIMIT 1) AS T2 ON T1.molecule_id = T2.molecule_id",
        "reference_error": null,
        "output_query": "The provided context is insufficient to determine if the molecule with the most double bonds is carcinogenic. The tables do not contain any information about the carcinogenic properties of molecules. Additional data or context about the carcinogenic properties of molecules would be necessary to answer this question.",
        "normalized_output_query": "The provided context IS insufficient TO determine IF the molecule WITH the most DOUBLE bonds IS carcinogenic. The TABLES DO NOT contain ANY information about the carcinogenic properties OF molecules. Additional DATA OR context about the carcinogenic properties OF molecules would be necessary TO answer this question.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO determine IF the mol...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Which are the cards that have incredibly powerful foils.",
        "reference_query": "SELECT id FROM cards WHERE \"cardKingdomFoilId\" IS NOT NULL AND \"cardKingdomId\" IS NOT NULL",
        "normalized_reference_query": "SELECT id FROM cards WHERE \"cardKingdomFoilId\" IS NOT NULL AND \"cardKingdomId\" IS NOT NULL",
        "reference_error": null,
        "output_query": "The provided context does not contain specific information about what constitutes \"incredibly powerful foils\" for cards. Therefore, it's not possible to generate a SQL query to answer this question without additional context or criteria for what makes a foil \"incredibly powerful\".",
        "normalized_output_query": "The provided context does NOT contain SPECIFIC information about what constitutes \"incredibly powerful foils\" FOR cards. Therefore, it's NOT possible TO generate a SQL query TO answer this question WITHOUT additional context OR criteria FOR what makes a foil \"incredibly powerful\".",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context does NOT contain SPECIFIC information a...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What are the borderless cards available without powerful foils?",
        "reference_query": "SELECT id FROM cards WHERE \"borderColor\" = 'borderless' AND (\"cardKingdomId\" IS NULL OR \"cardKingdomId\" IS NULL)",
        "normalized_reference_query": "SELECT id FROM cards WHERE \"borderColor\" = 'borderless' AND (\"cardKingdomId\" IS NULL OR \"cardKingdomId\" IS NULL)",
        "reference_sample_result": [
            [
                23004
            ],
            [
                25350
            ],
            [
                25355
            ],
            [
                25357
            ],
            [
                25359
            ]
        ],
        "reference_column_names": [
            "id"
        ],
        "reference_row_count": 67,
        "reference_column_count": 1,
        "output_query": "SELECT * \nFROM public.cards\nWHERE \"isFullArt\" = 1 AND \"hasFoil\" = 0;",
        "normalized_output_query": "SELECT * FROM public.cards WHERE \"isFullArt\" = 1 AND \"hasFoil\" = 0;",
        "output_sample_result": [
            [
                5921,
                "John Avon",
                null,
                "arena",
                "black",
                null,
                null,
                "B",
                null,
                null,
                0.0,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "2015",
                null,
                0,
                0,
                0,
                1,
                0,
                1,
                1,
                0,
                0,
                1,
                0,
                1,
                0,
                0,
                0,
                null,
                "normal",
                null,
                null,
                null,
                null,
                null,
                null,
                "70503",
                "9a9a44cb-db72-5411-b9bd-1d19fe628c47",
                null,
                null,
                null,
                "Swamp",
                "5a",
                null,
                null,
                null,
                null,
                null,
                "10E,2ED,2XM,3ED,4BB,4ED,5ED,6ED,7ED,8ED,9ED,AKH,AKR,ALA,ANA,ANB,ARC,ATH,AVR,BBD,BFZ,BRB,BTD,C13,C14,C15,C16,C17,C18,C19,CED,CEI,CHK,CM2,CMA,CMD,CST,DDC,DDD,DDE,DDH,DDJ,DDK,DDM,DDN,DDP,DDQ,DDR,DKM,DOM,DPA,DTK,DVD,E01,ELD,FBB,FRF,G17,GK1,GK2,GN2,GNT,GRN,GVL",
                null,
                null,
                "common",
                "19bef0f3-68a0-47ed-adcd-2adadc3ebe23",
                "c262c65f-d38a-49fd-a657-da657038b5a9",
                "56719f6a-1a6c-4c0a-8d21-18f7d7350b68",
                "ANA",
                null,
                "Swamp",
                "Basic",
                null,
                "({T}: Add {B}.)",
                null,
                "Basic Land \u2014 Swamp",
                "Land",
                "1355b9fa-6b10-5e77-9fbf-be4bfc0832b7",
                "e78f1aeb-56ca-57a5-a69f-c61795149fe0,55213405-f99e-57c9-a3e5-50d066a6a940,30d4ed81-444a-5fda-9695-5835603d550a,011c3b17-c84d-5ae8-99bf-1a4f66f72eb5,fbf18a92-2652-565c-9696-2092d8cc6db9,81e8bf7c-a23b-5c85-a438-fd62eea5421b,22b77e40-b77f-546b-b562-9f30da017",
                null
            ],
            [
                5923,
                "John Avon",
                null,
                "arena",
                "black",
                null,
                null,
                "R",
                null,
                null,
                0.0,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "2015",
                null,
                0,
                0,
                0,
                1,
                0,
                1,
                1,
                0,
                0,
                1,
                0,
                1,
                0,
                0,
                0,
                null,
                "normal",
                null,
                null,
                null,
                null,
                null,
                null,
                "70504",
                "584bfde1-7852-5f8d-a4e9-9a0954a14aed",
                null,
                null,
                null,
                "Mountain",
                "7a",
                null,
                null,
                null,
                null,
                null,
                "10E,2ED,2XM,3ED,4BB,4ED,5ED,6ED,7ED,8ED,9ED,AKH,AKR,ALA,ANA,ANB,ARC,ARN,ATH,AVR,BBD,BFZ,BRB,BTD,C13,C14,C15,C16,C17,C18,C19,CED,CEI,CHK,CM2,CMA,CMD,CMR,CST,DD1,DD2,DDE,DDG,DDH,DDI,DDJ,DDK,DDL,DDN,DDP,DDS,DDT,DDU,DKM,DOM,DPA,DTK,E01,ELD,EVG,FBB,FRF,G17,GK1",
                null,
                null,
                "common",
                "8a05eb4e-dbea-4d41-939f-b9d92b56f56a",
                "7ae0303c-99fb-4d73-99d4-d123496416e2",
                "a3fb7228-e76b-4e96-a40e-20b5fed75685",
                "ANA",
                null,
                "Mountain",
                "Basic",
                null,
                "({T}: Add {R}.)",
                null,
                "Basic Land \u2014 Mountain",
                "Land",
                "856999f6-1ce2-5789-8597-0b02e54109c7",
                "cd9dc124-1cb5-56ec-b3ad-bd3635c463e7,6b30959b-e111-56ad-a365-ab5423b8b580,27882dce-3c3e-5647-98a0-ff3878ff0884,55ba3f76-d2c1-572e-9577-80726db85971,6dad4019-37a9-5d9f-9528-98ec5bccb228,ac1d8f4c-5f01-5c3d-a40a-7827d5176063,21886a2e-e1b5-5d85-b661-9bc66658d",
                null
            ],
            [
                5925,
                "John Avon",
                null,
                "arena",
                "black",
                null,
                null,
                "G",
                null,
                null,
                0.0,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                "2015",
                null,
                0,
                0,
                0,
                1,
                0,
                1,
                1,
                0,
                0,
                1,
                0,
                1,
                0,
                0,
                0,
                null,
                "normal",
                null,
                null,
                null,
                null,
                null,
                null,
                "70505",
                "244f9097-6203-5435-911d-1c28e4f77e7f",
                null,
                null,
                null,
                "Forest",
                "9a",
                null,
                null,
                null,
                null,
                null,
                "10E,2ED,2XM,3ED,4BB,4ED,5ED,6ED,7ED,8ED,9ED,AKH,AKR,ALA,ANA,ANB,ARC,ATH,AVR,BBD,BFZ,BRB,BTD,C13,C14,C15,C16,C17,C18,C19,CED,CEI,CHK,CM2,CMA,CMD,CMR,CST,DD1,DDD,DDE,DDG,DDH,DDJ,DDL,DDM,DDO,DDP,DDR,DDS,DDU,DKM,DOM,DPA,DTK,E01,ELD,EVG,FBB,FRF,G17,GK1,GK2,GN2",
                null,
                null,
                "common",
                "6066f195-385f-4c51-8090-3989fd692078",
                "1ec43d98-97b4-4379-be13-2f68662fb301",
                "b34bb2dc-c1af-4d77-b0b3-a0fb342a5fc6",
                "ANA",
                null,
                "Forest",
                "Basic",
                null,
                "({T}: Add {G}.)",
                null,
                "Basic Land \u2014 Forest",
                "Land",
                "231a082e-0bcf-5664-8a25-3de99c8b0f56",
                "f962d408-eaf4-50d4-9adb-16886530f233,3f39b55a-2bd4-5c2f-a4e6-a6fa47255f35,c688d5e9-b40b-5fbe-ba86-df209064e50a,1754aa94-823e-5db8-8ec6-e46ec387e499,98fadeb4-b45b-5f1b-9922-815f93ed673c,2d4d1e40-c5bd-5903-921e-1889faf3a3d2,3402f191-2b9a-5a10-b436-b4fb19a8c",
                null
            ],
            [
                37401,
                "Scott M. Fischer",
                null,
                "paper",
                "black",
                null,
                "121900",
                "G",
                null,
                "G",
                1.0,
                null,
                13465,
                null,
                null,
                null,
                null,
                null,
                "2003",
                null,
                0,
                0,
                0,
                1,
                0,
                1,
                0,
                0,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                null,
                "normal",
                null,
                null,
                null,
                "{G}",
                "17571",
                null,
                null,
                "68536dce-bb2a-56a1-800e-ef04f60a0d6d",
                null,
                null,
                null,
                "Oxidize",
                "4",
                null,
                null,
                null,
                null,
                null,
                "DST,P05,PRM,WC04",
                "playerrewards",
                "{'cardKingdom': 'https://mtgjson.com/links/701beee950a037af', 'tcgplayer': 'https://mtgjson.com/links/8ec2762eb3e277c1'}",
                "rare",
                "96837aad-424c-4d25-9ec1-b3121e6ac9a6",
                "423b69ad-283e-4419-97a3-f5379bf1a7b7",
                "0ff78353-a26e-4b5a-948d-1c3b41d2dd1f",
                "P05",
                null,
                null,
                null,
                "38324",
                "Destroy target artifact. It can't be regenerated.",
                null,
                "Instant",
                "Instant",
                "1fa5a8a4-b697-5d84-827c-d99cd318a476",
                null,
                null
            ],
            [
                37402,
                "Christopher Rush",
                null,
                "paper",
                "black",
                null,
                "121898",
                "U",
                null,
                "U",
                2.0,
                null,
                839,
                null,
                null,
                null,
                null,
                null,
                "2003",
                null,
                0,
                0,
                0,
                1,
                0,
                1,
                0,
                0,
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                null,
                "normal",
                null,
                null,
                null,
                "{1}{U}",
                "17572",
                null,
                null,
                "e883fcfe-6b57-53b3-9a16-7a6d41cdfcc0",
                null,
                null,
                null,
                "Mana Leak",
                "5",
                null,
                null,
                null,
                null,
                null,
                "8ED,9ED,BRB,DDN,IMA,M11,M12,MB1,MM2,P05,PAL02,PRM,PS11,STH,TPR,WC03,WC04,WC98",
                "playerrewards",
                "{'cardKingdom': 'https://mtgjson.com/links/60acc16d9e2ed979', 'tcgplayer': 'https://mtgjson.com/links/0fb10522275944b9'}",
                "rare",
                "dea41eb7-5828-4735-bca1-0dbb0fda04e3",
                "8efda6a2-25d1-4ad6-aa4c-9da0770335c2",
                "c61fe162-2202-4e56-9ba0-393547f9875f",
                "P05",
                null,
                null,
                null,
                "38319",
                "Counter target spell unless its controller pays {3}.",
                null,
                "Instant",
                "Instant",
                "6c466b74-2d63-5ac2-a37e-924fba1bdc75",
                null,
                null
            ]
        ],
        "output_column_names": [
            "id",
            "artist",
            "asciiName",
            "availability",
            "borderColor",
            "cardKingdomFoilId",
            "cardKingdomId",
            "colorIdentity",
            "colorIndicator",
            "colors",
            "convertedManaCost",
            "duelDeck",
            "edhrecRank",
            "faceConvertedManaCost",
            "faceName",
            "flavorName",
            "flavorText",
            "frameEffects",
            "frameVersion",
            "hand",
            "hasAlternativeDeckLimit",
            "hasContentWarning",
            "hasFoil",
            "hasNonFoil",
            "isAlternative",
            "isFullArt",
            "isOnlineOnly",
            "isOversized",
            "isPromo",
            "isReprint",
            "isReserved",
            "isStarter",
            "isStorySpotlight",
            "isTextless",
            "isTimeshifted",
            "keywords",
            "layout",
            "leadershipSkills",
            "life",
            "loyalty",
            "manaCost",
            "mcmId",
            "mcmMetaId",
            "mtgArenaId",
            "mtgjsonV4Id",
            "mtgoFoilId",
            "mtgoId",
            "multiverseId",
            "name",
            "number",
            "originalReleaseDate",
            "originalText",
            "originalType",
            "otherFaceIds",
            "power",
            "printings",
            "promoTypes",
            "purchaseUrls",
            "rarity",
            "scryfallId",
            "scryfallIllustrationId",
            "scryfallOracleId",
            "setCode",
            "side",
            "subtypes",
            "supertypes",
            "tcgplayerProductId",
            "text",
            "toughness",
            "type",
            "types",
            "uuid",
            "variations",
            "watermark"
        ],
        "output_row_count": 114,
        "output_column_count": 74,
        "sequence_similarity_score": 0.4692737430167598,
        "bleu_similarity_score": 1.0487951873692526e-231,
        "execution_accuracy": false
    },
    {
        "question": "List the card names with value that cost more converted mana for the face.",
        "reference_query": "SELECT name FROM cards ORDER BY \"faceConvertedManaCost\" LIMIT 1",
        "normalized_reference_query": "SELECT name FROM cards ORDER BY \"faceConvertedManaCost\" LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT name \nFROM public.cards \nWHERE faceConvertedManaCost > convertedManaCost;",
        "normalized_output_query": "SELECT name FROM public.cards WHERE faceConvertedManaCost > convertedManaCost;",
        "output_error": "column \"faceconvertedmanacost\" does not exist\nLINE 1: SELECT name FROM public.cards WHERE faceConvertedManaCost > ...\n                                            ^\nHINT:  Perhaps you meant to reference the column \"cards.faceConvertedManaCost\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Name all cards with 2015 frame style ranking below 100 on EDHRec.",
        "reference_query": "SELECT id FROM cards WHERE \"edhrecRank\" < 100 AND \"frameVersion\" = '2015'",
        "normalized_reference_query": "SELECT id FROM cards WHERE \"edhrecRank\" < 100 AND \"frameVersion\" = '2015'",
        "reference_error": null,
        "output_query": "SELECT name \nFROM public.cards \nWHERE frameVersion = '2015' AND edhrecRank < 100;",
        "normalized_output_query": "SELECT name FROM public.cards WHERE frameVersion = '2015' AND edhrecRank < 100;",
        "output_error": "column \"frameversion\" does not exist\nLINE 1: SELECT name FROM public.cards WHERE frameVersion = '2015' AN...\n                                            ^\nHINT:  Perhaps you meant to reference the column \"cards.frameVersion\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "List all the mythic rarity print cards banned in gladiator format.",
        "reference_query": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
        "normalized_reference_query": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
        "reference_sample_result": [
            [
                17983
            ],
            [
                18058
            ],
            [
                29523
            ],
            [
                38736
            ],
            [
                38737
            ]
        ],
        "reference_column_names": [
            "id"
        ],
        "reference_row_count": 5,
        "reference_column_count": 1,
        "output_query": "SELECT c.*\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.rarity = 'mythic' AND l.format = 'gladiator' AND l.status = 'banned';",
        "normalized_output_query": "SELECT c.* FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.format = 'gladiator' AND l.status = 'banned';",
        "output_sample_result": [],
        "output_column_names": [
            "id",
            "artist",
            "asciiName",
            "availability",
            "borderColor",
            "cardKingdomFoilId",
            "cardKingdomId",
            "colorIdentity",
            "colorIndicator",
            "colors",
            "convertedManaCost",
            "duelDeck",
            "edhrecRank",
            "faceConvertedManaCost",
            "faceName",
            "flavorName",
            "flavorText",
            "frameEffects",
            "frameVersion",
            "hand",
            "hasAlternativeDeckLimit",
            "hasContentWarning",
            "hasFoil",
            "hasNonFoil",
            "isAlternative",
            "isFullArt",
            "isOnlineOnly",
            "isOversized",
            "isPromo",
            "isReprint",
            "isReserved",
            "isStarter",
            "isStorySpotlight",
            "isTextless",
            "isTimeshifted",
            "keywords",
            "layout",
            "leadershipSkills",
            "life",
            "loyalty",
            "manaCost",
            "mcmId",
            "mcmMetaId",
            "mtgArenaId",
            "mtgjsonV4Id",
            "mtgoFoilId",
            "mtgoId",
            "multiverseId",
            "name",
            "number",
            "originalReleaseDate",
            "originalText",
            "originalType",
            "otherFaceIds",
            "power",
            "printings",
            "promoTypes",
            "purchaseUrls",
            "rarity",
            "scryfallId",
            "scryfallIllustrationId",
            "scryfallOracleId",
            "setCode",
            "side",
            "subtypes",
            "supertypes",
            "tcgplayerProductId",
            "text",
            "toughness",
            "type",
            "types",
            "uuid",
            "variations",
            "watermark"
        ],
        "output_row_count": 0,
        "output_column_count": 74,
        "sequence_similarity_score": 0.6819672131147541,
        "bleu_similarity_score": 2.8982014567759997e-78,
        "execution_accuracy": false
    },
    {
        "question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
        "reference_query": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
        "normalized_reference_query": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
        "reference_sample_result": [
            [
                "Banned"
            ],
            [
                "Legal"
            ],
            [
                "Restricted"
            ]
        ],
        "reference_column_names": [
            "status"
        ],
        "reference_row_count": 3,
        "reference_column_count": 1,
        "output_query": "SELECT c.name, l.status\nFROM public.cards c\nJOIN public.legalities l ON c.uuid = l.uuid\nWHERE c.type LIKE '%Artifact%'\n  AND c.layout NOT IN ('split', 'flip', 'transform', 'modal_dfc', 'meld', 'adventure', 'saga', 'leveler', 'class', 'planes')\n  AND l.format = 'Vintage';",
        "normalized_output_query": "SELECT c.name, l.status FROM public.cards c JOIN public.legalities l ON c.uuid = l.uuid WHERE c.type LIKE '%Artifact%' AND c.layout NOT IN ('split', 'flip', 'transform', 'modal_dfc', 'meld', 'adventure', 'saga', 'leveler', 'class', 'planes') AND l.format = 'Vintage';",
        "output_sample_result": [],
        "output_column_names": [
            "name",
            "status"
        ],
        "output_row_count": 0,
        "output_column_count": 2,
        "sequence_similarity_score": 0.30162412993039445,
        "bleu_similarity_score": 1.2973344175574298e-231,
        "execution_accuracy": false
    },
    {
        "question": "List all the card id and artist with unknown power which are legal for commander play format.",
        "reference_query": "SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Legal' AND T2.format = 'commander' AND (T1.power IS NULL OR T1.power = '*')",
        "normalized_reference_query": "SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Legal' AND T2.format = 'commander' AND (T1.power IS NULL OR T1.power = '*')",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the query. The tables provided do not have a direct relation or column that indicates a power is \"unknown,\" nor is there a clear indication of how to determine cards that are legal for the \"commander\" format. Additionally, the relationship between card IDs and power is not established in the given tables.",
        "normalized_output_query": "The provided context IS insufficient TO generate the query. The TABLES provided DO NOT have a direct relation OR COLUMN that indicates a power IS \"unknown,\" nor IS there a clear indication OF how TO determine cards that ARE legal FOR the \"commander\" format. Additionally, the relationship BETWEEN card IDs AND power IS NOT established IN the given tables.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the query. ...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values.",
        "reference_query": "SELECT T1.id, T2.text, T1.\"hasContentWarning\" FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'",
        "normalized_reference_query": "SELECT T1.id, T2.text, T1.\"hasContentWarning\" FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'",
        "reference_sample_result": [
            [
                29,
                "You can\u2019t put an Aura card from your hand onto the battlefield this way if that Aura can\u2019t legally enchant Academy Researchers. For example, you can\u2019t put an Aura with \u201cenchant land\u201d or \u201cenchant green creature\u201d onto the battlefield attached to Academy Res",
                0
            ],
            [
                3872,
                "This card now has Enchant Swamp, which works exactly like any other Enchant ability. This means it can only be cast targeting a Swamp, and it will be put into its owner\u2019s graveyard if the permanent it\u2019s attached to ever stops being a Swamp.",
                0
            ],
            [
                6651,
                "Cycling is an activated ability. Effects that interact with activated abilities (such as Stifle or Rings of Brighthearth) will interact with cycling. Effects that interact with spells (such as Remove Soul or Faerie Tauntings) will not.",
                0
            ],
            [
                6652,
                "Cycling is an activated ability. Effects that interact with activated abilities (such as Stifle or Rings of Brighthearth) will interact with cycling. Effects that interact with spells (such as Remove Soul or Faerie Tauntings) will not.",
                0
            ],
            [
                7950,
                "Cycling is an activated ability. Effects that interact with activated abilities (such as Stifle or Rings of Brighthearth) will interact with cycling. Effects that interact with spells (such as Remove Soul or Faerie Tauntings) will not.",
                0
            ]
        ],
        "reference_column_names": [
            "id",
            "text",
            "hasContentWarning"
        ],
        "reference_row_count": 23,
        "reference_column_count": 3,
        "output_query": "SELECT c.name, r.text AS ruling_text\nFROM public.cards c\nJOIN public.rulings r ON c.uuid = r.uuid\nWHERE c.artist = 'Stephen Daniel';",
        "normalized_output_query": "SELECT c.name, r.text AS ruling_text FROM public.cards c JOIN public.rulings r ON c.uuid = r.uuid WHERE c.artist = 'Stephen Daniel';",
        "output_sample_result": [],
        "output_column_names": [
            "name",
            "ruling_text"
        ],
        "output_row_count": 0,
        "output_column_count": 2,
        "sequence_similarity_score": 0.6956521739130435,
        "bleu_similarity_score": 5.294896748748207e-155,
        "execution_accuracy": false
    },
    {
        "question": "Describe the information about rulings for card named 'Sublime Epiphany' with number 74s.",
        "reference_query": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s'",
        "normalized_reference_query": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s'",
        "reference_sample_result": [
            [
                "You can\u2019t choose any one mode more than once."
            ],
            [
                "If any of the targets become illegal, the remaining targets are affected as appropriate."
            ],
            [
                "If you choose more than one mode, you perform the modes in the order specified. For example, if you choose to counter target spell, return target nonland permanent to its owner\u2019s hand, and have target player draw a card, that permanent will be on the batt"
            ],
            [
                "Sublime Epiphany\u2019s second mode counters only activated and triggered abilities already on the stack. It doesn\u2019t prevent abilities from being activated or from triggering later in the turn, and it has no effect on static abilities."
            ],
            [
                "Activated abilities are written in the form \u201c[Cost]: [Effect].\u201d Some keyword abilities (such as equip) are activated abilities and will have colons in their reminder texts."
            ]
        ],
        "reference_column_names": [
            "text"
        ],
        "reference_row_count": 15,
        "reference_column_count": 1,
        "output_query": "SELECT r.*\nFROM public.rulings r\nJOIN public.cards c ON r.uuid = c.uuid\nWHERE c.name = 'Sublime Epiphany' AND c.number = '74s';",
        "normalized_output_query": "SELECT r.* FROM public.rulings r JOIN public.cards c ON r.uuid = c.uuid WHERE c.name = 'Sublime Epiphany' AND c.number = '74s';",
        "output_sample_result": [
            [
                72780,
                "2020-06-23",
                "You can\u2019t choose any one mode more than once.",
                "0026e43f-155f-5e2e-946b-c21a86eb82b8"
            ],
            [
                72781,
                "2020-06-23",
                "If any of the targets become illegal, the remaining targets are affected as appropriate.",
                "0026e43f-155f-5e2e-946b-c21a86eb82b8"
            ],
            [
                72782,
                "2020-06-23",
                "If you choose more than one mode, you perform the modes in the order specified. For example, if you choose to counter target spell, return target nonland permanent to its owner\u2019s hand, and have target player draw a card, that permanent will be on the batt",
                "0026e43f-155f-5e2e-946b-c21a86eb82b8"
            ],
            [
                72783,
                "2020-06-23",
                "Sublime Epiphany\u2019s second mode counters only activated and triggered abilities already on the stack. It doesn\u2019t prevent abilities from being activated or from triggering later in the turn, and it has no effect on static abilities.",
                "0026e43f-155f-5e2e-946b-c21a86eb82b8"
            ],
            [
                72784,
                "2020-06-23",
                "Activated abilities are written in the form \u201c[Cost]: [Effect].\u201d Some keyword abilities (such as equip) are activated abilities and will have colons in their reminder texts.",
                "0026e43f-155f-5e2e-946b-c21a86eb82b8"
            ]
        ],
        "output_column_names": [
            "id",
            "date",
            "text",
            "uuid"
        ],
        "output_row_count": 15,
        "output_column_count": 4,
        "sequence_similarity_score": 0.7203065134099617,
        "bleu_similarity_score": 0.1269185395185898,
        "execution_accuracy": false
    },
    {
        "question": "Name the card and artist with the most ruling information. Also state if the card is a promotional printing.",
        "reference_query": "SELECT T1.name, T1.artist, T1.\"isPromo\" FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.\"isPromo\" = 1 AND T1.artist = (SELECT artist FROM cards WHERE \"isPromo\" = 1 GROUP BY artist HAVING COUNT(DISTINCT uuid) = (SELECT MAX(count_uuid) FROM ( SELECT COUNT(DISTINCT uuid) AS count_uuid FROM cards WHERE \"isPromo\" = 1 GROUP BY artist ))) LIMIT 1",
        "normalized_reference_query": "SELECT T1.name, T1.artist, T1.\"isPromo\" FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.\"isPromo\" = 1 AND T1.artist = (SELECT artist FROM cards WHERE \"isPromo\" = 1 GROUP BY artist HAVING COUNT(DISTINCT UUID) = (SELECT MAX(count_uuid) FROM (SELECT COUNT(DISTINCT UUID) AS count_uuid FROM cards WHERE \"isPromo\" = 1 GROUP BY artist))) LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT c.name AS card_name, c.artist, c.isPromo, COUNT(r.id) AS ruling_count\nFROM cards c\nJOIN rulings r ON c.uuid = r.uuid\nGROUP BY c.name, c.artist, c.isPromo\nORDER BY ruling_count DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT c.name AS card_name, c.artist, c.isPromo, COUNT(r.id) AS ruling_count FROM cards c JOIN rulings r ON c.uuid = r.uuid GROUP BY c.name, c.artist, c.isPromo ORDER BY ruling_count DESC LIMIT 1;",
        "output_error": "column c.ispromo does not exist\nLINE 1: SELECT c.name AS card_name, c.artist, c.isPromo, COUNT(r.id)...\n                                              ^\nHINT:  Perhaps you meant to reference the column \"c.isPromo\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "State the alternative languages available for card named Annul numbered 29.",
        "reference_query": "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul' AND T1.number = '29'",
        "normalized_reference_query": "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul' AND T1.number = '29'",
        "reference_sample_result": [
            [
                "German"
            ],
            [
                "Spanish"
            ],
            [
                "French"
            ],
            [
                "Italian"
            ],
            [
                "Japanese"
            ]
        ],
        "reference_column_names": [
            "language"
        ],
        "reference_row_count": 6,
        "reference_column_count": 1,
        "output_query": "SELECT st.language\nFROM public.cards c\nJOIN public.set_translations st ON c.\"setCode\" = st.\"setCode\"\nWHERE c.name = 'Annul' AND c.number = '29';",
        "normalized_output_query": "SELECT st.language FROM public.cards c JOIN public.set_translations st ON c.\"setCode\" = st.\"setCode\" WHERE c.name = 'Annul' AND c.number = '29';",
        "output_sample_result": [
            [
                "Chinese Simplified"
            ],
            [
                "Chinese Traditional"
            ],
            [
                "French"
            ],
            [
                "German"
            ],
            [
                "Italian"
            ]
        ],
        "output_column_names": [
            "language"
        ],
        "output_row_count": 10,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6618181818181819,
        "bleu_similarity_score": 2.4444739250665844e-78,
        "execution_accuracy": false
    },
    {
        "question": "Name all the cards which have alternative language in Japanese.",
        "reference_query": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
        "normalized_reference_query": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
        "reference_sample_result": [
            [
                "Ancestor's Chosen"
            ],
            [
                "Angel of Mercy"
            ],
            [
                "Aven Cloudchaser"
            ],
            [
                "Ballista Squad"
            ],
            [
                "Bandage"
            ]
        ],
        "reference_column_names": [
            "name"
        ],
        "reference_row_count": 31224,
        "reference_column_count": 1,
        "output_query": "SELECT c.name \nFROM public.cards c\nJOIN public.foreign_data fd ON c.uuid = fd.uuid\nWHERE fd.language = 'Japanese';",
        "normalized_output_query": "SELECT c.name FROM public.cards c JOIN public.foreign_data fd ON c.uuid = fd.uuid WHERE fd.language = 'Japanese';",
        "output_sample_result": [
            [
                "Ancestor's Chosen"
            ],
            [
                "Angel of Mercy"
            ],
            [
                "Aven Cloudchaser"
            ],
            [
                "Ballista Squad"
            ],
            [
                "Bandage"
            ]
        ],
        "output_column_names": [
            "name"
        ],
        "output_row_count": 31224,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7876106194690266,
        "bleu_similarity_score": 1.2283513926157894e-231,
        "execution_accuracy": false
    },
    {
        "question": "Calculate the percentage of the cards availabe in Chinese Simplified.",
        "reference_query": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid",
        "normalized_reference_query": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid",
        "reference_sample_result": [
            [
                8.773399659641314
            ]
        ],
        "reference_column_names": [
            "?column?"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT \n    (COUNT(*) FILTER (WHERE availability LIKE '%Chinese Simplified%')::FLOAT / COUNT(*)) * 100 AS percentage_chinese_simplified\nFROM \n    public.cards;",
        "normalized_output_query": "SELECT (COUNT(*) FILTER (WHERE availability LIKE '%Chinese Simplified%')::FLOAT / COUNT(*)) * 100 AS percentage_chinese_simplified FROM public.cards;",
        "output_sample_result": [
            [
                0.0
            ]
        ],
        "output_column_names": [
            "percentage_chinese_simplified"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.3727810650887574,
        "bleu_similarity_score": 2.1820401426356446e-155,
        "execution_accuracy": false
    },
    {
        "question": "List all the sets available in Italian translation. State the total number of cards per set.",
        "reference_query": "SELECT T1.name, T1.\"totalSetSize\" FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.\"setCode\" WHERE T2.language = 'Italian'",
        "normalized_reference_query": "SELECT T1.name, T1.\"totalSetSize\" FROM SETS AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.\"setCode\" WHERE T2.language = 'Italian'",
        "reference_error": null,
        "output_query": "SELECT s.name AS set_name, st.language, COUNT(c.id) AS total_cards\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nJOIN cards c ON s.code = c.setCode\nWHERE st.language = 'Italian'\nGROUP BY s.name, st.language;",
        "normalized_output_query": "SELECT s.name AS set_name, st.language, COUNT(c.id) AS total_cards FROM SETS s JOIN set_translations st ON s.code = st.setCode JOIN cards c ON s.code = c.setCode WHERE st.language = 'Italian' GROUP BY s.name, st.language;",
        "output_error": "column st.setcode does not exist\nLINE 1: ... FROM SETS s JOIN set_translations st ON s.code = st.setCode...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"st.setCode\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many types of cards does the artist Aaron Boyd illustrated about card art?",
        "reference_query": "SELECT COUNT(type) FROM cards WHERE artist = 'Aaron Boyd'",
        "normalized_reference_query": "SELECT COUNT(TYPE) FROM cards WHERE artist = 'Aaron Boyd'",
        "reference_sample_result": [
            [
                12
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(DISTINCT type) AS card_types_count\nFROM public.cards\nWHERE artist = 'Aaron Boyd';",
        "normalized_output_query": "SELECT COUNT(DISTINCT TYPE) AS card_types_count FROM public.cards WHERE artist = 'Aaron Boyd';",
        "output_sample_result": [
            [
                4
            ]
        ],
        "output_column_names": [
            "card_types_count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7549668874172185,
        "bleu_similarity_score": 0.23462350320528,
        "execution_accuracy": false
    },
    {
        "question": "What is the keyword found on card 'Angel of Mercy'?",
        "reference_query": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
        "normalized_reference_query": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
        "reference_sample_result": [
            [
                "Flying"
            ]
        ],
        "reference_column_names": [
            "keywords"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT keywords \nFROM public.cards \nWHERE name = 'Angel of Mercy';",
        "normalized_output_query": "SELECT keywords FROM public.cards WHERE name = 'Angel of Mercy';",
        "output_sample_result": [
            [
                "Flying"
            ],
            [
                "Flying"
            ],
            [
                "Flying"
            ],
            [
                "Flying"
            ],
            [
                "Flying"
            ]
        ],
        "output_column_names": [
            "keywords"
        ],
        "output_row_count": 15,
        "output_column_count": 1,
        "sequence_similarity_score": 0.8682170542635659,
        "bleu_similarity_score": 0.42268392163412416,
        "execution_accuracy": false
    },
    {
        "question": "How many cards have infinite power?",
        "reference_query": "SELECT COUNT(*) FROM cards WHERE power = '*'",
        "normalized_reference_query": "SELECT COUNT(*) FROM cards WHERE power = '*'",
        "reference_error": null,
        "output_query": "Error running intermediate SQL: You need to connect to a database first by running vn.connect_to_snowflake(), vn.connect_to_postgres(), similar function, or manually set vn.run_sql",
        "normalized_output_query": "Error running intermediate SQL: You need TO CONNECT TO a DATABASE FIRST BY running vn.connect_to_snowflake(), vn.connect_to_postgres(), SIMILAR FUNCTION, OR manually SET vn.run_sql",
        "output_error": "syntax error at or near \"Error\"\nLINE 1: Error running intermediate SQL: You need TO CONNECT TO a DAT...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What type of promotion is of card 'Duress'?",
        "reference_query": "SELECT \"promoTypes\" FROM cards WHERE name = 'Duress' AND \"promoTypes\" IS NOT NULL",
        "normalized_reference_query": "SELECT \"promoTypes\" FROM cards WHERE name = 'Duress' AND \"promoTypes\" IS NOT NULL",
        "reference_sample_result": [
            [
                "tourney,fnm"
            ],
            [
                "arenaleague"
            ],
            [
                "mediainsert"
            ],
            [
                "mediainsert"
            ]
        ],
        "reference_column_names": [
            "promoTypes"
        ],
        "reference_row_count": 4,
        "reference_column_count": 1,
        "output_query": "SELECT \"promoTypes\" \nFROM public.cards \nWHERE name = 'Duress';",
        "normalized_output_query": "SELECT \"promoTypes\" FROM public.cards WHERE name = 'Duress';",
        "output_sample_result": [
            [
                null
            ],
            [
                null
            ],
            [
                null
            ],
            [
                null
            ],
            [
                null
            ]
        ],
        "output_column_names": [
            "promoTypes"
        ],
        "output_row_count": 29,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7375886524822695,
        "bleu_similarity_score": 4.019088289311414e-78,
        "execution_accuracy": false
    },
    {
        "question": "What is the border color of card \"Ancestor's Chosen\"?",
        "reference_query": "SELECT DISTINCT \"borderColor\" FROM cards WHERE name = 'Ancestor''s Chosen'",
        "normalized_reference_query": "SELECT DISTINCT \"borderColor\" FROM cards WHERE name = 'Ancestor''s Chosen'",
        "reference_error": null,
        "output_query": "SELECT borderColor FROM public.cards WHERE name = 'Ancestor''s Chosen';",
        "normalized_output_query": "SELECT borderColor FROM public.cards WHERE name = 'Ancestor''s Chosen';",
        "output_error": "column \"bordercolor\" does not exist\nLINE 1: SELECT borderColor FROM public.cards WHERE name = 'Ancestor'...\n               ^\nHINT:  Perhaps you meant to reference the column \"cards.borderColor\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the type of the card \"Ancestor's Chosen\" as originally printed?",
        "reference_query": "SELECT \"originalType\" FROM cards WHERE name = 'Ancestor''s Chosen' AND \"originalType\" IS NOT NULL",
        "normalized_reference_query": "SELECT \"originalType\" FROM cards WHERE name = 'Ancestor''s Chosen' AND \"originalType\" IS NOT NULL",
        "reference_sample_result": [
            [
                "Creature - Human Cleric"
            ],
            [
                "Creature - Cleric"
            ],
            [
                "Creature \u2014 Human Cleric"
            ]
        ],
        "reference_column_names": [
            "originalType"
        ],
        "reference_row_count": 3,
        "reference_column_count": 1,
        "output_query": "SELECT \"originalType\" \nFROM public.cards \nWHERE name = 'Ancestor''s Chosen';",
        "normalized_output_query": "SELECT \"originalType\" FROM public.cards WHERE name = 'Ancestor''s Chosen';",
        "output_sample_result": [
            [
                "Creature - Human Cleric"
            ],
            [
                null
            ],
            [
                "Creature - Cleric"
            ],
            [
                "Creature \u2014 Human Cleric"
            ]
        ],
        "output_column_names": [
            "originalType"
        ],
        "output_row_count": 4,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7719298245614035,
        "bleu_similarity_score": 0.24767214526041215,
        "execution_accuracy": false
    },
    {
        "question": "cards are not directly linked to language but through table 'set'. you need to add set in covered table & rephrase your question\nWhat are the languages available for the set that card 'Angel of Mercy' is in?",
        "reference_query": "SELECT language FROM set_translations WHERE id IN ( SELECT id FROM cards WHERE name = 'Angel of Mercy' )",
        "normalized_reference_query": "SELECT LANGUAGE FROM set_translations WHERE id IN (SELECT id FROM cards WHERE name = 'Angel of Mercy')",
        "reference_sample_result": [
            [
                "Chinese Traditional"
            ],
            [
                "Chinese Simplified"
            ]
        ],
        "reference_column_names": [
            "language"
        ],
        "reference_row_count": 2,
        "reference_column_count": 1,
        "output_query": "SELECT DISTINCT st.language\nFROM public.cards c\nJOIN public.sets s ON c.\"setCode\" = s.code\nJOIN public.set_translations st ON s.code = st.\"setCode\"\nWHERE c.name = 'Angel of Mercy';",
        "normalized_output_query": "SELECT DISTINCT st.language FROM public.cards c JOIN public.sets s ON c.\"setCode\" = s.code JOIN public.set_translations st ON s.code = st.\"setCode\" WHERE c.name = 'Angel of Mercy';",
        "output_sample_result": [
            [
                "Chinese Simplified"
            ],
            [
                "Chinese Traditional"
            ],
            [
                "French"
            ],
            [
                "German"
            ],
            [
                "Italian"
            ]
        ],
        "output_column_names": [
            "language"
        ],
        "output_row_count": 10,
        "output_column_count": 1,
        "sequence_similarity_score": 0.46808510638297873,
        "bleu_similarity_score": 2.0339968208213956e-78,
        "execution_accuracy": false
    },
    {
        "question": "How many cards of legalities whose status is restricted have text boxes?",
        "reference_query": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.\"isTextless\" = 0",
        "normalized_reference_query": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.\"isTextless\" = 0",
        "reference_sample_result": [
            [
                535
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(DISTINCT l.uuid) \nFROM public.legalities l\nJOIN public.cards c ON l.uuid = c.uuid\nWHERE l.status = 'restricted' AND c.text IS NOT NULL;",
        "normalized_output_query": "SELECT COUNT(DISTINCT l.uuid) FROM public.legalities l JOIN public.cards c ON l.uuid = c.uuid WHERE l.status = 'restricted' AND c.text IS NOT NULL;",
        "output_sample_result": [
            [
                0
            ]
        ],
        "output_column_names": [
            "count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6824324324324325,
        "bleu_similarity_score": 5.0885146902647815e-155,
        "execution_accuracy": false
    },
    {
        "question": "What is the description about the ruling of card \"Condemn\"?",
        "reference_query": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
        "normalized_reference_query": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
        "reference_sample_result": [
            [
                "The affected creature\u2019s last known existence on the battlefield is checked to determine its toughness."
            ],
            [
                "The affected creature\u2019s last known existence on the battlefield is checked to determine its toughness."
            ],
            [
                "The affected creature\u2019s last known existence on the battlefield is checked to determine its toughness."
            ],
            [
                "The affected creature\u2019s last known existence on the battlefield is checked to determine its toughness."
            ],
            [
                "The affected creature\u2019s last known existence on the battlefield is checked to determine its toughness."
            ]
        ],
        "reference_column_names": [
            "text"
        ],
        "reference_row_count": 10,
        "reference_column_count": 1,
        "output_query": "SELECT r.text\nFROM public.rulings r\nJOIN public.cards c ON r.uuid = c.uuid\nWHERE c.name = 'Condemn';",
        "normalized_output_query": "SELECT r.text FROM public.rulings r JOIN public.cards c ON r.uuid = c.uuid WHERE c.name = 'Condemn';",
        "output_sample_result": [
            [
                "The affected creature\u2019s last known existence on the battlefield is checked to determine its toughness."
            ],
            [
                "The affected creature\u2019s last known existence on the battlefield is checked to determine its toughness."
            ],
            [
                "The affected creature\u2019s last known existence on the battlefield is checked to determine its toughness."
            ],
            [
                "The affected creature\u2019s last known existence on the battlefield is checked to determine its toughness."
            ],
            [
                "The affected creature\u2019s last known existence on the battlefield is checked to determine its toughness."
            ]
        ],
        "output_column_names": [
            "text"
        ],
        "output_row_count": 10,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6798029556650246,
        "bleu_similarity_score": 1.2283513926157894e-231,
        "execution_accuracy": false
    },
    {
        "question": "How many cards of legalities whose status is restricted are found in a starter deck?",
        "reference_query": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.\"isStarter\" = 1",
        "normalized_reference_query": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.\"isStarter\" = 1",
        "reference_sample_result": [
            [
                189
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(DISTINCT l.uuid) AS restricted_card_count\nFROM public.legalities l\nJOIN public.cards c ON l.uuid = c.uuid\nWHERE l.status = 'restricted' AND c.\"isStarter\" = 1;",
        "normalized_output_query": "SELECT COUNT(DISTINCT l.uuid) AS restricted_card_count FROM public.legalities l JOIN public.cards c ON l.uuid = c.uuid WHERE l.status = 'restricted' AND c.\"isStarter\" = 1;",
        "output_sample_result": [
            [
                0
            ]
        ],
        "output_column_names": [
            "restricted_card_count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6959247648902821,
        "bleu_similarity_score": 5.484037161098162e-155,
        "execution_accuracy": false
    },
    {
        "question": "What is the status of card \"Cloudchaser Eagle\"?",
        "reference_query": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
        "normalized_reference_query": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to determine the status of the card \"Cloudchaser Eagle\" as there is no direct relationship or linking information between the `cards` table and the `status` table.",
        "normalized_output_query": "The provided context IS insufficient TO determine the status OF the card \"Cloudchaser Eagle\" AS there IS NO direct relationship OR linking information BETWEEN the `cards` TABLE AND the `status` table.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO determine the status...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the type of card \"Benalish Knight\"?",
        "reference_query": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "normalized_reference_query": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "reference_sample_result": [
            [
                "Creature \u2014 Human Knight"
            ]
        ],
        "reference_column_names": [
            "type"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT type FROM public.cards WHERE name = 'Benalish Knight';",
        "normalized_output_query": "SELECT TYPE FROM public.cards WHERE name = 'Benalish Knight';",
        "output_sample_result": [
            [
                "Creature \u2014 Human Knight"
            ],
            [
                "Creature \u2014 Human Knight"
            ],
            [
                "Creature \u2014 Human Knight"
            ],
            [
                "Creature \u2014 Human Knight"
            ]
        ],
        "output_column_names": [
            "type"
        ],
        "output_row_count": 4,
        "output_column_count": 1,
        "sequence_similarity_score": 0.5376344086021505,
        "bleu_similarity_score": 2.0184699279153526e-155,
        "execution_accuracy": false
    },
    {
        "question": "What is the rule of playing card \"Benalish Knight\"?",
        "reference_query": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "normalized_reference_query": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "reference_sample_result": [
            [
                "commander"
            ],
            [
                "duel"
            ],
            [
                "legacy"
            ],
            [
                "modern"
            ],
            [
                "pauper"
            ]
        ],
        "reference_column_names": [
            "format"
        ],
        "reference_row_count": 32,
        "reference_column_count": 1,
        "output_query": "SELECT text \nFROM public.rulings \nWHERE uuid = (SELECT uuid FROM public.cards WHERE \"asciiName\" = 'Benalish Knight');",
        "normalized_output_query": "SELECT text FROM public.rulings WHERE UUID = (SELECT UUID FROM public.cards WHERE \"asciiName\" = 'Benalish Knight');",
        "output_sample_result": [],
        "output_column_names": [
            "text"
        ],
        "output_row_count": 0,
        "output_column_count": 1,
        "sequence_similarity_score": 0.4329004329004329,
        "bleu_similarity_score": 4.619379018209183e-155,
        "execution_accuracy": false
    },
    {
        "question": "Please provide the names of the artists who illustrated the card art in Phyrexian.",
        "reference_query": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'",
        "normalized_reference_query": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'",
        "reference_sample_result": [
            [
                "Igor Kieryluk"
            ],
            [
                "Daarken"
            ],
            [
                "Titus Lunter"
            ]
        ],
        "reference_column_names": [
            "artist"
        ],
        "reference_row_count": 3,
        "reference_column_count": 1,
        "output_query": "SELECT DISTINCT artist \nFROM public.cards \nWHERE \"asciiName\" = 'Phyrexian';",
        "normalized_output_query": "SELECT DISTINCT artist FROM public.cards WHERE \"asciiName\" = 'Phyrexian';",
        "output_sample_result": [],
        "output_column_names": [
            "artist"
        ],
        "output_row_count": 0,
        "output_column_count": 1,
        "sequence_similarity_score": 0.5185185185185185,
        "bleu_similarity_score": 4.896810183888611e-232,
        "execution_accuracy": false
    },
    {
        "question": "What is the percentage of borderless cards?",
        "reference_query": "SELECT CAST(SUM(CASE WHEN \"borderColor\" = 'borderless' THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(id) FROM cards",
        "normalized_reference_query": "SELECT CAST(SUM(CASE WHEN \"borderColor\" = 'borderless' THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(id) FROM cards",
        "reference_error": null,
        "output_query": "The provided context does not specify a column that indicates whether a card is borderless. Therefore, it is not possible to generate a SQL query to determine the percentage of borderless cards.",
        "normalized_output_query": "The provided context does NOT specify a COLUMN that indicates whether a card IS borderless. Therefore, it IS NOT possible TO generate a SQL query TO determine the percentage OF borderless cards.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context does NOT specify a COLUMN that indicate...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many cards that illusrtated in German have been reprinted?",
        "reference_query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.\"isReprint\" = 1",
        "normalized_reference_query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.\"isReprint\" = 1",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information about the language in which the cards were illustrated. There is also no column indicating the language of the illustration in the given tables.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information about the LANGUAGE IN which the cards were illustrated. There IS also NO COLUMN indicating the LANGUAGE OF the illustration IN the given tables.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many borderless cards are illustrated in Russian?",
        "reference_query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.\"borderColor\" = 'borderless' AND T2.language = 'Russian'",
        "normalized_reference_query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.\"borderColor\" = 'borderless' AND T2.language = 'Russian'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information about the language in which the cards are illustrated or any indication of borderless cards in the tables. The `cards` table does have a `borderColor` column, but it does not specifically denote \"borderless\" cards, and there is no direct linkage to the `foreign_data` table to identify illustrations in Russian. Additional context or tables are needed to establish these connections.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information about the LANGUAGE IN which the cards ARE illustrated OR ANY indication OF borderless cards IN the tables. The `cards` TABLE does have a `borderColor` COLUMN, but it does NOT specifically denote \"borderless\" cards, AND there IS NO direct linkage TO the `foreign_data` TABLE TO identify illustrations IN Russian. Additional context OR TABLES ARE needed TO establish these connections.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the percentage of cards whose language is French among the Story Spotlight cards?",
        "reference_query": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.\"isStorySpotlight\" = 1",
        "normalized_reference_query": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.\"isStorySpotlight\" = 1",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no direct information about which cards are Story Spotlight cards or how to identify them in the given tables. Additionally, there is no direct link between card languages and Story Spotlight attributes in the tables provided.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO direct information about which cards ARE Story Spotlight cards OR how TO identify them IN the given tables. Additionally, there IS NO direct LINK BETWEEN card languages AND Story Spotlight attributes IN the TABLES provided.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many cards are there with toughness of 99?",
        "reference_query": "SELECT COUNT(id) FROM cards WHERE toughness = '99'",
        "normalized_reference_query": "SELECT COUNT(id) FROM cards WHERE toughness = '99'",
        "reference_sample_result": [
            [
                1
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*) \nFROM public.cards \nWHERE toughness = '99';",
        "normalized_output_query": "SELECT COUNT(*) FROM public.cards WHERE toughness = '99';",
        "output_sample_result": [
            [
                1
            ]
        ],
        "output_column_names": [
            "count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.897196261682243,
        "bleu_similarity_score": 5.072841446586652e-78,
        "execution_accuracy": false
    },
    {
        "question": "Name the cards that were illustrated by Aaron Boyd.",
        "reference_query": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
        "normalized_reference_query": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
        "reference_sample_result": [
            [
                "Cloudchaser Eagle"
            ],
            [
                "Kavu Recluse"
            ],
            [
                "Repulse"
            ],
            [
                "Scarred Puma"
            ],
            [
                "Stormwatch Eagle"
            ]
        ],
        "reference_column_names": [
            "name"
        ],
        "reference_row_count": 5,
        "reference_column_count": 1,
        "output_query": "SELECT name \nFROM public.cards \nWHERE artist = 'Aaron Boyd';",
        "normalized_output_query": "SELECT name FROM public.cards WHERE artist = 'Aaron Boyd';",
        "output_sample_result": [
            [
                "Cloudchaser Eagle"
            ],
            [
                "Repulse"
            ],
            [
                "Repulse"
            ],
            [
                "Repulse"
            ],
            [
                "Repulse"
            ]
        ],
        "output_column_names": [
            "name"
        ],
        "output_row_count": 12,
        "output_column_count": 1,
        "sequence_similarity_score": 0.8547008547008547,
        "bleu_similarity_score": 0.3301008309851503,
        "execution_accuracy": false
    },
    {
        "question": "How many black border cards are only available on mtgo?",
        "reference_query": "SELECT COUNT(id) FROM cards WHERE availability = 'mtgo' AND \"borderColor\" = 'black'",
        "normalized_reference_query": "SELECT COUNT(id) FROM cards WHERE availability = 'mtgo' AND \"borderColor\" = 'black'",
        "reference_sample_result": [
            [
                3697
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*) \nFROM public.cards \nWHERE \"borderColor\" = 'black' \nAND \"availability\" = 'mtgo'\nAND \"availability\" NOT LIKE '%paper%'\nAND \"availability\" NOT LIKE '%arena%'\nAND \"availability\" NOT LIKE '%mtgo,arena%'\nAND \"availability\" NOT LIKE '%paper,arena%'\nAND \"availability\" NOT LIKE '%paper,mtgo%'\nAND \"availability\" NOT LIKE '%paper,mtgo,arena%';",
        "normalized_output_query": "SELECT COUNT(*) FROM public.cards WHERE \"borderColor\" = 'black' AND \"availability\" = 'mtgo' AND \"availability\" NOT LIKE '%paper%' AND \"availability\" NOT LIKE '%arena%' AND \"availability\" NOT LIKE '%mtgo,arena%' AND \"availability\" NOT LIKE '%paper,arena%' AND \"availability\" NOT LIKE '%paper,mtgo%' AND \"availability\" NOT LIKE '%paper,mtgo,arena%';",
        "output_sample_result": [
            [
                3697
            ]
        ],
        "output_column_names": [
            "count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.2558139534883721,
        "bleu_similarity_score": 2.196068827673299e-78,
        "execution_accuracy": false
    },
    {
        "question": "List down all the card IDs with converted mana cost of 0.",
        "reference_query": "SELECT id FROM cards WHERE \"convertedManaCost\" = 0",
        "normalized_reference_query": "SELECT id FROM cards WHERE \"convertedManaCost\" = 0",
        "reference_sample_result": [
            [
                774
            ],
            [
                309
            ],
            [
                326
            ],
            [
                327
            ],
            [
                337
            ]
        ],
        "reference_column_names": [
            "id"
        ],
        "reference_row_count": 7327,
        "reference_column_count": 1,
        "output_query": "SELECT id FROM public.cards WHERE \"convertedManaCost\" = 0;",
        "normalized_output_query": "SELECT id FROM public.cards WHERE \"convertedManaCost\" = 0;",
        "output_sample_result": [
            [
                774
            ],
            [
                309
            ],
            [
                326
            ],
            [
                327
            ],
            [
                337
            ]
        ],
        "output_column_names": [
            "id"
        ],
        "output_row_count": 7327,
        "output_column_count": 1,
        "sequence_similarity_score": 0.9259259259259259,
        "bleu_similarity_score": 7.508645449069235e-78,
        "execution_accuracy": false
    },
    {
        "question": "What are the card layout of cards with keyword of flying?",
        "reference_query": "SELECT layout FROM cards WHERE keywords = 'Flying'",
        "normalized_reference_query": "SELECT layout FROM cards WHERE keywords = 'Flying'",
        "reference_sample_result": [
            [
                "normal"
            ],
            [
                "normal"
            ],
            [
                "normal"
            ],
            [
                "normal"
            ],
            [
                "normal"
            ]
        ],
        "reference_column_names": [
            "layout"
        ],
        "reference_row_count": 3088,
        "reference_column_count": 1,
        "output_query": "SELECT DISTINCT layout\nFROM public.cards\nWHERE keywords LIKE '%flying%'",
        "normalized_output_query": "SELECT DISTINCT layout FROM public.cards WHERE keywords LIKE '%flying%'",
        "output_sample_result": [],
        "output_column_names": [
            "layout"
        ],
        "output_row_count": 0,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7933884297520661,
        "bleu_similarity_score": 9.106239987484608e-155,
        "execution_accuracy": false
    },
    {
        "question": "How many cards with original type of \"Summon - Angel\" have subtype other than \"Angel\"?",
        "reference_query": "SELECT COUNT(id) FROM cards WHERE \"originalType\" = 'Summon - Angel' AND subtypes != 'Angel'",
        "normalized_reference_query": "SELECT COUNT(id) FROM cards WHERE \"originalType\" = 'Summon - Angel' AND subtypes != 'Angel'",
        "reference_sample_result": [
            [
                3
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*)\nFROM public.cards\nWHERE \"originalType\" = 'Summon - Angel' \nAND subtypes IS NOT NULL \nAND subtypes <> 'Angel';",
        "normalized_output_query": "SELECT COUNT(*) FROM public.cards WHERE \"originalType\" = 'Summon - Angel' AND subtypes IS NOT NULL AND subtypes <> 'Angel';",
        "output_sample_result": [
            [
                3
            ]
        ],
        "output_column_names": [
            "count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.8130841121495327,
        "bleu_similarity_score": 0.38761990534234064,
        "execution_accuracy": false
    },
    {
        "question": "What are the foiled cards that are incredibly powerful when paired with non foiled cards? List the IDs.",
        "reference_query": "SELECT id FROM cards WHERE \"cardKingdomId\" IS NOT NULL AND \"cardKingdomFoilId\" IS NOT NULL",
        "normalized_reference_query": "SELECT id FROM cards WHERE \"cardKingdomId\" IS NOT NULL AND \"cardKingdomFoilId\" IS NOT NULL",
        "reference_error": null,
        "output_query": "The provided context does not have sufficient information to determine which foiled cards are incredibly powerful when paired with non-foiled cards. The context includes the `cards` table with a `hasFoil` column indicating if a card has a foil version, but it does not include any criteria or attributes to evaluate whether a card is \"incredibly powerful\" when paired with another card. Additional information or context is required to generate the desired SQL query.",
        "normalized_output_query": "The provided context does NOT have sufficient information TO determine which foiled cards ARE incredibly powerful WHEN paired WITH non-foiled cards. The context includes the `cards` TABLE WITH a `hasFoil` COLUMN indicating IF a card has a foil VERSION, but it does NOT INCLUDE ANY criteria OR attributes TO evaluate whether a card IS \"incredibly powerful\" WHEN paired WITH another card. Additional information OR context IS required TO generate the desired SQL query.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context does NOT have sufficient information TO...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What are the cards belong to duel deck a? List the ID.",
        "reference_query": "SELECT id FROM cards WHERE \"duelDeck\" = 'a'",
        "normalized_reference_query": "SELECT id FROM cards WHERE \"duelDeck\" = 'a'",
        "reference_sample_result": [
            [
                14440
            ],
            [
                14441
            ],
            [
                14442
            ],
            [
                14443
            ],
            [
                14444
            ]
        ],
        "reference_column_names": [
            "id"
        ],
        "reference_row_count": 804,
        "reference_column_count": 1,
        "output_query": "SELECT id \nFROM public.cards \nWHERE \"duelDeck\" = 'a';",
        "normalized_output_query": "SELECT id FROM public.cards WHERE \"duelDeck\" = 'a';",
        "output_sample_result": [
            [
                14440
            ],
            [
                14441
            ],
            [
                14442
            ],
            [
                14443
            ],
            [
                14444
            ]
        ],
        "output_column_names": [
            "id"
        ],
        "output_row_count": 804,
        "output_column_count": 1,
        "sequence_similarity_score": 0.9148936170212766,
        "bleu_similarity_score": 7.508645449069235e-78,
        "execution_accuracy": false
    },
    {
        "question": "List down the name of artists for cards in Chinese Simplified.",
        "reference_query": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
        "normalized_reference_query": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
        "reference_sample_result": [
            [
                "Pete Venters"
            ],
            [
                "Volkan Ba\u01f5a"
            ],
            [
                "Justin Sweet"
            ],
            [
                "Matthew D. Wilson"
            ],
            [
                "Rebecca Guay"
            ]
        ],
        "reference_column_names": [
            "artist"
        ],
        "reference_row_count": 20106,
        "reference_column_count": 1,
        "output_query": "SELECT DISTINCT artist \nFROM public.cards \nWHERE availability LIKE '%Chinese Simplified%'",
        "normalized_output_query": "SELECT DISTINCT artist FROM public.cards WHERE availability LIKE '%Chinese Simplified%'",
        "output_sample_result": [],
        "output_column_names": [
            "artist"
        ],
        "output_row_count": 0,
        "output_column_count": 1,
        "sequence_similarity_score": 0.5283018867924528,
        "bleu_similarity_score": 4.960142520714786e-232,
        "execution_accuracy": false
    },
    {
        "question": "What are the cards that only available in paper and Japanese language?",
        "reference_query": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
        "normalized_reference_query": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the query because it doesn't contain any columns related to the availability format (such as paper) or the language of the cards in the available tables.",
        "normalized_output_query": "The provided context IS insufficient TO generate the query because it doesn't contain ANY columns related TO the availability format (such AS paper) OR the LANGUAGE OF the cards IN the available tables.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the query b...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many of the banned cards are white border?",
        "reference_query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.\"borderColor\" = 'white'",
        "normalized_reference_query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.\"borderColor\" = 'white'",
        "reference_error": null,
        "output_query": "The provided context does not contain sufficient information to generate a SQL query to answer the question about banned cards with a white border. The context does not include any information about banned cards.",
        "normalized_output_query": "The provided context does NOT contain sufficient information TO generate a SQL query TO answer the question about banned cards WITH a white border. The context does NOT INCLUDE ANY information about banned cards.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context does NOT contain sufficient information...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "List down the uuid for legacy cards and the foreign language of these cards.",
        "reference_query": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'legacy'",
        "normalized_reference_query": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'legacy'",
        "reference_sample_result": [
            [
                "5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c",
                "German"
            ],
            [
                "5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c",
                "Spanish"
            ],
            [
                "5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c",
                "French"
            ],
            [
                "5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c",
                "Italian"
            ],
            [
                "5f8287b1-5bb6-5f4c-ad17-316a40d5bb0c",
                "Japanese"
            ]
        ],
        "reference_column_names": [
            "uuid",
            "language"
        ],
        "reference_row_count": 228765,
        "reference_column_count": 2,
        "output_query": "SELECT c.uuid, fd.language\nFROM public.cards c\nJOIN public.legalities l ON c.uuid = l.uuid\nJOIN public.foreign_data fd ON c.uuid = fd.uuid\nWHERE l.format = 'Legacy';",
        "normalized_output_query": "SELECT c.uuid, fd.language FROM public.cards c JOIN public.legalities l ON c.uuid = l.uuid JOIN public.foreign_data fd ON c.uuid = fd.uuid WHERE l.format = 'Legacy';",
        "output_sample_result": [],
        "output_column_names": [
            "uuid",
            "language"
        ],
        "output_row_count": 0,
        "output_column_count": 2,
        "sequence_similarity_score": 0.7678571428571429,
        "bleu_similarity_score": 1.1884406441514008e-231,
        "execution_accuracy": false
    },
    {
        "question": "Write down the ruling of Beacon of Immortality.",
        "reference_query": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
        "normalized_reference_query": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
        "reference_error": null,
        "output_query": "The provided context does not contain information about the ruling of \"Beacon of Immortality.\" The `rulings` table seems relevant, but without specific knowledge that \"Beacon of Immortality\" is included in the `text` or `uuid` columns, a direct query cannot be generated. \n\nTo proceed, we would need to know how \"Beacon of Immortality\" is referenced within the `rulings` table.",
        "normalized_output_query": "The provided context does NOT contain information about the ruling OF \"Beacon of Immortality.\" The `rulings` TABLE seems relevant, but WITHOUT SPECIFIC knowledge that \"Beacon of Immortality\" IS included IN the `text` OR `uuid` columns, a direct query cannot be generated. TO proceed, we would need TO know how \"Beacon of Immortality\" IS referenced within the `rulings` table.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context does NOT contain information about the ...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many cards are having future frame version and what are the legality status of these cards?",
        "reference_query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.\"frameVersion\" = 'future'",
        "normalized_reference_query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.\"frameVersion\" = 'future'",
        "reference_sample_result": [
            [
                583
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(DISTINCT c.uuid) AS card_count, l.status\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.\"frameVersion\" = 'future'\nGROUP BY l.status;",
        "normalized_output_query": "SELECT COUNT(DISTINCT c.uuid) AS card_count, l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.\"frameVersion\" = 'future' GROUP BY l.status;",
        "output_sample_result": [
            [
                1,
                "Banned"
            ],
            [
                93,
                "Legal"
            ]
        ],
        "output_column_names": [
            "card_count",
            "status"
        ],
        "output_row_count": 2,
        "output_column_count": 2,
        "sequence_similarity_score": 0.7028985507246377,
        "bleu_similarity_score": 7.538120429142079e-155,
        "execution_accuracy": false
    },
    {
        "question": "What are the cards for set OGW? State the colour for these cards.",
        "reference_query": "SELECT id, colors FROM cards WHERE id IN ( SELECT id FROM set_translations WHERE \"setCode\" = 'OGW' )",
        "normalized_reference_query": "SELECT id, colors FROM cards WHERE id IN (SELECT id FROM set_translations WHERE \"setCode\" = 'OGW')",
        "reference_error": null,
        "output_query": "SELECT c.name, cl.colour\nFROM public.cards c\nJOIN public.colour cl ON c.id = cl.id\nWHERE c.setCode = 'OGW';",
        "normalized_output_query": "SELECT c.name, cl.colour FROM public.cards c JOIN public.colour cl ON c.id = cl.id WHERE c.setCode = 'OGW';",
        "output_error": "relation \"public.colour\" does not exist\nLINE 1: SELECT c.name, cl.colour FROM public.cards c JOIN public.col...\n                                                          ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What are the cards in set 10E with converted mana of 5 have translation and what are the languages?",
        "reference_query": "SELECT id, language FROM set_translations WHERE id IN ( SELECT id FROM cards WHERE \"convertedManaCost\" = 5 ) AND \"setCode\" = '10E'",
        "normalized_reference_query": "SELECT id, LANGUAGE FROM set_translations WHERE id IN (SELECT id FROM cards WHERE \"convertedManaCost\" = 5) AND \"setCode\" = '10E'",
        "reference_error": null,
        "output_query": "SELECT c.name AS card_name, st.language\nFROM cards c\nJOIN set_translations st ON c.setCode = st.setCode\nWHERE c.setCode = '10E' AND c.convertedManaCost = 5;",
        "normalized_output_query": "SELECT c.name AS card_name, st.language FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE c.setCode = '10E' AND c.convertedManaCost = 5;",
        "output_error": "column c.setcode does not exist\nLINE 1: ...language FROM cards c JOIN set_translations st ON c.setCode ...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"c.setCode\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
        "reference_query": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.\"originalType\" = 'Creature - Elf'",
        "normalized_reference_query": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.\"originalType\" = 'Creature - Elf'",
        "reference_sample_result": [
            [
                7965,
                "2004-10-04"
            ],
            [
                240,
                "2007-05-01"
            ],
            [
                242,
                "2004-10-04"
            ],
            [
                242,
                "2005-08-01"
            ],
            [
                247,
                "2004-10-04"
            ]
        ],
        "reference_column_names": [
            "id",
            "date"
        ],
        "reference_row_count": 49,
        "reference_column_count": 2,
        "output_query": "SELECT c.name, r.date AS ruling_date\nFROM public.cards c\nJOIN public.rulings r ON c.uuid = r.uuid\nWHERE c.\"originalType\" = 'Creature - Elf';",
        "normalized_output_query": "SELECT c.name, r.date AS ruling_date FROM public.cards c JOIN public.rulings r ON c.uuid = r.uuid WHERE c.\"originalType\" = 'Creature - Elf';",
        "output_sample_result": [
            [
                "Seeker of Skybreak",
                "2004-10-04"
            ],
            [
                "Elven Riders",
                "2007-05-01"
            ],
            [
                "Elvish Champion",
                "2004-10-04"
            ],
            [
                "Elvish Champion",
                "2005-08-01"
            ],
            [
                "Gaea's Herald",
                "2004-10-04"
            ]
        ],
        "output_column_names": [
            "name",
            "ruling_date"
        ],
        "output_row_count": 49,
        "output_column_count": 2,
        "sequence_similarity_score": 0.7415730337078652,
        "bleu_similarity_score": 2.6056266909862984e-78,
        "execution_accuracy": false
    },
    {
        "question": "Which user has a higher reputation, Harlan or Jarrod Dixon?",
        "reference_query": "SELECT \"DisplayName\" FROM users WHERE \"DisplayName\" IN ('Harlan', 'Jarrod Dixon') AND \"Reputation\" = ( SELECT MAX(\"Reputation\") FROM users WHERE \"DisplayName\" IN ('Harlan', 'Jarrod Dixon') )",
        "normalized_reference_query": "SELECT \"DisplayName\" FROM users WHERE \"DisplayName\" IN ('Harlan', 'Jarrod Dixon') AND \"Reputation\" = (SELECT MAX(\"Reputation\") FROM users WHERE \"DisplayName\" IN ('Harlan', 'Jarrod Dixon'))",
        "reference_sample_result": [
            [
                "Harlan"
            ]
        ],
        "reference_column_names": [
            "DisplayName"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT \"DisplayName\", \"Reputation\"\nFROM public.users\nWHERE \"DisplayName\" IN ('Harlan', 'Jarrod Dixon')\nORDER BY \"Reputation\" DESC;",
        "normalized_output_query": "SELECT \"DisplayName\", \"Reputation\" FROM public.users WHERE \"DisplayName\" IN ('Harlan', 'Jarrod Dixon') ORDER BY \"Reputation\" DESC;",
        "output_sample_result": [
            [
                "Harlan",
                457
            ],
            [
                "Jarrod Dixon",
                101
            ]
        ],
        "output_column_names": [
            "DisplayName",
            "Reputation"
        ],
        "output_row_count": 2,
        "output_column_count": 2,
        "sequence_similarity_score": 0.6226415094339622,
        "bleu_similarity_score": 0.2102029191945851,
        "execution_accuracy": false
    },
    {
        "question": "Please list the display names of all the users whose accounts were created in the year 2011.",
        "reference_query": "SELECT \"DisplayName\" FROM users WHERE EXTRACT(YEAR FROM \"CreationDate\") = '2011'",
        "normalized_reference_query": "SELECT \"DisplayName\" FROM users WHERE EXTRACT(YEAR FROM \"CreationDate\") = '2011'",
        "reference_sample_result": [
            [
                "etarion"
            ],
            [
                "Maurizio"
            ],
            [
                "fnurl"
            ],
            [
                "P auritus"
            ],
            [
                "Not Durrett"
            ]
        ],
        "reference_column_names": [
            "DisplayName"
        ],
        "reference_row_count": 4430,
        "reference_column_count": 1,
        "output_query": "SELECT \"DisplayName\"\nFROM public.users\nWHERE EXTRACT(YEAR FROM \"CreationDate\") = 2011;",
        "normalized_output_query": "SELECT \"DisplayName\" FROM public.users WHERE EXTRACT(YEAR FROM \"CreationDate\") = 2011;",
        "output_sample_result": [
            [
                "etarion"
            ],
            [
                "Maurizio"
            ],
            [
                "fnurl"
            ],
            [
                "P auritus"
            ],
            [
                "Not Durrett"
            ]
        ],
        "output_column_names": [
            "DisplayName"
        ],
        "output_row_count": 4430,
        "output_column_count": 1,
        "sequence_similarity_score": 0.9397590361445783,
        "bleu_similarity_score": 0.5253819788848316,
        "execution_accuracy": false
    },
    {
        "question": "How many users last accessed the website after 2014/9/1?",
        "reference_query": "SELECT COUNT(\"Id\") FROM users WHERE date(\"LastAccessDate\") > '2014-09-01'",
        "normalized_reference_query": "SELECT COUNT(\"Id\") FROM users WHERE date(\"LastAccessDate\") > '2014-09-01'",
        "reference_sample_result": [
            [
                4941
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*) \nFROM public.users \nWHERE \"LastAccessDate\" > '2014-09-01';",
        "normalized_output_query": "SELECT COUNT(*) FROM public.users WHERE \"LastAccessDate\" > '2014-09-01';",
        "output_sample_result": [
            [
                5146
            ]
        ],
        "output_column_names": [
            "count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.8689655172413793,
        "bleu_similarity_score": 1.5319719891192393e-231,
        "execution_accuracy": false
    },
    {
        "question": "What is the display name of the user who has the most number of views?",
        "reference_query": "SELECT \"DisplayName\" FROM users WHERE \"Views\" = ( SELECT MAX(\"Views\") FROM users )",
        "normalized_reference_query": "SELECT \"DisplayName\" FROM users WHERE \"Views\" = (SELECT MAX(\"Views\") FROM users)",
        "reference_sample_result": [
            [
                "whuber"
            ]
        ],
        "reference_column_names": [
            "DisplayName"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT \"DisplayName\"\nFROM public.users\nORDER BY \"Views\" DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT \"DisplayName\" FROM public.users ORDER BY \"Views\" DESC LIMIT 1;",
        "output_sample_result": [
            [
                "whuber"
            ]
        ],
        "output_column_names": [
            "DisplayName"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6308724832214765,
        "bleu_similarity_score": 3.5879471085711124e-78,
        "execution_accuracy": false
    },
    {
        "question": "Among the users who have more than 100 upvotes, how many of them have more then 1 downvotes?",
        "reference_query": "SELECT COUNT(\"Id\") FROM users WHERE \"UpVotes\" > 100 AND \"DownVotes\" > 1",
        "normalized_reference_query": "SELECT COUNT(\"Id\") FROM users WHERE \"UpVotes\" > 100 AND \"DownVotes\" > 1",
        "reference_error": null,
        "output_query": "SELECT COUNT(*) \nFROM public.users \nWHERE UpVotes > 100 AND DownVotes > 1;",
        "normalized_output_query": "SELECT COUNT(*) FROM public.users WHERE UpVotes > 100 AND DownVotes > 1;",
        "output_error": "column \"upvotes\" does not exist\nLINE 1: SELECT COUNT(*) FROM public.users WHERE UpVotes > 100 AND Do...\n                                                ^\nHINT:  Perhaps you meant to reference the column \"users.UpVotes\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many users with more than 10 views created their account after the year 2013?",
        "reference_query": "SELECT COUNT(\"Id\") FROM users WHERE EXTRACT(YEAR FROM \"CreationDate\") > '2013' AND \"Views\" > 10",
        "normalized_reference_query": "SELECT COUNT(\"Id\") FROM users WHERE EXTRACT(YEAR FROM \"CreationDate\") > '2013' AND \"Views\" > 10",
        "reference_error": null,
        "output_query": "SELECT COUNT(*) \nFROM public.users \nWHERE Views > 10 AND CreationDate > '2013-12-31';",
        "normalized_output_query": "SELECT COUNT(*) FROM public.users WHERE VIEWS > 10 AND CreationDate > '2013-12-31';",
        "output_error": "column \"views\" does not exist\nLINE 1: SELECT COUNT(*) FROM public.users WHERE VIEWS > 10 AND Creat...\n                                                ^\nHINT:  Perhaps you meant to reference the column \"users.Views\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many posts does the user csgillespie own?",
        "reference_query": "SELECT COUNT(T1.\"Id\") FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"OwnerUserId\" = T2.\"Id\" WHERE T2.\"DisplayName\" = 'csgillespie'",
        "normalized_reference_query": "SELECT COUNT(T1.\"Id\") FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"OwnerUserId\" = T2.\"Id\" WHERE T2.\"DisplayName\" = 'csgillespie'",
        "reference_error": null,
        "output_query": "SELECT COUNT(*)\nFROM public.posts p\nJOIN public.users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'csgillespie';",
        "normalized_output_query": "SELECT COUNT(*) FROM public.posts p JOIN public.users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';",
        "output_error": "column p.owneruserid does not exist\nLINE 1: ...UNT(*) FROM public.posts p JOIN public.users u ON p.OwnerUse...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"p.OwnerUserId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Please list the titles of the posts owned by the user csgillespie?",
        "reference_query": "SELECT T1.\"Title\" FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"OwnerUserId\" = T2.\"Id\" WHERE T2.\"DisplayName\" = 'csgillespie'",
        "normalized_reference_query": "SELECT T1.\"Title\" FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"OwnerUserId\" = T2.\"Id\" WHERE T2.\"DisplayName\" = 'csgillespie'",
        "reference_error": null,
        "output_query": "SELECT p.Title \nFROM public.posts p\nJOIN public.users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'csgillespie';",
        "normalized_output_query": "SELECT p.Title FROM public.posts p JOIN public.users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';",
        "output_error": "column p.owneruserid does not exist\nLINE 1: ....Title FROM public.posts p JOIN public.users u ON p.OwnerUse...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"p.OwnerUserId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Who is the owner of the post \"Eliciting priors from experts\"?",
        "reference_query": "SELECT T2.\"DisplayName\" FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"OwnerUserId\" = T2.\"Id\" WHERE T1.\"Title\" = 'Eliciting priors from experts'",
        "normalized_reference_query": "SELECT T2.\"DisplayName\" FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"OwnerUserId\" = T2.\"Id\" WHERE T1.\"Title\" = 'Eliciting priors from experts'",
        "reference_sample_result": [
            [
                "csgillespie"
            ]
        ],
        "reference_column_names": [
            "DisplayName"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT \"OwnerDisplayName\"\nFROM public.posts\nWHERE \"Title\" = 'Eliciting priors from experts';",
        "normalized_output_query": "SELECT \"OwnerDisplayName\" FROM public.posts WHERE \"Title\" = 'Eliciting priors from experts';",
        "output_sample_result": [
            [
                null
            ]
        ],
        "output_column_names": [
            "OwnerDisplayName"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6694915254237288,
        "bleu_similarity_score": 0.09927423412944203,
        "execution_accuracy": false
    },
    {
        "question": "What is the title of the post that is owned by csgillespie and has the highest popularity?",
        "reference_query": "SELECT T1.\"Title\" FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"OwnerUserId\" = T2.\"Id\" WHERE T2.\"DisplayName\" = 'csgillespie' ORDER BY T1.\"ViewCount\" DESC LIMIT 1",
        "normalized_reference_query": "SELECT T1.\"Title\" FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"OwnerUserId\" = T2.\"Id\" WHERE T2.\"DisplayName\" = 'csgillespie' ORDER BY T1.\"ViewCount\" DESC LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT Title \nFROM public.posts \nWHERE OwnerDisplayName = 'csgillespie' \nORDER BY ViewCount DESC \nLIMIT 1;",
        "normalized_output_query": "SELECT Title FROM public.posts WHERE OwnerDisplayName = 'csgillespie' ORDER BY ViewCount DESC LIMIT 1;",
        "output_error": "column \"title\" does not exist\nLINE 1: SELECT Title FROM public.posts WHERE OwnerDisplayName = 'csg...\n               ^\nHINT:  Perhaps you meant to reference the column \"posts.Title\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the display name of the user who is the owner of the most valuable post?",
        "reference_query": "SELECT T2.\"DisplayName\" FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"OwnerUserId\" = T2.\"Id\" ORDER BY T1.\"FavoriteCount\" DESC LIMIT 1",
        "normalized_reference_query": "SELECT T2.\"DisplayName\" FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"OwnerUserId\" = T2.\"Id\" ORDER BY T1.\"FavoriteCount\" DESC LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT u.DisplayName\nFROM public.posts p\nJOIN public.users u ON p.OwnerUserId = u.Id\nORDER BY p.Score DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT u.DisplayName FROM public.posts p JOIN public.users u ON p.OwnerUserId = u.Id ORDER BY p.Score DESC LIMIT 1;",
        "output_error": "column p.owneruserid does not exist\nLINE 1: ...ayName FROM public.posts p JOIN public.users u ON p.OwnerUse...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"p.OwnerUserId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the total number of comments of all the posts owned by csgillespie?",
        "reference_query": "SELECT SUM(T1.\"CommentCount\") FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"OwnerUserId\" = T2.\"Id\" WHERE T2.\"DisplayName\" = 'csgillespie'",
        "normalized_reference_query": "SELECT SUM(T1.\"CommentCount\") FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"OwnerUserId\" = T2.\"Id\" WHERE T2.\"DisplayName\" = 'csgillespie'",
        "reference_error": null,
        "output_query": "SELECT SUM(CommentCount) AS TotalComments\nFROM posts\nWHERE OwnerDisplayName = 'csgillespie';",
        "normalized_output_query": "SELECT SUM(CommentCount) AS TotalComments FROM posts WHERE OwnerDisplayName = 'csgillespie';",
        "output_error": "column \"commentcount\" does not exist\nLINE 1: SELECT SUM(CommentCount) AS TotalComments FROM posts WHERE O...\n                   ^\nHINT:  Perhaps you meant to reference the column \"posts.CommentCount\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "For the post that got the most number of answers owned by csgillespie, how many answers did it get?",
        "reference_query": "SELECT MAX(T1.\"AnswerCount\") FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"OwnerUserId\" = T2.\"Id\" WHERE T2.\"DisplayName\" = 'csgillespie'",
        "normalized_reference_query": "SELECT MAX(T1.\"AnswerCount\") FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"OwnerUserId\" = T2.\"Id\" WHERE T2.\"DisplayName\" = 'csgillespie'",
        "reference_error": null,
        "output_query": "SELECT MAX(AnswerCount) AS MostAnswers\nFROM posts\nWHERE OwnerDisplayName = 'csgillespie';",
        "normalized_output_query": "SELECT MAX(AnswerCount) AS MostAnswers FROM posts WHERE OwnerDisplayName = 'csgillespie';",
        "output_error": "column \"answercount\" does not exist\nLINE 1: SELECT MAX(AnswerCount) AS MostAnswers FROM posts WHERE Owne...\n                   ^\nHINT:  Perhaps you meant to reference the column \"posts.AnswerCount\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
        "reference_query": "SELECT T2.\"DisplayName\" FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"LastEditorUserId\" = T2.\"Id\" WHERE T1.\"Title\" = 'Examples for teaching: Correlation does not mean causation'",
        "normalized_reference_query": "SELECT T2.\"DisplayName\" FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"LastEditorUserId\" = T2.\"Id\" WHERE T1.\"Title\" = 'Examples for teaching: Correlation does not mean causation'",
        "reference_sample_result": [
            [
                "Abhilash"
            ]
        ],
        "reference_column_names": [
            "DisplayName"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT p.\"LastEditorDisplayName\"\nFROM public.posts p\nWHERE p.\"Title\" = 'Examples for teaching: Correlation does not mean causation';",
        "normalized_output_query": "SELECT p.\"LastEditorDisplayName\" FROM public.posts p WHERE p.\"Title\" = 'Examples for teaching: Correlation does not mean causation';",
        "output_sample_result": [
            [
                null
            ]
        ],
        "output_column_names": [
            "LastEditorDisplayName"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7161290322580646,
        "bleu_similarity_score": 0.2566836973413692,
        "execution_accuracy": false
    },
    {
        "question": "Among the posts owned by csgillespie, how many of them are root posts?",
        "reference_query": "SELECT COUNT(T1.\"Id\") FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"OwnerUserId\" = T2.\"Id\" WHERE T2.\"DisplayName\" = 'csgillespie' AND T1.\"ParentId\" IS NULL",
        "normalized_reference_query": "SELECT COUNT(T1.\"Id\") FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"OwnerUserId\" = T2.\"Id\" WHERE T2.\"DisplayName\" = 'csgillespie' AND T1.\"ParentId\" IS NULL",
        "reference_error": null,
        "output_query": "SELECT COUNT(*) AS root_post_count\nFROM posts\nWHERE OwnerDisplayName = 'csgillespie' AND ParentId IS NULL;",
        "normalized_output_query": "SELECT COUNT(*) AS root_post_count FROM posts WHERE OwnerDisplayName = 'csgillespie' AND ParentId IS NULL;",
        "output_error": "column \"ownerdisplayname\" does not exist\nLINE 1: ...LECT COUNT(*) AS root_post_count FROM posts WHERE OwnerDispl...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"posts.OwnerDisplayName\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Please list the display names of all the users who owns a post that is well-finished.",
        "reference_query": "SELECT T2.\"DisplayName\" FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"OwnerUserId\" = T2.\"Id\" WHERE T1.\"ClosedDate\" IS NOT NULL",
        "normalized_reference_query": "SELECT T2.\"DisplayName\" FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"OwnerUserId\" = T2.\"Id\" WHERE T1.\"ClosedDate\" IS NOT NULL",
        "reference_error": null,
        "output_query": "It seems that the context provided does not define what constitutes a \"well-finished\" post. To generate the SQL query, we need a specific criterion for what makes a post well-finished, such as a high score, a certain number of views, or another measurable attribute. Without this information, the query cannot be accurately generated. Please provide the specific criteria for a \"well-finished\" post.",
        "normalized_output_query": "It seems that the context provided does NOT DEFINE what constitutes a \"well-finished\" post. TO generate the SQL query, we need a SPECIFIC criterion FOR what makes a post well-finished, such AS a high score, a certain number OF VIEWS, OR another measurable attribute. WITHOUT this information, the query cannot be accurately generated. Please provide the SPECIFIC criteria FOR a \"well-finished\" post.",
        "output_error": "syntax error at or near \"It\"\nLINE 1: It seems that the context provided does NOT DEFINE what cons...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Among the posts owned by an elder user, how many of them have a score of over 19?",
        "reference_query": "SELECT COUNT(T1.\"Id\") FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"OwnerUserId\" = T2.\"Id\" WHERE T1.\"Score\" >= 20 AND T2.\"Age\" > 65",
        "normalized_reference_query": "SELECT COUNT(T1.\"Id\") FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"OwnerUserId\" = T2.\"Id\" WHERE T1.\"Score\" >= 20 AND T2.\"Age\" > 65",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query. The available tables do not include a direct way to determine if a user is an \"elder user\". Additional information or criteria defining \"elder user\" is needed to construct the query.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query. The available TABLES DO NOT INCLUDE a direct way TO determine IF a USER IS an \"elder user\". Additional information OR criteria defining \"elder user\" IS needed TO construct the query.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
        "reference_query": "SELECT T2.\"Location\" FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"OwnerUserId\" = T2.\"Id\" WHERE T1.\"Title\" = 'Eliciting priors from experts'",
        "normalized_reference_query": "SELECT T2.\"Location\" FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"OwnerUserId\" = T2.\"Id\" WHERE T1.\"Title\" = 'Eliciting priors from experts'",
        "reference_error": null,
        "output_query": "The provided context does not contain information about the location of the owner of a post. Therefore, it can't be generated.",
        "normalized_output_query": "The provided context does NOT contain information about the LOCATION OF the OWNER OF a post. Therefore, it can't be generated.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context does NOT contain information about the ...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.",
        "reference_query": "SELECT T2.\"Body\" FROM tags AS T1 INNER JOIN posts AS T2 ON T2.\"Id\" = T1.\"ExcerptPostId\" WHERE T1.\"TagName\" = 'bayesian'",
        "normalized_reference_query": "SELECT T2.\"Body\" FROM tags AS T1 INNER JOIN posts AS T2 ON T2.\"Id\" = T1.\"ExcerptPostId\" WHERE T1.\"TagName\" = 'bayesian'",
        "reference_error": null,
        "output_query": "SELECT p.Body\nFROM posts p\nJOIN tags t ON p.Id = t.ExcerptPostId\nWHERE t.TagName = 'bayesian';",
        "normalized_output_query": "SELECT p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'bayesian';",
        "output_error": "column p.id does not exist\nLINE 1: SELECT p.Body FROM posts p JOIN tags t ON p.Id = t.ExcerptPo...\n                                                  ^\nHINT:  Perhaps you meant to reference the column \"p.Id\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "From which post is the most popular tag excerpted from? Please give the body of the post.",
        "reference_query": "SELECT \"Body\" FROM posts WHERE \"Id\" = ( SELECT \"ExcerptPostId\" FROM tags ORDER BY \"Count\" DESC LIMIT 1 )",
        "normalized_reference_query": "SELECT \"Body\" FROM posts WHERE \"Id\" = (SELECT \"ExcerptPostId\" FROM tags ORDER BY \"Count\" DESC LIMIT 1)",
        "reference_error": null,
        "output_query": "SELECT p.Body\nFROM public.tags t\nJOIN public.posts p ON t.ExcerptPostId = p.Id\nORDER BY t.Count DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT p.Body FROM public.tags t JOIN public.posts p ON t.ExcerptPostId = p.Id ORDER BY t.Count DESC LIMIT 1;",
        "output_error": "column t.excerptpostid does not exist\nLINE 1: ... p.Body FROM public.tags t JOIN public.posts p ON t.ExcerptP...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t.ExcerptPostId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many badges has the user csgillespie obtained?",
        "reference_query": "SELECT COUNT(T1.\"Id\") FROM badges AS T1 INNER JOIN users AS T2 ON T1.\"UserId\" = T2.\"Id\" WHERE T2.\"DisplayName\" = 'csgillespie'",
        "normalized_reference_query": "SELECT COUNT(T1.\"Id\") FROM badges AS T1 INNER JOIN users AS T2 ON T1.\"UserId\" = T2.\"Id\" WHERE T2.\"DisplayName\" = 'csgillespie'",
        "reference_error": null,
        "output_query": "The provided context is insufficient because the necessary information to link a user display name, such as \"csgillespie\", to a user ID is missing. The query would require joining the `users` table with the `badges` table using the `UserId`, but there is no direct reference to display names in the badges context provided.",
        "normalized_output_query": "The provided context IS insufficient because the necessary information TO LINK a USER display name, such AS \"csgillespie\", TO a USER ID IS missing. The query would require joining the `users` TABLE WITH the `badges` TABLE USING the `UserId`, but there IS NO direct reference TO display NAMES IN the badges context provided.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient because the necessary i...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Please list the names of the badges obtained by csgillespie.",
        "reference_query": "SELECT T1.\"Name\"FROM badges AS T1 INNER JOIN users AS T2 ON T1.\"UserId\" = T2.\"Id\" WHERE T2.\"DisplayName\" = 'csgillespie'",
        "normalized_reference_query": "SELECT T1.\"Name\" FROM badges AS T1 INNER JOIN users AS T2 ON T1.\"UserId\" = T2.\"Id\" WHERE T2.\"DisplayName\" = 'csgillespie'",
        "reference_error": null,
        "output_query": "SELECT b.Name\nFROM badges b\nJOIN posts p ON b.UserId = p.OwnerUserId\nWHERE p.OwnerDisplayName = 'csgillespie';",
        "normalized_output_query": "SELECT b.Name FROM badges b JOIN posts p ON b.UserId = p.OwnerUserId WHERE p.OwnerDisplayName = 'csgillespie';",
        "output_error": "column b.userid does not exist\nLINE 1: SELECT b.Name FROM badges b JOIN posts p ON b.UserId = p.Own...\n                                                    ^\nHINT:  Perhaps you meant to reference the column \"b.UserId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Among the badges obtained by csgillespie, how many of them were obtained in the year 2011?",
        "reference_query": "SELECT COUNT(T1.\"Id\") FROM badges AS T1 INNER JOIN users AS T2 ON T1.\"UserId\" = T2.\"Id\" WHERE EXTRACT(YEAR FROM T1.\"Date\") = '2011' AND T2.\"DisplayName\" = 'csgillespie'",
        "normalized_reference_query": "SELECT COUNT(T1.\"Id\") FROM badges AS T1 INNER JOIN users AS T2 ON T1.\"UserId\" = T2.\"Id\" WHERE EXTRACT(YEAR FROM T1.\"Date\") = '2011' AND T2.\"DisplayName\" = 'csgillespie'",
        "reference_error": null,
        "output_query": "The provided context does not include information about the relationship between user names such as \"csgillespie\" and the \"UserId\" in the badges table. Therefore, it is not possible to generate the SQL query to answer the question.",
        "normalized_output_query": "The provided context does NOT INCLUDE information about the relationship BETWEEN USER NAMES such AS \"csgillespie\" AND the \"UserId\" IN the badges table. Therefore, it IS NOT possible TO generate the SQL query TO answer the question.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context does NOT INCLUDE information about the ...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the display name of the user who has obtained the most number of badges?",
        "reference_query": "SELECT T2.\"DisplayName\" FROM badges AS T1 INNER JOIN users AS T2 ON T1.\"UserId\" = T2.\"Id\" GROUP BY T2.\"DisplayName\" ORDER BY COUNT(T1.\"Id\") DESC LIMIT 1",
        "normalized_reference_query": "SELECT T2.\"DisplayName\" FROM badges AS T1 INNER JOIN users AS T2 ON T1.\"UserId\" = T2.\"Id\" GROUP BY T2.\"DisplayName\" ORDER BY COUNT(T1.\"Id\") DESC LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT u.DisplayName\nFROM public.users u\nJOIN (\n    SELECT UserId, COUNT(*) AS BadgeCount\n    FROM public.badges\n    GROUP BY UserId\n    ORDER BY BadgeCount DESC\n    LIMIT 1\n) AS b ON u.Id = b.UserId;",
        "normalized_output_query": "SELECT u.DisplayName FROM public.users u JOIN (SELECT UserId, COUNT(*) AS BadgeCount FROM public.badges GROUP BY UserId ORDER BY BadgeCount DESC LIMIT 1) AS b ON u.Id = b.UserId;",
        "output_error": "column \"userid\" does not exist\nLINE 1: ...CT u.DisplayName FROM public.users u JOIN (SELECT UserId, CO...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"badges.UserId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the average score of the posts owned by the user csgillespie?",
        "reference_query": "SELECT AVG(T1.\"Score\") FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"OwnerUserId\" = T2.\"Id\" WHERE T2.\"DisplayName\" = 'csgillespie'",
        "normalized_reference_query": "SELECT AVG(T1.\"Score\") FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"OwnerUserId\" = T2.\"Id\" WHERE T2.\"DisplayName\" = 'csgillespie'",
        "reference_sample_result": [
            [
                "9.0000000000000000"
            ]
        ],
        "reference_column_names": [
            "avg"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT AVG(p.\"Score\") AS average_score\nFROM public.posts p\nJOIN public.users u ON p.\"OwnerUserId\" = u.\"Id\"\nWHERE u.\"DisplayName\" = 'csgillespie';",
        "normalized_output_query": "SELECT AVG(p.\"Score\") AS average_score FROM public.posts p JOIN public.users u ON p.\"OwnerUserId\" = u.\"Id\" WHERE u.\"DisplayName\" = 'csgillespie';",
        "output_sample_result": [
            [
                "9.0000000000000000"
            ]
        ],
        "output_column_names": [
            "average_score"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7753623188405797,
        "bleu_similarity_score": 1.407133241729783e-231,
        "execution_accuracy": false
    },
    {
        "question": "What is the average number of badges obtained by a user with over 200 views?",
        "reference_query": "SELECT CAST(COUNT(T1.\"Id\") AS DOUBLE PRECISION) / COUNT(DISTINCT T2.\"DisplayName\") FROM badges AS T1 INNER JOIN users AS T2 ON T1.\"UserId\" = T2.\"Id\" WHERE T2.\"Views\" > 200",
        "normalized_reference_query": "SELECT CAST(COUNT(T1.\"Id\") AS DOUBLE PRECISION) / COUNT(DISTINCT T2.\"DisplayName\") FROM badges AS T1 INNER JOIN users AS T2 ON T1.\"UserId\" = T2.\"Id\" WHERE T2.\"Views\" > 200",
        "reference_error": null,
        "output_query": "SELECT AVG(badge_count) AS average_badges\nFROM (\n    SELECT u.Id, COUNT(b.Id) AS badge_count\n    FROM public.users u\n    JOIN public.badges b ON u.Id = b.UserId\n    WHERE u.Views > 200\n    GROUP BY u.Id\n) AS user_badge_counts;",
        "normalized_output_query": "SELECT AVG(badge_count) AS average_badges FROM (SELECT u.Id, COUNT(b.Id) AS badge_count FROM public.users u JOIN public.badges b ON u.Id = b.UserId WHERE u.Views > 200 GROUP BY u.Id) AS user_badge_counts;",
        "output_error": "column u.id does not exist\nLINE 1: ...count FROM public.users u JOIN public.badges b ON u.Id = b.U...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"u.Id\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Among the posts with a score of over 5, what is the percentage of them being owned by an elder user?",
        "reference_query": "SELECT CAST(SUM(CASE WHEN T2.\"Age\" > 65 THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(T1.\"Id\") FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"OwnerUserId\" = T2.\"Id\" WHERE T1.\"Score\" > 5",
        "normalized_reference_query": "SELECT CAST(SUM(CASE WHEN T2.\"Age\" > 65 THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(T1.\"Id\") FROM posts AS T1 INNER JOIN users AS T2 ON T1.\"OwnerUserId\" = T2.\"Id\" WHERE T1.\"Score\" > 5",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no definition of what constitutes an \"elder user\" in the given tables. We need additional information or criteria to determine which users are considered elder users, such as a specific age range or account creation date threshold.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO definition OF what constitutes an \"elder user\" IN the given tables. We need additional information OR criteria TO determine which users ARE considered elder users, such AS a SPECIFIC age RANGE OR ACCOUNT creation date threshold.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many votes did the user No.58 take on 2010/7/19?",
        "reference_query": "SELECT COUNT(\"Id\") FROM votes WHERE \"UserId\" = 58 AND \"CreationDate\" = '2010-07-19'",
        "normalized_reference_query": "SELECT COUNT(\"Id\") FROM votes WHERE \"UserId\" = 58 AND \"CreationDate\" = '2010-07-19'",
        "reference_error": null,
        "output_query": "SELECT COUNT(*) AS vote_count\nFROM votes\nWHERE UserId = 58 AND CreationDate = '2010-07-19';",
        "normalized_output_query": "SELECT COUNT(*) AS vote_count FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19';",
        "output_error": "column \"userid\" does not exist\nLINE 1: SELECT COUNT(*) AS vote_count FROM votes WHERE UserId = 58 A...\n                                                       ^\nHINT:  Perhaps you meant to reference the column \"votes.UserId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Indicate the creation date of the maximum number of votes.",
        "reference_query": "SELECT \"CreationDate\" FROM votes GROUP BY \"CreationDate\" ORDER BY COUNT(\"Id\") DESC LIMIT 1",
        "normalized_reference_query": "SELECT \"CreationDate\" FROM votes GROUP BY \"CreationDate\" ORDER BY COUNT(\"Id\") DESC LIMIT 1",
        "reference_sample_result": [
            [
                "2010-07-20"
            ]
        ],
        "reference_column_names": [
            "CreationDate"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT \"CreationDate\", COUNT(*) as vote_count\nFROM public.votes\nGROUP BY \"CreationDate\"\nORDER BY vote_count DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT \"CreationDate\", COUNT(*) AS vote_count FROM public.votes GROUP BY \"CreationDate\" ORDER BY vote_count DESC LIMIT 1;",
        "output_sample_result": [
            [
                "2010-07-20",
                464
            ]
        ],
        "output_column_names": [
            "CreationDate",
            "vote_count"
        ],
        "output_row_count": 1,
        "output_column_count": 2,
        "sequence_similarity_score": 0.7488151658767772,
        "bleu_similarity_score": 0.2803950119994003,
        "execution_accuracy": false
    },
    {
        "question": "Give the number of \"Revival\" badges.",
        "reference_query": "SELECT COUNT(\"Id\") FROM badges WHERE \"Name\" = 'Revival'",
        "normalized_reference_query": "SELECT COUNT(\"Id\") FROM badges WHERE \"Name\" = 'Revival'",
        "reference_sample_result": [
            [
                1018
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*) \nFROM public.badges \nWHERE \"Name\" = 'Revival';",
        "normalized_output_query": "SELECT COUNT(*) FROM public.badges WHERE \"Name\" = 'Revival';",
        "output_sample_result": [
            [
                1018
            ]
        ],
        "output_column_names": [
            "count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.8869565217391304,
        "bleu_similarity_score": 5.072841446586652e-78,
        "execution_accuracy": false
    },
    {
        "question": "What is the title for the post which got the highest score comment?",
        "reference_query": "SELECT \"Title\" FROM posts WHERE \"Id\" = ( SELECT \"PostId\" FROM comments ORDER BY \"Score\" DESC LIMIT 1 )",
        "normalized_reference_query": "SELECT \"Title\" FROM posts WHERE \"Id\" = (SELECT \"PostId\" FROM comments ORDER BY \"Score\" DESC LIMIT 1)",
        "reference_error": null,
        "output_query": "SELECT p.Title\nFROM public.posts p\nJOIN public.comments c ON p.Id = c.PostId\nWHERE c.Score = (SELECT MAX(Score) FROM public.comments);",
        "normalized_output_query": "SELECT p.Title FROM public.posts p JOIN public.comments c ON p.Id = c.PostId WHERE c.Score = (SELECT MAX(Score) FROM public.comments);",
        "output_error": "column p.id does not exist\nLINE 1: ...tle FROM public.posts p JOIN public.comments c ON p.Id = c.P...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"p.Id\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "For the post which got 1910 view counts, how many comments does it get?",
        "reference_query": "SELECT COUNT(T1.\"Id\") FROM posts AS T1 INNER JOIN comments AS T2 ON T1.\"Id\" = T2.\"PostId\" WHERE T1.\"ViewCount\" = 1910",
        "normalized_reference_query": "SELECT COUNT(T1.\"Id\") FROM posts AS T1 INNER JOIN comments AS T2 ON T1.\"Id\" = T2.\"PostId\" WHERE T1.\"ViewCount\" = 1910",
        "reference_error": null,
        "output_query": "SELECT p.Id, p.ViewCount, p.CommentCount\nFROM public.posts p\nWHERE p.ViewCount = 1910;",
        "normalized_output_query": "SELECT p.Id, p.ViewCount, p.CommentCount FROM public.posts p WHERE p.ViewCount = 1910;",
        "output_error": "column p.id does not exist\nLINE 1: SELECT p.Id, p.ViewCount, p.CommentCount FROM public.posts p...\n               ^\nHINT:  Perhaps you meant to reference the column \"p.Id\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?",
        "reference_query": "SELECT T1.\"FavoriteCount\" FROM posts AS T1 INNER JOIN comments AS T2 ON T1.\"Id\" = T2.\"PostId\" WHERE T2.\"CreationDate\" = '2014-04-23 20:29:39.0' AND T2.\"UserId\" = 3025",
        "normalized_reference_query": "SELECT T1.\"FavoriteCount\" FROM posts AS T1 INNER JOIN comments AS T2 ON T1.\"Id\" = T2.\"PostId\" WHERE T2.\"CreationDate\" = '2014-04-23 20:29:39.0' AND T2.\"UserId\" = 3025",
        "reference_error": null,
        "output_query": "SELECT p.FavoriteCount\nFROM posts p\nJOIN comments c ON p.Id = c.PostId\nWHERE c.UserId = 3025\n  AND c.CreationDate = '2014-04-23 20:29:39';",
        "normalized_output_query": "SELECT p.FavoriteCount FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.UserId = 3025 AND c.CreationDate = '2014-04-23 20:29:39';",
        "output_error": "column p.id does not exist\nLINE 1: ...T p.FavoriteCount FROM posts p JOIN comments c ON p.Id = c.P...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"p.Id\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Give the only one comment text of the post with parent id 107829.",
        "reference_query": "SELECT T2.\"Text\" FROM posts AS T1 INNER JOIN comments AS T2 ON T1.\"Id\" = T2.\"PostId\" WHERE T1.\"ParentId\" = 107829 AND T1.\"CommentCount\" = 1",
        "normalized_reference_query": "SELECT T2.\"Text\" FROM posts AS T1 INNER JOIN comments AS T2 ON T1.\"Id\" = T2.\"PostId\" WHERE T1.\"ParentId\" = 107829 AND T1.\"CommentCount\" = 1",
        "reference_sample_result": [
            [
                "Yes, I think I can appreciate that any given point on a continuum is equally likely (or rather unlikely) to be the result of a single sample. Maybe that is all there is too it, I am the only thing that gives zero or one, or any integer, special meaning in a continuum. I think I needed some reinforcement to assert that giving zero and one any special meaning in a continuum of chance and that I shouldn't do so as they are all naturally as common."
            ]
        ],
        "reference_column_names": [
            "Text"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT c.\"Text\"\nFROM public.comments c\nJOIN public.posts p ON c.\"PostId\" = p.\"Id\"\nWHERE p.\"ParentId\" = 107829\nLIMIT 1;",
        "normalized_output_query": "SELECT c.\"Text\" FROM public.comments c JOIN public.posts p ON c.\"PostId\" = p.\"Id\" WHERE p.\"ParentId\" = 107829 LIMIT 1;",
        "output_sample_result": [
            [
                "Yes, I think I can appreciate that any given point on a continuum is equally likely (or rather unlikely) to be the result of a single sample. Maybe that is all there is too it, I am the only thing that gives zero or one, or any integer, special meaning in a continuum. I think I needed some reinforcement to assert that giving zero and one any special meaning in a continuum of chance and that I shouldn't do so as they are all naturally as common."
            ]
        ],
        "output_column_names": [
            "Text"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.5836575875486382,
        "bleu_similarity_score": 4.543358426499702e-155,
        "execution_accuracy": false
    },
    {
        "question": "User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?",
        "reference_query": "SELECT CASE WHEN T2.\"ClosedDate\" IS NULL THEN 'NOT well-finished' ELSE 'well-finished' END AS resylt FROM comments AS T1 INNER JOIN posts AS T2 ON T1.\"PostId\" = T2.\"Id\" WHERE T1.\"UserId\" = 23853 AND T1.\"CreationDate\" = '2013-07-12 09:08:18.0'",
        "normalized_reference_query": "SELECT CASE WHEN T2.\"ClosedDate\" IS NULL THEN 'NOT well-finished' ELSE 'well-finished' END AS resylt FROM comments AS T1 INNER JOIN posts AS T2 ON T1.\"PostId\" = T2.\"Id\" WHERE T1.\"UserId\" = 23853 AND T1.\"CreationDate\" = '2013-07-12 09:08:18.0'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to determine whether the post was well-finished. The context does not define what qualifies a post as \"well-finished\" and there is no specific column or criteria provided to evaluate this. Additional information or criteria for what constitutes a \"well-finished\" post is needed.",
        "normalized_output_query": "The provided context IS insufficient TO determine whether the post was well-finished. The context does NOT DEFINE what qualifies a post AS \"well-finished\" AND there IS NO SPECIFIC COLUMN OR criteria provided TO evaluate this. Additional information OR criteria FOR what constitutes a \"well-finished\" post IS needed.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO determine whether th...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "For the owner user of post No. 65041, what is his/her reputation points?",
        "reference_query": "SELECT T1.\"Reputation\" FROM users AS T1 INNER JOIN posts AS T2 ON T1.\"Id\" = T2.\"OwnerUserId\" WHERE T2.\"Id\" = 65041",
        "normalized_reference_query": "SELECT T1.\"Reputation\" FROM users AS T1 INNER JOIN posts AS T2 ON T1.\"Id\" = T2.\"OwnerUserId\" WHERE T2.\"Id\" = 65041",
        "reference_error": null,
        "output_query": "SELECT u.Reputation\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Id = 65041;",
        "normalized_output_query": "SELECT u.Reputation FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Id = 65041;",
        "output_error": "column p.owneruserid does not exist\nLINE 1: SELECT u.Reputation FROM posts p JOIN users u ON p.OwnerUser...\n                                                         ^\nHINT:  Perhaps you meant to reference the column \"p.OwnerUserId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "For the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own?",
        "reference_query": "SELECT COUNT(T1.\"Id\") FROM users AS T1 INNER JOIN posts AS T2 ON T1.\"Id\" = T2.\"OwnerUserId\" WHERE T1.\"DisplayName\" = 'Tiago Pasqualini'",
        "normalized_reference_query": "SELECT COUNT(T1.\"Id\") FROM users AS T1 INNER JOIN posts AS T2 ON T1.\"Id\" = T2.\"OwnerUserId\" WHERE T1.\"DisplayName\" = 'Tiago Pasqualini'",
        "reference_error": null,
        "output_query": "SELECT COUNT(*) AS post_count\nFROM public.posts\nJOIN public.users ON posts.OwnerUserId = users.Id\nWHERE users.DisplayName = 'Tiago Pasqualini';",
        "normalized_output_query": "SELECT COUNT(*) AS post_count FROM public.posts JOIN public.users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Tiago Pasqualini';",
        "output_error": "column posts.owneruserid does not exist\nLINE 1: ...post_count FROM public.posts JOIN public.users ON posts.Owne...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"posts.OwnerUserId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Provide the display name of the user who made the vote No.6347.",
        "reference_query": "SELECT T1.\"DisplayName\" FROM users AS T1 INNER JOIN votes AS T2 ON T1.\"Id\" = T2.\"UserId\" WHERE T2.\"Id\" = 6347",
        "normalized_reference_query": "SELECT T1.\"DisplayName\" FROM users AS T1 INNER JOIN votes AS T2 ON T1.\"Id\" = T2.\"UserId\" WHERE T2.\"Id\" = 6347",
        "reference_error": null,
        "output_query": "SELECT u.DisplayName\nFROM votes v\nJOIN users u ON v.UserId = u.Id\nWHERE v.Id = 6347;",
        "normalized_output_query": "SELECT u.DisplayName FROM votes v JOIN users u ON v.UserId = u.Id WHERE v.Id = 6347;",
        "output_error": "column v.userid does not exist\nLINE 1: SELECT u.DisplayName FROM votes v JOIN users u ON v.UserId =...\n                                                          ^\nHINT:  Perhaps you meant to reference the column \"v.UserId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Give the number of votes for the post about data visualization.",
        "reference_query": "SELECT COUNT(T1.\"Id\") FROM posts AS T1 INNER JOIN votes AS T2 ON T1.\"Id\" = T2.\"PostId\" WHERE T1.\"Title\" LIKE '%data visualization%'",
        "normalized_reference_query": "SELECT COUNT(T1.\"Id\") FROM posts AS T1 INNER JOIN votes AS T2 ON T1.\"Id\" = T2.\"PostId\" WHERE T1.\"Title\" LIKE '%data visualization%'",
        "reference_error": null,
        "output_query": "SELECT COUNT(*) AS NumberOfVotes\nFROM votes\nWHERE PostId IN (\n    SELECT Id\n    FROM posts\n    WHERE Title LIKE '%data visualization%'\n);",
        "normalized_output_query": "SELECT COUNT(*) AS NumberOfVotes FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE Title LIKE '%data visualization%');",
        "output_error": "column \"id\" does not exist\nLINE 1: ... NumberOfVotes FROM votes WHERE PostId IN (SELECT Id FROM po...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"posts.Id\" or the column \"votes.Id\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
        "reference_query": "SELECT T2.\"Name\" FROM users AS T1 INNER JOIN badges AS T2 ON T1.\"Id\" = T2.\"UserId\" WHERE T1.\"DisplayName\" = 'DatEpicCoderGuyWhoPrograms'",
        "normalized_reference_query": "SELECT T2.\"Name\" FROM users AS T1 INNER JOIN badges AS T2 ON T1.\"Id\" = T2.\"UserId\" WHERE T1.\"DisplayName\" = 'DatEpicCoderGuyWhoPrograms'",
        "reference_error": null,
        "output_query": "SELECT b.Name \nFROM public.users u\nJOIN public.badges b ON u.Id = b.UserId\nWHERE u.DisplayName = 'DatEpicCoderGuyWhoPrograms';",
        "normalized_output_query": "SELECT b.Name FROM public.users u JOIN public.badges b ON u.Id = b.UserId WHERE u.DisplayName = 'DatEpicCoderGuyWhoPrograms';",
        "output_error": "column u.id does not exist\nLINE 1: ....Name FROM public.users u JOIN public.badges b ON u.Id = b.U...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"u.Id\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "For the user No.24, how many times is the number of his/her posts compared to his/her votes?",
        "reference_query": "SELECT CAST(COUNT(T2.\"Id\") AS DOUBLE PRECISION) / COUNT(DISTINCT T1.\"Id\") FROM votes AS T1 INNER JOIN posts AS T2 ON T1.\"UserId\" = T2.\"OwnerUserId\" WHERE T1.\"UserId\" = 24",
        "normalized_reference_query": "SELECT CAST(COUNT(T2.\"Id\") AS DOUBLE PRECISION) / COUNT(DISTINCT T1.\"Id\") FROM votes AS T1 INNER JOIN posts AS T2 ON T1.\"UserId\" = T2.\"OwnerUserId\" WHERE T1.\"UserId\" = 24",
        "reference_error": null,
        "output_query": "SELECT \n    (SELECT COUNT(*) FROM posts WHERE OwnerUserId = 24) AS PostCount,\n    (SELECT COUNT(*) FROM votes WHERE UserId = 24) AS VoteCount",
        "normalized_output_query": "SELECT (SELECT COUNT(*) FROM posts WHERE OwnerUserId = 24) AS PostCount, (SELECT COUNT(*) FROM votes WHERE UserId = 24) AS VoteCount",
        "output_error": "column \"owneruserid\" does not exist\nLINE 1: SELECT (SELECT COUNT(*) FROM posts WHERE OwnerUserId = 24) A...\n                                                 ^\nHINT:  Perhaps you meant to reference the column \"posts.OwnerUserId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
        "reference_query": "SELECT \"ViewCount\" FROM posts WHERE \"Title\" = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
        "normalized_reference_query": "SELECT \"ViewCount\" FROM posts WHERE \"Title\" = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
        "reference_sample_result": [
            [
                60
            ]
        ],
        "reference_column_names": [
            "ViewCount"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT \"ViewCount\"\nFROM public.posts\nWHERE \"Title\" = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';",
        "normalized_output_query": "SELECT \"ViewCount\" FROM public.posts WHERE \"Title\" = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';",
        "output_sample_result": [
            [
                60
            ]
        ],
        "output_column_names": [
            "ViewCount"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.96875,
        "bleu_similarity_score": 0.7241577342575828,
        "execution_accuracy": false
    },
    {
        "question": "Write the contents of comments with a score of 17.",
        "reference_query": "SELECT \"Text\" FROM comments WHERE \"Score\" = 17",
        "normalized_reference_query": "SELECT \"Text\" FROM comments WHERE \"Score\" = 17",
        "reference_sample_result": [
            [
                "Reminds me that in my early days as a referee i spent *far* too long reviewing a statistical paper that was eventually rejected by that particular journal, but the other referees and I suggested a more useful application for the method, and I also sketched an algebraic proof to replace an unsatisfactory simulation study in the manuscript. The authors have since got two published papers out of it. I'm not *annoyed* by that, but an acknowledgement such as \"we thank referees of an earlier version of the paper for helpful comments\" would have been good manners."
            ],
            [
                "If you're going to use R, I'd recommend embedding your R code in an Sweave document that produces your report.  That way the R code stays with the report."
            ],
            [
                "As a non-expert, I think that the key to the entire debate is that people actually reason like Bayesians. You have to be trained to think like a frequentist, and even then it's easy to slip up and either reason or present your reasoning as if it were Bayesian. \"There's a 95% chance that the value is within this confidence interval.\" Enough said."
            ],
            [
                "In the linear regression model the dependent variable $y$ is considered continuous, whereas in logistic regression it is categorical, i.e., discrete. In application, the former is used in regression settings while the latter is used for binary classification or multi-class classification (where it is called multinomial logistic regression)."
            ],
            [
                "Did anyone else notice that the tour guide changes colors between the second and third frames?"
            ]
        ],
        "reference_column_names": [
            "Text"
        ],
        "reference_row_count": 5,
        "reference_column_count": 1,
        "output_query": "SELECT * FROM public.comments WHERE \"Score\" = 17;",
        "normalized_output_query": "SELECT * FROM public.comments WHERE \"Score\" = 17;",
        "output_sample_result": [
            [
                5441,
                3823,
                17,
                "Reminds me that in my early days as a referee i spent *far* too long reviewing a statistical paper that was eventually rejected by that particular journal, but the other referees and I suggested a more useful application for the method, and I also sketched an algebraic proof to replace an unsatisfactory simulation study in the manuscript. The authors have since got two published papers out of it. I'm not *annoyed* by that, but an acknowledgement such as \"we thank referees of an earlier version of the paper for helpful comments\" would have been good manners.",
                "2010-10-20 21:23:38",
                449,
                null
            ],
            [
                6084,
                2825,
                17,
                "If you're going to use R, I'd recommend embedding your R code in an Sweave document that produces your report.  That way the R code stays with the report.",
                "2010-11-02 14:00:05",
                319,
                null
            ],
            [
                15790,
                1602,
                17,
                "As a non-expert, I think that the key to the entire debate is that people actually reason like Bayesians. You have to be trained to think like a frequentist, and even then it's easy to slip up and either reason or present your reasoning as if it were Bayesian. \"There's a 95% chance that the value is within this confidence interval.\" Enough said.",
                "2011-04-07 21:08:03",
                1764,
                null
            ],
            [
                55586,
                29325,
                17,
                "In the linear regression model the dependent variable $y$ is considered continuous, whereas in logistic regression it is categorical, i.e., discrete. In application, the former is used in regression settings while the latter is used for binary classification or multi-class classification (where it is called multinomial logistic regression).",
                "2012-05-28 18:33:36",
                7603,
                null
            ],
            [
                69713,
                424,
                17,
                "Did anyone else notice that the tour guide changes colors between the second and third frames?",
                "2012-08-22 20:41:29",
                4812,
                null
            ]
        ],
        "output_column_names": [
            "Id",
            "PostId",
            "Score",
            "Text",
            "CreationDate",
            "UserId",
            "UserDisplayName"
        ],
        "output_row_count": 5,
        "output_column_count": 7,
        "sequence_similarity_score": 0.8421052631578947,
        "bleu_similarity_score": 5.072841446586652e-78,
        "execution_accuracy": false
    },
    {
        "question": "Which user has the website URL listed at 'http://stackoverflow.com'",
        "reference_query": "SELECT \"DisplayName\" FROM users WHERE \"WebsiteUrl\" = 'http://stackoverflow.com'",
        "normalized_reference_query": "SELECT \"DisplayName\" FROM users WHERE \"WebsiteUrl\" = 'http://stackoverflow.com'",
        "reference_sample_result": [
            [
                "Geoff Dalgas"
            ],
            [
                "Jarrod Dixon"
            ],
            [
                "Jeffrey"
            ],
            [
                "rosh"
            ],
            [
                "clyfe"
            ]
        ],
        "reference_column_names": [
            "DisplayName"
        ],
        "reference_row_count": 15,
        "reference_column_count": 1,
        "output_query": "SELECT \"DisplayName\" \nFROM public.users \nWHERE \"WebsiteUrl\" = 'http://stackoverflow.com';",
        "normalized_output_query": "SELECT \"DisplayName\" FROM public.users WHERE \"WebsiteUrl\" = 'http://stackoverflow.com';",
        "output_sample_result": [
            [
                "Geoff Dalgas"
            ],
            [
                "Jarrod Dixon"
            ],
            [
                "Jeffrey"
            ],
            [
                "rosh"
            ],
            [
                "clyfe"
            ]
        ],
        "output_column_names": [
            "DisplayName"
        ],
        "output_row_count": 15,
        "output_column_count": 1,
        "sequence_similarity_score": 0.9518072289156626,
        "bleu_similarity_score": 7.508645449069235e-78,
        "execution_accuracy": false
    },
    {
        "question": "What is the badge name that user 'SilentGhost' obtained?",
        "reference_query": "SELECT T2.\"Name\" FROM users AS T1 INNER JOIN badges AS T2 ON T1.\"Id\" = T2.\"UserId\" WHERE T1.\"DisplayName\" = 'SilentGhost'",
        "normalized_reference_query": "SELECT T2.\"Name\" FROM users AS T1 INNER JOIN badges AS T2 ON T1.\"Id\" = T2.\"UserId\" WHERE T1.\"DisplayName\" = 'SilentGhost'",
        "reference_error": null,
        "output_query": "SELECT b.Name\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.DisplayName = 'SilentGhost';",
        "normalized_output_query": "SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'SilentGhost';",
        "output_error": "column b.userid does not exist\nLINE 1: SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id ...\n                                                    ^\nHINT:  Perhaps you meant to reference the column \"b.UserId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Name the user that commented 'thank you user93!'",
        "reference_query": "SELECT T1.\"DisplayName\" FROM users AS T1 INNER JOIN comments AS T2 ON T1.\"Id\" = T2.\"UserId\" WHERE T2.\"Text\" = 'thank you user93!'",
        "normalized_reference_query": "SELECT T1.\"DisplayName\" FROM users AS T1 INNER JOIN comments AS T2 ON T1.\"Id\" = T2.\"UserId\" WHERE T2.\"Text\" = 'thank you user93!'",
        "reference_error": null,
        "output_query": "SELECT UserDisplayName \nFROM public.comments \nWHERE Text = 'thank you user93!';",
        "normalized_output_query": "SELECT UserDisplayName FROM public.comments WHERE Text = 'thank you user93!';",
        "output_error": "column \"userdisplayname\" does not exist\nLINE 1: SELECT UserDisplayName FROM public.comments WHERE Text = 'th...\n               ^\nHINT:  Perhaps you meant to reference the column \"comments.UserDisplayName\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Write all comments made by user 'A Lion.'",
        "reference_query": "SELECT T2.\"Text\" FROM users AS T1 INNER JOIN comments AS T2 ON T1.\"Id\" = T2.\"UserId\" WHERE T1.\"DisplayName\" = 'A Lion'",
        "normalized_reference_query": "SELECT T2.\"Text\" FROM users AS T1 INNER JOIN comments AS T2 ON T1.\"Id\" = T2.\"UserId\" WHERE T1.\"DisplayName\" = 'A Lion'",
        "reference_sample_result": [
            [
                "What levels of kurtosis and skewdness are acceptable to meet the assumption of normality?"
            ],
            [
                "Maybe the focus shouldn't be on \"valuable\" but rather \"pros\" and \"cons\" of each project?"
            ],
            [
                "@drknexus - So, multiple items serve as a measurement triangulation for construct scales?  If yes, what are the criteria for determining that a researcher has enough relevant data points (i.e., items) to use the scale as an interval measurement?"
            ],
            [
                "The way I wrote it up, specifically with the bayesian not knowing much about cat reproduction, at the beginning only the frequentist would bet on there being kittens.  The relevant points of my *very crude example* were mostly that the frequentist made his prediction based on the data at the beginning, then sat back without incorporating new supplementary data, while the bayesian didn't have much data to begin with, but continued to incorporate relevant data as it become available."
            ]
        ],
        "reference_column_names": [
            "Text"
        ],
        "reference_row_count": 4,
        "reference_column_count": 1,
        "output_query": "SELECT *\nFROM public.comments\nWHERE \"UserDisplayName\" = 'A Lion.'",
        "normalized_output_query": "SELECT * FROM public.comments WHERE \"UserDisplayName\" = 'A Lion.'",
        "output_sample_result": [],
        "output_column_names": [
            "Id",
            "PostId",
            "Score",
            "Text",
            "CreationDate",
            "UserId",
            "UserDisplayName"
        ],
        "output_row_count": 0,
        "output_column_count": 7,
        "sequence_similarity_score": 0.5792349726775956,
        "bleu_similarity_score": 2.255678634127422e-155,
        "execution_accuracy": false
    },
    {
        "question": "Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?",
        "reference_query": "SELECT T1.\"DisplayName\", T1.\"Reputation\" FROM users AS T1 INNER JOIN posts AS T2 ON T1.\"Id\" = T2.\"OwnerUserId\" WHERE T2.\"Title\" = 'Understanding what Dassault iSight is doing?'",
        "normalized_reference_query": "SELECT T1.\"DisplayName\", T1.\"Reputation\" FROM users AS T1 INNER JOIN posts AS T2 ON T1.\"Id\" = T2.\"OwnerUserId\" WHERE T2.\"Title\" = 'Understanding what Dassault iSight is doing?'",
        "reference_error": null,
        "output_query": "SELECT u.DisplayName, u.Reputation\nFROM public.users u\nJOIN public.posts p ON u.Id = p.OwnerUserId\nWHERE p.Title = 'Understanding what Dassault iSight is doing?';",
        "normalized_output_query": "SELECT u.DisplayName, u.Reputation FROM public.users u JOIN public.posts p ON u.Id = p.OwnerUserId WHERE p.Title = 'Understanding what Dassault iSight is doing?';",
        "output_error": "column u.id does not exist\nLINE 1: ...tation FROM public.users u JOIN public.posts p ON u.Id = p.O...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"u.Id\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Write all comments made on the post titled 'How does gentle boosting differ from AdaBoost?'",
        "reference_query": "SELECT T1.\"Text\" FROM comments AS T1 INNER JOIN posts AS T2 ON T1.\"PostId\" = T2.\"Id\" WHERE T2.\"Title\" = 'How does gentle boosting differ from AdaBoost?'",
        "normalized_reference_query": "SELECT T1.\"Text\" FROM comments AS T1 INNER JOIN posts AS T2 ON T1.\"PostId\" = T2.\"Id\" WHERE T2.\"Title\" = 'How does gentle boosting differ from AdaBoost?'",
        "reference_error": null,
        "output_query": "SELECT c.*\nFROM public.comments c\nJOIN public.posts p ON c.PostId = p.Id\nWHERE p.Title = 'How does gentle boosting differ from AdaBoost?'",
        "normalized_output_query": "SELECT c.* FROM public.comments c JOIN public.posts p ON c.PostId = p.Id WHERE p.Title = 'How does gentle boosting differ from AdaBoost?'",
        "output_error": "column c.postid does not exist\nLINE 1: ...c.* FROM public.comments c JOIN public.posts p ON c.PostId =...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"c.PostId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Name 10 users with the badge name 'Necromancer.'",
        "reference_query": "SELECT T1.\"DisplayName\" FROM users AS T1 INNER JOIN badges AS T2 ON T1.\"Id\" = T2.\"UserId\" WHERE T2.\"Name\" = 'Necromancer' LIMIT 10",
        "normalized_reference_query": "SELECT T1.\"DisplayName\" FROM users AS T1 INNER JOIN badges AS T2 ON T1.\"Id\" = T2.\"UserId\" WHERE T2.\"Name\" = 'Necromancer' LIMIT 10",
        "reference_error": null,
        "output_query": "SELECT u.DisplayName\nFROM users u\nJOIN badges b ON u.Id = b.UserId\nWHERE b.Name = 'Necromancer'\nLIMIT 10;",
        "normalized_output_query": "SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Necromancer' LIMIT 10;",
        "output_error": "column u.id does not exist\nLINE 1: ...ELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.U...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"u.Id\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Please list all the superpowers of 3-D Man.",
        "reference_query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'",
        "normalized_reference_query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'",
        "reference_sample_result": [
            [
                "Agility"
            ],
            [
                "Super Strength"
            ],
            [
                "Stamina"
            ],
            [
                "Super Speed"
            ]
        ],
        "reference_column_names": [
            "power_name"
        ],
        "reference_row_count": 4,
        "reference_column_count": 1,
        "output_query": "SELECT sp.power_name\nFROM public.superhero sh\nJOIN public.hero_power hp ON sh.id = hp.hero_id\nJOIN public.superpower sp ON hp.power_id = sp.id\nWHERE sh.superhero_name = '3-D Man';",
        "normalized_output_query": "SELECT sp.power_name FROM public.superhero sh JOIN public.hero_power hp ON sh.id = hp.hero_id JOIN public.superpower sp ON hp.power_id = sp.id WHERE sh.superhero_name = '3-D Man';",
        "output_sample_result": [
            [
                "Agility"
            ],
            [
                "Super Strength"
            ],
            [
                "Stamina"
            ],
            [
                "Super Speed"
            ]
        ],
        "output_column_names": [
            "power_name"
        ],
        "output_row_count": 4,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7787114845938375,
        "bleu_similarity_score": 4.550484092420588e-155,
        "execution_accuracy": false
    },
    {
        "question": "How many superheroes have the super power of \"Super Strength\"?",
        "reference_query": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength'",
        "normalized_reference_query": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength'",
        "reference_sample_result": [
            [
                358
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(DISTINCT hero_id) AS superhero_count\nFROM public.hero_power\nJOIN public.superpower ON hero_power.power_id = superpower.id\nWHERE superpower.power_name = 'Super Strength';",
        "normalized_output_query": "SELECT COUNT(DISTINCT hero_id) AS superhero_count FROM public.hero_power JOIN public.superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength';",
        "output_sample_result": [
            [
                358
            ]
        ],
        "output_column_names": [
            "superhero_count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.5660377358490566,
        "bleu_similarity_score": 5.527739190770508e-155,
        "execution_accuracy": false
    },
    {
        "question": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?",
        "reference_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200",
        "normalized_reference_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200",
        "reference_sample_result": [
            [
                56
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(DISTINCT s.id) AS num_superheroes\nFROM public.superhero s\nJOIN public.hero_power hp ON s.id = hp.hero_id\nJOIN public.superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Super Strength' AND s.height_cm > 200;",
        "normalized_output_query": "SELECT COUNT(DISTINCT s.id) AS num_superheroes FROM public.superhero s JOIN public.hero_power hp ON s.id = hp.hero_id JOIN public.superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength' AND s.height_cm > 200;",
        "output_sample_result": [
            [
                56
            ]
        ],
        "output_column_names": [
            "num_superheroes"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.5290023201856149,
        "bleu_similarity_score": 0.09795618980932738,
        "execution_accuracy": false
    },
    {
        "question": "Please list the full names of all the superheroes with over 15 super powers.",
        "reference_query": "SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15",
        "normalized_reference_query": "SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15",
        "reference_sample_result": [
            [
                "James Howlett"
            ],
            [
                null
            ],
            [
                "Richard John Grayson"
            ],
            [
                "Dr. Nathaniel Essex"
            ],
            [
                "Mr. Mxyzptlk"
            ]
        ],
        "reference_column_names": [
            "full_name"
        ],
        "reference_row_count": 71,
        "reference_column_count": 1,
        "output_query": "SELECT sh.full_name\nFROM public.superhero sh\nJOIN public.hero_power hp ON sh.id = hp.hero_id\nGROUP BY sh.id, sh.full_name\nHAVING COUNT(hp.power_id) > 15;",
        "normalized_output_query": "SELECT sh.full_name FROM public.superhero sh JOIN public.hero_power hp ON sh.id = hp.hero_id GROUP BY sh.id, sh.full_name HAVING COUNT(hp.power_id) > 15;",
        "output_sample_result": [
            [
                "Robert Reynolds"
            ],
            [
                "Bruce Wayne"
            ],
            [
                "-"
            ],
            [
                "Thor Odinson"
            ],
            [
                "-"
            ]
        ],
        "output_column_names": [
            "full_name"
        ],
        "output_row_count": 102,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7672131147540984,
        "bleu_similarity_score": 5.036661587102459e-155,
        "execution_accuracy": false
    },
    {
        "question": "How many superheroes have blue eyes?",
        "reference_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'",
        "normalized_reference_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'",
        "reference_sample_result": [
            [
                234
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*) \nFROM public.superhero\nWHERE eye_colour_id = (\n    SELECT id \n    FROM public.colour\n    WHERE colour = 'blue'\n);",
        "normalized_output_query": "SELECT COUNT(*) FROM public.superhero WHERE eye_colour_id = (SELECT id FROM public.colour WHERE colour = 'blue');",
        "output_sample_result": [
            [
                0
            ]
        ],
        "output_column_names": [
            "count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6347826086956522,
        "bleu_similarity_score": 1.1097150079804136e-231,
        "execution_accuracy": false
    },
    {
        "question": "What is the colour of Apocalypse's skin?",
        "reference_query": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'",
        "normalized_reference_query": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'",
        "reference_sample_result": [
            [
                "Grey"
            ]
        ],
        "reference_column_names": [
            "colour"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT c.colour\nFROM public.superhero s\nJOIN public.colour c ON s.skin_colour_id = c.id\nWHERE s.superhero_name = 'Apocalypse';",
        "normalized_output_query": "SELECT c.colour FROM public.superhero s JOIN public.colour c ON s.skin_colour_id = c.id WHERE s.superhero_name = 'Apocalypse';",
        "output_sample_result": [
            [
                "Grey"
            ]
        ],
        "output_column_names": [
            "colour"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.8235294117647058,
        "bleu_similarity_score": 1.2283513926157894e-231,
        "execution_accuracy": false
    },
    {
        "question": "Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"?",
        "reference_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T3.power_name = 'Agility' AND T4.colour = 'Blue'",
        "normalized_reference_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T3.power_name = 'Agility' AND T4.colour = 'Blue'",
        "reference_error": null,
        "output_query": "Error running intermediate SQL: You need to connect to a database first by running vn.connect_to_snowflake(), vn.connect_to_postgres(), similar function, or manually set vn.run_sql",
        "normalized_output_query": "Error running intermediate SQL: You need TO CONNECT TO a DATABASE FIRST BY running vn.connect_to_snowflake(), vn.connect_to_postgres(), SIMILAR FUNCTION, OR manually SET vn.run_sql",
        "output_error": "syntax error at or near \"Error\"\nLINE 1: Error running intermediate SQL: You need TO CONNECT TO a DAT...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
        "reference_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
        "normalized_reference_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
        "reference_sample_result": [
            [
                "Yellowjacket"
            ],
            [
                "Wonder Girl"
            ],
            [
                "White Queen"
            ],
            [
                "Warbird"
            ],
            [
                "Valkyrie"
            ]
        ],
        "reference_column_names": [
            "superhero_name"
        ],
        "reference_row_count": 90,
        "reference_column_count": 1,
        "output_query": "SELECT s.superhero_name\nFROM public.superhero s\nJOIN public.colour ec ON s.eye_colour_id = ec.id\nJOIN public.colour hc ON s.hair_colour_id = hc.id\nWHERE ec.colour = 'blue' AND hc.colour = 'blond';",
        "normalized_output_query": "SELECT s.superhero_name FROM public.superhero s JOIN public.colour ec ON s.eye_colour_id = ec.id JOIN public.colour hc ON s.hair_colour_id = hc.id WHERE ec.colour = 'blue' AND hc.colour = 'blond';",
        "output_sample_result": [],
        "output_column_names": [
            "superhero_name"
        ],
        "output_row_count": 0,
        "output_column_count": 1,
        "sequence_similarity_score": 0.789873417721519,
        "bleu_similarity_score": 1.2360549836344788e-231,
        "execution_accuracy": false
    },
    {
        "question": "How many superheroes are published by Marvel Comics?",
        "reference_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
        "normalized_reference_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
        "reference_sample_result": [
            [
                387
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*) \nFROM public.superhero \nJOIN public.publisher ON public.superhero.publisher_id = public.publisher.id \nWHERE public.publisher.publisher_name = 'Marvel Comics';",
        "normalized_output_query": "SELECT COUNT(*) FROM public.superhero JOIN public.publisher ON public.superhero.publisher_id = public.publisher.id WHERE public.publisher.publisher_name = 'Marvel Comics';",
        "output_sample_result": [
            [
                387
            ]
        ],
        "output_column_names": [
            "count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6970684039087948,
        "bleu_similarity_score": 4.7219899831800264e-155,
        "execution_accuracy": false
    },
    {
        "question": "Rank heroes published by Marvel Comics by their height in descending order.",
        "reference_query": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
        "normalized_reference_query": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
        "reference_sample_result": [
            [
                "Bird-Man",
                null,
                1
            ],
            [
                "Blaquesmith",
                null,
                1
            ],
            [
                "Wondra",
                null,
                1
            ],
            [
                "Thunderbird II",
                null,
                1
            ],
            [
                "Cat II",
                null,
                1
            ]
        ],
        "reference_column_names": [
            "superhero_name",
            "height_cm",
            "heightrank"
        ],
        "reference_row_count": 387,
        "reference_column_count": 3,
        "output_query": "SELECT superhero_name, height_cm\nFROM public.superhero\nWHERE publisher_id = (SELECT id FROM public.publisher WHERE publisher_name = 'Marvel Comics')\nORDER BY height_cm DESC;",
        "normalized_output_query": "SELECT superhero_name, height_cm FROM public.superhero WHERE publisher_id = (SELECT id FROM public.publisher WHERE publisher_name = 'Marvel Comics') ORDER BY height_cm DESC;",
        "output_sample_result": [
            [
                "Bird-Man",
                null
            ],
            [
                "Blaquesmith",
                null
            ],
            [
                "Wondra",
                null
            ],
            [
                "Thunderbird II",
                null
            ],
            [
                "Cat II",
                null
            ]
        ],
        "output_column_names": [
            "superhero_name",
            "height_cm"
        ],
        "output_row_count": 387,
        "output_column_count": 2,
        "sequence_similarity_score": 0.5,
        "bleu_similarity_score": 6.208376919419899e-155,
        "execution_accuracy": false
    },
    {
        "question": "Who is the publisher of Sauron?",
        "reference_query": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'",
        "normalized_reference_query": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'",
        "reference_sample_result": [
            [
                "J. R. R. Tolkien"
            ]
        ],
        "reference_column_names": [
            "publisher_name"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT p.publisher_name\nFROM public.superhero s\nJOIN public.publisher p ON s.publisher_id = p.id\nWHERE s.superhero_name = 'Sauron';",
        "normalized_output_query": "SELECT p.publisher_name FROM public.superhero s JOIN public.publisher p ON s.publisher_id = p.id WHERE s.superhero_name = 'Sauron';",
        "output_sample_result": [
            [
                "J. R. R. Tolkien"
            ]
        ],
        "output_column_names": [
            "publisher_name"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.8301886792452831,
        "bleu_similarity_score": 1.2283513926157894e-231,
        "execution_accuracy": false
    },
    {
        "question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
        "reference_query": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
        "normalized_reference_query": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS COUNT, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
        "reference_error": null,
        "output_query": "SELECT c.colour AS eye_color, COUNT(*) AS superhero_count\nFROM public.superhero s\nJOIN public.colour c ON s.eye_colour_id = c.id\nJOIN public.publisher p ON s.publisher_id = p.id\nWHERE p.name = 'Marvel Comics'\nGROUP BY c.colour\nORDER BY superhero_count DESC;",
        "normalized_output_query": "SELECT c.colour AS eye_color, COUNT(*) AS superhero_count FROM public.superhero s JOIN public.colour c ON s.eye_colour_id = c.id JOIN public.publisher p ON s.publisher_id = p.id WHERE p.name = 'Marvel Comics' GROUP BY c.colour ORDER BY superhero_count DESC;",
        "output_error": "column p.name does not exist\nLINE 1: ...public.publisher p ON s.publisher_id = p.id WHERE p.name = '...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the average height of the superheroes from Marvel Comics?",
        "reference_query": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
        "normalized_reference_query": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
        "reference_error": null,
        "output_query": "SELECT AVG(height_cm) AS average_height\nFROM public.superhero\nWHERE publisher_id = (SELECT id FROM public.publisher WHERE name = 'Marvel Comics');",
        "normalized_output_query": "SELECT AVG(height_cm) AS average_height FROM public.superhero WHERE publisher_id = (SELECT id FROM public.publisher WHERE name = 'Marvel Comics');",
        "output_error": "column \"name\" does not exist\nLINE 1: ...isher_id = (SELECT id FROM public.publisher WHERE name = 'Ma...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
        "reference_query": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
        "normalized_reference_query": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id) AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
        "reference_sample_result": [
            [
                "3-D Man"
            ],
            [
                "A-Bomb"
            ],
            [
                "Abomination"
            ],
            [
                "Abraxas"
            ],
            [
                "Absorbing Man"
            ]
        ],
        "reference_column_names": [
            "superhero_name"
        ],
        "reference_row_count": 201,
        "reference_column_count": 1,
        "output_query": "SELECT s.superhero_name\nFROM public.superhero s\nJOIN public.hero_power hp ON s.id = hp.hero_id\nJOIN public.superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Super Strength' AND s.publisher_id = (\n    SELECT id FROM public.superhero WHERE superhero_name = 'Marvel Comics'\n);",
        "normalized_output_query": "SELECT s.superhero_name FROM public.superhero s JOIN public.hero_power hp ON s.id = hp.hero_id JOIN public.superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength' AND s.publisher_id = (SELECT id FROM public.superhero WHERE superhero_name = 'Marvel Comics');",
        "output_sample_result": [],
        "output_column_names": [
            "superhero_name"
        ],
        "output_row_count": 0,
        "output_column_count": 1,
        "sequence_similarity_score": 0.19289340101522842,
        "bleu_similarity_score": 0.07001179453814313,
        "execution_accuracy": false
    },
    {
        "question": "How many superheroes did DC Comics publish?",
        "reference_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'",
        "normalized_reference_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'",
        "reference_sample_result": [
            [
                224
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*) \nFROM public.superhero\nWHERE publisher_id = (SELECT id FROM public.publisher WHERE publisher_name = 'DC Comics');",
        "normalized_output_query": "SELECT COUNT(*) FROM public.superhero WHERE publisher_id = (SELECT id FROM public.publisher WHERE publisher_name = 'DC Comics');",
        "output_sample_result": [
            [
                224
            ]
        ],
        "output_column_names": [
            "count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6615384615384615,
        "bleu_similarity_score": 4.619379018209183e-155,
        "execution_accuracy": false
    },
    {
        "question": "Which publisher published the slowest superhero?",
        "reference_query": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value LIMIT 1",
        "normalized_reference_query": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value LIMIT 1",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information about the speed attribute of superheroes, and how to associate it with the publisher. The tables related to superheroes don't contain any specific attribute indicating speed that could be used to determine the slowest superhero.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information about the speed attribute OF superheroes, AND how TO associate it WITH the publisher. The TABLES related TO superheroes don't contain ANY SPECIFIC attribute indicating speed that could be used TO determine the slowest superhero.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many gold-eyed superheroes did Marvel Comics publish?",
        "reference_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Gold'",
        "normalized_reference_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Gold'",
        "reference_sample_result": [
            [
                2
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*) AS gold_eyed_superheroes_count\nFROM public.superhero\nJOIN public.colour ON public.superhero.eye_colour_id = public.colour.id\nJOIN public.publisher ON public.superhero.publisher_id = public.publisher.id\nWHERE public.colour.colour = 'Gold' AND public.publisher.publisher_name = 'Marvel Comics';",
        "normalized_output_query": "SELECT COUNT(*) AS gold_eyed_superheroes_count FROM public.superhero JOIN public.colour ON public.superhero.eye_colour_id = public.colour.id JOIN public.publisher ON public.superhero.publisher_id = public.publisher.id WHERE public.colour.colour = 'Gold' AND public.publisher.publisher_name = 'Marvel Comics';",
        "output_sample_result": [
            [
                2
            ]
        ],
        "output_column_names": [
            "gold_eyed_superheroes_count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.35452793834296725,
        "bleu_similarity_score": 5.430731938316909e-155,
        "execution_accuracy": false
    },
    {
        "question": "What is the publisher's name of Blue Beetle II?",
        "reference_query": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'",
        "normalized_reference_query": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'",
        "reference_sample_result": [
            [
                "DC Comics"
            ]
        ],
        "reference_column_names": [
            "publisher_name"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT publisher.publisher_name\nFROM superhero\nJOIN publisher ON superhero.publisher_id = publisher.id\nWHERE superhero.superhero_name = 'Blue Beetle II';",
        "normalized_output_query": "SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Blue Beetle II';",
        "output_sample_result": [
            [
                "DC Comics"
            ]
        ],
        "output_column_names": [
            "publisher_name"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7864406779661017,
        "bleu_similarity_score": 3.0227166067697294e-78,
        "execution_accuracy": false
    },
    {
        "question": "How many superheroes with blonde hair are there?",
        "reference_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T2.colour = 'Blond'",
        "normalized_reference_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T2.colour = 'Blond'",
        "reference_sample_result": [
            [
                105
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*) \nFROM public.superhero s\nJOIN public.colour c ON s.hair_colour_id = c.id\nWHERE c.colour = 'Blonde';",
        "normalized_output_query": "SELECT COUNT(*) FROM public.superhero s JOIN public.colour c ON s.hair_colour_id = c.id WHERE c.colour = 'Blonde';",
        "output_sample_result": [
            [
                0
            ]
        ],
        "output_column_names": [
            "count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7896995708154506,
        "bleu_similarity_score": 1.2283513926157894e-231,
        "execution_accuracy": false
    },
    {
        "question": "Who is the dumbest superhero?",
        "reference_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value LIMIT 1",
        "normalized_reference_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value LIMIT 1",
        "reference_error": null,
        "output_query": "The provided context is insufficient to determine who the dumbest superhero is, as it does not contain information about the intelligence or attributes related to intelligence of superheroes.",
        "normalized_output_query": "The provided context IS insufficient TO determine who the dumbest superhero IS, AS it does NOT contain information about the intelligence OR attributes related TO intelligence OF superheroes.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO determine who the du...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is Copycat's race?",
        "reference_query": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
        "normalized_reference_query": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
        "reference_sample_result": [
            [
                "Mutant"
            ]
        ],
        "reference_column_names": [
            "race"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT race.race\nFROM superhero\nJOIN race ON superhero.race_id = race.id\nWHERE superhero.superhero_name = 'Copycat';",
        "normalized_output_query": "SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Copycat';",
        "output_sample_result": [
            [
                "Mutant"
            ]
        ],
        "output_column_names": [
            "race"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7705627705627706,
        "bleu_similarity_score": 5.852849042529374e-155,
        "execution_accuracy": false
    },
    {
        "question": "Which superheroes have a durability attribute value of less than 50?",
        "reference_query": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
        "normalized_reference_query": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
        "reference_sample_result": [
            [
                "3-D Man"
            ],
            [
                "A-Bomb"
            ],
            [
                "Abe Sapien"
            ],
            [
                "Adam Monroe"
            ],
            [
                "Adam Strange"
            ]
        ],
        "reference_column_names": [
            "superhero_name"
        ],
        "reference_row_count": 371,
        "reference_column_count": 1,
        "output_query": "SELECT s.superhero_name\nFROM public.superhero s\nJOIN public.hero_attribute ha ON s.id = ha.hero_id\nJOIN public.attribute a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'durability' AND ha.attribute_value < 50;",
        "normalized_output_query": "SELECT s.superhero_name FROM public.superhero s JOIN public.hero_attribute ha ON s.id = ha.hero_id JOIN public.attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'durability' AND ha.attribute_value < 50;",
        "output_sample_result": [],
        "output_column_names": [
            "superhero_name"
        ],
        "output_row_count": 0,
        "output_column_count": 1,
        "sequence_similarity_score": 0.328159645232816,
        "bleu_similarity_score": 1.0567871796688707e-231,
        "execution_accuracy": false
    },
    {
        "question": "What are the names of the superheroes with the power of death touch?",
        "reference_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
        "normalized_reference_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
        "reference_sample_result": [
            [
                "Black Flash"
            ],
            [
                "Blackwulf"
            ],
            [
                "Hela"
            ],
            [
                "Living Tribunal"
            ],
            [
                "One-Above-All"
            ]
        ],
        "reference_column_names": [
            "superhero_name"
        ],
        "reference_row_count": 7,
        "reference_column_count": 1,
        "output_query": "SELECT s.superhero_name\nFROM public.superhero s\nJOIN public.hero_power hp ON s.id = hp.hero_id\nJOIN public.superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Death Touch';",
        "normalized_output_query": "SELECT s.superhero_name FROM public.superhero s JOIN public.hero_power hp ON s.id = hp.hero_id JOIN public.superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Death Touch';",
        "output_sample_result": [
            [
                "Black Flash"
            ],
            [
                "Blackwulf"
            ],
            [
                "Hela"
            ],
            [
                "Living Tribunal"
            ],
            [
                "One-Above-All"
            ]
        ],
        "output_column_names": [
            "superhero_name"
        ],
        "output_row_count": 7,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7900552486187845,
        "bleu_similarity_score": 4.550484092420588e-155,
        "execution_accuracy": false
    },
    {
        "question": "How many female superheroes have a strength value of 100?",
        "reference_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = 100 AND T4.gender = 'Female'",
        "normalized_reference_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = 100 AND T4.gender = 'Female'",
        "reference_error": null,
        "output_query": "SELECT COUNT(*) \nFROM public.superhero AS s\nJOIN public.hero_attribute AS ha ON s.id = ha.hero_id\nJOIN public.gender AS g ON s.gender_id = g.id\nWHERE g.gender = 'Female' AND ha.attribute_id = (SELECT id FROM public.hero_attribute WHERE attribute_id = 'strength') AND ha.attribute_value = 100;",
        "normalized_output_query": "SELECT COUNT(*) FROM public.superhero AS s JOIN public.hero_attribute AS ha ON s.id = ha.hero_id JOIN public.gender AS g ON s.gender_id = g.id WHERE g.gender = 'Female' AND ha.attribute_id = (SELECT id FROM public.hero_attribute WHERE attribute_id = 'strength') AND ha.attribute_value = 100;",
        "output_error": "column reference \"id\" is ambiguous\nLINE 1: ...g.gender = 'Female' AND ha.attribute_id = (SELECT id FROM pu...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the name of the superhero that has the most powers?",
        "reference_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.superhero_name ORDER BY COUNT(T2.hero_id) DESC LIMIT 1",
        "normalized_reference_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.superhero_name ORDER BY COUNT(T2.hero_id) DESC LIMIT 1",
        "reference_sample_result": [
            [
                "Captain Marvel"
            ]
        ],
        "reference_column_names": [
            "superhero_name"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT s.superhero_name\nFROM public.superhero s\nJOIN public.hero_power hp ON s.id = hp.hero_id\nGROUP BY s.superhero_name\nORDER BY COUNT(hp.power_id) DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT s.superhero_name FROM public.superhero s JOIN public.hero_power hp ON s.id = hp.hero_id GROUP BY s.superhero_name ORDER BY COUNT(hp.power_id) DESC LIMIT 1;",
        "output_sample_result": [
            [
                "Captain Marvel"
            ]
        ],
        "output_column_names": [
            "superhero_name"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.8271604938271605,
        "bleu_similarity_score": 6.846148405959442e-155,
        "execution_accuracy": false
    },
    {
        "question": "How many vampire superheroes are there?",
        "reference_query": "SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
        "normalized_reference_query": "SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
        "reference_sample_result": [
            [
                2
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*) AS vampire_superheroes_count\nFROM public.superhero\nJOIN public.hero_attribute ON public.superhero.id = public.hero_attribute.hero_id\nWHERE public.hero_attribute.attribute_id = (\n    SELECT id FROM public.superpower WHERE power_name = 'vampire'\n);",
        "normalized_output_query": "SELECT COUNT(*) AS vampire_superheroes_count FROM public.superhero JOIN public.hero_attribute ON public.superhero.id = public.hero_attribute.hero_id WHERE public.hero_attribute.attribute_id = (SELECT id FROM public.superpower WHERE power_name = 'vampire');",
        "output_sample_result": [
            [
                0
            ]
        ],
        "output_column_names": [
            "vampire_superheroes_count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.25396825396825395,
        "bleu_similarity_score": 1.3991003373328715e-231,
        "execution_accuracy": false
    },
    {
        "question": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.",
        "reference_query": "SELECT (CAST(COUNT(*) AS DOUBLE PRECISION) * 100 / (SELECT COUNT(*) FROM superhero)), CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS DOUBLE PRECISION) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T3.alignment = 'Bad'",
        "normalized_reference_query": "SELECT (CAST(COUNT(*) AS DOUBLE PRECISION) * 100 / (SELECT COUNT(*) FROM superhero)), CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS DOUBLE PRECISION) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T3.alignment = 'Bad'",
        "reference_error": null,
        "output_query": "SELECT \n    (COUNT(*) FILTER (WHERE alignment_id = (SELECT id FROM public.alignment WHERE alignment_name = 'neutral')) * 100.0 / COUNT(*)) AS percentage_self_interest,\n    COUNT(*) FILTER (WHERE alignment_id = (SELECT id FROM public.alignment WHERE alignment_name = 'neutral') AND publisher_id = (SELECT id FROM public.publisher WHERE publisher_name = 'Marvel Comics')) AS marvel_neutral_superheroes\nFROM \n    public.superhero;",
        "normalized_output_query": "SELECT (COUNT(*) FILTER (WHERE alignment_id = (SELECT id FROM public.alignment WHERE alignment_name = 'neutral')) * 100.0 / COUNT(*)) AS percentage_self_interest, COUNT(*) FILTER (WHERE alignment_id = (SELECT id FROM public.alignment WHERE alignment_name = 'neutral') AND publisher_id = (SELECT id FROM public.publisher WHERE publisher_name = 'Marvel Comics')) AS marvel_neutral_superheroes FROM public.superhero;",
        "output_error": "column \"alignment_name\" does not exist\nLINE 1: ...nment_id = (SELECT id FROM public.alignment WHERE alignment_...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published.",
        "reference_query": "SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id",
        "normalized_reference_query": "SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id",
        "reference_sample_result": [
            [
                163
            ]
        ],
        "reference_column_names": [
            "?column?"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT \n    (SELECT publisher_name FROM public.publisher WHERE id = dc_publisher_id) AS publisher_dc,\n    (SELECT COUNT(*) FROM public.superhero WHERE publisher_id = dc_publisher_id) AS count_dc,\n    (SELECT publisher_name FROM public.publisher WHERE id = marvel_publisher_id) AS publisher_marvel,\n    (SELECT COUNT(*) FROM public.superhero WHERE publisher_id = marvel_publisher_id) AS count_marvel,\n    ABS((SELECT COUNT(*) FROM public.superhero WHERE publisher_id = dc_publisher_id) - \n        (SELECT COUNT(*) FROM public.superhero WHERE publisher_id = marvel_publisher_id)) AS difference\nFROM\n    (SELECT id AS dc_publisher_id FROM public.publisher WHERE publisher_name = 'DC Comics') AS dc_table,\n    (SELECT id AS marvel_publisher_id FROM public.publisher WHERE publisher_name = 'Marvel Comics') AS marvel_table;",
        "normalized_output_query": "SELECT (SELECT publisher_name FROM public.publisher WHERE id = dc_publisher_id) AS publisher_dc, (SELECT COUNT(*) FROM public.superhero WHERE publisher_id = dc_publisher_id) AS count_dc, (SELECT publisher_name FROM public.publisher WHERE id = marvel_publisher_id) AS publisher_marvel, (SELECT COUNT(*) FROM public.superhero WHERE publisher_id = marvel_publisher_id) AS count_marvel, ABS((SELECT COUNT(*) FROM public.superhero WHERE publisher_id = dc_publisher_id) - (SELECT COUNT(*) FROM public.superhero WHERE publisher_id = marvel_publisher_id)) AS difference FROM (SELECT id AS dc_publisher_id FROM public.publisher WHERE publisher_name = 'DC Comics') AS dc_table, (SELECT id AS marvel_publisher_id FROM public.publisher WHERE publisher_name = 'Marvel Comics') AS marvel_table;",
        "output_sample_result": [
            [
                "DC Comics",
                224,
                "Marvel Comics",
                387,
                163
            ]
        ],
        "output_column_names": [
            "publisher_dc",
            "count_dc",
            "publisher_marvel",
            "count_marvel",
            "difference"
        ],
        "output_row_count": 1,
        "output_column_count": 5,
        "sequence_similarity_score": 0.10230692076228685,
        "bleu_similarity_score": 3.391761363138754e-155,
        "execution_accuracy": false
    },
    {
        "question": "Give the publisher ID of Star Trek.",
        "reference_query": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
        "normalized_reference_query": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
        "reference_sample_result": [
            [
                20
            ]
        ],
        "reference_column_names": [
            "id"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT id FROM public.publisher WHERE publisher_name = 'Star Trek';",
        "normalized_output_query": "SELECT id FROM public.publisher WHERE publisher_name = 'Star Trek';",
        "output_sample_result": [
            [
                20
            ]
        ],
        "output_column_names": [
            "id"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.9365079365079365,
        "bleu_similarity_score": 0.43167001068522526,
        "execution_accuracy": false
    },
    {
        "question": "Calculate the average attribute value of all superheroes.",
        "reference_query": "SELECT AVG(attribute_value) FROM hero_attribute",
        "normalized_reference_query": "SELECT AVG(attribute_value) FROM hero_attribute",
        "reference_sample_result": [
            [
                "52.4264312466559658"
            ]
        ],
        "reference_column_names": [
            "avg"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT AVG(attribute_value) AS average_attribute_value\nFROM public.hero_attribute;",
        "normalized_output_query": "SELECT AVG(attribute_value) AS average_attribute_value FROM public.hero_attribute;",
        "output_sample_result": [
            [
                "52.4264312466559658"
            ]
        ],
        "output_column_names": [
            "average_attribute_value"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7286821705426356,
        "bleu_similarity_score": 8.38826642100846e-155,
        "execution_accuracy": false
    },
    {
        "question": "What is the total number of superheroes without full name?",
        "reference_query": "SELECT COUNT(id) FROM superhero WHERE full_name IS NULL",
        "normalized_reference_query": "SELECT COUNT(id) FROM superhero WHERE full_name IS NULL",
        "reference_sample_result": [
            [
                122
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*) AS total_superheroes_without_full_name\nFROM public.superhero\nWHERE full_name IS NULL OR full_name = '';",
        "normalized_output_query": "SELECT COUNT(*) AS total_superheroes_without_full_name FROM public.superhero WHERE full_name IS NULL OR full_name = '';",
        "output_sample_result": [
            [
                122
            ]
        ],
        "output_column_names": [
            "total_superheroes_without_full_name"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6091954022988506,
        "bleu_similarity_score": 0.19674979811155635,
        "execution_accuracy": false
    },
    {
        "question": "What is the eye colour of superhero with superhero ID 75?",
        "reference_query": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75",
        "normalized_reference_query": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75",
        "reference_sample_result": [
            [
                "Blue"
            ]
        ],
        "reference_column_names": [
            "colour"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT c.colour AS eye_colour\nFROM public.superhero s\nJOIN public.colour c ON s.eye_colour_id = c.id\nWHERE s.id = 75;",
        "normalized_output_query": "SELECT c.colour AS eye_colour FROM public.superhero s JOIN public.colour c ON s.eye_colour_id = c.id WHERE s.id = 75;",
        "output_sample_result": [
            [
                "Blue"
            ]
        ],
        "output_column_names": [
            "eye_colour"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7354260089686099,
        "bleu_similarity_score": 1.407133241729783e-231,
        "execution_accuracy": false
    },
    {
        "question": "Provide the superpowers of the superhero called Deathlok.",
        "reference_query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'",
        "normalized_reference_query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'",
        "reference_sample_result": [
            [
                "Agility"
            ],
            [
                "Durability"
            ],
            [
                "Intelligence"
            ],
            [
                "Super Strength"
            ],
            [
                "Stamina"
            ]
        ],
        "reference_column_names": [
            "power_name"
        ],
        "reference_row_count": 11,
        "reference_column_count": 1,
        "output_query": "SELECT sp.power_name\nFROM public.superpower sp\nJOIN public.hero_power hp ON sp.id = hp.power_id\nJOIN public.superhero sh ON hp.hero_id = sh.id\nWHERE sh.superhero_name = 'Deathlok';",
        "normalized_output_query": "SELECT sp.power_name FROM public.superpower sp JOIN public.hero_power hp ON sp.id = hp.power_id JOIN public.superhero sh ON hp.hero_id = sh.id WHERE sh.superhero_name = 'Deathlok';",
        "output_sample_result": [
            [
                "Agility"
            ],
            [
                "Durability"
            ],
            [
                "Intelligence"
            ],
            [
                "Super Strength"
            ],
            [
                "Stamina"
            ]
        ],
        "output_column_names": [
            "power_name"
        ],
        "output_row_count": 11,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6183844011142061,
        "bleu_similarity_score": 1.1903221649650444e-231,
        "execution_accuracy": false
    },
    {
        "question": "What is the average weight of all female superheroes?",
        "reference_query": "SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female'",
        "normalized_reference_query": "SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female'",
        "reference_sample_result": [
            [
                "60.7795698924731183"
            ]
        ],
        "reference_column_names": [
            "avg"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT AVG(weight_kg) AS average_weight_of_female_superheroes\nFROM public.superhero\nJOIN public.gender ON public.superhero.gender_id = public.gender.id\nWHERE public.gender.gender = 'Female';",
        "normalized_output_query": "SELECT AVG(weight_kg) AS average_weight_of_female_superheroes FROM public.superhero JOIN public.gender ON public.superhero.gender_id = public.gender.id WHERE public.gender.gender = 'Female';",
        "output_sample_result": [
            [
                "60.7795698924731183"
            ]
        ],
        "output_column_names": [
            "average_weight_of_female_superheroes"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6,
        "bleu_similarity_score": 1.2700493872165969e-231,
        "execution_accuracy": false
    },
    {
        "question": "List down at least five superpowers of male superheroes.",
        "reference_query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5",
        "normalized_reference_query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5",
        "reference_sample_result": [
            [
                "Agility"
            ],
            [
                "Super Strength"
            ],
            [
                "Stamina"
            ],
            [
                "Super Speed"
            ],
            [
                "Accelerated Healing"
            ]
        ],
        "reference_column_names": [
            "power_name"
        ],
        "reference_row_count": 5,
        "reference_column_count": 1,
        "output_query": "SELECT DISTINCT sp.power_name\nFROM superhero sh\nJOIN hero_power hp ON sh.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nJOIN gender g ON sh.gender_id = g.id\nWHERE g.gender = 'Male'\nLIMIT 5;",
        "normalized_output_query": "SELECT DISTINCT sp.power_name FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id JOIN gender g ON sh.gender_id = g.id WHERE g.gender = 'Male' LIMIT 5;",
        "output_sample_result": [
            [
                "Phasing"
            ],
            [
                "Energy Beams"
            ],
            [
                "Thirstokinesis"
            ],
            [
                "Fire Resistance"
            ],
            [
                "Spatial Awareness"
            ]
        ],
        "output_column_names": [
            "power_name"
        ],
        "output_row_count": 5,
        "output_column_count": 1,
        "sequence_similarity_score": 0.5390070921985816,
        "bleu_similarity_score": 2.473678671999433e-78,
        "execution_accuracy": false
    },
    {
        "question": "Give the name of the alien superheroes.",
        "reference_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
        "normalized_reference_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
        "reference_error": null,
        "output_query": "SELECT DISTINCT s.superhero_name\nFROM public.superhero s\nJOIN public.hero_attribute ha ON s.id = ha.hero_id\nWHERE ha.attribute_id = (\n    SELECT id \n    FROM public.hero_attribute \n    WHERE attribute_value = 'alien'\n)",
        "normalized_output_query": "SELECT DISTINCT s.superhero_name FROM public.superhero s JOIN public.hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_id = (SELECT id FROM public.hero_attribute WHERE attribute_value = 'alien')",
        "output_error": "invalid input syntax for type integer: \"alien\"\nLINE 1: ... FROM public.hero_attribute WHERE attribute_value = 'alien')\n                                                               ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color.",
        "reference_query": "SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour = 'No Colour'",
        "normalized_reference_query": "SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour = 'No Colour'",
        "reference_sample_result": [
            [
                "Chuck Norris"
            ],
            [
                "Destroyer"
            ],
            [
                "Flash III"
            ],
            [
                "Goku"
            ],
            [
                "Green Goblin III"
            ]
        ],
        "reference_column_names": [
            "superhero_name"
        ],
        "reference_row_count": 15,
        "reference_column_count": 1,
        "output_query": "SELECT superhero_name \nFROM public.superhero\nWHERE height_cm BETWEEN 170 AND 190\nAND eye_colour_id IS NULL;",
        "normalized_output_query": "SELECT superhero_name FROM public.superhero WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id IS NULL;",
        "output_sample_result": [],
        "output_column_names": [
            "superhero_name"
        ],
        "output_row_count": 0,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6164874551971327,
        "bleu_similarity_score": 0.11813824907453957,
        "execution_accuracy": false
    },
    {
        "question": "What is the superpower of hero ID 56?",
        "reference_query": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 56",
        "normalized_reference_query": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 56",
        "reference_sample_result": [
            [
                "Flight"
            ],
            [
                "Super Strength"
            ],
            [
                "Size Changing"
            ],
            [
                "Density Control"
            ],
            [
                "Gliding"
            ]
        ],
        "reference_column_names": [
            "power_name"
        ],
        "reference_row_count": 5,
        "reference_column_count": 1,
        "output_query": "SELECT sp.power_name\nFROM public.hero_power hp\nJOIN public.superpower sp ON hp.power_id = sp.id\nWHERE hp.hero_id = 56;",
        "normalized_output_query": "SELECT sp.power_name FROM public.hero_power hp JOIN public.superpower sp ON hp.power_id = sp.id WHERE hp.hero_id = 56;",
        "output_sample_result": [
            [
                "Flight"
            ],
            [
                "Super Strength"
            ],
            [
                "Size Changing"
            ],
            [
                "Density Control"
            ],
            [
                "Gliding"
            ]
        ],
        "output_column_names": [
            "power_name"
        ],
        "output_row_count": 5,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7811158798283262,
        "bleu_similarity_score": 1.2283513926157894e-231,
        "execution_accuracy": false
    },
    {
        "question": "List down at least five full name of Demi-God superheroes.",
        "reference_query": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
        "normalized_reference_query": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
        "reference_error": null,
        "output_query": "SELECT full_name\nFROM public.superhero\nWHERE race_id = (\n    SELECT id\n    FROM public.race\n    WHERE race_name = 'Demi-God'\n)\nLIMIT 5;",
        "normalized_output_query": "SELECT full_name FROM public.superhero WHERE race_id = (SELECT id FROM public.race WHERE race_name = 'Demi-God') LIMIT 5;",
        "output_error": "column \"race_name\" does not exist\nLINE 1: ...WHERE race_id = (SELECT id FROM public.race WHERE race_name ...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many bad superheroes are there?",
        "reference_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Bad'",
        "normalized_reference_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Bad'",
        "reference_sample_result": [
            [
                212
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*) \nFROM public.superhero \nWHERE alignment_id = (SELECT id FROM public.alignment WHERE alignment = 'bad');",
        "normalized_output_query": "SELECT COUNT(*) FROM public.superhero WHERE alignment_id = (SELECT id FROM public.alignment WHERE alignment = 'bad');",
        "output_sample_result": [
            [
                0
            ]
        ],
        "output_column_names": [
            "count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6218487394957983,
        "bleu_similarity_score": 1.1097150079804136e-231,
        "execution_accuracy": false
    },
    {
        "question": "Identify the race of the superhero who weighed 169 kg.",
        "reference_query": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169",
        "normalized_reference_query": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169",
        "reference_sample_result": [
            [
                "Xenomorph XX121"
            ]
        ],
        "reference_column_names": [
            "race"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT r.race\nFROM public.superhero AS s\nJOIN public.race AS r ON s.race_id = r.id\nWHERE s.weight_kg = 169;",
        "normalized_output_query": "SELECT r.race FROM public.superhero AS s JOIN public.race AS r ON s.race_id = r.id WHERE s.weight_kg = 169;",
        "output_sample_result": [
            [
                "Xenomorph XX121"
            ]
        ],
        "output_column_names": [
            "race"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.8151658767772512,
        "bleu_similarity_score": 1.4491834092072765e-231,
        "execution_accuracy": false
    },
    {
        "question": "Provide the hair colour of the human superhero who is 185 cm tall.",
        "reference_query": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'",
        "normalized_reference_query": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'",
        "reference_sample_result": [
            [
                "Black"
            ],
            [
                "Blond"
            ],
            [
                "Brown"
            ],
            [
                "Brown/White"
            ],
            [
                "No Colour"
            ]
        ],
        "reference_column_names": [
            "colour"
        ],
        "reference_row_count": 5,
        "reference_column_count": 1,
        "output_query": "SELECT c.colour AS hair_colour\nFROM public.superhero s\nJOIN public.colour c ON s.hair_colour_id = c.id\nJOIN public.race r ON s.race_id = r.id\nWHERE s.height_cm = 185 AND r.race = 'Human';",
        "normalized_output_query": "SELECT c.colour AS hair_colour FROM public.superhero s JOIN public.colour c ON s.hair_colour_id = c.id JOIN public.race r ON s.race_id = r.id WHERE s.height_cm = 185 AND r.race = 'Human';",
        "output_sample_result": [
            [
                "No Colour"
            ],
            [
                "Black"
            ],
            [
                "Black"
            ],
            [
                "Black"
            ],
            [
                "Blond"
            ]
        ],
        "output_column_names": [
            "hair_colour"
        ],
        "output_row_count": 11,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6047745358090185,
        "bleu_similarity_score": 2.0113746866115034e-78,
        "execution_accuracy": false
    },
    {
        "question": "What is the eye clolour of the heaviest superhero?",
        "reference_query": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1",
        "normalized_reference_query": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1",
        "reference_sample_result": [
            [
                "No Colour"
            ]
        ],
        "reference_column_names": [
            "colour"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT c.colour AS eye_colour\nFROM public.superhero s\nJOIN public.colour c ON s.eye_colour_id = c.id\nORDER BY s.weight_kg DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT c.colour AS eye_colour FROM public.superhero s JOIN public.colour c ON s.eye_colour_id = c.id ORDER BY s.weight_kg DESC LIMIT 1;",
        "output_sample_result": [
            [
                "No Colour"
            ]
        ],
        "output_column_names": [
            "eye_colour"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7722007722007722,
        "bleu_similarity_score": 6.796246015192705e-155,
        "execution_accuracy": false
    },
    {
        "question": "In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics?",
        "reference_query": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS DOUBLE PRECISION) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180",
        "normalized_reference_query": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS DOUBLE PRECISION) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180",
        "reference_sample_result": [
            [
                60.869565217391305
            ]
        ],
        "reference_column_names": [
            "?column?"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT \n    (COUNT(*) FILTER (WHERE publisher_id = (SELECT id FROM public.superhero WHERE superhero_name = 'Marvel Comics'))::decimal / COUNT(*)) * 100 AS marvel_percentage \nFROM \n    public.superhero\nWHERE \n    height_cm BETWEEN 150 AND 180;",
        "normalized_output_query": "SELECT (COUNT(*) FILTER (WHERE publisher_id = (SELECT id FROM public.superhero WHERE superhero_name = 'Marvel Comics'))::decimal / COUNT(*)) * 100 AS marvel_percentage FROM public.superhero WHERE height_cm BETWEEN 150 AND 180;",
        "output_sample_result": [
            [
                "0E-20"
            ]
        ],
        "output_column_names": [
            "marvel_percentage"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.17987152034261242,
        "bleu_similarity_score": 1.9761774955744838e-78,
        "execution_accuracy": false
    },
    {
        "question": "Among the male superheroes, list the super hero names of superheroes with weight greater than the 79% average weight of all superheroes.",
        "reference_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg::BIGINT * 100 > ( SELECT AVG(weight_kg) FROM superhero ) * 79",
        "normalized_reference_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg::BIGINT * 100 > (SELECT AVG(weight_kg) FROM superhero) * 79",
        "reference_sample_result": [
            [
                "King Kong"
            ]
        ],
        "reference_column_names": [
            "superhero_name"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT s.superhero_name\nFROM public.superhero s\nJOIN public.gender g ON s.gender_id = g.id\nWHERE g.gender = 'Male'\nAND s.weight_kg > (\n    SELECT 0.79 * AVG(weight_kg)\n    FROM public.superhero\n)",
        "normalized_output_query": "SELECT s.superhero_name FROM public.superhero s JOIN public.gender g ON s.gender_id = g.id WHERE g.gender = 'Male' AND s.weight_kg > (SELECT 0.79 * AVG(weight_kg) FROM public.superhero)",
        "output_sample_result": [
            [
                "King Kong"
            ]
        ],
        "output_column_names": [
            "superhero_name"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7894736842105263,
        "bleu_similarity_score": 2.523797156007974e-78,
        "execution_accuracy": false
    },
    {
        "question": "Which power do superheroes have the most of?",
        "reference_query": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id GROUP BY T2.power_name ORDER BY COUNT(T1.hero_id) DESC LIMIT 1",
        "normalized_reference_query": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id GROUP BY T2.power_name ORDER BY COUNT(T1.hero_id) DESC LIMIT 1",
        "reference_sample_result": [
            [
                "Super Strength"
            ]
        ],
        "reference_column_names": [
            "power_name"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT sp.power_name, COUNT(*) as power_count\nFROM hero_power hp\nJOIN superpower sp ON hp.power_id = sp.id\nGROUP BY sp.power_name\nORDER BY power_count DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT sp.power_name, COUNT(*) AS power_count FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id GROUP BY sp.power_name ORDER BY power_count DESC LIMIT 1;",
        "output_sample_result": [
            [
                "Super Strength",
                358
            ]
        ],
        "output_column_names": [
            "power_name",
            "power_count"
        ],
        "output_row_count": 1,
        "output_column_count": 2,
        "sequence_similarity_score": 0.7375,
        "bleu_similarity_score": 8.901474586479394e-155,
        "execution_accuracy": false
    },
    {
        "question": "Indicate the attribute value of superhero Abomination.",
        "reference_query": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'",
        "normalized_reference_query": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'",
        "reference_sample_result": [
            [
                85
            ],
            [
                80
            ],
            [
                55
            ],
            [
                55
            ],
            [
                55
            ]
        ],
        "reference_column_names": [
            "attribute_value"
        ],
        "reference_row_count": 6,
        "reference_column_count": 1,
        "output_query": "SELECT ha.attribute_value\nFROM public.hero_attribute ha\nJOIN public.superhero s ON ha.hero_id = s.id\nWHERE s.superhero_name = 'Abomination';",
        "normalized_output_query": "SELECT ha.attribute_value FROM public.hero_attribute ha JOIN public.superhero s ON ha.hero_id = s.id WHERE s.superhero_name = 'Abomination';",
        "output_sample_result": [
            [
                85
            ],
            [
                80
            ],
            [
                55
            ],
            [
                55
            ],
            [
                55
            ]
        ],
        "output_column_names": [
            "attribute_value"
        ],
        "output_row_count": 6,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6857142857142857,
        "bleu_similarity_score": 1.2283513926157894e-231,
        "execution_accuracy": false
    },
    {
        "question": "What are the superpowers of heroes with ID 1?",
        "reference_query": "SELECT DISTINCT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1",
        "normalized_reference_query": "SELECT DISTINCT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1",
        "reference_sample_result": [
            [
                "Agility"
            ],
            [
                "Stamina"
            ],
            [
                "Super Speed"
            ],
            [
                "Super Strength"
            ]
        ],
        "reference_column_names": [
            "power_name"
        ],
        "reference_row_count": 4,
        "reference_column_count": 1,
        "output_query": "SELECT sp.power_name\nFROM public.hero_power hp\nJOIN public.superpower sp ON hp.power_id = sp.id\nWHERE hp.hero_id = 1;",
        "normalized_output_query": "SELECT sp.power_name FROM public.hero_power hp JOIN public.superpower sp ON hp.power_id = sp.id WHERE hp.hero_id = 1;",
        "output_sample_result": [
            [
                "Agility"
            ],
            [
                "Super Strength"
            ],
            [
                "Stamina"
            ],
            [
                "Super Speed"
            ]
        ],
        "output_column_names": [
            "power_name"
        ],
        "output_row_count": 4,
        "output_column_count": 1,
        "sequence_similarity_score": 0.75,
        "bleu_similarity_score": 1.153929343948397e-231,
        "execution_accuracy": false
    },
    {
        "question": "How many heroes have stealth power?",
        "reference_query": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'",
        "normalized_reference_query": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'",
        "reference_sample_result": [
            [
                127
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(DISTINCT h.hero_id) AS hero_count\nFROM hero_power h\nJOIN superpower s ON h.power_id = s.id\nWHERE s.power_name = 'Stealth';",
        "normalized_output_query": "SELECT COUNT(DISTINCT h.hero_id) AS hero_count FROM hero_power h JOIN superpower s ON h.power_id = s.id WHERE s.power_name = 'Stealth';",
        "output_sample_result": [
            [
                127
            ]
        ],
        "output_column_names": [
            "hero_count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.803030303030303,
        "bleu_similarity_score": 7.3353896490179345e-155,
        "execution_accuracy": false
    },
    {
        "question": "What is the hero's full name with the highest attribute in strength?",
        "reference_query": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
        "normalized_reference_query": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
        "reference_sample_result": [
            [
                "Richard Milhouse Jones"
            ]
        ],
        "reference_column_names": [
            "full_name"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT s.full_name\nFROM public.superhero s\nJOIN public.hero_attribute ha ON s.id = ha.hero_id\nJOIN public.attribute a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'strength'\nORDER BY ha.attribute_value DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT s.full_name FROM public.superhero s JOIN public.hero_attribute ha ON s.id = ha.hero_id JOIN public.attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'strength' ORDER BY ha.attribute_value DESC LIMIT 1;",
        "output_sample_result": [],
        "output_column_names": [
            "full_name"
        ],
        "output_row_count": 0,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7427293064876958,
        "bleu_similarity_score": 5.409963777393707e-155,
        "execution_accuracy": false
    },
    {
        "question": "Please list the reference names of the drivers who are eliminated in the first period in race number 20.",
        "reference_query": "SELECT T2.\"driverRef\" FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T1.\"raceId\" = 20 ORDER BY T1.q1 DESC LIMIT 5",
        "normalized_reference_query": "SELECT T2.\"driverRef\" FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T1.\"raceId\" = 20 ORDER BY T1.q1 DESC LIMIT 5",
        "reference_error": null,
        "output_query": "SELECT d.driverRef\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 20 AND q.q1 IS NOT NULL AND q.q2 IS NULL;",
        "normalized_output_query": "SELECT d.driverRef FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.raceId = 20 AND q.q1 IS NOT NULL AND q.q2 IS NULL;",
        "output_error": "column q.driverid does not exist\nLINE 1: ...T d.driverRef FROM qualifying q JOIN drivers d ON q.driverId...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"q.driverId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the surname of the driver with the best lap time in race number 19 in the second qualifying period?",
        "reference_query": "SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T1.\"raceId\" = 19 ORDER BY T1.q2 ASC LIMIT 1",
        "normalized_reference_query": "SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T1.\"raceId\" = 19 ORDER BY T1.q2 ASC LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT d.surname \nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 19\nORDER BY q.q2 \nLIMIT 1;",
        "normalized_output_query": "SELECT d.surname FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.raceId = 19 ORDER BY q.q2 LIMIT 1;",
        "output_error": "column q.driverid does not exist\nLINE 1: ...ECT d.surname FROM qualifying q JOIN drivers d ON q.driverId...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"q.driverId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Please list the year during which the race is held on circuits in Shanghai.",
        "reference_query": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.\"circuitId\" = T1.\"circuitId\" WHERE T1.location = 'Shanghai'",
        "normalized_reference_query": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.\"circuitId\" = T1.\"circuitId\" WHERE T1.location = 'Shanghai'",
        "reference_sample_result": [
            [
                2009
            ],
            [
                2008
            ],
            [
                2007
            ],
            [
                2006
            ],
            [
                2005
            ]
        ],
        "reference_column_names": [
            "year"
        ],
        "reference_row_count": 14,
        "reference_column_count": 1,
        "output_query": "SELECT DISTINCT r.year\nFROM races r\nJOIN circuits c ON r.\"circuitId\" = c.\"circuitId\"\nWHERE c.location = 'Shanghai';",
        "normalized_output_query": "SELECT DISTINCT r.year FROM races r JOIN circuits c ON r.\"circuitId\" = c.\"circuitId\" WHERE c.location = 'Shanghai';",
        "output_sample_result": [
            [
                2004
            ],
            [
                2005
            ],
            [
                2006
            ],
            [
                2007
            ],
            [
                2008
            ]
        ],
        "output_column_names": [
            "year"
        ],
        "output_row_count": 14,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7478991596638656,
        "bleu_similarity_score": 1.3815393270869524e-231,
        "execution_accuracy": false
    },
    {
        "question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
        "reference_query": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.\"circuitId\" = T1.\"circuitId\" WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
        "normalized_reference_query": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.\"circuitId\" = T1.\"circuitId\" WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
        "reference_sample_result": [
            [
                "http://en.wikipedia.org/wiki/Circuit_de_Barcelona-Catalunya"
            ]
        ],
        "reference_column_names": [
            "url"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT url \nFROM public.circuits \nWHERE name = 'Circuit de Barcelona-Catalunya';",
        "normalized_output_query": "SELECT url FROM public.circuits WHERE name = 'Circuit de Barcelona-Catalunya';",
        "output_sample_result": [
            [
                "http://en.wikipedia.org/wiki/Circuit_de_Barcelona-Catalunya"
            ]
        ],
        "output_column_names": [
            "url"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6167400881057269,
        "bleu_similarity_score": 1.3217366025199057e-78,
        "execution_accuracy": false
    },
    {
        "question": "Please give the name of the race held on the circuits in Germany.",
        "reference_query": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.\"circuitId\" = T1.\"circuitId\" WHERE T1.country = 'Germany'",
        "normalized_reference_query": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.\"circuitId\" = T1.\"circuitId\" WHERE T1.country = 'Germany'",
        "reference_sample_result": [
            [
                "European Grand Prix"
            ],
            [
                "German Grand Prix"
            ],
            [
                "Luxembourg Grand Prix"
            ]
        ],
        "reference_column_names": [
            "name"
        ],
        "reference_row_count": 3,
        "reference_column_count": 1,
        "output_query": "SELECT r.name\nFROM public.races r\nJOIN public.circuits c ON r.\"circuitId\" = c.\"circuitId\"\nWHERE c.country = 'Germany';",
        "normalized_output_query": "SELECT r.name FROM public.races r JOIN public.circuits c ON r.\"circuitId\" = c.\"circuitId\" WHERE c.country = 'Germany';",
        "output_sample_result": [
            [
                "German Grand Prix"
            ],
            [
                "German Grand Prix"
            ],
            [
                "European Grand Prix"
            ],
            [
                "European Grand Prix"
            ],
            [
                "German Grand Prix"
            ]
        ],
        "output_column_names": [
            "name"
        ],
        "output_row_count": 76,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6935483870967742,
        "bleu_similarity_score": 1.153929343948397e-231,
        "execution_accuracy": false
    },
    {
        "question": "Please list the positions of the circuits built by the constructor Renault.",
        "reference_query": "SELECT DISTINCT T1.\"position\" FROM \"constructorStandings\" AS T1 INNER JOIN constructors AS T2 ON T2.\"constructorId\" = T1.\"constructorId\" WHERE T2.name = 'Renault'",
        "normalized_reference_query": "SELECT DISTINCT T1.\"position\" FROM \"constructorStandings\" AS T1 INNER JOIN constructors AS T2 ON T2.\"constructorId\" = T1.\"constructorId\" WHERE T2.name = 'Renault'",
        "reference_error": null,
        "output_query": "SELECT c.circuitId, c.name, c.location, c.country\nFROM constructors con\nJOIN qualifying q ON con.constructorId = q.constructorId\nJOIN races r ON q.raceId = r.raceId\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE con.name = 'Renault';",
        "normalized_output_query": "SELECT c.circuitId, c.name, c.location, c.country FROM constructors con JOIN qualifying q ON con.constructorId = q.constructorId JOIN races r ON q.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE con.name = 'Renault';",
        "output_error": "column con.constructorid does not exist\nLINE 1: ...ountry FROM constructors con JOIN qualifying q ON con.constr...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"con.constructorId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many races in the year 2010 are held on grand prixs outside Asia and Europe?",
        "reference_query": "SELECT COUNT(T3.\"raceId\") FROM circuits AS T1 INNER JOIN races AS T3 ON T3.\"circuitId\" = T1.\"circuitId\" WHERE T1.country NOT IN ( 'Bahrain', 'China', 'Singapore', 'Japan', 'Korea', 'Turkey', 'UAE', 'Malaysia', 'Spain', 'Monaco', 'Azerbaijan', 'Austria', 'Belgium', 'France', 'Germany', 'Hungary', 'Italy', 'UK' ) AND T3.year = 2010",
        "normalized_reference_query": "SELECT COUNT(T3.\"raceId\") FROM circuits AS T1 INNER JOIN races AS T3 ON T3.\"circuitId\" = T1.\"circuitId\" WHERE T1.country NOT IN ('Bahrain', 'China', 'Singapore', 'Japan', 'Korea', 'Turkey', 'UAE', 'Malaysia', 'Spain', 'Monaco', 'Azerbaijan', 'Austria', 'Belgium', 'France', 'Germany', 'Hungary', 'Italy', 'UK') AND T3.year = 2010",
        "reference_error": null,
        "output_query": "The provided context is insufficient to determine which races are held outside Asia and Europe. There is no information on the location or continent of the circuits in the given tables. Therefore, it is not possible to generate the SQL query.",
        "normalized_output_query": "The provided context IS insufficient TO determine which races ARE held outside Asia AND Europe. There IS NO information ON the LOCATION OR continent OF the circuits IN the given tables. Therefore, it IS NOT possible TO generate the SQL query.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO determine which race...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Please give the names of the races held on the circuits in Spain.",
        "reference_query": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.\"circuitId\" = T1.\"circuitId\" WHERE T1.country = 'Spain'",
        "normalized_reference_query": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.\"circuitId\" = T1.\"circuitId\" WHERE T1.country = 'Spain'",
        "reference_sample_result": [
            [
                "European Grand Prix"
            ],
            [
                "Spanish Grand Prix"
            ]
        ],
        "reference_column_names": [
            "name"
        ],
        "reference_row_count": 2,
        "reference_column_count": 1,
        "output_query": "SELECT r.name AS race_name\nFROM public.races r\nJOIN public.circuits c ON r.\"circuitId\" = c.\"circuitId\"\nWHERE c.country = 'Spain';",
        "normalized_output_query": "SELECT r.name AS race_name FROM public.races r JOIN public.circuits c ON r.\"circuitId\" = c.\"circuitId\" WHERE c.country = 'Spain';",
        "output_sample_result": [
            [
                "Spanish Grand Prix"
            ],
            [
                "European Grand Prix"
            ],
            [
                "Spanish Grand Prix"
            ],
            [
                "European Grand Prix"
            ],
            [
                "Spanish Grand Prix"
            ]
        ],
        "output_column_names": [
            "race_name"
        ],
        "output_row_count": 54,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6614785992217899,
        "bleu_similarity_score": 1.331091014027761e-231,
        "execution_accuracy": false
    },
    {
        "question": "What is the coordinates location of the circuits for Australian grand prix?",
        "reference_query": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.\"circuitId\" = T1.\"circuitId\" WHERE T2.name = 'Australian Grand Prix'",
        "normalized_reference_query": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.\"circuitId\" = T1.\"circuitId\" WHERE T2.name = 'Australian Grand Prix'",
        "reference_sample_result": [
            [
                -34.9272,
                138.617
            ]
        ],
        "reference_column_names": [
            "lat",
            "lng"
        ],
        "reference_row_count": 1,
        "reference_column_count": 2,
        "output_query": "SELECT c.lat, c.lng\nFROM public.circuits c\nJOIN public.races r ON c.\"circuitId\" = r.\"circuitId\"\nWHERE r.name = 'Australian Grand Prix';",
        "normalized_output_query": "SELECT c.lat, c.lng FROM public.circuits c JOIN public.races r ON c.\"circuitId\" = r.\"circuitId\" WHERE r.name = 'Australian Grand Prix';",
        "output_sample_result": [
            [
                -34.9272,
                138.617
            ],
            [
                -34.9272,
                138.617
            ],
            [
                -34.9272,
                138.617
            ],
            [
                -34.9272,
                138.617
            ],
            [
                -34.9272,
                138.617
            ]
        ],
        "output_column_names": [
            "lat",
            "lng"
        ],
        "output_row_count": 11,
        "output_column_count": 2,
        "sequence_similarity_score": 0.7985865724381626,
        "bleu_similarity_score": 2.334022616592991e-78,
        "execution_accuracy": false
    },
    {
        "question": "Where can I find the information about the races held on Sepang International Circuit?",
        "reference_query": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.\"circuitId\" = T1.\"circuitId\" WHERE T1.name = 'Sepang International Circuit'",
        "normalized_reference_query": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.\"circuitId\" = T1.\"circuitId\" WHERE T1.name = 'Sepang International Circuit'",
        "reference_sample_result": [
            [
                "http://en.wikipedia.org/wiki/Sepang_International_Circuit"
            ]
        ],
        "reference_column_names": [
            "url"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT * \nFROM public.races\nJOIN public.circuits ON races.\"circuitId\" = circuits.\"circuitId\"\nWHERE circuits.name = 'Sepang International Circuit';",
        "normalized_output_query": "SELECT * FROM public.races JOIN public.circuits ON races.\"circuitId\" = circuits.\"circuitId\" WHERE circuits.name = 'Sepang International Circuit';",
        "output_sample_result": [
            [
                2,
                2009,
                2,
                2,
                "Malaysian Grand Prix",
                "2009-04-05",
                "09:00:00",
                "http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix",
                2,
                "sepang",
                "Sepang International Circuit",
                "Kuala Lumpur",
                "Malaysia",
                2.76083,
                101.738,
                null,
                "http://en.wikipedia.org/wiki/Sepang_International_Circuit"
            ],
            [
                19,
                2008,
                2,
                2,
                "Malaysian Grand Prix",
                "2008-03-23",
                "07:00:00",
                "http://en.wikipedia.org/wiki/2008_Malaysian_Grand_Prix",
                2,
                "sepang",
                "Sepang International Circuit",
                "Kuala Lumpur",
                "Malaysia",
                2.76083,
                101.738,
                null,
                "http://en.wikipedia.org/wiki/Sepang_International_Circuit"
            ],
            [
                37,
                2007,
                2,
                2,
                "Malaysian Grand Prix",
                "2007-04-08",
                "07:00:00",
                "http://en.wikipedia.org/wiki/2007_Malaysian_Grand_Prix",
                2,
                "sepang",
                "Sepang International Circuit",
                "Kuala Lumpur",
                "Malaysia",
                2.76083,
                101.738,
                null,
                "http://en.wikipedia.org/wiki/Sepang_International_Circuit"
            ],
            [
                54,
                2006,
                2,
                2,
                "Malaysian Grand Prix",
                "2006-03-19",
                "15:00:00",
                "http://en.wikipedia.org/wiki/2006_Malaysian_Grand_Prix",
                2,
                "sepang",
                "Sepang International Circuit",
                "Kuala Lumpur",
                "Malaysia",
                2.76083,
                101.738,
                null,
                "http://en.wikipedia.org/wiki/Sepang_International_Circuit"
            ],
            [
                72,
                2005,
                2,
                2,
                "Malaysian Grand Prix",
                "2005-03-20",
                "15:00:00",
                "http://en.wikipedia.org/wiki/2005_Malaysian_Grand_Prix",
                2,
                "sepang",
                "Sepang International Circuit",
                "Kuala Lumpur",
                "Malaysia",
                2.76083,
                101.738,
                null,
                "http://en.wikipedia.org/wiki/Sepang_International_Circuit"
            ]
        ],
        "output_column_names": [
            "raceId",
            "year",
            "round",
            "circuitId",
            "name",
            "date",
            "time",
            "url",
            "circuitId",
            "circuitRef",
            "name",
            "location",
            "country",
            "lat",
            "lng",
            "alt",
            "url"
        ],
        "output_row_count": 19,
        "output_column_count": 17,
        "sequence_similarity_score": 0.6986301369863014,
        "bleu_similarity_score": 2.2709573818620206e-78,
        "execution_accuracy": false
    },
    {
        "question": "Please list the time of the races held on Sepang International Circuit.",
        "reference_query": "SELECT DISTINCT T2.\"time\" FROM circuits AS T1 INNER JOIN races AS T2 ON T2.\"circuitId\" = T1.\"circuitId\" WHERE T1.name = 'Sepang International Circuit'",
        "normalized_reference_query": "SELECT DISTINCT T2.\"time\" FROM circuits AS T1 INNER JOIN races AS T2 ON T2.\"circuitId\" = T1.\"circuitId\" WHERE T1.name = 'Sepang International Circuit'",
        "reference_sample_result": [
            [
                "07:00:00"
            ],
            [
                "08:00:00"
            ],
            [
                "09:00:00"
            ],
            [
                "15:00:00"
            ],
            [
                null
            ]
        ],
        "reference_column_names": [
            "time"
        ],
        "reference_row_count": 5,
        "reference_column_count": 1,
        "output_query": "SELECT r.\"time\"\nFROM public.races r\nJOIN public.circuits c ON r.\"circuitId\" = c.\"circuitId\"\nWHERE c.name = 'Sepang International Circuit';",
        "normalized_output_query": "SELECT r.\"time\" FROM public.races r JOIN public.circuits c ON r.\"circuitId\" = c.\"circuitId\" WHERE c.name = 'Sepang International Circuit';",
        "output_sample_result": [
            [
                "09:00:00"
            ],
            [
                "07:00:00"
            ],
            [
                "07:00:00"
            ],
            [
                "15:00:00"
            ],
            [
                "15:00:00"
            ]
        ],
        "output_column_names": [
            "time"
        ],
        "output_row_count": 19,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7361111111111112,
        "bleu_similarity_score": 2.4081525618107024e-78,
        "execution_accuracy": false
    },
    {
        "question": "Which country is the constructor which got 1 point in the race No. 24 from?",
        "reference_query": "SELECT T2.nationality FROM \"constructorResults\" AS T1 INNER JOIN constructors AS T2 ON T2.\"constructorId\" = T1.\"constructorId\" WHERE T1.\"raceId\" = 24 AND T1.points = 1",
        "normalized_reference_query": "SELECT T2.nationality FROM \"constructorResults\" AS T1 INNER JOIN constructors AS T2 ON T2.\"constructorId\" = T1.\"constructorId\" WHERE T1.\"raceId\" = 24 AND T1.points = 1",
        "reference_error": null,
        "output_query": "SELECT c.nationality\nFROM constructorResults cr\nJOIN constructors c ON cr.constructorId = c.constructorId\nWHERE cr.raceId = 24 AND cr.points = 1;",
        "normalized_output_query": "SELECT c.nationality FROM constructorResults cr JOIN constructors c ON cr.constructorId = c.constructorId WHERE cr.raceId = 24 AND cr.points = 1;",
        "output_error": "relation \"constructorresults\" does not exist\nLINE 1: SELECT c.nationality FROM constructorResults cr JOIN constru...\n                                  ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What's Bruno Senna's Q1 result in the qualifying race No. 354?",
        "reference_query": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T1.\"raceId\" = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'",
        "normalized_reference_query": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T1.\"raceId\" = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'",
        "reference_error": null,
        "output_query": "SELECT q1 \nFROM public.qualifying q\nJOIN public.drivers d ON q.driverId = d.driverId\nWHERE d.forename = 'Bruno' AND d.surname = 'Senna' AND q.raceId = 354;",
        "normalized_output_query": "SELECT q1 FROM public.qualifying q JOIN public.drivers d ON q.driverId = d.driverId WHERE d.forename = 'Bruno' AND d.surname = 'Senna' AND q.raceId = 354;",
        "output_error": "column q.driverid does not exist\nLINE 1: ...FROM public.qualifying q JOIN public.drivers d ON q.driverId...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"q.driverId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "For the driver who had the Q2 time as 0:01:40 in the qualifying race No. 355, what is his nationality?",
        "reference_query": "SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T1.\"raceId\" = 355 AND T1.q2 LIKE '1:40%'",
        "normalized_reference_query": "SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T1.\"raceId\" = 355 AND T1.q2 LIKE '1:40%'",
        "reference_error": null,
        "output_query": "SELECT d.nationality\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 355 AND q.q2 = '0:01:40';",
        "normalized_output_query": "SELECT d.nationality FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.raceId = 355 AND q.q2 = '0:01:40';",
        "output_error": "column q.driverid does not exist\nLINE 1: ...d.nationality FROM qualifying q JOIN drivers d ON q.driverId...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"q.driverId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?",
        "reference_query": "SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T1.\"raceId\" = 903 AND T1.q3 LIKE '1:54%'",
        "normalized_reference_query": "SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T1.\"raceId\" = 903 AND T1.q3 LIKE '1:54%'",
        "reference_error": null,
        "output_query": "SELECT d.number\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 903 AND q.q3 = '0:01:54';",
        "normalized_output_query": "SELECT d.number FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.raceId = 903 AND q.q3 = '0:01:54';",
        "output_error": "column q.driverid does not exist\nLINE 1: ...LECT d.number FROM qualifying q JOIN drivers d ON q.driverId...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"q.driverId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",
        "reference_query": "SELECT COUNT(T3.\"driverId\") FROM races AS T1 INNER JOIN results AS T2 ON T2.\"raceId\" = T1.\"raceId\" INNER JOIN drivers AS T3 ON T3.\"driverId\" = T2.\"driverId\" WHERE T1.year = 2007 AND T1.name = 'Bahrain Grand Prix' AND T2.\"time\" IS NULL",
        "normalized_reference_query": "SELECT COUNT(T3.\"driverId\") FROM races AS T1 INNER JOIN results AS T2 ON T2.\"raceId\" = T1.\"raceId\" INNER JOIN drivers AS T3 ON T3.\"driverId\" = T2.\"driverId\" WHERE T1.year = 2007 AND T1.name = 'Bahrain Grand Prix' AND T2.\"time\" IS NULL",
        "reference_error": null,
        "output_query": "SELECT COUNT(*) AS not_finished_drivers_count\nFROM results r\nJOIN races ra ON r.raceId = ra.raceId\nWHERE ra.name = 'Bahrain Grand Prix' AND ra.year = 2007 AND r.position IS NULL;",
        "normalized_output_query": "SELECT COUNT(*) AS not_finished_drivers_count FROM results r JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Bahrain Grand Prix' AND ra.year = 2007 AND r.position IS NULL;",
        "output_error": "column r.raceid does not exist\nLINE 1: ...hed_drivers_count FROM results r JOIN races ra ON r.raceId =...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"r.raceId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Show me the season page of year when the race No. 901 took place.",
        "reference_query": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.\"raceId\" = 901",
        "normalized_reference_query": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.\"raceId\" = 901",
        "reference_error": null,
        "output_query": "SELECT s.*\nFROM races r\nJOIN seasons s ON r.year = s.year\nWHERE r.raceId = 901;",
        "normalized_output_query": "SELECT s.* FROM races r JOIN seasons s ON r.year = s.year WHERE r.raceId = 901;",
        "output_error": "column r.raceid does not exist\nLINE 1: ...M races r JOIN seasons s ON r.year = s.year WHERE r.raceId =...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"r.raceId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "For the race happened on 2015/11/29, how many drivers finished the game?",
        "reference_query": "SELECT COUNT(T2.\"driverId\") FROM races AS T1 INNER JOIN results AS T2 ON T2.\"raceId\" = T1.\"raceId\" WHERE T1.date = '2015-11-29' AND T2.\"time\" IS NOT NULL",
        "normalized_reference_query": "SELECT COUNT(T2.\"driverId\") FROM races AS T1 INNER JOIN results AS T2 ON T2.\"raceId\" = T1.\"raceId\" WHERE T1.date = '2015-11-29' AND T2.\"time\" IS NOT NULL",
        "reference_error": null,
        "output_query": "SELECT COUNT(DISTINCT driverId) AS drivers_finished\nFROM results\nWHERE raceId = (\n    SELECT raceId\n    FROM races\n    WHERE date = '2015-11-29'\n);",
        "normalized_output_query": "SELECT COUNT(DISTINCT driverId) AS drivers_finished FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29');",
        "output_error": "column \"driverid\" does not exist\nLINE 1: SELECT COUNT(DISTINCT driverId) AS drivers_finished FROM res...\n                              ^\nHINT:  Perhaps you meant to reference the column \"results.driverId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "For all the drivers who finished the game in race No. 592, who is the oldest?",
        "reference_query": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T2.\"raceId\" = 592 AND T2.\"time\" IS NOT NULL AND T1.dob IS NOT NULL ORDER BY T1.dob ASC LIMIT 1",
        "normalized_reference_query": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T2.\"raceId\" = 592 AND T2.\"time\" IS NOT NULL AND T1.dob IS NOT NULL ORDER BY T1.dob ASC LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT d.forename, d.surname, d.dob\nFROM public.results r\nJOIN public.drivers d ON r.driverId = d.driverId\nWHERE r.raceId = 592 AND r.position IS NOT NULL\nORDER BY d.dob ASC\nLIMIT 1;",
        "normalized_output_query": "SELECT d.forename, d.surname, d.dob FROM public.results r JOIN public.drivers d ON r.driverId = d.driverId WHERE r.raceId = 592 AND r.position IS NOT NULL ORDER BY d.dob ASC LIMIT 1;",
        "output_error": "column r.driverid does not exist\nLINE 1: ...ob FROM public.results r JOIN public.drivers d ON r.driverId...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"r.driverId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.",
        "reference_query": "SELECT DISTINCT T2.forename, T2.surname, T2.url FROM \"lapTimes\" AS T1 INNER JOIN drivers AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T1.\"raceId\" = 161 AND T1.\"time\" LIKE '1:27%'",
        "normalized_reference_query": "SELECT DISTINCT T2.forename, T2.surname, T2.url FROM \"lapTimes\" AS T1 INNER JOIN drivers AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T1.\"raceId\" = 161 AND T1.\"time\" LIKE '1:27%'",
        "reference_error": null,
        "output_query": "SELECT d.url\nFROM public.\"lapTimes\" lt\nJOIN public.drivers d ON lt.driverId = d.driverId\nWHERE lt.raceId = 161 AND lt.time = '0:01:27';",
        "normalized_output_query": "SELECT d.url FROM public.\"lapTimes\" lt JOIN public.drivers d ON lt.driverId = d.driverId WHERE lt.raceId = 161 AND lt.time = '0:01:27';",
        "output_error": "column lt.driverid does not exist\nLINE 1: ...ROM public.\"lapTimes\" lt JOIN public.drivers d ON lt.driverI...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"lt.driverId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "For the driver who set the fastest lap speed in race No.933, where does he come from?",
        "reference_query": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T2.\"raceId\" = 933 AND T2.\"fastestLapTime\" IS NOT NULL ORDER BY T2.\"fastestLapSpeed\" DESC LIMIT 1",
        "normalized_reference_query": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T2.\"raceId\" = 933 AND T2.\"fastestLapTime\" IS NOT NULL ORDER BY T2.\"fastestLapSpeed\" DESC LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT d.nationality\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nWHERE r.raceId = 933\nORDER BY r.fastestLapSpeed DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT d.nationality FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.raceId = 933 ORDER BY r.fastestLapSpeed DESC LIMIT 1;",
        "output_error": "column r.driverid does not exist\nLINE 1: ...CT d.nationality FROM results r JOIN drivers d ON r.driverId...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"r.driverId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Where is Malaysian Grand Prix held? Give the location coordinates.",
        "reference_query": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.\"circuitId\" = T1.\"circuitId\" WHERE T2.name = 'Malaysian Grand Prix'",
        "normalized_reference_query": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.\"circuitId\" = T1.\"circuitId\" WHERE T2.name = 'Malaysian Grand Prix'",
        "reference_error": null,
        "output_query": "SELECT c.location, c.lat, c.lng \nFROM public.circuits c\nJOIN public.races r ON c.circuitId = r.\"circuitId\"\nWHERE r.name = 'Malaysian Grand Prix';",
        "normalized_output_query": "SELECT c.location, c.lat, c.lng FROM public.circuits c JOIN public.races r ON c.circuitId = r.\"circuitId\" WHERE r.name = 'Malaysian Grand Prix';",
        "output_error": "column c.circuitid does not exist\nLINE 1: ...lng FROM public.circuits c JOIN public.races r ON c.circuitI...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"c.circuitId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "For the constructor which got the highest point in the race No. 9 , what is its introduction website?",
        "reference_query": "SELECT T2.url FROM \"constructorResults\" AS T1 INNER JOIN constructors AS T2 ON T2.\"constructorId\" = T1.\"constructorId\" WHERE T1.\"raceId\" = 9 ORDER BY T1.points DESC LIMIT 1",
        "normalized_reference_query": "SELECT T2.url FROM \"constructorResults\" AS T1 INNER JOIN constructors AS T2 ON T2.\"constructorId\" = T1.\"constructorId\" WHERE T1.\"raceId\" = 9 ORDER BY T1.points DESC LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT c.url \nFROM public.\"constructorResults\" cr\nJOIN public.constructors c ON cr.constructorId = c.constructorId\nWHERE cr.raceId = 9\nORDER BY cr.points DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT c.url FROM public.\"constructorResults\" cr JOIN public.constructors c ON cr.constructorId = c.constructorId WHERE cr.raceId = 9 ORDER BY cr.points DESC LIMIT 1;",
        "output_error": "column cr.constructorid does not exist\nLINE 1: ...structorResults\" cr JOIN public.constructors c ON cr.constru...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"cr.constructorId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What's Lucas di Grassi's Q1 result in the race No. 345?",
        "reference_query": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T1.\"raceId\" = 345 AND T2.forename = 'Lucas' AND T2.surname = 'di Grassi'",
        "normalized_reference_query": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T1.\"raceId\" = 345 AND T2.forename = 'Lucas' AND T2.surname = 'di Grassi'",
        "reference_error": null,
        "output_query": "SELECT q1 \nFROM public.qualifying \nWHERE \"driverId\" = (SELECT DISTINCT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driver",
        "normalized_output_query": "SELECT q1 FROM public.qualifying WHERE \"driverId\" = ( SELECT DISTINCT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driver",
        "output_error": "unterminated quoted identifier at or near \"\"driver\"\nLINE 1: ...\" = ( SELECT \"driverId\" FROM public.qualifying WHERE \"driver\n                                                                ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "For the driver who had the Q2 time as 0:01:15 in race No. 347, where is he from?",
        "reference_query": "SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T1.\"raceId\" = 347 AND T1.q2 LIKE '1:15%'",
        "normalized_reference_query": "SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T1.\"raceId\" = 347 AND T1.q2 LIKE '1:15%'",
        "reference_error": null,
        "output_query": "SELECT d.nationality \nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.q2 = '0:01:15' AND q.raceId = 347;",
        "normalized_output_query": "SELECT d.nationality FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.q2 = '0:01:15' AND q.raceId = 347;",
        "output_error": "column q.driverid does not exist\nLINE 1: ...d.nationality FROM qualifying q JOIN drivers d ON q.driverId...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"q.driverId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",
        "reference_query": "SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T1.\"raceId\" = 45 AND T1.q3 LIKE '1:33%'",
        "normalized_reference_query": "SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T1.\"raceId\" = 45 AND T1.q3 LIKE '1:33%'",
        "reference_error": null,
        "output_query": "SELECT d.code\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 45 AND q.q3 = '0:01:33';",
        "normalized_output_query": "SELECT d.code FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.raceId = 45 AND q.q3 = '0:01:33';",
        "output_error": "column q.driverid does not exist\nLINE 1: SELECT d.code FROM qualifying q JOIN drivers d ON q.driverId...\n                                                          ^\nHINT:  Perhaps you meant to reference the column \"q.driverId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the actual finish time for Bruce McLaren in the race No.743?",
        "reference_query": "SELECT T2.\"time\" FROM drivers AS T1 INNER JOIN results AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T2.\"raceId\" = 743 AND T1.forename = 'Bruce' AND T1.surname = 'McLaren'",
        "normalized_reference_query": "SELECT T2.\"time\" FROM drivers AS T1 INNER JOIN results AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T2.\"raceId\" = 743 AND T1.forename = 'Bruce' AND T1.surname = 'McLaren'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because it does not contain any information about Bruce McLaren or any driver names associated with driver IDs.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because it does NOT contain ANY information about Bruce McLaren OR ANY driver NAMES associated WITH driver IDs.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Who finished second in the San Marino Grand Prix in 2006?",
        "reference_query": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.\"raceId\" = T1.\"raceId\" INNER JOIN drivers AS T3 ON T3.\"driverId\" = T2.\"driverId\" WHERE T1.year = 2006 AND T1.name = 'San Marino Grand Prix' AND T2.\"position\" = 2",
        "normalized_reference_query": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.\"raceId\" = T1.\"raceId\" INNER JOIN drivers AS T3 ON T3.\"driverId\" = T2.\"driverId\" WHERE T1.year = 2006 AND T1.name = 'San Marino Grand Prix' AND T2.\"position\" = 2",
        "reference_error": null,
        "output_query": "SELECT d.forename, d.surname\nFROM results r\nJOIN races ra ON r.raceId = ra.raceId\nJOIN drivers d ON r.driverId = d.driverId\nWHERE ra.year = 2006 AND ra.name = 'San Marino Grand Prix' AND r.positionOrder = 2;",
        "normalized_output_query": "SELECT d.forename, d.surname FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN drivers d ON r.driverId = d.driverId WHERE ra.year = 2006 AND ra.name = 'San Marino Grand Prix' AND r.positionOrder = 2;",
        "output_error": "column r.raceid does not exist\nLINE 1: ...rename, d.surname FROM results r JOIN races ra ON r.raceId =...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"r.raceId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Show me the season page of year when the race No. 901 took place.",
        "reference_query": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.\"raceId\" = 901",
        "normalized_reference_query": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.\"raceId\" = 901",
        "reference_error": null,
        "output_query": "SELECT s.*\nFROM races r\nJOIN seasons s ON r.year = s.year\nWHERE r.raceId = 901;",
        "normalized_output_query": "SELECT s.* FROM races r JOIN seasons s ON r.year = s.year WHERE r.raceId = 901;",
        "output_error": "column r.raceid does not exist\nLINE 1: ...M races r JOIN seasons s ON r.year = s.year WHERE r.raceId =...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"r.raceId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "For the race happened in 2015/11/29, how many drivers did not finish the game?",
        "reference_query": "SELECT COUNT(T2.\"driverId\") FROM races AS T1 INNER JOIN results AS T2 ON T2.\"raceId\" = T1.\"raceId\" WHERE T1.date = '2015-11-29' AND T2.\"time\" IS NULL",
        "normalized_reference_query": "SELECT COUNT(T2.\"driverId\") FROM races AS T1 INNER JOIN results AS T2 ON T2.\"raceId\" = T1.\"raceId\" WHERE T1.date = '2015-11-29' AND T2.\"time\" IS NULL",
        "reference_sample_result": [
            [
                9
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(DISTINCT d.\"driverId\") AS non_finishers\nFROM public.results r\nJOIN public.races ra ON r.\"raceId\" = ra.\"raceId\"\nJOIN public.drivers d ON r.\"driverId\" = d.\"driverId\"\nWHERE ra.\"date\" = '2015-11-29' AND r.\"statusId\" != 1;",
        "normalized_output_query": "SELECT COUNT(DISTINCT d.\"driverId\") AS non_finishers FROM public.results r JOIN public.races ra ON r.\"raceId\" = ra.\"raceId\" JOIN public.drivers d ON r.\"driverId\" = d.\"driverId\" WHERE ra.\"date\" = '2015-11-29' AND r.\"statusId\" != 1;",
        "output_sample_result": [
            [
                9
            ]
        ],
        "output_column_names": [
            "non_finishers"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.35356200527704484,
        "bleu_similarity_score": 2.067398923401408e-78,
        "execution_accuracy": false
    },
    {
        "question": "For all the drivers who finished the game in race No. 872, who is the youngest?",
        "reference_query": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T2.\"raceId\" = 872 AND T2.\"time\" IS NOT NULL ORDER BY T1.dob DESC LIMIT 1",
        "normalized_reference_query": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T2.\"raceId\" = 872 AND T2.\"time\" IS NOT NULL ORDER BY T1.dob DESC LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT d.forename, d.surname, d.dob\nFROM public.results r\nJOIN public.drivers d ON r.driverId = d.driverId\nWHERE r.raceId = 872\nORDER BY d.dob DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT d.forename, d.surname, d.dob FROM public.results r JOIN public.drivers d ON r.driverId = d.driverId WHERE r.raceId = 872 ORDER BY d.dob DESC LIMIT 1;",
        "output_error": "column r.driverid does not exist\nLINE 1: ...ob FROM public.results r JOIN public.drivers d ON r.driverId...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"r.driverId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Who was the driver that got the best lap time in the race No. 348? Give his full name.",
        "reference_query": "SELECT T2.forename, T2.surname FROM \"lapTimes\" AS T1 INNER JOIN drivers AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T1.\"raceId\" = 348 ORDER BY T1.\"time\" ASC LIMIT 1",
        "normalized_reference_query": "SELECT T2.forename, T2.surname FROM \"lapTimes\" AS T1 INNER JOIN drivers AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T1.\"raceId\" = 348 ORDER BY T1.\"time\" ASC LIMIT 1",
        "reference_sample_result": [
            [
                "Sebastian",
                "Vettel"
            ]
        ],
        "reference_column_names": [
            "forename",
            "surname"
        ],
        "reference_row_count": 1,
        "reference_column_count": 2,
        "output_query": "SELECT d.forename, d.surname\nFROM public.\"lapTimes\" lt\nJOIN public.drivers d ON lt.\"driverId\" = d.\"driverId\"\nWHERE lt.\"raceId\" = 348\nORDER BY lt.milliseconds ASC\nLIMIT 1;",
        "normalized_output_query": "SELECT d.forename, d.surname FROM public.\"lapTimes\" lt JOIN public.drivers d ON lt.\"driverId\" = d.\"driverId\" WHERE lt.\"raceId\" = 348 ORDER BY lt.milliseconds ASC LIMIT 1;",
        "output_sample_result": [
            [
                "Sebastian",
                "Vettel"
            ]
        ],
        "output_column_names": [
            "forename",
            "surname"
        ],
        "output_row_count": 1,
        "output_column_count": 2,
        "sequence_similarity_score": 0.7940298507462686,
        "bleu_similarity_score": 0.12795897427903688,
        "execution_accuracy": false
    },
    {
        "question": "For the driver who set the fastest lap speed, what is his nationality?",
        "reference_query": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.\"driverId\" = T1.\"driverId\" ORDER BY T2.\"fastestLapSpeed\" DESC LIMIT 1",
        "normalized_reference_query": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.\"driverId\" = T1.\"driverId\" ORDER BY T2.\"fastestLapSpeed\" DESC LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT d.nationality\nFROM public.results r\nJOIN public.drivers d ON r.driverId = d.driverId\nWHERE r.fastestLapSpeed = (\n    SELECT MAX(CAST(fastestLapSpeed AS FLOAT))\n    FROM public.results\n)\nLIMIT 1;",
        "normalized_output_query": "SELECT d.nationality FROM public.results r JOIN public.drivers d ON r.driverId = d.driverId WHERE r.fastestLapSpeed = (SELECT MAX(CAST(fastestLapSpeed AS FLOAT)) FROM public.results) LIMIT 1;",
        "output_error": "column r.driverid does not exist\nLINE 1: ...ty FROM public.results r JOIN public.drivers d ON r.driverId...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"r.driverId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?",
        "reference_query": "SELECT (SUM(CASE WHEN T2.\"raceId\" = '853' THEN CAST(T2.\"fastestLapSpeed\" AS DOUBLE PRECISION) ELSE 0::DOUBLE PRECISION END) - SUM(CASE WHEN T2.\"raceId\" = '854' THEN CAST(T2.\"fastestLapSpeed\" AS DOUBLE PRECISION) ELSE 0::DOUBLE PRECISION END)) * 100 / SUM(CASE WHEN T2.\"raceId\" = '853' THEN CAST(T2.\"fastestLapSpeed\" AS DOUBLE PRECISION) ELSE 0::DOUBLE PRECISION END) AS percentage_difference FROM drivers AS T1 INNER JOIN results AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta';",
        "normalized_reference_query": "SELECT (SUM(CASE WHEN T2.\"raceId\" = '853' THEN CAST(T2.\"fastestLapSpeed\" AS DOUBLE PRECISION) ELSE 0::DOUBLE PRECISION END) - SUM(CASE WHEN T2.\"raceId\" = '854' THEN CAST(T2.\"fastestLapSpeed\" AS DOUBLE PRECISION) ELSE 0::DOUBLE PRECISION END)) * 100 / SUM(CASE WHEN T2.\"raceId\" = '853' THEN CAST(T2.\"fastestLapSpeed\" AS DOUBLE PRECISION) ELSE 0::DOUBLE PRECISION END) AS percentage_difference FROM drivers AS T1 INNER JOIN results AS T2 ON T2.\"driverId\" = T1.\"driverId\" WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta';",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query. The context does not provide information to directly link Paul di Resta's driverId or any specific details about the fastest lap speed for his races. Additionally, the context does not specify which columns or tables contain information about the fastest lap speed necessary to calculate the percentage difference.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query. The context does NOT provide information TO directly LINK Paul di Resta's driverId OR ANY SPECIFIC details about the fastest lap speed FOR his races. Additionally, the context does NOT specify which columns OR TABLES contain information about the fastest lap speed necessary TO calculate the percentage difference.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "For the drivers who took part in the race in 1983/7/16, what's their race completion rate?",
        "reference_query": "SELECT CAST(COUNT(CASE WHEN T2.\"time\" IS NOT NULL THEN T2.\"driverId\" END) AS DOUBLE PRECISION) * 100 / COUNT(T2.\"driverId\") FROM races AS T1 INNER JOIN results AS T2 ON T2.\"raceId\" = T1.\"raceId\" WHERE T1.date = '1983-07-16'",
        "normalized_reference_query": "SELECT CAST(COUNT(CASE WHEN T2.\"time\" IS NOT NULL THEN T2.\"driverId\" END) AS DOUBLE PRECISION) * 100 / COUNT(T2.\"driverId\") FROM races AS T1 INNER JOIN results AS T2 ON T2.\"raceId\" = T1.\"raceId\" WHERE T1.date = '1983-07-16'",
        "reference_error": null,
        "output_query": "SELECT d.driverId, d.forename, d.surname, \n       COUNT(CASE WHEN r.positionText = 'Finished' THEN 1 END)::FLOAT / COUNT(*) AS completion_rate\nFROM races ra\nJOIN results r ON ra.raceId = r.raceId\nJOIN drivers d ON r.driverId = d.driverId\nWHERE ra.date = '1983-07-16'\nGROUP BY d.driverId, d.forename, d.surname;",
        "normalized_output_query": "SELECT d.driverId, d.forename, d.surname, COUNT(CASE WHEN r.positionText = 'Finished' THEN 1 END)::FLOAT / COUNT(*) AS completion_rate FROM races ra JOIN results r ON ra.raceId = r.raceId JOIN drivers d ON r.driverId = d.driverId WHERE ra.date = '1983-07-16' GROUP BY d.driverId, d.forename, d.surname;",
        "output_error": "column ra.raceid does not exist\nLINE 1: ...S completion_rate FROM races ra JOIN results r ON ra.raceId ...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"ra.raceId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Which year was the first Singapore Grand Prix?",
        "reference_query": "SELECT year FROM races WHERE name = 'Singapore Grand Prix' ORDER BY year ASC LIMIT 1",
        "normalized_reference_query": "SELECT YEAR FROM races WHERE name = 'Singapore Grand Prix' ORDER BY YEAR ASC LIMIT 1",
        "reference_sample_result": [
            [
                2008
            ]
        ],
        "reference_column_names": [
            "year"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT MIN(year) AS first_singapore_gp_year\nFROM races\nWHERE name ILIKE '%Singapore Grand Prix%';",
        "normalized_output_query": "SELECT MIN(YEAR) AS first_singapore_gp_year FROM races WHERE name ILIKE '%Singapore Grand Prix%';",
        "output_sample_result": [
            [
                2008
            ]
        ],
        "output_column_names": [
            "first_singapore_gp_year"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6298342541436464,
        "bleu_similarity_score": 0.16811508624309293,
        "execution_accuracy": false
    },
    {
        "question": "How many races were there in 2005? Name all the races in descending order.",
        "reference_query": "SELECT name FROM races WHERE year = 2005 ORDER BY name DESC",
        "normalized_reference_query": "SELECT name FROM races WHERE YEAR = 2005 ORDER BY name DESC",
        "reference_sample_result": [
            [
                "United States Grand Prix"
            ],
            [
                "Turkish Grand Prix"
            ],
            [
                "Spanish Grand Prix"
            ],
            [
                "San Marino Grand Prix"
            ],
            [
                "Monaco Grand Prix"
            ]
        ],
        "reference_column_names": [
            "name"
        ],
        "reference_row_count": 19,
        "reference_column_count": 1,
        "output_query": "SELECT name \nFROM public.races \nWHERE year = 2005 \nORDER BY name DESC;",
        "normalized_output_query": "SELECT name FROM public.races WHERE YEAR = 2005 ORDER BY name DESC;",
        "output_sample_result": [
            [
                "United States Grand Prix"
            ],
            [
                "Turkish Grand Prix"
            ],
            [
                "Spanish Grand Prix"
            ],
            [
                "San Marino Grand Prix"
            ],
            [
                "Monaco Grand Prix"
            ]
        ],
        "output_column_names": [
            "name"
        ],
        "output_row_count": 19,
        "output_column_count": 1,
        "sequence_similarity_score": 0.9365079365079365,
        "bleu_similarity_score": 0.6340466277046861,
        "execution_accuracy": false
    },
    {
        "question": "List the names of all races that occurred in the earliest recorded year and month.",
        "reference_query": "SELECT name FROM races WHERE EXTRACT(YEAR FROM date) = ( SELECT EXTRACT(YEAR FROM date) FROM races ORDER BY date ASC LIMIT 1 ) AND EXTRACT(MONTH FROM date) = ( SELECT EXTRACT(MONTH FROM date) FROM races ORDER BY date ASC LIMIT 1 )",
        "normalized_reference_query": "SELECT name FROM races WHERE EXTRACT(YEAR FROM date) = (SELECT EXTRACT(YEAR FROM date) FROM races ORDER BY date ASC LIMIT 1) AND EXTRACT(MONTH FROM date) = (SELECT EXTRACT(MONTH FROM date) FROM races ORDER BY date ASC LIMIT 1)",
        "reference_sample_result": [
            [
                "British Grand Prix"
            ],
            [
                "Monaco Grand Prix"
            ],
            [
                "Indianapolis 500"
            ]
        ],
        "reference_column_names": [
            "name"
        ],
        "reference_row_count": 3,
        "reference_column_count": 1,
        "output_query": "WITH earliest_date AS (\n    SELECT MIN(date) AS min_date\n    FROM public.races\n),\nearliest_races AS (\n    SELECT name\n    FROM public.races\n    WHERE date = (SELECT min_date FROM earliest_date)\n)\nSELECT name\nFROM earliest_races;",
        "normalized_output_query": "WITH earliest_date AS (SELECT MIN(date) AS min_date FROM public.races), earliest_races AS (SELECT name FROM public.races WHERE date = (SELECT min_date FROM earliest_date)) SELECT name FROM earliest_races;",
        "output_sample_result": [
            [
                "British Grand Prix"
            ]
        ],
        "output_column_names": [
            "name"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.10697674418604651,
        "bleu_similarity_score": 1.6509724880482893e-78,
        "execution_accuracy": false
    },
    {
        "question": "State the name and date of the last round of race in year 1999.",
        "reference_query": "SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1",
        "normalized_reference_query": "SELECT name, date FROM races WHERE YEAR = 1999 ORDER BY round DESC LIMIT 1",
        "reference_sample_result": [
            [
                "Japanese Grand Prix",
                "1999-10-31"
            ]
        ],
        "reference_column_names": [
            "name",
            "date"
        ],
        "reference_row_count": 1,
        "reference_column_count": 2,
        "output_query": "SELECT name, date\nFROM public.races\nWHERE year = 1999\nORDER BY round DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT name, date FROM public.races WHERE YEAR = 1999 ORDER BY round DESC LIMIT 1;",
        "output_sample_result": [
            [
                "Japanese Grand Prix",
                "1999-10-31"
            ]
        ],
        "output_column_names": [
            "name",
            "date"
        ],
        "output_row_count": 1,
        "output_column_count": 2,
        "sequence_similarity_score": 0.9487179487179487,
        "bleu_similarity_score": 0.7241577342575828,
        "execution_accuracy": false
    },
    {
        "question": "Which year has the most number of races?",
        "reference_query": "SELECT year FROM races GROUP BY year ORDER BY COUNT(round) DESC LIMIT 1",
        "normalized_reference_query": "SELECT YEAR FROM races GROUP BY YEAR ORDER BY COUNT(round) DESC LIMIT 1",
        "reference_sample_result": [
            [
                2016
            ]
        ],
        "reference_column_names": [
            "year"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT year, COUNT(*) AS number_of_races\nFROM public.races\nGROUP BY year\nORDER BY number_of_races DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT YEAR, COUNT(*) AS number_of_races FROM public.races GROUP BY YEAR ORDER BY number_of_races DESC LIMIT 1;",
        "output_sample_result": [
            [
                2016,
                21
            ]
        ],
        "output_column_names": [
            "year",
            "number_of_races"
        ],
        "output_row_count": 1,
        "output_column_count": 2,
        "sequence_similarity_score": 0.6703296703296703,
        "bleu_similarity_score": 0.2803950119994003,
        "execution_accuracy": false
    },
    {
        "question": "Name the races in year 2017 that are not hosted in year 2000.",
        "reference_query": "SELECT name FROM races WHERE year = 2017 AND name NOT IN ( SELECT name FROM races WHERE year = 2000 )",
        "normalized_reference_query": "SELECT name FROM races WHERE YEAR = 2017 AND name NOT IN (SELECT name FROM races WHERE YEAR = 2000)",
        "reference_sample_result": [
            [
                "Chinese Grand Prix"
            ],
            [
                "Bahrain Grand Prix"
            ],
            [
                "Russian Grand Prix"
            ],
            [
                "Azerbaijan Grand Prix"
            ],
            [
                "Singapore Grand Prix"
            ]
        ],
        "reference_column_names": [
            "name"
        ],
        "reference_row_count": 7,
        "reference_column_count": 1,
        "output_query": "SELECT DISTINCT r1.name \nFROM public.races r1\nWHERE r1.year = 2017\nAND r1.name NOT IN (\n    SELECT r2.name \n    FROM public.races r2 \n    WHERE r2.year = 2000\n);",
        "normalized_output_query": "SELECT DISTINCT r1.name FROM public.races r1 WHERE r1.year = 2017 AND r1.name NOT IN (SELECT r2.name FROM public.races r2 WHERE r2.year = 2000);",
        "output_sample_result": [
            [
                "Abu Dhabi Grand Prix"
            ],
            [
                "Azerbaijan Grand Prix"
            ],
            [
                "Bahrain Grand Prix"
            ],
            [
                "Chinese Grand Prix"
            ],
            [
                "Mexican Grand Prix"
            ]
        ],
        "output_column_names": [
            "name"
        ],
        "output_row_count": 7,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7489711934156379,
        "bleu_similarity_score": 3.765402990765476e-78,
        "execution_accuracy": false
    },
    {
        "question": "In which country was the first European Grand Prix hosted? Name the circuit and location.",
        "reference_query": "SELECT T1.country, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.\"circuitId\" = T1.\"circuitId\" WHERE T2.name = 'European Grand Prix' ORDER BY T2.year ASC LIMIT 1",
        "normalized_reference_query": "SELECT T1.country, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.\"circuitId\" = T1.\"circuitId\" WHERE T2.name = 'European Grand Prix' ORDER BY T2.year ASC LIMIT 1",
        "reference_sample_result": [
            [
                "UK",
                "Kent"
            ]
        ],
        "reference_column_names": [
            "country",
            "location"
        ],
        "reference_row_count": 1,
        "reference_column_count": 2,
        "output_query": "SELECT c.country, c.name AS circuit_name, c.location\nFROM races r\nJOIN circuits c ON r.\"circuitId\" = c.\"circuitId\"\nWHERE r.name = 'European Grand Prix'\nORDER BY r.year, r.round\nLIMIT 1;",
        "normalized_output_query": "SELECT c.country, c.name AS circuit_name, c.location FROM races r JOIN circuits c ON r.\"circuitId\" = c.\"circuitId\" WHERE r.name = 'European Grand Prix' ORDER BY r.year, r.round LIMIT 1;",
        "output_sample_result": [
            [
                "UK",
                "Brands Hatch",
                "Kent"
            ]
        ],
        "output_column_names": [
            "country",
            "circuit_name",
            "location"
        ],
        "output_row_count": 1,
        "output_column_count": 3,
        "sequence_similarity_score": 0.7388888888888889,
        "bleu_similarity_score": 0.2102369368326755,
        "execution_accuracy": false
    },
    {
        "question": "When was the last f1 season whereby Brands Hatch hosted the British Grand Prix?",
        "reference_query": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.\"circuitId\" = T1.\"circuitId\" WHERE T1.name = 'Brands Hatch' AND T2.name = 'British Grand Prix' ORDER BY T2.year DESC LIMIT 1",
        "normalized_reference_query": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.\"circuitId\" = T1.\"circuitId\" WHERE T1.name = 'Brands Hatch' AND T2.name = 'British Grand Prix' ORDER BY T2.year DESC LIMIT 1",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information about the circuits, including circuit names like \"Brands Hatch,\" in the given tables.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information about the circuits, INCLUDING circuit NAMES like \"Brands Hatch,\" IN the given tables.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many seasons has Silverstone Circuit hosted the United Kindom grand prix?",
        "reference_query": "SELECT COUNT(T2.\"circuitId\") FROM circuits AS T1 INNER JOIN races AS T2 ON T2.\"circuitId\" = T1.\"circuitId\" WHERE T1.name = 'Silverstone Circuit' AND T2.name = 'British Grand Prix'",
        "normalized_reference_query": "SELECT COUNT(T2.\"circuitId\") FROM circuits AS T1 INNER JOIN races AS T2 ON T2.\"circuitId\" = T1.\"circuitId\" WHERE T1.name = 'Silverstone Circuit' AND T2.name = 'British Grand Prix'",
        "reference_sample_result": [
            [
                51
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(DISTINCT r.year) AS number_of_seasons\nFROM races r\nJOIN circuits c ON r.\"circuitId\" = c.\"circuitId\"\nWHERE c.name = 'Silverstone Circuit' AND r.name ILIKE '%United Kingdom Grand Prix%';",
        "normalized_output_query": "SELECT COUNT(DISTINCT r.year) AS number_of_seasons FROM races r JOIN circuits c ON r.\"circuitId\" = c.\"circuitId\" WHERE c.name = 'Silverstone Circuit' AND r.name ILIKE '%United Kingdom Grand Prix%';",
        "output_sample_result": [
            [
                0
            ]
        ],
        "output_column_names": [
            "number_of_seasons"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6808510638297872,
        "bleu_similarity_score": 0.11883591949521011,
        "execution_accuracy": false
    },
    {
        "question": "State the driver with the most points scored. Find his full name with that points.",
        "reference_query": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN \"driverStandings\" AS T2 ON T2.\"raceId\" = T1.\"raceId\" INNER JOIN drivers AS T3 ON T3.\"driverId\" = T2.\"driverId\" ORDER BY T2.points DESC LIMIT 1",
        "normalized_reference_query": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN \"driverStandings\" AS T2 ON T2.\"raceId\" = T1.\"raceId\" INNER JOIN drivers AS T3 ON T3.\"driverId\" = T2.\"driverId\" ORDER BY T2.points DESC LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT d.forename, d.surname, MAX(ds.points) as max_points\nFROM public.\"driverStandings\" ds\nJOIN public.drivers d ON ds.driverId = d.driverId\nGROUP BY d.forename, d.surname\nORDER BY max_points DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT d.forename, d.surname, MAX(ds.points) AS max_points FROM public.\"driverStandings\" ds JOIN public.drivers d ON ds.driverId = d.driverId GROUP BY d.forename, d.surname ORDER BY max_points DESC LIMIT 1;",
        "output_error": "column ds.driverid does not exist\nLINE 1: ...lic.\"driverStandings\" ds JOIN public.drivers d ON ds.driverI...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"ds.driverId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Name the top 3 drivers and the points they scored in the 2017 Chinese Grand Prix.",
        "reference_query": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN \"driverStandings\" AS T2 ON T2.\"raceId\" = T1.\"raceId\" INNER JOIN drivers AS T3 ON T3.\"driverId\" = T2.\"driverId\" WHERE T1.name = 'Chinese Grand Prix' AND T1.year = 2017 ORDER BY T2.points DESC LIMIT 3",
        "normalized_reference_query": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN \"driverStandings\" AS T2 ON T2.\"raceId\" = T1.\"raceId\" INNER JOIN drivers AS T3 ON T3.\"driverId\" = T2.\"driverId\" WHERE T1.name = 'Chinese Grand Prix' AND T1.year = 2017 ORDER BY T2.points DESC LIMIT 3",
        "reference_error": null,
        "output_query": "SELECT d.forename, d.surname, ds.points\nFROM driverStandings ds\nJOIN races r ON ds.raceId = r.raceId\nJOIN drivers d ON ds.driverId = d.driverId\nWHERE r.year = 2017 AND r.name = 'Chinese Grand Prix'\nORDER BY ds.points DESC\nLIMIT 3;",
        "normalized_output_query": "SELECT d.forename, d.surname, ds.points FROM driverStandings ds JOIN races r ON ds.raceId = r.raceId JOIN drivers d ON ds.driverId = d.driverId WHERE r.year = 2017 AND r.name = 'Chinese Grand Prix' ORDER BY ds.points DESC LIMIT 3;",
        "output_error": "relation \"driverstandings\" does not exist\nLINE 1: SELECT d.forename, d.surname, ds.points FROM driverStandings...\n                                                     ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the best lap time recorded? List the driver and race with such recorded lap time.",
        "reference_query": "SELECT T2.milliseconds, T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN \"lapTimes\" AS T2 ON T1.\"driverId\" = T2.\"driverId\" INNER JOIN races AS T3 ON T2.\"raceId\" = T3.\"raceId\" ORDER BY T2.milliseconds ASC LIMIT 1",
        "normalized_reference_query": "SELECT T2.milliseconds, T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN \"lapTimes\" AS T2 ON T1.\"driverId\" = T2.\"driverId\" INNER JOIN races AS T3 ON T2.\"raceId\" = T3.\"raceId\" ORDER BY T2.milliseconds ASC LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT d.forename, d.surname, r.name AS race_name, lt.time\nFROM public.\"lapTimes\" lt\nJOIN public.drivers d ON lt.driverId = d.driverId\nJOIN public.races r ON lt.raceId = r.raceId\nWHERE lt.milliseconds = (SELECT MIN(milliseconds) FROM public.\"lapTimes\");",
        "normalized_output_query": "SELECT d.forename, d.surname, r.name AS race_name, lt.time FROM public.\"lapTimes\" lt JOIN public.drivers d ON lt.driverId = d.driverId JOIN public.races r ON lt.raceId = r.raceId WHERE lt.milliseconds = (SELECT MIN(milliseconds) FROM public.\"lapTimes\");",
        "output_error": "column lt.driverid does not exist\nLINE 1: ...ROM public.\"lapTimes\" lt JOIN public.drivers d ON lt.driverI...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"lt.driverId\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix?",
        "reference_query": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN \"lapTimes\" AS T2 ON T2.\"raceId\" = T1.\"raceId\" INNER JOIN drivers AS T3 ON T3.\"driverId\" = T2.\"driverId\" WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = 2009 AND T1.name = 'Malaysian Grand Prix'",
        "normalized_reference_query": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN \"lapTimes\" AS T2 ON T2.\"raceId\" = T1.\"raceId\" INNER JOIN drivers AS T3 ON T3.\"driverId\" = T2.\"driverId\" WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = 2009 AND T1.name = 'Malaysian Grand Prix'",
        "reference_error": null,
        "output_query": "The provided context is insufficient because the tables given do not contain data about driver names or the specific race names. Therefore, it is not possible to directly generate a SQL query to get the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix without additional information linking driver names to `driverId` and race names to `raceId`.",
        "normalized_output_query": "The provided context IS insufficient because the TABLES given DO NOT contain DATA about driver NAMES OR the SPECIFIC race names. Therefore, it IS NOT possible TO directly generate a SQL query TO GET the average lap TIME FOR Lewis Hamilton IN the 2009 Malaysian Grand Prix WITHOUT additional information linking driver NAMES TO `driverId` AND race NAMES TO `raceId`.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient because the TABLES give...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Which player has the highest overall rating? Indicate the player's api id.",
        "reference_query": "SELECT player_api_id FROM \"Player_Attributes\" ORDER BY overall_rating DESC LIMIT 1",
        "normalized_reference_query": "SELECT player_api_id FROM \"Player_Attributes\" ORDER BY overall_rating DESC LIMIT 1",
        "reference_sample_result": [
            [
                31684
            ]
        ],
        "reference_column_names": [
            "player_api_id"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT player_api_id, MAX(overall_rating) AS highest_overall_rating\nFROM public.\"Player_Attributes\"\nGROUP BY player_api_id\nORDER BY highest_overall_rating DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT player_api_id, MAX(overall_rating) AS highest_overall_rating FROM public.\"Player_Attributes\" GROUP BY player_api_id ORDER BY highest_overall_rating DESC LIMIT 1;",
        "output_sample_result": [
            [
                30981,
                94
            ]
        ],
        "output_column_names": [
            "player_api_id",
            "highest_overall_rating"
        ],
        "output_row_count": 1,
        "output_column_count": 2,
        "sequence_similarity_score": 0.656,
        "bleu_similarity_score": 7.330800726128864e-155,
        "execution_accuracy": false
    },
    {
        "question": "What is the height of the tallest player? Indicate his name.",
        "reference_query": "SELECT player_name FROM \"Player\" ORDER BY height DESC LIMIT 1",
        "normalized_reference_query": "SELECT player_name FROM \"Player\" ORDER BY height DESC LIMIT 1",
        "reference_sample_result": [
            [
                "Kristof van Hout"
            ]
        ],
        "reference_column_names": [
            "player_name"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT player_name, height\nFROM public.\"Player\"\nORDER BY height DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT player_name, height FROM public.\"Player\" ORDER BY height DESC LIMIT 1;",
        "output_sample_result": [
            [
                "Kristof van Hout",
                208
            ]
        ],
        "output_column_names": [
            "player_name",
            "height"
        ],
        "output_row_count": 1,
        "output_column_count": 2,
        "sequence_similarity_score": 0.8840579710144928,
        "bleu_similarity_score": 0.38163309113713373,
        "execution_accuracy": false
    },
    {
        "question": "What is the preferred foot when attacking of the player with the lowest potential?",
        "reference_query": "SELECT preferred_foot FROM \"Player_Attributes\" WHERE potential IS NOT NULL ORDER BY potential ASC LIMIT 1",
        "normalized_reference_query": "SELECT preferred_foot FROM \"Player_Attributes\" WHERE potential IS NOT NULL ORDER BY potential ASC LIMIT 1",
        "reference_sample_result": [
            [
                "right"
            ]
        ],
        "reference_column_names": [
            "preferred_foot"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT preferred_foot \nFROM public.\"Player_Attributes\" \nORDER BY potential ASC \nLIMIT 1;",
        "normalized_output_query": "SELECT preferred_foot FROM public.\"Player_Attributes\" ORDER BY potential ASC LIMIT 1;",
        "output_sample_result": [
            [
                "right"
            ]
        ],
        "output_column_names": [
            "preferred_foot"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.8105263157894737,
        "bleu_similarity_score": 0.3186602782541458,
        "execution_accuracy": false
    },
    {
        "question": "Among the players with an overall rating between 60 to 65, how many players whose going to be in all of your attack moves instead of defensing?",
        "reference_query": "SELECT COUNT(id) FROM \"Player_Attributes\" WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low'",
        "normalized_reference_query": "SELECT COUNT(id) FROM \"Player_Attributes\" WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low'",
        "reference_sample_result": [
            [
                3594
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*) \nFROM public.\"Player_Attributes\" \nWHERE overall_rating BETWEEN 60 AND 65 \nAND preferred_foot = 'Right' \nAND attacking_work_rate = 'High' \nAND defensive_work_rate = 'Low';",
        "normalized_output_query": "SELECT COUNT(*) FROM public.\"Player_Attributes\" WHERE overall_rating BETWEEN 60 AND 65 AND preferred_foot = 'Right' AND attacking_work_rate = 'High' AND defensive_work_rate = 'Low';",
        "output_sample_result": [
            [
                0
            ]
        ],
        "output_column_names": [
            "count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7440273037542662,
        "bleu_similarity_score": 0.33118227522229554,
        "execution_accuracy": false
    },
    {
        "question": "Who are the top 5 players who perform better in crossing actions? Indicate their player id.",
        "reference_query": "SELECT id FROM \"Player_Attributes\" ORDER BY crossing DESC LIMIT 5",
        "normalized_reference_query": "SELECT id FROM \"Player_Attributes\" ORDER BY crossing DESC LIMIT 5",
        "reference_sample_result": [
            [
                984
            ],
            [
                8043
            ],
            [
                2483
            ],
            [
                484
            ],
            [
                1753
            ]
        ],
        "reference_column_names": [
            "id"
        ],
        "reference_row_count": 5,
        "reference_column_count": 1,
        "output_query": "SELECT player_api_id \nFROM public.\"Player_Attributes\" \nORDER BY crossing DESC \nLIMIT 5;",
        "normalized_output_query": "SELECT player_api_id FROM public.\"Player_Attributes\" ORDER BY crossing DESC LIMIT 5;",
        "output_sample_result": [
            [
                29904
            ],
            [
                40100
            ],
            [
                37249
            ],
            [
                31684
            ],
            [
                24159
            ]
        ],
        "output_column_names": [
            "player_api_id"
        ],
        "output_row_count": 5,
        "output_column_count": 1,
        "sequence_similarity_score": 0.87248322147651,
        "bleu_similarity_score": 0.42728700639623407,
        "execution_accuracy": false
    },
    {
        "question": "Give the name of the league had the most goals in the 2016 season?",
        "reference_query": "SELECT t2.name FROM \"Match\" AS t1 INNER JOIN \"League\" AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' GROUP BY t2.name ORDER BY SUM(t1.home_team_goal + t1.away_team_goal) DESC LIMIT 1",
        "normalized_reference_query": "SELECT t2.name FROM \"Match\" AS t1 INNER JOIN \"League\" AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' GROUP BY t2.name ORDER BY SUM(t1.home_team_goal + t1.away_team_goal) DESC LIMIT 1",
        "reference_sample_result": [
            [
                "Spain LIGA BBVA"
            ]
        ],
        "reference_column_names": [
            "name"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT l.name, SUM(m.home_team_goal + m.away_team_goal) AS total_goals\nFROM public.\"Match\" m\nJOIN public.\"League\" l ON m.league_id = l.id\nWHERE m.season = '2016'\nGROUP BY l.name\nORDER BY total_goals DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT l.name, SUM(m.home_team_goal + m.away_team_goal) AS total_goals FROM public.\"Match\" m JOIN public.\"League\" l ON m.league_id = l.id WHERE m.season = '2016' GROUP BY l.name ORDER BY total_goals DESC LIMIT 1;",
        "output_sample_result": [],
        "output_column_names": [
            "name",
            "total_goals"
        ],
        "output_row_count": 0,
        "output_column_count": 2,
        "sequence_similarity_score": 0.5208845208845209,
        "bleu_similarity_score": 7.1136997524906046e-155,
        "execution_accuracy": false
    },
    {
        "question": "Which home team had lost the fewest matches in the 2016 season?",
        "reference_query": "SELECT teamDetails.\"team_long_name\" FROM \"Match\" AS matchData INNER JOIN \"Team\" AS teamDetails ON matchData.home_team_api_id = teamDetails.team_api_id WHERE matchData.season = '2015/2016' AND matchData.home_team_goal - matchData.away_team_goal < 0 GROUP BY matchData.home_team_api_id, teamDetails.\"team_long_name\" ORDER BY COUNT(*) ASC LIMIT 1",
        "normalized_reference_query": "SELECT teamDetails.\"team_long_name\" FROM \"Match\" AS matchData INNER JOIN \"Team\" AS teamDetails ON matchData.home_team_api_id = teamDetails.team_api_id WHERE matchData.season = '2015/2016' AND matchData.home_team_goal - matchData.away_team_goal < 0 GROUP BY matchData.home_team_api_id, teamDetails.\"team_long_name\" ORDER BY COUNT(*) ASC LIMIT 1",
        "reference_sample_result": [
            [
                "Juventus"
            ]
        ],
        "reference_column_names": [
            "team_long_name"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT t.team_long_name AS home_team, COUNT(m.id) AS losses\nFROM public.\"Match\" m\nJOIN public.\"Team\" t ON m.home_team_api_id = t.team_api_id\nWHERE m.season = '2016' AND m.home_team_goal < m.away_team_goal\nGROUP BY t.team_long_name\nORDER BY losses ASC\nLIMIT 1;",
        "normalized_output_query": "SELECT t.team_long_name AS home_team, COUNT(m.id) AS losses FROM public.\"Match\" m JOIN public.\"Team\" t ON m.home_team_api_id = t.team_api_id WHERE m.season = '2016' AND m.home_team_goal < m.away_team_goal GROUP BY t.team_long_name ORDER BY losses ASC LIMIT 1;",
        "output_sample_result": [],
        "output_column_names": [
            "home_team",
            "losses"
        ],
        "output_row_count": 0,
        "output_column_count": 2,
        "sequence_similarity_score": 0.4418604651162791,
        "bleu_similarity_score": 6.6879524760245065e-155,
        "execution_accuracy": false
    },
    {
        "question": "Indicate the full names of the top 10 players with the highest number of penalties.",
        "reference_query": "SELECT t2.player_name FROM \"Player_Attributes\" AS t1 INNER JOIN \"Player\" AS t2 ON t1.id = t2.id ORDER BY t1.penalties DESC LIMIT 10",
        "normalized_reference_query": "SELECT t2.player_name FROM \"Player_Attributes\" AS t1 INNER JOIN \"Player\" AS t2 ON t1.id = t2.id ORDER BY t1.penalties DESC LIMIT 10",
        "reference_sample_result": [
            [
                "Dani Sotres"
            ],
            [
                "Felipe Morais"
            ],
            [
                "Christian Gomez"
            ],
            [
                "Nolan Mbemba"
            ],
            [
                "Declan McDaid"
            ]
        ],
        "reference_column_names": [
            "player_name"
        ],
        "reference_row_count": 10,
        "reference_column_count": 1,
        "output_query": "SELECT P.player_name, SUM(PA.penalties) AS total_penalties\nFROM public.\"Player\" P\nJOIN public.\"Player_Attributes\" PA ON P.player_api_id = PA.player_api_id\nGROUP BY P.player_name\nORDER BY total_penalties DESC\nLIMIT 10;",
        "normalized_output_query": "SELECT P.player_name, SUM(PA.penalties) AS total_penalties FROM public.\"Player\" P JOIN public.\"Player_Attributes\" PA ON P.player_api_id = PA.player_api_id GROUP BY P.player_name ORDER BY total_penalties DESC LIMIT 10;",
        "output_sample_result": [
            [
                "Danilo",
                6358
            ],
            [
                "Alex",
                6140
            ],
            [
                "Fernando",
                4764
            ],
            [
                "Douglas",
                4687
            ],
            [
                "Josue",
                4671
            ]
        ],
        "output_column_names": [
            "player_name",
            "total_penalties"
        ],
        "output_row_count": 10,
        "output_column_count": 2,
        "sequence_similarity_score": 0.46551724137931033,
        "bleu_similarity_score": 6.507961052388263e-155,
        "execution_accuracy": false
    },
    {
        "question": "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?",
        "reference_query": "SELECT t1.\"buildUpPlaySpeed\" FROM \"Team_Attributes\" AS t1 INNER JOIN \"Team\" AS t2 ON t1.team_api_id = t2.team_api_id ORDER BY t1.\"buildUpPlaySpeed\" ASC LIMIT 4",
        "normalized_reference_query": "SELECT t1.\"buildUpPlaySpeed\" FROM \"Team_Attributes\" AS t1 INNER JOIN \"Team\" AS t2 ON t1.team_api_id = t2.team_api_id ORDER BY t1.\"buildUpPlaySpeed\" ASC LIMIT 4",
        "reference_sample_result": [
            [
                20
            ],
            [
                20
            ],
            [
                20
            ],
            [
                23
            ]
        ],
        "reference_column_names": [
            "buildUpPlaySpeed"
        ],
        "reference_row_count": 4,
        "reference_column_count": 1,
        "output_query": "SELECT t.team_long_name, ta.\"buildUpPlaySpeed\"\nFROM \"Team_Attributes\" ta\nJOIN \"Team\" t ON ta.team_api_id = t.team_api_id\nORDER BY ta.\"buildUpPlaySpeed\" DESC\nLIMIT 4;",
        "normalized_output_query": "SELECT t.team_long_name, ta.\"buildUpPlaySpeed\" FROM \"Team_Attributes\" ta JOIN \"Team\" t ON ta.team_api_id = t.team_api_id ORDER BY ta.\"buildUpPlaySpeed\" DESC LIMIT 4;",
        "output_sample_result": [
            [
                "Carpi",
                80
            ],
            [
                "Udinese",
                78
            ],
            [
                "Hannover 96",
                78
            ],
            [
                "West Ham United",
                77
            ]
        ],
        "output_column_names": [
            "team_long_name",
            "buildUpPlaySpeed"
        ],
        "output_row_count": 4,
        "output_column_count": 2,
        "sequence_similarity_score": 0.8641975308641975,
        "bleu_similarity_score": 7.3068601336025094e-155,
        "execution_accuracy": false
    },
    {
        "question": "Give the name of the league had the most matches end as draw in the 2016 season?",
        "reference_query": "SELECT t2.name FROM \"Match\" AS t1 INNER JOIN \"League\" AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' AND t1.home_team_goal = t1.away_team_goal GROUP BY t2.name ORDER BY COUNT(t1.id) DESC LIMIT 1",
        "normalized_reference_query": "SELECT t2.name FROM \"Match\" AS t1 INNER JOIN \"League\" AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' AND t1.home_team_goal = t1.away_team_goal GROUP BY t2.name ORDER BY COUNT(t1.id) DESC LIMIT 1",
        "reference_sample_result": [
            [
                "France Ligue 1"
            ]
        ],
        "reference_column_names": [
            "name"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT l.name, COUNT(*) AS draw_count\nFROM public.\"Match\" m\nJOIN public.\"League\" l ON m.league_id = l.id\nWHERE m.season = '2016'\nAND m.home_team_goal = m.away_team_goal\nGROUP BY l.name\nORDER BY draw_count DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT l.name, COUNT(*) AS draw_count FROM public.\"Match\" m JOIN public.\"League\" l ON m.league_id = l.id WHERE m.season = '2016' AND m.home_team_goal = m.away_team_goal GROUP BY l.name ORDER BY draw_count DESC LIMIT 1;",
        "output_sample_result": [],
        "output_column_names": [
            "name",
            "draw_count"
        ],
        "output_row_count": 0,
        "output_column_count": 2,
        "sequence_similarity_score": 0.6447058823529411,
        "bleu_similarity_score": 6.9960774230227766e-155,
        "execution_accuracy": false
    },
    {
        "question": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.",
        "reference_query": "SELECT DISTINCT (CURRENT_DATE - T2.birthday::DATE) AS age FROM \"Player_Attributes\" AS T1 INNER JOIN \"Player\" AS T2 ON T1.player_api_id = T2.player_api_id WHERE EXTRACT(YEAR FROM T1.\"date\"::DATE) >= '2013' AND EXTRACT(YEAR FROM T1.\"date\"::DATE) <= '2015' AND T1.sprint_speed >= 97",
        "normalized_reference_query": "SELECT DISTINCT (CURRENT_DATE - T2.birthday::DATE) AS age FROM \"Player_Attributes\" AS T1 INNER JOIN \"Player\" AS T2 ON T1.player_api_id = T2.player_api_id WHERE EXTRACT(YEAR FROM T1.\"date\"::DATE) >= '2013' AND EXTRACT(YEAR FROM T1.\"date\"::DATE) <= '2015' AND T1.sprint_speed >= 97",
        "reference_sample_result": [
            [
                12471
            ]
        ],
        "reference_column_names": [
            "age"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT \n    P.player_name,\n    EXTRACT(YEAR FROM AGE(PA.date::date, P.birthday::date)) AS age\nFROM \n    public.\"Player\" P\nJOIN \n    public.\"Player_Attributes\" PA ON P.player_api_id = PA.player_api_id\nWHERE \n    PA.sprint_speed >= 97\n    AND PA.date BETWEEN '2013-01-01' AND '2015-12-31';",
        "normalized_output_query": "SELECT P.player_name, EXTRACT(YEAR FROM AGE(PA.date::date, P.birthday::date)) AS age FROM public.\"Player\" P JOIN public.\"Player_Attributes\" PA ON P.player_api_id = PA.player_api_id WHERE PA.sprint_speed >= 97 AND PA.date BETWEEN '2013-01-01' AND '2015-12-31';",
        "output_sample_result": [
            [
                "Mathis Bolly",
                "24"
            ],
            [
                "Mathis Bolly",
                "24"
            ],
            [
                "Mathis Bolly",
                "23"
            ],
            [
                "Mathis Bolly",
                "23"
            ],
            [
                "Mathis Bolly",
                "23"
            ]
        ],
        "output_column_names": [
            "player_name",
            "age"
        ],
        "output_row_count": 23,
        "output_column_count": 2,
        "sequence_similarity_score": 0.21561338289962825,
        "bleu_similarity_score": 2.1204361080843609e-78,
        "execution_accuracy": false
    },
    {
        "question": "Give the name of the league with the highest matches of all time and how many matches were played in the said league.",
        "reference_query": "SELECT t2.name, t1.max_count FROM \"League\" AS t2 JOIN (SELECT league_id, MAX(cnt) AS max_count FROM (SELECT league_id, COUNT(id) AS cnt FROM \"Match\" GROUP BY league_id) AS subquery GROUP BY league_id) AS t1 ON t1.league_id = t2.id",
        "normalized_reference_query": "SELECT t2.name, t1.max_count FROM \"League\" AS t2 JOIN (SELECT league_id, MAX(cnt) AS max_count FROM (SELECT league_id, COUNT(id) AS cnt FROM \"Match\" GROUP BY league_id) AS subquery GROUP BY league_id) AS t1 ON t1.league_id = t2.id",
        "reference_sample_result": [
            [
                "Belgium Jupiler League",
                1728
            ],
            [
                "England Premier League",
                3040
            ],
            [
                "France Ligue 1",
                3040
            ],
            [
                "Germany 1. Bundesliga",
                2448
            ],
            [
                "Italy Serie A",
                3017
            ]
        ],
        "reference_column_names": [
            "name",
            "max_count"
        ],
        "reference_row_count": 11,
        "reference_column_count": 2,
        "output_query": "SELECT l.name AS league_name, COUNT(m.id) AS total_matches\nFROM public.\"League\" l\nJOIN public.\"Match\" m ON l.id = m.league_id\nGROUP BY l.name\nORDER BY total_matches DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT l.name AS league_name, COUNT(m.id) AS total_matches FROM public.\"League\" l JOIN public.\"Match\" m ON l.id = m.league_id GROUP BY l.name ORDER BY total_matches DESC LIMIT 1;",
        "output_sample_result": [
            [
                "England Premier League",
                3040
            ]
        ],
        "output_column_names": [
            "league_name",
            "total_matches"
        ],
        "output_row_count": 1,
        "output_column_count": 2,
        "sequence_similarity_score": 0.35784313725490197,
        "bleu_similarity_score": 3.716303473458179e-155,
        "execution_accuracy": false
    },
    {
        "question": "What is the average height of players born between 1990 and 1995?",
        "reference_query": "SELECT SUM(height) / COUNT(id) FROM \"Player\" WHERE SUBSTR(birthday, 1, 4) BETWEEN '1990' AND '1995'",
        "normalized_reference_query": "SELECT SUM(height) / COUNT(id) FROM \"Player\" WHERE SUBSTR(birthday, 1, 4) BETWEEN '1990' AND '1995'",
        "reference_sample_result": [
            [
                181
            ]
        ],
        "reference_column_names": [
            "?column?"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT AVG(height) AS average_height\nFROM public.\"Player\"\nWHERE birthday BETWEEN '1990-01-01' AND '1995-12-31';",
        "normalized_output_query": "SELECT AVG(height) AS average_height FROM public.\"Player\" WHERE birthday BETWEEN '1990-01-01' AND '1995-12-31';",
        "output_sample_result": [
            [
                "181.3774933015778506"
            ]
        ],
        "output_column_names": [
            "average_height"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6952380952380952,
        "bleu_similarity_score": 1.2390051155620427e-231,
        "execution_accuracy": false
    },
    {
        "question": "List the players' api id who had the highest above average overall ratings in 2010.",
        "reference_query": "SELECT player_api_id FROM \"Player_Attributes\" WHERE SUBSTR(\"date\", 1, 4) = '2010' ORDER BY overall_rating DESC LIMIT 1",
        "normalized_reference_query": "SELECT player_api_id FROM \"Player_Attributes\" WHERE SUBSTR(\"date\", 1, 4) = '2010' ORDER BY overall_rating DESC LIMIT 1",
        "reference_error": null,
        "output_query": "WITH PlayerAverageRating AS (\n    SELECT \n        player_api_id,\n        AVG(overall_rating) AS avg_rating\n    FROM \n        public.\"Player_Attributes\"\n    WHERE \n        date LIKE '2010%'\n    GROUP BY \n        player_api_id\n),\nHighestAboveAverage AS (\n    SELECT \n        player_api_id,\n        overall_rating,\n        avg_rating\n    FROM \n        public.\"Player_Attributes\" pa\n    JOIN \n        PlayerAverageRating par ON pa.player_api_id = par.player_api_id\n    WHERE \n        pa.date LIKE '2010%' AND overall_rating > avg_rating\n)\nSELECT \n    player_api_id\nFROM \n    HighestAboveAverage\nORDER BY \n    overall_rating DESC\nLIMIT 1;",
        "normalized_output_query": "WITH PlayerAverageRating AS (SELECT player_api_id, AVG(overall_rating) AS avg_rating FROM public.\"Player_Attributes\" WHERE date LIKE '2010%' GROUP BY player_api_id), HighestAboveAverage AS (SELECT player_api_id, overall_rating, avg_rating FROM public.\"Player_Attributes\" pa JOIN PlayerAverageRating par ON pa.player_api_id = par.player_api_id WHERE pa.date LIKE '2010%' AND overall_rating > avg_rating) SELECT player_api_id FROM HighestAboveAverage ORDER BY overall_rating DESC LIMIT 1;",
        "output_error": "column reference \"player_api_id\" is ambiguous\nLINE 1: ...BY player_api_id), HighestAboveAverage AS (SELECT player_api...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.",
        "reference_query": "SELECT DISTINCT team_fifa_api_id FROM \"Team_Attributes\" WHERE \"buildUpPlaySpeed\" > 50 AND \"buildUpPlaySpeed\" < 60",
        "normalized_reference_query": "SELECT DISTINCT team_fifa_api_id FROM \"Team_Attributes\" WHERE \"buildUpPlaySpeed\" > 50 AND \"buildUpPlaySpeed\" < 60",
        "reference_sample_result": [
            [
                485
            ],
            [
                110744
            ],
            [
                477
            ],
            [
                71
            ],
            [
                1889
            ]
        ],
        "reference_column_names": [
            "team_fifa_api_id"
        ],
        "reference_row_count": 161,
        "reference_column_count": 1,
        "output_query": "SELECT DISTINCT team_fifa_api_id \nFROM public.\"Team_Attributes\"\nWHERE \"buildUpPlaySpeed\" > 50 AND \"buildUpPlaySpeed\" < 60;",
        "normalized_output_query": "SELECT DISTINCT team_fifa_api_id FROM public.\"Team_Attributes\" WHERE \"buildUpPlaySpeed\" > 50 AND \"buildUpPlaySpeed\" < 60;",
        "output_sample_result": [
            [
                485
            ],
            [
                110744
            ],
            [
                477
            ],
            [
                71
            ],
            [
                1889
            ]
        ],
        "output_column_names": [
            "team_fifa_api_id"
        ],
        "output_row_count": 161,
        "output_column_count": 1,
        "sequence_similarity_score": 0.9658119658119658,
        "bleu_similarity_score": 0.6703420896351792,
        "execution_accuracy": false
    },
    {
        "question": "List the long name of teams with above-average build-up play passing in 2012.",
        "reference_query": "SELECT DISTINCT t4.\"team_long_name\" FROM \"Team_Attributes\" AS t3 INNER JOIN \"Team\" AS t4 ON t3.team_api_id = t4.team_api_id WHERE SUBSTR(t3.\"date\", 1, 4) = '2012' AND t3.\"buildUpPlayPassing\" > ( SELECT CAST(SUM(t2.\"buildUpPlayPassing\") AS DOUBLE PRECISION) / COUNT(t1.id) FROM \"Team\" AS t1 INNER JOIN \"Team_Attributes\" AS t2 ON t1.team_api_id = t2.team_api_id WHERE EXTRACT(YEAR FROM t2.\"date\"::DATE) = '2012')",
        "normalized_reference_query": "SELECT DISTINCT t4.\"team_long_name\" FROM \"Team_Attributes\" AS t3 INNER JOIN \"Team\" AS t4 ON t3.team_api_id = t4.team_api_id WHERE SUBSTR(t3.\"date\", 1, 4) = '2012' AND t3.\"buildUpPlayPassing\" > (SELECT CAST(SUM(t2.\"buildUpPlayPassing\") AS DOUBLE PRECISION) / COUNT(t1.id) FROM \"Team\" AS t1 INNER JOIN \"Team_Attributes\" AS t2 ON t1.team_api_id = t2.team_api_id WHERE EXTRACT(YEAR FROM t2.\"date\"::DATE) = '2012')",
        "reference_sample_result": [
            [
                "1. FC Kaiserslautern"
            ],
            [
                "1. FC K\u00f6ln"
            ],
            [
                "1. FSV Mainz 05"
            ],
            [
                "Aberdeen"
            ],
            [
                "AC Ajaccio"
            ]
        ],
        "reference_column_names": [
            "team_long_name"
        ],
        "reference_row_count": 128,
        "reference_column_count": 1,
        "output_query": "SELECT t.team_long_name\nFROM public.\"Team_Attributes\" ta\nJOIN public.\"Team\" t ON ta.team_fifa_api_id = t.team_fifa_api_id\nWHERE ta.date LIKE '2012%' AND ta.\"buildUpPlayPassing\" > (\n    SELECT AVG(\"buildUpPlayPassing\")\n    FROM public.\"Team_Attributes\"\n    WHERE date LIKE '2012%'\n)",
        "normalized_output_query": "SELECT t.team_long_name FROM public.\"Team_Attributes\" ta JOIN public.\"Team\" t ON ta.team_fifa_api_id = t.team_fifa_api_id WHERE ta.date LIKE '2012%' AND ta.\"buildUpPlayPassing\" > (SELECT AVG(\"buildUpPlayPassing\") FROM public.\"Team_Attributes\" WHERE date LIKE '2012%')",
        "output_sample_result": [
            [
                "Aberdeen"
            ],
            [
                "AC Ajaccio"
            ],
            [
                "Milan"
            ],
            [
                "UD Almer\u00eda"
            ],
            [
                "Angers SCO"
            ]
        ],
        "output_column_names": [
            "team_long_name"
        ],
        "output_row_count": 131,
        "output_column_count": 1,
        "sequence_similarity_score": 0.34023668639053256,
        "bleu_similarity_score": 2.16968441532241e-155,
        "execution_accuracy": false
    },
    {
        "question": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.",
        "reference_query": "SELECT CAST(COUNT(CASE WHEN t2.preferred_foot = 'left' THEN t1.id ELSE NULL END) AS DOUBLE PRECISION) * 100 / COUNT(t1.id) percent FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) BETWEEN '1987' AND '1992'",
        "normalized_reference_query": "SELECT CAST(COUNT(CASE WHEN t2.preferred_foot = 'left' THEN t1.id ELSE NULL END) AS DOUBLE PRECISION) * 100 / COUNT(t1.id) percent FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) BETWEEN '1987' AND '1992'",
        "reference_sample_result": [
            [
                24.56690504416995
            ]
        ],
        "reference_column_names": [
            "percent"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT \n    (COUNT(CASE WHEN preferred_foot = 'left' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_left_foot\nFROM \n    public.\"Player_Attributes\" pa\nJOIN \n    public.\"Player\" p ON pa.player_api_id = p.player_api_id\nWHERE \n    SUBSTRING(p.birthday, 1, 4)::INT BETWEEN 1987 AND 1992;",
        "normalized_output_query": "SELECT (COUNT(CASE WHEN preferred_foot = 'left' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_left_foot FROM public.\"Player_Attributes\" pa JOIN public.\"Player\" p ON pa.player_api_id = p.player_api_id WHERE SUBSTRING(p.birthday, 1, 4)::INT BETWEEN 1987 AND 1992;",
        "output_sample_result": [
            [
                "24.5669050441699491"
            ]
        ],
        "output_column_names": [
            "percentage_left_foot"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.26788990825688075,
        "bleu_similarity_score": 1.7734802736163788e-78,
        "execution_accuracy": false
    },
    {
        "question": "List the top 5 leagues in ascending order of the number of goals made in all seasons combined.",
        "reference_query": "SELECT t1.name, SUM(t2.home_team_goal) + SUM(t2.away_team_goal) FROM \"League\" AS t1 INNER JOIN \"Match\" AS t2 ON t1.id = t2.league_id GROUP BY t1.name ORDER BY SUM(t2.home_team_goal) + SUM(t2.away_team_goal) ASC LIMIT 5",
        "normalized_reference_query": "SELECT t1.name, SUM(t2.home_team_goal) + SUM(t2.away_team_goal) FROM \"League\" AS t1 INNER JOIN \"Match\" AS t2 ON t1.id = t2.league_id GROUP BY t1.name ORDER BY SUM(t2.home_team_goal) + SUM(t2.away_team_goal) ASC LIMIT 5",
        "reference_sample_result": [
            [
                "Switzerland Super League",
                4166
            ],
            [
                "Poland Ekstraklasa",
                4656
            ],
            [
                "Scotland Premier League",
                4804
            ],
            [
                "Belgium Jupiler League",
                4841
            ],
            [
                "Portugal Liga ZON Sagres",
                5201
            ]
        ],
        "reference_column_names": [
            "name",
            "?column?"
        ],
        "reference_row_count": 5,
        "reference_column_count": 2,
        "output_query": "SELECT l.name AS league_name, SUM(m.home_team_goal + m.away_team_goal) AS total_goals\nFROM public.\"League\" l\nJOIN public.\"Match\" m ON l.id = m.league_id\nGROUP BY l.name\nORDER BY total_goals ASC\nLIMIT 5;",
        "normalized_output_query": "SELECT l.name AS league_name, SUM(m.home_team_goal + m.away_team_goal) AS total_goals FROM public.\"League\" l JOIN public.\"Match\" m ON l.id = m.league_id GROUP BY l.name ORDER BY total_goals ASC LIMIT 5;",
        "output_sample_result": [
            [
                "Switzerland Super League",
                4166
            ],
            [
                "Poland Ekstraklasa",
                4656
            ],
            [
                "Scotland Premier League",
                4804
            ],
            [
                "Belgium Jupiler League",
                4841
            ],
            [
                "Portugal Liga ZON Sagres",
                5201
            ]
        ],
        "output_column_names": [
            "league_name",
            "total_goals"
        ],
        "output_row_count": 5,
        "output_column_count": 2,
        "sequence_similarity_score": 0.5571428571428572,
        "bleu_similarity_score": 6.987849972638931e-155,
        "execution_accuracy": false
    },
    {
        "question": "Find the average number of long-shot done by Ahmed Samir Farag.",
        "reference_query": "SELECT CAST(SUM(t2.long_shots) AS DOUBLE PRECISION) / COUNT(t2.\"date\") FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ahmed Samir Farag'",
        "normalized_reference_query": "SELECT CAST(SUM(t2.long_shots) AS DOUBLE PRECISION) / COUNT(t2.\"date\") FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ahmed Samir Farag'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query as there is no table that contains information about a person named Ahmed Samir Farag or associates a person with long-shots.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query AS there IS NO TABLE that CONTAINS information about a person named Ahmed Samir Farag OR associates a person WITH long-shots.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.",
        "reference_query": "SELECT t1.player_name FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 GROUP BY t1.id, t1.player_name ORDER BY CAST(SUM(t2.heading_accuracy) AS DOUBLE PRECISION) / COUNT(t2.\"player_fifa_api_id\") DESC LIMIT 10",
        "normalized_reference_query": "SELECT t1.player_name FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 GROUP BY t1.id, t1.player_name ORDER BY CAST(SUM(t2.heading_accuracy) AS DOUBLE PRECISION) / COUNT(t2.\"player_fifa_api_id\") DESC LIMIT 10",
        "reference_sample_result": [
            [
                "Michael Ballack"
            ],
            [
                "Fernando Llorente"
            ],
            [
                "John Terry"
            ],
            [
                "Naldo"
            ],
            [
                "Per Mertesacker"
            ]
        ],
        "reference_column_names": [
            "player_name"
        ],
        "reference_row_count": 10,
        "reference_column_count": 1,
        "output_query": "SELECT p.player_name\nFROM public.\"Player\" p\nJOIN public.\"Player_Attributes\" pa ON p.player_api_id = pa.player_api_id\nWHERE p.height > 180\nGROUP BY p.player_name\nORDER BY AVG(pa.heading_accuracy) DESC\nLIMIT 10;",
        "normalized_output_query": "SELECT p.player_name FROM public.\"Player\" p JOIN public.\"Player_Attributes\" pa ON p.player_api_id = pa.player_api_id WHERE p.height > 180 GROUP BY p.player_name ORDER BY AVG(pa.heading_accuracy) DESC LIMIT 10;",
        "output_sample_result": [
            [
                "Michael Ballack"
            ],
            [
                "Fernando Llorente"
            ],
            [
                "John Terry"
            ],
            [
                "Per Mertesacker"
            ],
            [
                "Luca Toni"
            ]
        ],
        "output_column_names": [
            "player_name"
        ],
        "output_row_count": 10,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6337448559670782,
        "bleu_similarity_score": 0.10223757825746543,
        "execution_accuracy": false
    },
    {
        "question": "For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing.",
        "reference_query": "SELECT t3.\"team_long_name\" FROM \"Team\" AS t3 INNER JOIN \"Team_Attributes\" AS t4 ON t3.team_api_id = t4.team_api_id WHERE t4.\"buildUpPlayDribblingClass\" = 'Normal' AND t4.\"chanceCreationPassing\" < ( SELECT CAST(SUM(t2.\"chanceCreationPassing\") AS DOUBLE PRECISION) / COUNT(t1.id) FROM \"Team\" AS t1 INNER JOIN \"Team_Attributes\" AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.\"buildUpPlayDribblingClass\" = 'Normal' AND SUBSTR(t2.\"date\", 1, 4) = '2014') ORDER BY t4.\"chanceCreationPassing\" DESC",
        "normalized_reference_query": "SELECT t3.\"team_long_name\" FROM \"Team\" AS t3 INNER JOIN \"Team_Attributes\" AS t4 ON t3.team_api_id = t4.team_api_id WHERE t4.\"buildUpPlayDribblingClass\" = 'Normal' AND t4.\"chanceCreationPassing\" < (SELECT CAST(SUM(t2.\"chanceCreationPassing\") AS DOUBLE PRECISION) / COUNT(t1.id) FROM \"Team\" AS t1 INNER JOIN \"Team_Attributes\" AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.\"buildUpPlayDribblingClass\" = 'Normal' AND SUBSTR(t2.\"date\", 1, 4) = '2014') ORDER BY t4.\"chanceCreationPassing\" DESC",
        "reference_error": null,
        "output_query": "SELECT T.team_long_name, TA.chanceCreationPassing\nFROM public.\"Team_Attributes\" TA\nJOIN public.\"Team\" T ON TA.team_api_id = T.team_api_id\nWHERE TA.\"buildUpPlayDribblingClass\" = 'Normal'\n  AND TA.\"date\" LIKE '2014%'\n  AND TA.\"chanceCreationPassing\" < (\n    SELECT AVG(\"chanceCreationPassing\")\n    FROM public.\"Team_Attributes\"\n    WHERE \"date\" LIKE '2014%'\n  )\nORDER BY TA.\"chanceCreationPassing\" DESC;",
        "normalized_output_query": "SELECT T.team_long_name, TA.chanceCreationPassing FROM public.\"Team_Attributes\" TA JOIN public.\"Team\" T ON TA.team_api_id = T.team_api_id WHERE TA.\"buildUpPlayDribblingClass\" = 'Normal' AND TA.\"date\" LIKE '2014%' AND TA.\"chanceCreationPassing\" < (SELECT AVG(\"chanceCreationPassing\") FROM public.\"Team_Attributes\" WHERE \"date\" LIKE '2014%') ORDER BY TA.\"chanceCreationPassing\" DESC;",
        "output_error": "column ta.chancecreationpassing does not exist\nLINE 1: SELECT T.team_long_name, TA.chanceCreationPassing FROM publi...\n                                 ^\nHINT:  Perhaps you meant to reference the column \"ta.chanceCreationPassing\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.",
        "reference_query": "SELECT t1.name FROM \"League\" AS t1 INNER JOIN \"Match\" AS t2 ON t1.id = t2.league_id WHERE t2.season = '2009/2010' GROUP BY t1.name HAVING (CAST(SUM(t2.home_team_goal) AS DOUBLE PRECISION) / COUNT(DISTINCT t2.id)) - (CAST(SUM(t2.away_team_goal) AS DOUBLE PRECISION) / COUNT(DISTINCT t2.id)) > 0",
        "normalized_reference_query": "SELECT t1.name FROM \"League\" AS t1 INNER JOIN \"Match\" AS t2 ON t1.id = t2.league_id WHERE t2.season = '2009/2010' GROUP BY t1.name HAVING (CAST(SUM(t2.home_team_goal) AS DOUBLE PRECISION) / COUNT(DISTINCT t2.id)) - (CAST(SUM(t2.away_team_goal) AS DOUBLE PRECISION) / COUNT(DISTINCT t2.id)) > 0",
        "reference_sample_result": [
            [
                "Belgium Jupiler League"
            ],
            [
                "England Premier League"
            ],
            [
                "France Ligue 1"
            ],
            [
                "Germany 1. Bundesliga"
            ],
            [
                "Italy Serie A"
            ]
        ],
        "reference_column_names": [
            "name"
        ],
        "reference_row_count": 11,
        "reference_column_count": 1,
        "output_query": "SELECT l.name\nFROM public.\"League\" l\nJOIN public.\"Match\" m ON l.id = m.league_id\nWHERE m.season = '2009/2010'\nGROUP BY l.name\nHAVING AVG(m.home_team_goal) > AVG(m.away_team_goal);",
        "normalized_output_query": "SELECT l.name FROM public.\"League\" l JOIN public.\"Match\" m ON l.id = m.league_id WHERE m.season = '2009/2010' GROUP BY l.name HAVING AVG(m.home_team_goal) > AVG(m.away_team_goal);",
        "output_sample_result": [
            [
                "Switzerland Super League"
            ],
            [
                "Poland Ekstraklasa"
            ],
            [
                "Netherlands Eredivisie"
            ],
            [
                "Scotland Premier League"
            ],
            [
                "France Ligue 1"
            ]
        ],
        "output_column_names": [
            "name"
        ],
        "output_row_count": 11,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6271186440677966,
        "bleu_similarity_score": 0.0647862590265321,
        "execution_accuracy": false
    },
    {
        "question": "What is the short name of the football team Queens Park Rangers?",
        "reference_query": "SELECT team_short_name FROM \"Team\" WHERE \"team_long_name\" = 'Queens Park Rangers'",
        "normalized_reference_query": "SELECT team_short_name FROM \"Team\" WHERE \"team_long_name\" = 'Queens Park Rangers'",
        "reference_sample_result": [
            [
                "QPR"
            ]
        ],
        "reference_column_names": [
            "team_short_name"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT team_short_name \nFROM public.\"Team\" \nWHERE team_long_name = 'Queens Park Rangers';",
        "normalized_output_query": "SELECT team_short_name FROM public.\"Team\" WHERE team_long_name = 'Queens Park Rangers';",
        "output_sample_result": [
            [
                "QPR"
            ]
        ],
        "output_column_names": [
            "team_short_name"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.9404761904761905,
        "bleu_similarity_score": 6.44985558187996e-78,
        "execution_accuracy": false
    },
    {
        "question": "List the football players with a birthyear of 1970 and a birthmonth of October.",
        "reference_query": "SELECT player_name FROM \"Player\" WHERE SUBSTR(birthday, 1, 7) = '1970-10'",
        "normalized_reference_query": "SELECT player_name FROM \"Player\" WHERE SUBSTR(birthday, 1, 7) = '1970-10'",
        "reference_sample_result": [
            [
                "Chris Swailes"
            ],
            [
                "Dean Kiely"
            ],
            [
                "Edwin van der Sar"
            ],
            [
                "Sander Boschker"
            ]
        ],
        "reference_column_names": [
            "player_name"
        ],
        "reference_row_count": 4,
        "reference_column_count": 1,
        "output_query": "SELECT player_name\nFROM public.\"Player\"\nWHERE birthday LIKE '1970-10-%';",
        "normalized_output_query": "SELECT player_name FROM public.\"Player\" WHERE birthday LIKE '1970-10-%';",
        "output_sample_result": [
            [
                "Chris Swailes"
            ],
            [
                "Dean Kiely"
            ],
            [
                "Edwin van der Sar"
            ],
            [
                "Sander Boschker"
            ]
        ],
        "output_column_names": [
            "player_name"
        ],
        "output_row_count": 4,
        "output_column_count": 1,
        "sequence_similarity_score": 0.8,
        "bleu_similarity_score": 3.7363724810750054e-78,
        "execution_accuracy": false
    },
    {
        "question": "What is the attacking work rate of the football playerr Franco Zennaro?",
        "reference_query": "SELECT DISTINCT t2.attacking_work_rate FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'",
        "normalized_reference_query": "SELECT DISTINCT t2.attacking_work_rate FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'",
        "reference_sample_result": [
            [
                "medium"
            ]
        ],
        "reference_column_names": [
            "attacking_work_rate"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT pa.attacking_work_rate\nFROM public.\"Player\" p\nJOIN public.\"Player_Attributes\" pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Franco Zennaro';",
        "normalized_output_query": "SELECT pa.attacking_work_rate FROM public.\"Player\" p JOIN public.\"Player_Attributes\" pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Franco Zennaro';",
        "output_sample_result": [
            [
                "medium"
            ],
            [
                "medium"
            ],
            [
                "medium"
            ],
            [
                "medium"
            ],
            [
                "medium"
            ]
        ],
        "output_column_names": [
            "attacking_work_rate"
        ],
        "output_row_count": 8,
        "output_column_count": 1,
        "sequence_similarity_score": 0.831858407079646,
        "bleu_similarity_score": 4.882199810548243e-155,
        "execution_accuracy": false
    },
    {
        "question": "What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?",
        "reference_query": "SELECT DISTINCT t2.\"buildUpPlayPositioningClass\" FROM \"Team\" AS t1 INNER JOIN \"Team_Attributes\" AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.\"team_long_name\" = 'ADO Den Haag'",
        "normalized_reference_query": "SELECT DISTINCT t2.\"buildUpPlayPositioningClass\" FROM \"Team\" AS t1 INNER JOIN \"Team_Attributes\" AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.\"team_long_name\" = 'ADO Den Haag'",
        "reference_error": null,
        "output_query": "The provided context does not contain information about \"freedom of movement\" specifically related to a team or any metric that can be directly mapped to it. Therefore, it is not possible to generate a SQL query to answer the question based on the given context.",
        "normalized_output_query": "The provided context does NOT contain information about \"freedom of movement\" specifically related TO a team OR ANY metric that can be directly mapped TO it. Therefore, it IS NOT possible TO generate a SQL query TO answer the question based ON the given context.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context does NOT contain information about \"fre...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the football player Francois Affolter header's finishing rate on 18/09/2014?",
        "reference_query": "SELECT t2.heading_accuracy FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Francois Affolter' AND SUBSTR(t2.\"date\", 1, 10) = '2014-09-18'",
        "normalized_reference_query": "SELECT t2.heading_accuracy FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Francois Affolter' AND SUBSTR(t2.\"date\", 1, 10) = '2014-09-18'",
        "reference_sample_result": [
            [
                65
            ]
        ],
        "reference_column_names": [
            "heading_accuracy"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT pa.finishing \nFROM public.\"Player\" p\nJOIN public.\"Player_Attributes\" pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Francois Affolter' AND pa.date = '2014-09-18';",
        "normalized_output_query": "SELECT pa.finishing FROM public.\"Player\" p JOIN public.\"Player_Attributes\" pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Francois Affolter' AND pa.date = '2014-09-18';",
        "output_sample_result": [],
        "output_column_names": [
            "finishing"
        ],
        "output_row_count": 0,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7817258883248731,
        "bleu_similarity_score": 0.11538880792382862,
        "execution_accuracy": false
    },
    {
        "question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
        "reference_query": "SELECT t2.overall_rating FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND EXTRACT(YEAR FROM t2.date::DATE) = '2011'",
        "normalized_reference_query": "SELECT t2.overall_rating FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND EXTRACT(YEAR FROM t2.date::DATE) = '2011'",
        "reference_sample_result": [
            [
                75
            ]
        ],
        "reference_column_names": [
            "overall_rating"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT pa.overall_rating\nFROM public.\"Player\" p\nJOIN public.\"Player_Attributes\" pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Gabriel Tamas' AND pa.date LIKE '2011%';",
        "normalized_output_query": "SELECT pa.overall_rating FROM public.\"Player\" p JOIN public.\"Player_Attributes\" pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Gabriel Tamas' AND pa.date LIKE '2011%';",
        "output_sample_result": [
            [
                75
            ]
        ],
        "output_column_names": [
            "overall_rating"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7866323907455013,
        "bleu_similarity_score": 0.11267187340009674,
        "execution_accuracy": false
    },
    {
        "question": "What is the preferred foot when attacking of the youngest football player?",
        "reference_query": "SELECT t2.preferred_foot FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday DESC LIMIT 1",
        "normalized_reference_query": "SELECT t2.preferred_foot FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday DESC LIMIT 1",
        "reference_sample_result": [
            [
                "right"
            ]
        ],
        "reference_column_names": [
            "preferred_foot"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT pa.preferred_foot \nFROM public.\"Player_Attributes\" pa\nJOIN public.\"Player\" p ON pa.player_api_id = p.player_api_id\nORDER BY p.birthday DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT pa.preferred_foot FROM public.\"Player_Attributes\" pa JOIN public.\"Player\" p ON pa.player_api_id = p.player_api_id ORDER BY p.birthday DESC LIMIT 1;",
        "output_sample_result": [
            [
                "right"
            ]
        ],
        "output_column_names": [
            "preferred_foot"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7597402597402597,
        "bleu_similarity_score": 6.2183844933844994e-155,
        "execution_accuracy": false
    },
    {
        "question": "List all the football player with the highest potential score.",
        "reference_query": "SELECT DISTINCT(t1.player_name) FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.potential = (SELECT MAX(potential) FROM \"Player_Attributes\")",
        "normalized_reference_query": "SELECT DISTINCT(t1.player_name) FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.potential = (SELECT MAX(potential) FROM \"Player_Attributes\")",
        "reference_sample_result": [
            [
                "Lionel Messi"
            ]
        ],
        "reference_column_names": [
            "player_name"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT player_name\nFROM public.\"Player\" p\nJOIN public.\"Player_Attributes\" pa ON p.player_api_id = pa.player_api_id\nWHERE pa.potential = (SELECT MAX(potential) FROM public.\"Player_Attributes\");",
        "normalized_output_query": "SELECT player_name FROM public.\"Player\" p JOIN public.\"Player_Attributes\" pa ON p.player_api_id = pa.player_api_id WHERE pa.potential = (SELECT MAX(potential) FROM public.\"Player_Attributes\");",
        "output_sample_result": [
            [
                "Lionel Messi"
            ],
            [
                "Lionel Messi"
            ],
            [
                "Lionel Messi"
            ],
            [
                "Lionel Messi"
            ],
            [
                "Lionel Messi"
            ]
        ],
        "output_column_names": [
            "player_name"
        ],
        "output_row_count": 6,
        "output_column_count": 1,
        "sequence_similarity_score": 0.8329048843187661,
        "bleu_similarity_score": 0.13608687680894435,
        "execution_accuracy": false
    },
    {
        "question": "Among all the players whose weight is under 130, how many of them preferred foot in attacking is left?",
        "reference_query": "SELECT COUNT(DISTINCT t1.id) FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.weight < 130 AND t2.preferred_foot = 'left'",
        "normalized_reference_query": "SELECT COUNT(DISTINCT t1.id) FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.weight < 130 AND t2.preferred_foot = 'left'",
        "reference_sample_result": [
            [
                9
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(DISTINCT pa.player_api_id) AS left_footed_players_under_130\nFROM public.\"Player_Attributes\" pa\nJOIN public.\"Player\" p ON pa.player_api_id = p.player_api_id\nWHERE p.weight < 130 AND pa.preferred_foot = 'left';",
        "normalized_output_query": "SELECT COUNT(DISTINCT pa.player_api_id) AS left_footed_players_under_130 FROM public.\"Player_Attributes\" pa JOIN public.\"Player\" p ON pa.player_api_id = p.player_api_id WHERE p.weight < 130 AND pa.preferred_foot = 'left';",
        "output_sample_result": [
            [
                9
            ]
        ],
        "output_column_names": [
            "left_footed_players_under_130"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.31155778894472363,
        "bleu_similarity_score": 2.821219723386806e-78,
        "execution_accuracy": false
    },
    {
        "question": "List the football teams that has a chance creation passing class of Risky. Inidcate its short name only.",
        "reference_query": "SELECT DISTINCT t1.team_short_name FROM \"Team\" AS t1 INNER JOIN \"Team_Attributes\" AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.\"chanceCreationPassingClass\" = 'Risky'",
        "normalized_reference_query": "SELECT DISTINCT t1.team_short_name FROM \"Team\" AS t1 INNER JOIN \"Team_Attributes\" AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.\"chanceCreationPassingClass\" = 'Risky'",
        "reference_sample_result": [
            [
                "WHU"
            ],
            [
                "WBR"
            ],
            [
                "LOD"
            ],
            [
                "BIR"
            ],
            [
                "CAP"
            ]
        ],
        "reference_column_names": [
            "team_short_name"
        ],
        "reference_row_count": 92,
        "reference_column_count": 1,
        "output_query": "SELECT T.team_short_name\nFROM public.\"Team\" T\nJOIN public.\"Team_Attributes\" TA ON T.team_api_id = TA.team_api_id\nWHERE TA.\"chanceCreationPassingClass\" = 'Risky';",
        "normalized_output_query": "SELECT T.team_short_name FROM public.\"Team\" T JOIN public.\"Team_Attributes\" TA ON T.team_api_id = TA.team_api_id WHERE TA.\"chanceCreationPassingClass\" = 'Risky';",
        "output_sample_result": [
            [
                "ABE"
            ],
            [
                "AJA"
            ],
            [
                "AND"
            ],
            [
                "AND"
            ],
            [
                "AND"
            ]
        ],
        "output_column_names": [
            "team_short_name"
        ],
        "output_row_count": 171,
        "output_column_count": 1,
        "sequence_similarity_score": 0.8398791540785498,
        "bleu_similarity_score": 1.153929343948397e-231,
        "execution_accuracy": false
    },
    {
        "question": "What is the defensive work rate of the football player David Wilson\n?",
        "reference_query": "SELECT DISTINCT t2.defensive_work_rate FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'",
        "normalized_reference_query": "SELECT DISTINCT t2.defensive_work_rate FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information about the player \"David Wilson\" in the given tables. To retrieve the defensive work rate, we need to know the `player_api_id` or `player_fifa_api_id` of David Wilson, which would allow us to join the `Player` and `Player_Attributes` tables.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information about the player \"David Wilson\" IN the given tables. TO retrieve the defensive WORK rate, we need TO know the `player_api_id` OR `player_fifa_api_id` OF David Wilson, which would allow us TO JOIN the `Player` AND `Player_Attributes` tables.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "When is the birthday of the football player who has the highest overall rating?",
        "reference_query": "SELECT t1.birthday FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.overall_rating DESC LIMIT 1",
        "normalized_reference_query": "SELECT t1.birthday FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.overall_rating DESC LIMIT 1",
        "reference_sample_result": [
            [
                "1978-11-01 00:00:00"
            ]
        ],
        "reference_column_names": [
            "birthday"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT p.birthday\nFROM public.\"Player_Attributes\" pa\nJOIN public.\"Player\" p ON pa.player_api_id = p.player_api_id\nORDER BY pa.overall_rating DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT p.birthday FROM public.\"Player_Attributes\" pa JOIN public.\"Player\" p ON pa.player_api_id = p.player_api_id ORDER BY pa.overall_rating DESC LIMIT 1;",
        "output_sample_result": [
            [
                "1978-11-01 00:00:00"
            ]
        ],
        "output_column_names": [
            "birthday"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7597402597402597,
        "bleu_similarity_score": 6.2183844933844994e-155,
        "execution_accuracy": false
    },
    {
        "question": "What is the name of the football league in the country of Netherlands?",
        "reference_query": "SELECT t2.name FROM \"Country\" AS t1 INNER JOIN \"League\" AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Netherlands'",
        "normalized_reference_query": "SELECT t2.name FROM \"Country\" AS t1 INNER JOIN \"League\" AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Netherlands'",
        "reference_sample_result": [
            [
                "Netherlands Eredivisie"
            ]
        ],
        "reference_column_names": [
            "name"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT l.name \nFROM public.\"League\" l\nJOIN public.\"Country\" c ON l.country_id = c.id\nWHERE c.name = 'Netherlands';",
        "normalized_output_query": "SELECT l.name FROM public.\"League\" l JOIN public.\"Country\" c ON l.country_id = c.id WHERE c.name = 'Netherlands';",
        "output_sample_result": [
            [
                "Netherlands Eredivisie"
            ]
        ],
        "output_column_names": [
            "name"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6200873362445415,
        "bleu_similarity_score": 1.2283513926157894e-231,
        "execution_accuracy": false
    },
    {
        "question": "Calculate the average home team goal in the 2010/2011 season in the country of Poland.",
        "reference_query": "SELECT CAST(SUM(t2.home_team_goal) AS DOUBLE PRECISION) / COUNT(t2.id) FROM \"Country\" AS t1 INNER JOIN \"Match\" AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Poland' AND t2.season = '2010/2011'",
        "normalized_reference_query": "SELECT CAST(SUM(t2.home_team_goal) AS DOUBLE PRECISION) / COUNT(t2.id) FROM \"Country\" AS t1 INNER JOIN \"Match\" AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Poland' AND t2.season = '2010/2011'",
        "reference_sample_result": [
            [
                1.5041666666666667
            ]
        ],
        "reference_column_names": [
            "?column?"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT AVG(home_team_goal) AS average_home_team_goal\nFROM public.\"Match\" m\nJOIN public.\"League\" l ON m.league_id = l.id\nWHERE m.season = '2010/2011'\nAND l.name = 'Poland';",
        "normalized_output_query": "SELECT AVG(home_team_goal) AS average_home_team_goal FROM public.\"Match\" m JOIN public.\"League\" l ON m.league_id = l.id WHERE m.season = '2010/2011' AND l.name = 'Poland';",
        "output_sample_result": [
            [
                null
            ]
        ],
        "output_column_names": [
            "average_home_team_goal"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.4767123287671233,
        "bleu_similarity_score": 4.460832780322136e-155,
        "execution_accuracy": false
    },
    {
        "question": "Who has the highest average finishing rate between the highest and shortest football player?",
        "reference_query": "SELECT A FROM ( SELECT AVG(finishing) result, 'Max' A FROM \"Player\" AS T1 INNER JOIN \"Player_Attributes\" AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MAX(height) FROM \"Player\" ) UNION SELECT AVG(finishing) result, 'Min' A FROM \"Player\" AS T1 INNER JOIN \"Player_Attributes\" AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MIN(height) FROM \"Player\" ) ) ORDER BY result DESC LIMIT 1",
        "normalized_reference_query": "SELECT A FROM (SELECT AVG(finishing) RESULT, 'Max' A FROM \"Player\" AS T1 INNER JOIN \"Player_Attributes\" AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = (SELECT MAX(height) FROM \"Player\") UNION SELECT AVG(finishing) RESULT, 'Min' A FROM \"Player\" AS T1 INNER JOIN \"Player_Attributes\" AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = (SELECT MIN(height) FROM \"Player\")) ORDER BY RESULT DESC LIMIT 1",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query to answer this question. The context does not include instructions or data to calculate the height of each player and compare it. Additionally, it lacks details on how to link the player attributes to the player for calculating the average finishing rate based on the height.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query TO answer this question. The context does NOT INCLUDE instructions OR DATA TO calculate the height OF EACH player AND compare it. Additionally, it lacks details ON how TO LINK the player attributes TO the player FOR calculating the average finishing rate based ON the height.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Please list player names which are higher than 180.",
        "reference_query": "SELECT player_name FROM \"Player\" WHERE height > 180",
        "normalized_reference_query": "SELECT player_name FROM \"Player\" WHERE height > 180",
        "reference_sample_result": [
            [
                "Aaron Appindangoye"
            ],
            [
                "Aaron Galindo"
            ],
            [
                "Aaron Hughes"
            ],
            [
                "Aaron Hunt"
            ],
            [
                "Aaron Lennox"
            ]
        ],
        "reference_column_names": [
            "player_name"
        ],
        "reference_row_count": 5870,
        "reference_column_count": 1,
        "output_query": "SELECT player_name \nFROM public.\"Player\" \nWHERE height > 180;",
        "normalized_output_query": "SELECT player_name FROM public.\"Player\" WHERE height > 180;",
        "output_sample_result": [
            [
                "Aaron Appindangoye"
            ],
            [
                "Aaron Galindo"
            ],
            [
                "Aaron Hughes"
            ],
            [
                "Aaron Hunt"
            ],
            [
                "Aaron Lennox"
            ]
        ],
        "output_column_names": [
            "player_name"
        ],
        "output_row_count": 5870,
        "output_column_count": 1,
        "sequence_similarity_score": 0.9272727272727272,
        "bleu_similarity_score": 7.508645449069235e-78,
        "execution_accuracy": false
    },
    {
        "question": "How many players were born after 1990?",
        "reference_query": "SELECT COUNT(id) FROM \"Player\" WHERE EXTRACT(YEAR FROM birthday::DATE) > '1990'",
        "normalized_reference_query": "SELECT COUNT(id) FROM \"Player\" WHERE EXTRACT(YEAR FROM birthday::DATE) > '1990'",
        "reference_sample_result": [
            [
                3028
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*) \nFROM public.\"Player\" \nWHERE birthday > '1990-12-31';",
        "normalized_output_query": "SELECT COUNT(*) FROM public.\"Player\" WHERE birthday > '1990-12-31';",
        "output_sample_result": [
            [
                3028
            ]
        ],
        "output_column_names": [
            "count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7123287671232876,
        "bleu_similarity_score": 1.1931009847695213e-231,
        "execution_accuracy": false
    },
    {
        "question": "How many players whose first names are Adam and weigh more than 170?",
        "reference_query": "SELECT COUNT(id) FROM \"Player\" WHERE weight > 170 AND player_name LIKE 'Adam%'",
        "normalized_reference_query": "SELECT COUNT(id) FROM \"Player\" WHERE weight > 170 AND player_name LIKE 'Adam%'",
        "reference_sample_result": [
            [
                24
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*) \nFROM public.\"Player\"\nWHERE player_name LIKE 'Adam%' AND weight > 170;",
        "normalized_output_query": "SELECT COUNT(*) FROM public.\"Player\" WHERE player_name LIKE 'Adam%' AND weight > 170;",
        "output_sample_result": [
            [
                24
            ]
        ],
        "output_column_names": [
            "count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7239263803680982,
        "bleu_similarity_score": 4.618846890203085e-78,
        "execution_accuracy": false
    },
    {
        "question": "Which players had an overall rating of over 80 from 2008 to 2010? Please list player names.",
        "reference_query": "SELECT DISTINCT t1.player_name FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating > 80 AND SUBSTR(t2.\"date\", 1, 4) BETWEEN '2008' AND '2010'",
        "normalized_reference_query": "SELECT DISTINCT t1.player_name FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating > 80 AND SUBSTR(t2.\"date\", 1, 4) BETWEEN '2008' AND '2010'",
        "reference_sample_result": [
            [
                "Aaron Lennon"
            ],
            [
                "Abdulkader Keita"
            ],
            [
                "Adam Johnson"
            ],
            [
                "Adrian Mutu"
            ],
            [
                "Adriano"
            ]
        ],
        "reference_column_names": [
            "player_name"
        ],
        "reference_row_count": 409,
        "reference_column_count": 1,
        "output_query": "SELECT DISTINCT p.player_name\nFROM public.\"Player_Attributes\" pa\nJOIN public.\"Player\" p ON pa.player_api_id = p.player_api_id\nWHERE pa.overall_rating > 80\nAND pa.date BETWEEN '2008-01-01' AND '2010-12-31';",
        "normalized_output_query": "SELECT DISTINCT p.player_name FROM public.\"Player_Attributes\" pa JOIN public.\"Player\" p ON pa.player_api_id = p.player_api_id WHERE pa.overall_rating > 80 AND pa.date BETWEEN '2008-01-01' AND '2010-12-31';",
        "output_sample_result": [
            [
                "Aaron Lennon"
            ],
            [
                "Abdulkader Keita"
            ],
            [
                "Adam Johnson"
            ],
            [
                "Adrian Mutu"
            ],
            [
                "Adriano"
            ]
        ],
        "output_column_names": [
            "player_name"
        ],
        "output_row_count": 409,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6231884057971014,
        "bleu_similarity_score": 2.3708683346752705e-78,
        "execution_accuracy": false
    },
    {
        "question": "What is Aaron Doran's potential score?",
        "reference_query": "SELECT t2.potential FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
        "normalized_reference_query": "SELECT t2.potential FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
        "reference_error": null,
        "output_query": "The provided context does not contain information about specific players like Aaron Doran. Therefore, it is not possible to generate a SQL query to find Aaron Doran's potential score. The context lacks specific data on player names and their corresponding scores.",
        "normalized_output_query": "The provided context does NOT contain information about SPECIFIC players like Aaron Doran. Therefore, it IS NOT possible TO generate a SQL query TO find Aaron Doran's potential score. The context lacks SPECIFIC DATA ON player NAMES AND their CORRESPONDING scores.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context does NOT contain information about SPEC...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "List out of players whose preferred foot is left.",
        "reference_query": "SELECT DISTINCT t1.id, t1.player_name FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.preferred_foot = 'left'",
        "normalized_reference_query": "SELECT DISTINCT t1.id, t1.player_name FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.preferred_foot = 'left'",
        "reference_sample_result": [
            [
                6472,
                "Magnus Eriksson"
            ],
            [
                7152,
                "Matt Targett"
            ],
            [
                770,
                "Andrey Voronin"
            ],
            [
                3792,
                "Gerson Magrao"
            ],
            [
                1846,
                "Claiton Dos Santos"
            ]
        ],
        "reference_column_names": [
            "id",
            "player_name"
        ],
        "reference_row_count": 3202,
        "reference_column_count": 2,
        "output_query": "SELECT player_name \nFROM public.\"Player\" p\nJOIN public.\"Player_Attributes\" pa ON p.player_api_id = pa.player_api_id\nWHERE pa.preferred_foot = 'left';",
        "normalized_output_query": "SELECT player_name FROM public.\"Player\" p JOIN public.\"Player_Attributes\" pa ON p.player_api_id = pa.player_api_id WHERE pa.preferred_foot = 'left';",
        "output_sample_result": [
            [
                "Aaron Cresswell"
            ],
            [
                "Aaron Cresswell"
            ],
            [
                "Aaron Cresswell"
            ],
            [
                "Aaron Cresswell"
            ],
            [
                "Aaron Cresswell"
            ]
        ],
        "output_column_names": [
            "player_name"
        ],
        "output_row_count": 44733,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7961783439490446,
        "bleu_similarity_score": 1.0840162992689084e-231,
        "execution_accuracy": false
    },
    {
        "question": "Please list all team names which the speed class is fast.",
        "reference_query": "SELECT DISTINCT t1.\"team_long_name\" FROM \"Team\" AS t1 INNER JOIN \"Team_Attributes\" AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.\"buildUpPlaySpeedClass\" = 'Fast'",
        "normalized_reference_query": "SELECT DISTINCT t1.\"team_long_name\" FROM \"Team\" AS t1 INNER JOIN \"Team_Attributes\" AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.\"buildUpPlaySpeedClass\" = 'Fast'",
        "reference_sample_result": [
            [
                "Bournemouth"
            ],
            [
                "Legia Warszawa"
            ],
            [
                "Wolverhampton Wanderers"
            ],
            [
                "Borussia M\u00f6nchengladbach"
            ],
            [
                "Hamilton Academical FC"
            ]
        ],
        "reference_column_names": [
            "team_long_name"
        ],
        "reference_row_count": 105,
        "reference_column_count": 1,
        "output_query": "SELECT t.team_long_name\nFROM public.\"Team\" t\nJOIN public.\"Team_Attributes\" ta ON t.team_api_id = ta.team_api_id\nWHERE ta.\"buildUpPlaySpeedClass\" = 'fast';",
        "normalized_output_query": "SELECT t.team_long_name FROM public.\"Team\" t JOIN public.\"Team_Attributes\" ta ON t.team_api_id = ta.team_api_id WHERE ta.\"buildUpPlaySpeedClass\" = 'fast';",
        "output_sample_result": [],
        "output_column_names": [
            "team_long_name"
        ],
        "output_row_count": 0,
        "output_column_count": 1,
        "sequence_similarity_score": 0.8463949843260188,
        "bleu_similarity_score": 1.153929343948397e-231,
        "execution_accuracy": false
    },
    {
        "question": "What is the passing class of CLB team?",
        "reference_query": "SELECT DISTINCT t2.\"buildUpPlayPassingClass\" FROM \"Team\" AS t1 INNER JOIN \"Team_Attributes\" AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'CLB'",
        "normalized_reference_query": "SELECT DISTINCT t2.\"buildUpPlayPassingClass\" FROM \"Team\" AS t1 INNER JOIN \"Team_Attributes\" AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'CLB'",
        "reference_sample_result": [
            [
                "Mixed"
            ]
        ],
        "reference_column_names": [
            "buildUpPlayPassingClass"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT t.team_long_name, ta.\"buildUpPlayPassingClass\"\nFROM public.\"Team\" t\nJOIN public.\"Team_Attributes\" ta ON t.team_fifa_api_id = ta.team_fifa_api_id\nWHERE t.team_short_name = 'CLB';",
        "normalized_output_query": "SELECT t.team_long_name, ta.\"buildUpPlayPassingClass\" FROM public.\"Team\" t JOIN public.\"Team_Attributes\" ta ON t.team_fifa_api_id = ta.team_fifa_api_id WHERE t.team_short_name = 'CLB';",
        "output_sample_result": [
            [
                "Club Brugge KV",
                "Mixed"
            ],
            [
                "Club Brugge KV",
                "Mixed"
            ],
            [
                "Club Brugge KV",
                "Mixed"
            ],
            [
                "Club Brugge KV",
                "Mixed"
            ],
            [
                "Club Brugge KV",
                "Mixed"
            ]
        ],
        "output_column_names": [
            "team_long_name",
            "buildUpPlayPassingClass"
        ],
        "output_row_count": 6,
        "output_column_count": 2,
        "sequence_similarity_score": 0.7965616045845272,
        "bleu_similarity_score": 1.2232927463054318e-231,
        "execution_accuracy": false
    },
    {
        "question": "Which teams have build up play passing more than 70? Please list their short names.",
        "reference_query": "SELECT DISTINCT t1.team_short_name FROM \"Team\" AS t1 INNER JOIN \"Team_Attributes\" AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.\"buildUpPlayPassing\" > 70",
        "normalized_reference_query": "SELECT DISTINCT t1.team_short_name FROM \"Team\" AS t1 INNER JOIN \"Team_Attributes\" AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.\"buildUpPlayPassing\" > 70",
        "reference_sample_result": [
            [
                "AVL"
            ],
            [
                "BIR"
            ],
            [
                "BLA"
            ],
            [
                "BOL"
            ],
            [
                "BUR"
            ]
        ],
        "reference_column_names": [
            "team_short_name"
        ],
        "reference_row_count": 16,
        "reference_column_count": 1,
        "output_query": "SELECT T.team_short_name \nFROM public.\"Team_Attributes\" TA\nJOIN public.\"Team\" T ON TA.team_api_id = T.team_api_id\nWHERE TA.\"buildUpPlayPassing\" > 70;",
        "normalized_output_query": "SELECT T.team_short_name FROM public.\"Team_Attributes\" TA JOIN public.\"Team\" T ON TA.team_api_id = T.team_api_id WHERE TA.\"buildUpPlayPassing\" > 70;",
        "output_sample_result": [
            [
                "NEW"
            ],
            [
                "WHU"
            ],
            [
                "WHU"
            ],
            [
                "AVL"
            ],
            [
                "MID"
            ]
        ],
        "output_column_names": [
            "team_short_name"
        ],
        "output_row_count": 23,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7475409836065574,
        "bleu_similarity_score": 1.153929343948397e-231,
        "execution_accuracy": false
    },
    {
        "question": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?",
        "reference_query": "SELECT CAST(SUM(t2.overall_rating) AS DOUBLE PRECISION) / COUNT(t2.id) FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND EXTRACT(YEAR FROM t2.\"date\"::DATE) >= '2010' AND EXTRACT(YEAR FROM t2.\"date\"::DATE) <= '2015'",
        "normalized_reference_query": "SELECT CAST(SUM(t2.overall_rating) AS DOUBLE PRECISION) / COUNT(t2.id) FROM \"Player\" AS t1 INNER JOIN \"Player_Attributes\" AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND EXTRACT(YEAR FROM t2.\"date\"::DATE) >= '2010' AND EXTRACT(YEAR FROM t2.\"date\"::DATE) <= '2015'",
        "reference_sample_result": [
            [
                68.85402657670379
            ]
        ],
        "reference_column_names": [
            "?column?"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT AVG(overall_rating) AS average_overall_rating\nFROM public.\"Player_Attributes\" pa\nJOIN public.\"Player\" p ON pa.player_api_id = p.player_api_id\nWHERE p.height > 170\nAND pa.date BETWEEN '2010-01-01' AND '2015-12-31';",
        "normalized_output_query": "SELECT AVG(overall_rating) AS average_overall_rating FROM public.\"Player_Attributes\" pa JOIN public.\"Player\" p ON pa.player_api_id = p.player_api_id WHERE p.height > 170 AND pa.date BETWEEN '2010-01-01' AND '2015-12-31';",
        "output_sample_result": [
            [
                "68.9013572448769161"
            ]
        ],
        "output_column_names": [
            "average_overall_rating"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.48221343873517786,
        "bleu_similarity_score": 1.528284109351999e-78,
        "execution_accuracy": false
    },
    {
        "question": "Which football player has the shortest height?",
        "reference_query": "SELECT player_name FROM \"Player\" ORDER BY height ASC LIMIT 1",
        "normalized_reference_query": "SELECT player_name FROM \"Player\" ORDER BY height ASC LIMIT 1",
        "reference_sample_result": [
            [
                "Juan Quero"
            ]
        ],
        "reference_column_names": [
            "player_name"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT player_name, height \nFROM public.\"Player\" \nWHERE height = (SELECT MIN(height) FROM public.\"Player\");",
        "normalized_output_query": "SELECT player_name, height FROM public.\"Player\" WHERE height = (SELECT MIN(height) FROM public.\"Player\");",
        "output_sample_result": [
            [
                "Juan Quero",
                157
            ]
        ],
        "output_column_names": [
            "player_name",
            "height"
        ],
        "output_row_count": 1,
        "output_column_count": 2,
        "sequence_similarity_score": 0.593939393939394,
        "bleu_similarity_score": 1.2882297539194154e-231,
        "execution_accuracy": false
    },
    {
        "question": "Are there more in-patient or outpatient who were male? What is the deviation in percentage?",
        "reference_query": "SELECT CAST(SUM(CASE WHEN \"Admission\" = '+' THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / SUM(CASE WHEN \"Admission\" = '-' THEN 1 ELSE 0 END) FROM \"Patient\" WHERE \"SEX\" = 'M'",
        "normalized_reference_query": "SELECT CAST(SUM(CASE WHEN \"Admission\" = '+' THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / SUM(CASE WHEN \"Admission\" = '-' THEN 1 ELSE 0 END) FROM \"Patient\" WHERE \"SEX\" = 'M'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate a SQL query because it does not provide information on distinguishing between in-patient and outpatient records. The \"Patient\" table does not have a column that specifies whether a patient is in-patient or outpatient, and no other table in the provided schema contains this information.",
        "normalized_output_query": "The provided context IS insufficient TO generate a SQL query because it does NOT provide information ON distinguishing BETWEEN IN-patient AND outpatient records. The \"Patient\" TABLE does NOT have a COLUMN that specifies whether a patient IS IN-patient OR outpatient, AND NO other TABLE IN the provided SCHEMA CONTAINS this information.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate a SQL query...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the percentage of female patient were born after 1930?",
        "reference_query": "SELECT CAST(SUM(CASE WHEN EXTRACT(YEAR FROM \"Birthday\") > '1930' THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(*) FROM \"Patient\" WHERE \"SEX\" = 'F'",
        "normalized_reference_query": "SELECT CAST(SUM(CASE WHEN EXTRACT(YEAR FROM \"Birthday\") > '1930' THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(*) FROM \"Patient\" WHERE \"SEX\" = 'F'",
        "reference_sample_result": [
            [
                94.03714565004887
            ]
        ],
        "reference_column_names": [
            "?column?"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT \n    (COUNT(*) FILTER (WHERE \"SEX\" = 'female' AND \"Birthday\" > '1930-12-31')::FLOAT / COUNT(*)) * 100 AS percentage_female_born_after_1930\nFROM \n    public.\"Patient\";",
        "normalized_output_query": "SELECT (COUNT(*) FILTER (WHERE \"SEX\" = 'female' AND \"Birthday\" > '1930-12-31')::FLOAT / COUNT(*)) * 100 AS percentage_female_born_after_1930 FROM public.\"Patient\";",
        "output_sample_result": [
            [
                0.0
            ]
        ],
        "output_column_names": [
            "percentage_female_born_after_1930"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.22712933753943218,
        "bleu_similarity_score": 4.942885898078763e-155,
        "execution_accuracy": false
    },
    {
        "question": "For patient born between Year 1930 to 1940, how many percent of them were inpatient?",
        "reference_query": "SELECT CAST(SUM(CASE WHEN \"Admission\" = '+' THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(*) FROM \"Patient\" WHERE EXTRACT(YEAR FROM \"Birthday\") BETWEEN '1930' AND '1940'",
        "normalized_reference_query": "SELECT CAST(SUM(CASE WHEN \"Admission\" = '+' THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(*) FROM \"Patient\" WHERE EXTRACT(YEAR FROM \"Birthday\") BETWEEN '1930' AND '1940'",
        "reference_sample_result": [
            [
                37.58389261744966
            ]
        ],
        "reference_column_names": [
            "?column?"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT \n    (COUNT(CASE WHEN \"Admission\" = 'inpatient' THEN 1 END)::FLOAT / COUNT(*)) * 100 AS percent_inpatient\nFROM \n    public.\"Patient\"\nWHERE \n    EXTRACT(YEAR FROM \"Birthday\") BETWEEN 1930 AND 1940;",
        "normalized_output_query": "SELECT (COUNT(CASE WHEN \"Admission\" = 'inpatient' THEN 1 END)::FLOAT / COUNT(*)) * 100 AS percent_inpatient FROM public.\"Patient\" WHERE EXTRACT(YEAR FROM \"Birthday\") BETWEEN 1930 AND 1940;",
        "output_sample_result": [
            [
                0.0
            ]
        ],
        "output_column_names": [
            "percent_inpatient"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7287671232876712,
        "bleu_similarity_score": 0.2170033529297382,
        "execution_accuracy": false
    },
    {
        "question": "What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?",
        "reference_query": "SELECT SUM(CASE WHEN \"Admission\" = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN \"Admission\" = '-' THEN 1 ELSE 0 END) FROM \"Patient\" WHERE \"Diagnosis\" = 'SLE'",
        "normalized_reference_query": "SELECT SUM(CASE WHEN \"Admission\" = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN \"Admission\" = '-' THEN 1 ELSE 0 END) FROM \"Patient\" WHERE \"Diagnosis\" = 'SLE'",
        "reference_sample_result": [
            [
                "1.3095238095238095"
            ]
        ],
        "reference_column_names": [
            "?column?"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT \n    SUM(CASE WHEN \"Admission\" = 'outpatient' THEN 1 ELSE 0 END) * 1.0 /\n    NULLIF(SUM(CASE WHEN \"Admission\" = 'inpatient' THEN 1 ELSE 0 END), 0) AS outpatient_to_inpatient_ratio\nFROM \n    public.\"Patient\" \nWHERE \n    \"Diagnosis\" = 'SLE';",
        "normalized_output_query": "SELECT SUM(CASE WHEN \"Admission\" = 'outpatient' THEN 1 ELSE 0 END) * 1.0 / NULLIF(SUM(CASE WHEN \"Admission\" = 'inpatient' THEN 1 ELSE 0 END), 0) AS outpatient_to_inpatient_ratio FROM public.\"Patient\" WHERE \"Diagnosis\" = 'SLE';",
        "output_sample_result": [
            [
                null
            ]
        ],
        "output_column_names": [
            "outpatient_to_inpatient_ratio"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7335092348284961,
        "bleu_similarity_score": 0.31070073896499045,
        "execution_accuracy": false
    },
    {
        "question": "What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.",
        "reference_query": "SELECT T1.\"Diagnosis\", T2.\"Date\" FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T1.\"ID\" = 30609",
        "normalized_reference_query": "SELECT T1.\"Diagnosis\", T2.\"Date\" FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T1.\"ID\" = 30609",
        "reference_error": null,
        "output_query": "SELECT p.Diagnosis, l.Date\nFROM public.\"Patient\" p\nJOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\nWHERE p.\"ID\" = 30609;",
        "normalized_output_query": "SELECT p.Diagnosis, l.Date FROM public.\"Patient\" p JOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\" WHERE p.\"ID\" = 30609;",
        "output_error": "column p.diagnosis does not exist\nLINE 1: SELECT p.Diagnosis, l.Date FROM public.\"Patient\" p JOIN publ...\n               ^\nHINT:  Perhaps you meant to reference the column \"p.Diagnosis\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "State the sex and birthday of patient ID '163109'. When was the examination taken and what symptom does the patient had.",
        "reference_query": "SELECT T1.\"SEX\", T1.\"Birthday\", T2.\"Examination Date\", T2.\"Symptoms\" FROM \"Patient\" AS T1 INNER JOIN \"Examination\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T1.\"ID\" = 163109",
        "normalized_reference_query": "SELECT T1.\"SEX\", T1.\"Birthday\", T2.\"Examination Date\", T2.\"Symptoms\" FROM \"Patient\" AS T1 INNER JOIN \"Examination\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T1.\"ID\" = 163109",
        "reference_error": null,
        "output_query": "SELECT \n    p.SEX, \n    p.Birthday, \n    e.\"Examination Date\", \n    e.Symptoms\nFROM \n    public.\"Patient\" p\nJOIN \n    public.\"Examination\" e ON p.\"ID\" = e.\"ID\"\nWHERE \n    p.\"ID\" = 163109;",
        "normalized_output_query": "SELECT p.SEX, p.Birthday, e.\"Examination Date\", e.Symptoms FROM public.\"Patient\" p JOIN public.\"Examination\" e ON p.\"ID\" = e.\"ID\" WHERE p.\"ID\" = 163109;",
        "output_error": "column p.sex does not exist\nLINE 1: SELECT p.SEX, p.Birthday, e.\"Examination Date\", e.Symptoms F...\n               ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "List the patient ID, sex and birthday of patient with LDH beyond normal range.",
        "reference_query": "SELECT DISTINCT T1.\"ID\", T1.\"SEX\", T1.\"Birthday\" FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T2.\"LDH\" > 500",
        "normalized_reference_query": "SELECT DISTINCT T1.\"ID\", T1.\"SEX\", T1.\"Birthday\" FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T2.\"LDH\" > 500",
        "reference_sample_result": [
            [
                1650222,
                "F",
                "1947-03-17"
            ],
            [
                4840422,
                "F",
                "1962-01-18"
            ],
            [
                5404650,
                "F",
                "1963-04-07"
            ],
            [
                4915498,
                "F",
                "1959-01-22"
            ],
            [
                4415406,
                "F",
                "1935-06-03"
            ]
        ],
        "reference_column_names": [
            "ID",
            "SEX",
            "Birthday"
        ],
        "reference_row_count": 103,
        "reference_column_count": 3,
        "output_query": "SELECT p.\"ID\", p.\"SEX\", p.\"Birthday\"\nFROM public.\"Patient\" p\nJOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\nWHERE l.\"LDH\" > 250 OR l.\"LDH\" < 140;",
        "normalized_output_query": "SELECT p.\"ID\", p.\"SEX\", p.\"Birthday\" FROM public.\"Patient\" p JOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\" WHERE l.\"LDH\" > 250 OR l.\"LDH\" < 140;",
        "output_sample_result": [
            [
                27654,
                "F",
                "1936-03-25"
            ],
            [
                27654,
                "F",
                "1936-03-25"
            ],
            [
                27654,
                "F",
                "1936-03-25"
            ],
            [
                27654,
                "F",
                "1936-03-25"
            ],
            [
                27654,
                "F",
                "1936-03-25"
            ]
        ],
        "output_column_names": [
            "ID",
            "SEX",
            "Birthday"
        ],
        "output_row_count": 8215,
        "output_column_count": 3,
        "sequence_similarity_score": 0.7298245614035088,
        "bleu_similarity_score": 1.3682868820983658e-231,
        "execution_accuracy": false
    },
    {
        "question": "State the ID and age of patient with positive degree of coagulation.",
        "reference_query": "SELECT DISTINCT T1.\"ID\", EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM T1.\"Birthday\") FROM \"Patient\" AS T1 INNER JOIN \"Examination\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T2.\"RVVT\" = '+'",
        "normalized_reference_query": "SELECT DISTINCT T1.\"ID\", EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM T1.\"Birthday\") FROM \"Patient\" AS T1 INNER JOIN \"Examination\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T2.\"RVVT\" = '+'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information about how the \"degree of coagulation\" is represented in the tables. There are columns related to examinations and laboratory tests, but it's unclear which one indicates a positive degree of coagulation.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information about how the \"degree of coagulation\" IS represented IN the tables. There ARE columns related TO examinations AND laboratory tests, but it's unclear which one indicates a positive degree OF coagulation.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.",
        "reference_query": "SELECT DISTINCT T1.\"ID\", T1.\"SEX\", T1.\"Diagnosis\" FROM \"Patient\" AS T1 INNER JOIN \"Examination\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T2.\"Thrombosis\" = 2",
        "normalized_reference_query": "SELECT DISTINCT T1.\"ID\", T1.\"SEX\", T1.\"Diagnosis\" FROM \"Patient\" AS T1 INNER JOIN \"Examination\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T2.\"Thrombosis\" = 2",
        "reference_sample_result": [
            [
                163109,
                "F",
                "SLE"
            ],
            [
                2803470,
                "F",
                "SLE"
            ],
            [
                4395720,
                "F",
                "SLE"
            ]
        ],
        "reference_column_names": [
            "ID",
            "SEX",
            "Diagnosis"
        ],
        "reference_row_count": 3,
        "reference_column_count": 3,
        "output_query": "SELECT p.\"ID\", p.\"SEX\", p.\"Diagnosis\"\nFROM public.\"Patient\" p\nJOIN public.\"Examination\" e ON p.\"ID\" = e.\"ID\"\nWHERE e.\"Thrombosis\" = 3;",
        "normalized_output_query": "SELECT p.\"ID\", p.\"SEX\", p.\"Diagnosis\" FROM public.\"Patient\" p JOIN public.\"Examination\" e ON p.\"ID\" = e.\"ID\" WHERE e.\"Thrombosis\" = 3;",
        "output_sample_result": [
            [
                2495750,
                "F",
                "SLE"
            ]
        ],
        "output_column_names": [
            "ID",
            "SEX",
            "Diagnosis"
        ],
        "output_row_count": 1,
        "output_column_count": 3,
        "sequence_similarity_score": 0.7801418439716312,
        "bleu_similarity_score": 1.1520062158865696e-231,
        "execution_accuracy": false
    },
    {
        "question": "List all patients who were born in 1937 whose total cholesterol was beyond the normal range.",
        "reference_query": "SELECT DISTINCT T1.\"ID\" FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE EXTRACT(YEAR FROM T1.\"Birthday\") = '1937' AND T2.\"T-CHO\">= 250",
        "normalized_reference_query": "SELECT DISTINCT T1.\"ID\" FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE EXTRACT(YEAR FROM T1.\"Birthday\") = '1937' AND T2.\"T-CHO\">= 250",
        "reference_sample_result": [
            [
                1078741
            ]
        ],
        "reference_column_names": [
            "ID"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT p.\"ID\", p.\"SEX\", p.\"Birthday\", l.\"T-CHO\"\nFROM public.\"Patient\" p\nJOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\nWHERE EXTRACT(YEAR FROM p.\"Birthday\") = 1937\nAND (l.\"T-CHO\" < 125 OR l.\"T-CHO\" > 200);",
        "normalized_output_query": "SELECT p.\"ID\", p.\"SEX\", p.\"Birthday\", l.\"T-CHO\" FROM public.\"Patient\" p JOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\" WHERE EXTRACT(YEAR FROM p.\"Birthday\") = 1937 AND (l.\"T-CHO\" < 125 OR l.\"T-CHO\" > 200);",
        "output_sample_result": [
            [
                1078741,
                "F",
                "1937-12-18",
                203
            ],
            [
                1078741,
                "F",
                "1937-12-18",
                211
            ],
            [
                1078741,
                "F",
                "1937-12-18",
                207
            ],
            [
                1078741,
                "F",
                "1937-12-18",
                213
            ],
            [
                1078741,
                "F",
                "1937-12-18",
                258
            ]
        ],
        "output_column_names": [
            "ID",
            "SEX",
            "Birthday",
            "T-CHO"
        ],
        "output_row_count": 33,
        "output_column_count": 4,
        "sequence_similarity_score": 0.6358695652173914,
        "bleu_similarity_score": 2.1225779993033825e-78,
        "execution_accuracy": false
    },
    {
        "question": "For patient with albumin level lower than 3.5, list their ID, sex and diagnosis.",
        "reference_query": "SELECT DISTINCT T1.\"ID\", T1.\"SEX\", T1.\"Diagnosis\" FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T2.\"ALB\" < 3.5",
        "normalized_reference_query": "SELECT DISTINCT T1.\"ID\", T1.\"SEX\", T1.\"Diagnosis\" FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T2.\"ALB\" < 3.5",
        "reference_sample_result": [
            [
                3178036,
                "F",
                "Adult STILL"
            ],
            [
                5296268,
                "F",
                "Adult STILL"
            ],
            [
                4649885,
                "F",
                "SLE, SJS"
            ],
            [
                3182521,
                "M",
                "DM"
            ],
            [
                27654,
                "F",
                "RA, SLE susp"
            ]
        ],
        "reference_column_names": [
            "ID",
            "SEX",
            "Diagnosis"
        ],
        "reference_row_count": 80,
        "reference_column_count": 3,
        "output_query": "SELECT p.\"ID\", p.\"SEX\", p.\"Diagnosis\"\nFROM public.\"Patient\" p\nJOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\nWHERE l.\"ALB\" < 3.5;",
        "normalized_output_query": "SELECT p.\"ID\", p.\"SEX\", p.\"Diagnosis\" FROM public.\"Patient\" p JOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\" WHERE l.\"ALB\" < 3.5;",
        "output_sample_result": [
            [
                27654,
                "F",
                "RA, SLE susp"
            ],
            [
                27654,
                "F",
                "RA, SLE susp"
            ],
            [
                27654,
                "F",
                "RA, SLE susp"
            ],
            [
                27654,
                "F",
                "RA, SLE susp"
            ],
            [
                27654,
                "F",
                "RA, SLE susp"
            ]
        ],
        "output_column_names": [
            "ID",
            "SEX",
            "Diagnosis"
        ],
        "output_row_count": 815,
        "output_column_count": 3,
        "sequence_similarity_score": 0.7777777777777778,
        "bleu_similarity_score": 1.1520062158865696e-231,
        "execution_accuracy": false
    },
    {
        "question": "What is the percentage of female patient had total protein not within the normal range?",
        "reference_query": "SELECT CAST(SUM(CASE WHEN T1.\"SEX\" = 'F' AND (T2.\"TP\" < 6.0 OR T2.\"TP\" > 8.5) THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(*) FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T1.\"SEX\" = 'F'",
        "normalized_reference_query": "SELECT CAST(SUM(CASE WHEN T1.\"SEX\" = 'F' AND (T2.\"TP\" < 6.0 OR T2.\"TP\" > 8.5) THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(*) FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T1.\"SEX\" = 'F'",
        "reference_error": null,
        "output_query": "SELECT \n    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM public.\"Patient\" p WHERE p.\"SEX\" = 'Female')) AS percentage_of_female_patients_out_of_range\nFROM \n    public.\"Patient\" p\nJOIN \n    public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\nWHERE \n    p.\"SEX\" = 'Female' AND (l.\"TP\" < 6.4 OR l.\"TP\" > 8.3);",
        "normalized_output_query": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM public.\"Patient\" p WHERE p.\"SEX\" = 'Female')) AS percentage_of_female_patients_out_of_range FROM public.\"Patient\" p JOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\" WHERE p.\"SEX\" = 'Female' AND (l.\"TP\" < 6.4 OR l.\"TP\" > 8.3);",
        "output_error": "division by zero\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "For in-patient age 50 and above, what is their average anti-cardiolipin antibody (IgG) concentration?",
        "reference_query": "SELECT AVG(T2.\"aCL IgG\") FROM \"Patient\" AS T1 INNER JOIN \"Examination\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM T1.\"Birthday\") >= 50 AND T1.\"Admission\" = '+'",
        "normalized_reference_query": "SELECT AVG(T2.\"aCL IgG\") FROM \"Patient\" AS T1 INNER JOIN \"Examination\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM T1.\"Birthday\") >= 50 AND T1.\"Admission\" = '+'",
        "reference_sample_result": [
            [
                6.120833473900954
            ]
        ],
        "reference_column_names": [
            "avg"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT AVG(e.\"aCL IgG\") AS average_aCL_IgG\nFROM public.\"Examination\" e\nJOIN public.\"Patient\" p ON e.\"ID\" = p.\"ID\"\nWHERE p.\"Admission\" = 'In-Patient' \nAND EXTRACT(YEAR FROM AGE(p.\"Birthday\")) >= 50;",
        "normalized_output_query": "SELECT AVG(e.\"aCL IgG\") AS average_aCL_IgG FROM public.\"Examination\" e JOIN public.\"Patient\" p ON e.\"ID\" = p.\"ID\" WHERE p.\"Admission\" = 'In-Patient' AND EXTRACT(YEAR FROM AGE(p.\"Birthday\")) >= 50;",
        "output_sample_result": [
            [
                null
            ]
        ],
        "output_column_names": [
            "average_acl_igg"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.527363184079602,
        "bleu_similarity_score": 4.685558287629465e-155,
        "execution_accuracy": false
    },
    {
        "question": "How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?",
        "reference_query": "SELECT COUNT(*) FROM \"Patient\" WHERE EXTRACT(YEAR FROM \"Description\") = '1997' AND \"SEX\" = 'F' AND \"Admission\" = '-'",
        "normalized_reference_query": "SELECT COUNT(*) FROM \"Patient\" WHERE EXTRACT(YEAR FROM \"Description\") = '1997' AND \"SEX\" = 'F' AND \"Admission\" = '-'",
        "reference_error": null,
        "output_query": "SELECT COUNT(*) \nFROM public.\"Patient\"\nWHERE SEX = 'Female' \nAND \"First Date\" BETWEEN '1997-01-01' AND '1997-12-31'\nAND \"Admission\" = 'Outpatient Clinic Immediately Followed'",
        "normalized_output_query": "SELECT COUNT(*) FROM public.\"Patient\" WHERE SEX = 'Female' AND \"First Date\" BETWEEN '1997-01-01' AND '1997-12-31' AND \"Admission\" = 'Outpatient Clinic Immediately Followed'",
        "output_error": "column \"sex\" does not exist\nLINE 1: SELECT COUNT(*) FROM public.\"Patient\" WHERE SEX = 'Female' A...\n                                                    ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What was the age of the youngest patient when they initially arrived at the hospital?",
        "reference_query": "SELECT MIN(EXTRACT(YEAR FROM\"First Date\") - EXTRACT(YEAR FROM \"Birthday\")) FROM \"Patient\"",
        "normalized_reference_query": "SELECT MIN(EXTRACT(YEAR FROM\"First Date\") - EXTRACT(YEAR FROM \"Birthday\")) FROM \"Patient\"",
        "reference_sample_result": [
            [
                "-10"
            ]
        ],
        "reference_column_names": [
            "min"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT MIN(EXTRACT(YEAR FROM AGE(\"First Date\", \"Birthday\"))) AS youngest_age\nFROM public.\"Patient\";",
        "normalized_output_query": "SELECT MIN(EXTRACT(YEAR FROM AGE(\"First Date\", \"Birthday\"))) AS youngest_age FROM public.\"Patient\";",
        "output_sample_result": [
            [
                "-9"
            ]
        ],
        "output_column_names": [
            "youngest_age"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.723404255319149,
        "bleu_similarity_score": 6.8489908526642754e-155,
        "execution_accuracy": false
    },
    {
        "question": "How many of the patients with the most serious thrombosis cases examined in 1997 are women?",
        "reference_query": "SELECT  COUNT(*) FROM \"Patient\" AS T1 INNER JOIN \"Examination\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T1.\"SEX\" = 'F' AND EXTRACT(YEAR FROM T2.\"Examination Date\") = '1997' AND T2.\"Thrombosis\" = 1",
        "normalized_reference_query": "SELECT COUNT(*) FROM \"Patient\" AS T1 INNER JOIN \"Examination\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T1.\"SEX\" = 'F' AND EXTRACT(YEAR FROM T2.\"Examination Date\") = '1997' AND T2.\"Thrombosis\" = 1",
        "reference_sample_result": [
            [
                1
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(DISTINCT p.\"ID\") AS female_patients_with_serious_thrombosis\nFROM public.\"Examination\" e\nJOIN public.\"Patient\" p ON e.\"ID\" = p.\"ID\"\nWHERE e.\"Thrombosis\" = (SELECT MAX(\"Thrombosis\") FROM public.\"Examination\" WHERE EXTRACT(YEAR FROM \"Examination Date\") = 1997)\nAND EXTRACT(YEAR FROM e.\"Examination Date\") = 1997\nAND p.\"SEX\" = 'Female';",
        "normalized_output_query": "SELECT COUNT(DISTINCT p.\"ID\") AS female_patients_with_serious_thrombosis FROM public.\"Examination\" e JOIN public.\"Patient\" p ON e.\"ID\" = p.\"ID\" WHERE e.\"Thrombosis\" = (SELECT MAX(\"Thrombosis\") FROM public.\"Examination\" WHERE EXTRACT(YEAR FROM \"Examination Date\") = 1997) AND EXTRACT(YEAR FROM e.\"Examination Date\") = 1997 AND p.\"SEX\" = 'Female';",
        "output_sample_result": [
            [
                0
            ]
        ],
        "output_column_names": [
            "female_patients_with_serious_thrombosis"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.3082706766917293,
        "bleu_similarity_score": 2.027272772383451e-78,
        "execution_accuracy": false
    },
    {
        "question": "What is the age gap between the youngest and oldest patient with a normal triglyceride recorded?",
        "reference_query": "SELECT EXTRACT(YEAR FROM MAX(T1.\"Birthday\")) - EXTRACT(YEAR FROM MIN(T1.\"Birthday\")) FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T2.\"TG\" >= 200",
        "normalized_reference_query": "SELECT EXTRACT(YEAR FROM MAX(T1.\"Birthday\")) - EXTRACT(YEAR FROM MIN(T1.\"Birthday\")) FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T2.\"TG\" >= 200",
        "reference_sample_result": [
            [
                "63"
            ]
        ],
        "reference_column_names": [
            "?column?"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT MAX(age) - MIN(age) AS age_gap\nFROM (\n    SELECT EXTRACT(YEAR FROM AGE(l.\"Date\", p.\"Birthday\")) AS age\n    FROM public.\"Laboratory\" l\n    JOIN public.\"Patient\" p ON l.\"ID\" = p.\"ID\"\n    WHERE l.\"TG\" BETWEEN 150 AND 199\n) AS patient_ages;",
        "normalized_output_query": "SELECT MAX(age) - MIN(age) AS age_gap FROM (SELECT EXTRACT(YEAR FROM AGE(l.\"Date\", p.\"Birthday\")) AS age FROM public.\"Laboratory\" l JOIN public.\"Patient\" p ON l.\"ID\" = p.\"ID\" WHERE l.\"TG\" BETWEEN 150 AND 199) AS patient_ages;",
        "output_sample_result": [
            [
                "68"
            ]
        ],
        "output_column_names": [
            "age_gap"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.40298507462686567,
        "bleu_similarity_score": 4.946973787525366e-155,
        "execution_accuracy": false
    },
    {
        "question": "What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.",
        "reference_query": "SELECT T2.\"Symptoms\", T1.\"Diagnosis\" FROM \"Patient\" AS T1 INNER JOIN \"Examination\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T2.\"Symptoms\" IS NOT NULL ORDER BY T1.\"Birthday\" DESC LIMIT 1",
        "normalized_reference_query": "SELECT T2.\"Symptoms\", T1.\"Diagnosis\" FROM \"Patient\" AS T1 INNER JOIN \"Examination\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T2.\"Symptoms\" IS NOT NULL ORDER BY T1.\"Birthday\" DESC LIMIT 1",
        "reference_sample_result": [
            [
                "CNS susp",
                "SLE"
            ]
        ],
        "reference_column_names": [
            "Symptoms",
            "Diagnosis"
        ],
        "reference_row_count": 1,
        "reference_column_count": 2,
        "output_query": "SELECT e.\"Symptoms\", e.\"Diagnosis\"\nFROM public.\"Examination\" e\nJOIN public.\"Patient\" p ON e.\"ID\" = p.\"ID\"\nORDER BY p.\"Birthday\" DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT e.\"Symptoms\", e.\"Diagnosis\" FROM public.\"Examination\" e JOIN public.\"Patient\" p ON e.\"ID\" = p.\"ID\" ORDER BY p.\"Birthday\" DESC LIMIT 1;",
        "output_sample_result": [
            [
                null,
                "SjS"
            ]
        ],
        "output_column_names": [
            "Symptoms",
            "Diagnosis"
        ],
        "output_row_count": 1,
        "output_column_count": 2,
        "sequence_similarity_score": 0.660377358490566,
        "bleu_similarity_score": 4.689461567864845e-155,
        "execution_accuracy": false
    },
    {
        "question": "For the year that concluded on December 31, 1998, how many male patients on average were tested in the lab each month?",
        "reference_query": "SELECT CAST(COUNT(T1.\"ID\") AS DOUBLE PRECISION) / 12 FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE EXTRACT(YEAR FROM T2.\"Date\") = '1998' AND T1.\"SEX\" = 'M'",
        "normalized_reference_query": "SELECT CAST(COUNT(T1.\"ID\") AS DOUBLE PRECISION) / 12 FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE EXTRACT(YEAR FROM T2.\"Date\") = '1998' AND T1.\"SEX\" = 'M'",
        "reference_sample_result": [
            [
                7.583333333333333
            ]
        ],
        "reference_column_names": [
            "?column?"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT AVG(monthly_count) AS average_male_patients_per_month\nFROM (\n    SELECT EXTRACT(MONTH FROM l.\"Date\") AS month, COUNT(DISTINCT l.\"ID\") AS monthly_count\n    FROM public.\"Laboratory\" l\n    JOIN public.\"Patient\" p ON l.\"ID\" = p.\"ID\"\n    WHERE p.\"SEX\" = 'Male' AND l.\"Date\" BETWEEN '1998-01-01' AND '1998-12-31'\n    GROUP BY EXTRACT(MONTH FROM l.\"Date\")\n) AS monthly_counts;",
        "normalized_output_query": "SELECT AVG(monthly_count) AS average_male_patients_per_month FROM (SELECT EXTRACT(MONTH FROM l.\"Date\") AS MONTH, COUNT(DISTINCT l.\"ID\") AS monthly_count FROM public.\"Laboratory\" l JOIN public.\"Patient\" p ON l.\"ID\" = p.\"ID\" WHERE p.\"SEX\" = 'Male' AND l.\"Date\" BETWEEN '1998-01-01' AND '1998-12-31' GROUP BY EXTRACT(MONTH FROM l.\"Date\")) AS monthly_counts;",
        "output_sample_result": [
            [
                null
            ]
        ],
        "output_column_names": [
            "average_male_patients_per_month"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.24029574861367836,
        "bleu_similarity_score": 1.331960397810445e-231,
        "execution_accuracy": false
    },
    {
        "question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
        "reference_query": "SELECT T1.\"Date\", EXTRACT(YEAR FROM T2.\"First Date\") - EXTRACT(YEAR FROM T2.\"Birthday\"),T2.\"Birthday\" FROM \"Laboratory\" AS T1 INNER JOIN \"Patient\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T2.\"Diagnosis\" = 'SJS' AND T2.\"Birthday\" IS NOT NULL ORDER BY T2.\"Birthday\" ASC LIMIT 1",
        "normalized_reference_query": "SELECT T1.\"Date\", EXTRACT(YEAR FROM T2.\"First Date\") - EXTRACT(YEAR FROM T2.\"Birthday\"), T2.\"Birthday\" FROM \"Laboratory\" AS T1 INNER JOIN \"Patient\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T2.\"Diagnosis\" = 'SJS' AND T2.\"Birthday\" IS NOT NULL ORDER BY T2.\"Birthday\" ASC LIMIT 1",
        "reference_sample_result": [
            [
                "1981-07-31",
                "69",
                "1917-04-18"
            ]
        ],
        "reference_column_names": [
            "Date",
            "?column?",
            "Birthday"
        ],
        "reference_row_count": 1,
        "reference_column_count": 3,
        "output_query": "SELECT \n    p.\"ID\",\n    l.\"Date\" AS \"Laboratory Work Date\",\n    EXTRACT(YEAR FROM AGE(p.\"First Date\", p.\"Birthday\")) AS \"Age at First Date\"\nFROM \n    public.\"Patient\" p\nJOIN \n    public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\nWHERE \n    p.\"Diagnosis\" = 'SJS'\nORDER BY \n    p.\"Birthday\" ASC, l.\"Date\" DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT p.\"ID\", l.\"Date\" AS \"Laboratory Work Date\", EXTRACT(YEAR FROM AGE(p.\"First Date\", p.\"Birthday\")) AS \"Age at First Date\" FROM public.\"Patient\" p JOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\" WHERE p.\"Diagnosis\" = 'SJS' ORDER BY p.\"Birthday\" ASC, l.\"Date\" DESC LIMIT 1;",
        "output_sample_result": [
            [
                125619,
                "1986-01-07",
                "69"
            ]
        ],
        "output_column_names": [
            "ID",
            "Laboratory Work Date",
            "Age at First Date"
        ],
        "output_row_count": 1,
        "output_column_count": 3,
        "sequence_similarity_score": 0.2177121771217712,
        "bleu_similarity_score": 6.226776722671372e-155,
        "execution_accuracy": false
    },
    {
        "question": "What is the ratio of male to female patients among all those with abnormal uric acid counts?",
        "reference_query": "SELECT CAST(SUM(CASE WHEN T2.\"UA\" <= 8.0 AND T1.\"SEX\" = 'M' THEN 1 ELSE 0 END) AS DOUBLE PRECISION) / SUM(CASE WHEN T2.\"UA\" <= 6.5 AND T1.\"SEX\" = 'F' THEN 1 ELSE 0 END) FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\"",
        "normalized_reference_query": "SELECT CAST(SUM(CASE WHEN T2.\"UA\" <= 8.0 AND T1.\"SEX\" = 'M' THEN 1 ELSE 0 END) AS DOUBLE PRECISION) / SUM(CASE WHEN T2.\"UA\" <= 6.5 AND T1.\"SEX\" = 'F' THEN 1 ELSE 0 END) FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\"",
        "reference_sample_result": [
            [
                0.20566810835419985
            ]
        ],
        "reference_column_names": [
            "?column?"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT \n    (SELECT COUNT(*) FROM public.\"Patient\" p\n     JOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\n     WHERE p.\"SEX\" = 'Male' AND (l.\"UA\" < 3.5 OR l.\"UA\" > 7.2))::FLOAT /\n    NULLIF((SELECT COUNT(*) FROM public.\"Patient\" p\n     JOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\n     WHERE p.\"SEX\" = 'Female' AND (l.\"UA\" < 2.6 OR l.\"UA\" > 6.0)), 0) AS male_to_female_ratio",
        "normalized_output_query": "SELECT (SELECT COUNT(*) FROM public.\"Patient\" p JOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\" WHERE p.\"SEX\" = 'Male' AND (l.\"UA\" < 3.5 OR l.\"UA\" > 7.2))::FLOAT / NULLIF((SELECT COUNT(*) FROM public.\"Patient\" p JOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\" WHERE p.\"SEX\" = 'Female' AND (l.\"UA\" < 2.6 OR l.\"UA\" > 6.0)), 0) AS male_to_female_ratio",
        "output_sample_result": [
            [
                null
            ]
        ],
        "output_column_names": [
            "male_to_female_ratio"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.11643835616438356,
        "bleu_similarity_score": 1.2296670260879681e-231,
        "execution_accuracy": false
    },
    {
        "question": "How many patients hadn't undergone a medical examination until at least a year following their initial hospital visit?",
        "reference_query": "SELECT COUNT(DISTINCT T1.\"ID\") FROM \"Patient\" AS T1 INNER JOIN \"Examination\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T1.\"Admission\" = '+' AND EXTRACT(YEAR FROM T2.\"Examination Date\") - EXTRACT(YEAR FROM T1.\"First Date\") >= 1",
        "normalized_reference_query": "SELECT COUNT(DISTINCT T1.\"ID\") FROM \"Patient\" AS T1 INNER JOIN \"Examination\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T1.\"Admission\" = '+' AND EXTRACT(YEAR FROM T2.\"Examination Date\") - EXTRACT(YEAR FROM T1.\"First Date\") >= 1",
        "reference_sample_result": [
            [
                11
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(DISTINCT p.\"ID\") AS num_patients\nFROM public.\"Patient\" p\nLEFT JOIN public.\"Examination\" e ON p.\"ID\" = e.\"ID\" AND e.\"Examination Date\" <= p.\"First Date\" + INTERVAL '1 year'\nWHERE e.\"ID\" IS NULL;",
        "normalized_output_query": "SELECT COUNT(DISTINCT p.\"ID\") AS num_patients FROM public.\"Patient\" p LEFT JOIN public.\"Examination\" e ON p.\"ID\" = e.\"ID\" AND e.\"Examination Date\" <= p.\"First Date\" + INTERVAL '1 year' WHERE e.\"ID\" IS NULL;",
        "output_sample_result": [
            [
                1207
            ]
        ],
        "output_column_names": [
            "num_patients"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.2553191489361702,
        "bleu_similarity_score": 4.450410426949244e-155,
        "execution_accuracy": false
    },
    {
        "question": "How many underage patients were examined during the course of the three-year period from 1990 to 1993?",
        "reference_query": "SELECT COUNT(T1.\"ID\") FROM \"Patient\" AS T1 INNER JOIN \"Examination\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE EXTRACT(YEAR FROM T2.\"Examination Date\") BETWEEN '1990' AND '1993' AND EXTRACT(YEAR FROM T2.\"Examination Date\") - EXTRACT(YEAR FROM T1.\"Birthday\") < 18",
        "normalized_reference_query": "SELECT COUNT(T1.\"ID\") FROM \"Patient\" AS T1 INNER JOIN \"Examination\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE EXTRACT(YEAR FROM T2.\"Examination Date\") BETWEEN '1990' AND '1993' AND EXTRACT(YEAR FROM T2.\"Examination Date\") - EXTRACT(YEAR FROM T1.\"Birthday\") < 18",
        "reference_error": null,
        "output_query": "The provided context does not include the necessary information to determine the age of the patients at the time of their examination. Specifically, we need the birth date of the patients and the examination date to calculate if they were underage (typically under 18). Therefore, it is not possible to generate the SQL query without additional context on how to define \"underage\" based on the given tables.",
        "normalized_output_query": "The provided context does NOT INCLUDE the necessary information TO determine the age OF the patients AT the TIME OF their examination. Specifically, we need the birth date OF the patients AND the examination date TO calculate IF they were underage (typically UNDER 18). Therefore, it IS NOT possible TO generate the SQL query WITHOUT additional context ON how TO DEFINE \"underage\" based ON the given tables.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context does NOT INCLUDE the necessary informat...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many male patients have elevated total bilirubin count?",
        "reference_query": "SELECT COUNT(DISTINCT T1.\"ID\") FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T2.\"T-BIL\">= 2.0 AND T1.\"SEX\" = 'M'",
        "normalized_reference_query": "SELECT COUNT(DISTINCT T1.\"ID\") FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T2.\"T-BIL\">= 2.0 AND T1.\"SEX\" = 'M'",
        "reference_sample_result": [
            [
                5
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(DISTINCT p.\"ID\") AS male_patients_with_elevated_bilirubin\nFROM public.\"Patient\" p\nJOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\nWHERE p.\"SEX\" = 'Male' AND l.\"T-BIL\" > 1.2;",
        "normalized_output_query": "SELECT COUNT(DISTINCT p.\"ID\") AS male_patients_with_elevated_bilirubin FROM public.\"Patient\" p JOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\" WHERE p.\"SEX\" = 'Male' AND l.\"T-BIL\" > 1.2;",
        "output_sample_result": [
            [
                0
            ]
        ],
        "output_column_names": [
            "male_patients_with_elevated_bilirubin"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6036585365853658,
        "bleu_similarity_score": 5.5928682194669055e-155,
        "execution_accuracy": false
    },
    {
        "question": "What is the most common illness that doctors identified among the patients whose lab work was done between 1/1/1985, and 12/31/1995?",
        "reference_query": "SELECT T2.\"Diagnosis\" FROM \"Examination\" AS T1 INNER JOIN \"Patient\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T1.\"Examination Date\"BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T2.\"Diagnosis\" ORDER BY COUNT(T2.\"Diagnosis\") DESC LIMIT 1",
        "normalized_reference_query": "SELECT T2.\"Diagnosis\" FROM \"Examination\" AS T1 INNER JOIN \"Patient\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T1.\"Examination Date\"BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T2.\"Diagnosis\" ORDER BY COUNT(T2.\"Diagnosis\") DESC LIMIT 1",
        "reference_sample_result": [
            [
                "SLE"
            ]
        ],
        "reference_column_names": [
            "Diagnosis"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT p.\"Diagnosis\", COUNT(*) AS diagnosis_count\nFROM public.\"Patient\" p\nJOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\nWHERE l.\"Date\" BETWEEN '1985-01-01' AND '1995-12-31'\nGROUP BY p.\"Diagnosis\"\nORDER BY diagnosis_count DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT p.\"Diagnosis\", COUNT(*) AS diagnosis_count FROM public.\"Patient\" p JOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\" WHERE l.\"Date\" BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY p.\"Diagnosis\" ORDER BY diagnosis_count DESC LIMIT 1;",
        "output_sample_result": [
            [
                "SLE",
                1645
            ]
        ],
        "output_column_names": [
            "Diagnosis",
            "diagnosis_count"
        ],
        "output_row_count": 1,
        "output_column_count": 2,
        "sequence_similarity_score": 0.5379609544468547,
        "bleu_similarity_score": 0.17202650214787163,
        "execution_accuracy": false
    },
    {
        "question": "What is the average age of patients as of year 1999 examined in the laboratory for the October of the year 1991?",
        "reference_query": "SELECT AVG('1999'  - EXTRACT(YEAR FROM T2.\"Birthday\")) FROM \"Laboratory\" AS T1 INNER JOIN \"Patient\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T1.\"Date\" BETWEEN '1991-10-01' AND '1991-10-30'",
        "normalized_reference_query": "SELECT AVG('1999' - EXTRACT(YEAR FROM T2.\"Birthday\")) FROM \"Laboratory\" AS T1 INNER JOIN \"Patient\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T1.\"Date\" BETWEEN '1991-10-01' AND '1991-10-30'",
        "reference_sample_result": [
            [
                "47.6521739130434783"
            ]
        ],
        "reference_column_names": [
            "avg"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT AVG(EXTRACT(YEAR FROM AGE('1999-01-01', p.\"Birthday\"))) AS average_age\nFROM public.\"Patient\" p\nJOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\nWHERE l.\"Date\" BETWEEN '1991-10-01' AND '1991-10-31';",
        "normalized_output_query": "SELECT AVG(EXTRACT(YEAR FROM AGE('1999-01-01', p.\"Birthday\"))) AS average_age FROM public.\"Patient\" p JOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\" WHERE l.\"Date\" BETWEEN '1991-10-01' AND '1991-10-31';",
        "output_sample_result": [
            [
                "46.1800000000000000"
            ]
        ],
        "output_column_names": [
            "average_age"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6421052631578947,
        "bleu_similarity_score": 2.3882764026062074e-78,
        "execution_accuracy": false
    },
    {
        "question": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?",
        "reference_query": "SELECT EXTRACT(YEAR FROM T2.\"Date\") - EXTRACT(YEAR FROM T1.\"Birthday\"), T1.\"Diagnosis\" FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" ORDER BY T2.\"HGB\" DESC LIMIT 1",
        "normalized_reference_query": "SELECT EXTRACT(YEAR FROM T2.\"Date\") - EXTRACT(YEAR FROM T1.\"Birthday\"), T1.\"Diagnosis\" FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" ORDER BY T2.\"HGB\" DESC LIMIT 1",
        "reference_sample_result": [
            [
                "55",
                "RA, SLE susp"
            ]
        ],
        "reference_column_names": [
            "?column?",
            "Diagnosis"
        ],
        "reference_row_count": 1,
        "reference_column_count": 2,
        "output_query": "SELECT \n    EXTRACT(YEAR FROM AGE(e.\"Examination Date\", p.\"Birthday\")) AS age_at_examination,\n    l.\"HGB\" AS hemoglobin_count,\n    e.\"Diagnosis\"\nFROM \n    public.\"Patient\" p\nJOIN \n    public.\"Examination\" e ON p.\"ID\" = e.\"ID\"\nJOIN \n    public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\" AND e.\"Examination Date\" = l.\"Date\"\nORDER BY \n    l.\"HGB\" DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT EXTRACT(YEAR FROM AGE(e.\"Examination Date\", p.\"Birthday\")) AS age_at_examination, l.\"HGB\" AS hemoglobin_count, e.\"Diagnosis\" FROM public.\"Patient\" p JOIN public.\"Examination\" e ON p.\"ID\" = e.\"ID\" JOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\" AND e.\"Examination Date\" = l.\"Date\" ORDER BY l.\"HGB\" DESC LIMIT 1;",
        "output_sample_result": [
            [
                "23",
                null,
                "SjS"
            ]
        ],
        "output_column_names": [
            "age_at_examination",
            "hemoglobin_count",
            "Diagnosis"
        ],
        "output_row_count": 1,
        "output_column_count": 3,
        "sequence_similarity_score": 0.23412698412698413,
        "bleu_similarity_score": 2.101889569428303e-78,
        "execution_accuracy": false
    },
    {
        "question": "What was the anti-nucleus antibody concentration level for the patient id 3605340 on 1996/12/2?",
        "reference_query": "SELECT \"ANA\" FROM \"Examination\" WHERE \"ID\" = '3605340' AND\"Examination Date\"= '1996-12-02'",
        "normalized_reference_query": "SELECT \"ANA\" FROM \"Examination\" WHERE \"ID\" = '3605340' AND\"Examination Date\"= '1996-12-02'",
        "reference_sample_result": [
            [
                16
            ]
        ],
        "reference_column_names": [
            "ANA"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT \"ANA\" \nFROM public.\"Examination\" \nWHERE \"ID\" = 3605340 AND \"Examination Date\" = '1996-12-02';",
        "normalized_output_query": "SELECT \"ANA\" FROM public.\"Examination\" WHERE \"ID\" = 3605340 AND \"Examination Date\" = '1996-12-02';",
        "output_sample_result": [
            [
                16
            ]
        ],
        "output_column_names": [
            "ANA"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.9361702127659575,
        "bleu_similarity_score": 4.994788421695789e-78,
        "execution_accuracy": false
    },
    {
        "question": "Was the total cholesterol status for the patient id 2927464 on 1995-9-4 at the normal level?",
        "reference_query": "SELECT CASE WHEN\"T-CHO\"< 250 THEN 'Normal' ELSE 'Abnormal' END FROM \"Laboratory\" WHERE \"ID\" = '2927464' AND \"Date\" = '1995-09-04'",
        "normalized_reference_query": "SELECT CASE WHEN\"T-CHO\"< 250 THEN 'Normal' ELSE 'Abnormal' END FROM \"Laboratory\" WHERE \"ID\" = '2927464' AND \"Date\" = '1995-09-04'",
        "reference_sample_result": [
            [
                "Normal"
            ]
        ],
        "reference_column_names": [
            "case"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT \"T-CHO\"\nFROM public.\"Laboratory\"\nWHERE \"ID\" = 2927464 AND \"Date\" = '1995-09-04';",
        "normalized_output_query": "SELECT \"T-CHO\" FROM public.\"Laboratory\" WHERE \"ID\" = 2927464 AND \"Date\" = '1995-09-04';",
        "output_sample_result": [
            [
                196
            ]
        ],
        "output_column_names": [
            "T-CHO"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7314814814814815,
        "bleu_similarity_score": 3.1981525151989664e-78,
        "execution_accuracy": false
    },
    {
        "question": "What was the gender of the first AORTITIS diagnosed patient?",
        "reference_query": "SELECT \"SEX\" FROM \"Patient\" WHERE \"Diagnosis\" = 'AORTITIS' AND\"First Date\"IS NOT NULL ORDER BY\"First Date\"ASC LIMIT 1",
        "normalized_reference_query": "SELECT \"SEX\" FROM \"Patient\" WHERE \"Diagnosis\" = 'AORTITIS' AND\"First Date\"IS NOT NULL ORDER BY\"First Date\"ASC LIMIT 1",
        "reference_sample_result": [
            [
                "F"
            ]
        ],
        "reference_column_names": [
            "SEX"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT p.\"SEX\"\nFROM public.\"Patient\" p\nWHERE p.\"Diagnosis\" = 'AORTITIS'\nORDER BY p.\"First Date\" ASC\nLIMIT 1;",
        "normalized_output_query": "SELECT p.\"SEX\" FROM public.\"Patient\" p WHERE p.\"Diagnosis\" = 'AORTITIS' ORDER BY p.\"First Date\" ASC LIMIT 1;",
        "output_sample_result": [
            [
                "F"
            ]
        ],
        "output_column_names": [
            "SEX"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7466666666666667,
        "bleu_similarity_score": 5.7909592670006064e-155,
        "execution_accuracy": false
    },
    {
        "question": "For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?",
        "reference_query": "SELECT\"aCL IgA\",\"aCL IgG\",\"aCL IgM\"FROM \"Examination\" WHERE \"ID\" IN ( SELECT \"ID\"  FROM \"Patient\" WHERE \"Diagnosis\" = 'SLE' AND \"Description\" = '1994-02-19' ) AND\"Examination Date\"= '1993-11-12'",
        "normalized_reference_query": "SELECT\"aCL IgA\", \"aCL IgG\", \"aCL IgM\" FROM \"Examination\" WHERE \"ID\" IN (SELECT \"ID\" FROM \"Patient\" WHERE \"Diagnosis\" = 'SLE' AND \"Description\" = '1994-02-19') AND\"Examination Date\"= '1993-11-12'",
        "reference_sample_result": [
            [
                3,
                5.1,
                4.1
            ]
        ],
        "reference_column_names": [
            "aCL IgA",
            "aCL IgG",
            "aCL IgM"
        ],
        "reference_row_count": 1,
        "reference_column_count": 3,
        "output_query": "SELECT e.\"aCL IgG\", e.\"aCL IgM\", e.\"aCL IgA\"\nFROM public.\"Examination\" e\nJOIN public.\"Patient\" p ON e.\"ID\" = p.\"ID\"\nWHERE p.\"Diagnosis\" = 'SLE' AND p.\"First Date\" = '1994-02-19' AND e.\"Examination Date\" = '1993-11-12';",
        "normalized_output_query": "SELECT e.\"aCL IgG\", e.\"aCL IgM\", e.\"aCL IgA\" FROM public.\"Examination\" e JOIN public.\"Patient\" p ON e.\"ID\" = p.\"ID\" WHERE p.\"Diagnosis\" = 'SLE' AND p.\"First Date\" = '1994-02-19' AND e.\"Examination Date\" = '1993-11-12';",
        "output_sample_result": [],
        "output_column_names": [
            "aCL IgG",
            "aCL IgM",
            "aCL IgA"
        ],
        "output_row_count": 0,
        "output_column_count": 3,
        "sequence_similarity_score": 0.5728155339805825,
        "bleu_similarity_score": 1.8435201129673052e-78,
        "execution_accuracy": false
    },
    {
        "question": "Was the patient a man or a women whose ALT glutamic pylvic transaminase status got 9 on 1992-6-12?",
        "reference_query": "SELECT T1.\"SEX\" FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T2.\"GPT\" = 9.0 AND T2.\"Date\" = '1992-06-12'",
        "normalized_reference_query": "SELECT T1.\"SEX\" FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T2.\"GPT\" = 9.0 AND T2.\"Date\" = '1992-06-12'",
        "reference_error": null,
        "output_query": "SELECT p.SEX\nFROM public.\"Patient\" p\nJOIN public.\"Laboratory\" l ON p.ID = l.ID\nWHERE l.\"GPT\" = 9 AND l.\"Date\" = '1992-06-12';",
        "normalized_output_query": "SELECT p.SEX FROM public.\"Patient\" p JOIN public.\"Laboratory\" l ON p.ID = l.ID WHERE l.\"GPT\" = 9 AND l.\"Date\" = '1992-06-12';",
        "output_error": "column p.id does not exist\nLINE 1: ... public.\"Patient\" p JOIN public.\"Laboratory\" l ON p.ID = l.I...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "For the patient who got the laboratory test of uric acid level as 8.4 on 1991-10-21, how old was he/she at that time?",
        "reference_query": "SELECT EXTRACT(YEAR FROM T2.\"Date\") - EXTRACT(YEAR FROM T1.\"Birthday\") FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T2.\"UA\" = 8.4 AND T2.\"Date\" = '1991-10-21'",
        "normalized_reference_query": "SELECT EXTRACT(YEAR FROM T2.\"Date\") - EXTRACT(YEAR FROM T1.\"Birthday\") FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T2.\"UA\" = 8.4 AND T2.\"Date\" = '1991-10-21'",
        "reference_sample_result": [],
        "reference_column_names": [
            "?column?"
        ],
        "reference_row_count": 0,
        "reference_column_count": 1,
        "output_query": "SELECT EXTRACT(YEAR FROM AGE(l.\"Date\", p.\"Birthday\")) AS age_at_test\nFROM public.\"Laboratory\" l\nJOIN public.\"Patient\" p ON l.\"ID\" = p.\"ID\"\nWHERE l.\"UA\" = 8.4 AND l.\"Date\" = '1991-10-21';",
        "normalized_output_query": "SELECT EXTRACT(YEAR FROM AGE(l.\"Date\", p.\"Birthday\")) AS age_at_test FROM public.\"Laboratory\" l JOIN public.\"Patient\" p ON l.\"ID\" = p.\"ID\" WHERE l.\"UA\" = 8.4 AND l.\"Date\" = '1991-10-21';",
        "output_sample_result": [],
        "output_column_names": [
            "age_at_test"
        ],
        "output_row_count": 0,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6790450928381963,
        "bleu_similarity_score": 3.0664617652294623e-78,
        "execution_accuracy": true
    },
    {
        "question": "For the patient who was diagnosed SLE on 1997/1/27, what was his/her original diagnose when he/she came to the hospital for the first time?",
        "reference_query": "SELECT T1.\"Diagnosis\" FROM \"Patient\" AS T1 INNER JOIN \"Examination\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T1.\"ID\" = ( SELECT \"ID\"  FROM \"Examination\" WHERE\"Examination Date\"= '1997-01-27' AND \"Diagnosis\" = 'SLE' ) AND T2.\"Examination Date\"= T1.\"First Date\"",
        "normalized_reference_query": "SELECT T1.\"Diagnosis\" FROM \"Patient\" AS T1 INNER JOIN \"Examination\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T1.\"ID\" = (SELECT \"ID\" FROM \"Examination\" WHERE\"Examination Date\"= '1997-01-27' AND \"Diagnosis\" = 'SLE') AND T2.\"Examination Date\"= T1.\"First Date\"",
        "reference_sample_result": [
            [
                "SLE"
            ]
        ],
        "reference_column_names": [
            "Diagnosis"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT \"Description\" \nFROM public.\"Patient\" \nWHERE \"ID\" = (\n    SELECT \"ID\" \n    FROM public.\"Examination\" \n    WHERE \"Diagnosis\" = 'SLE' \n    AND \"Examination Date\" = '1997-01-27'\n)",
        "normalized_output_query": "SELECT \"Description\" FROM public.\"Patient\" WHERE \"ID\" = (SELECT \"ID\" FROM public.\"Examination\" WHERE \"Diagnosis\" = 'SLE' AND \"Examination Date\" = '1997-01-27')",
        "output_sample_result": [
            [
                "1997-04-01"
            ]
        ],
        "output_column_names": [
            "Description"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6093366093366094,
        "bleu_similarity_score": 0.0841754438672041,
        "execution_accuracy": false
    },
    {
        "question": "For the patient whose birthday was 1959/3/1, what symptoms did he/she have during the examination on 1993/9/27?",
        "reference_query": "SELECT T2.\"Symptoms\" FROM \"Patient\" AS T1 INNER JOIN \"Examination\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T1.\"Birthday\" = '1959-03-01' AND T2.\"Examination Date\"= '1993-09-27'",
        "normalized_reference_query": "SELECT T2.\"Symptoms\" FROM \"Patient\" AS T1 INNER JOIN \"Examination\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T1.\"Birthday\" = '1959-03-01' AND T2.\"Examination Date\"= '1993-09-27'",
        "reference_error": null,
        "output_query": "SELECT e.Symptoms\nFROM public.\"Patient\" p\nJOIN public.\"Examination\" e ON p.ID = e.ID\nWHERE p.Birthday = '1959-03-01' AND e.\"Examination Date\" = '1993-09-27';",
        "normalized_output_query": "SELECT e.Symptoms FROM public.\"Patient\" p JOIN public.\"Examination\" e ON p.ID = e.ID WHERE p.Birthday = '1959-03-01' AND e.\"Examination Date\" = '1993-09-27';",
        "output_error": "column p.id does not exist\nLINE 1: ...public.\"Patient\" p JOIN public.\"Examination\" e ON p.ID = e.I...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?",
        "reference_query": "SELECT CAST((SUM(CASE WHEN T2.\"Date\"::TEXT LIKE '1981-11-%' THEN T2.\"T-CHO\"ELSE 0 END) - SUM(CASE WHEN T2.\"Date\"::TEXT LIKE '1981-12-%' THEN T2.\"T-CHO\"ELSE 0 END)) AS DOUBLE PRECISION) / SUM(CASE WHEN T2.\"Date\"::TEXT LIKE '1981-12-%' THEN T2.\"T-CHO\"ELSE 0 END) FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T1.\"Birthday\" = '1959-02-18'",
        "normalized_reference_query": "SELECT CAST((SUM(CASE WHEN T2.\"Date\"::TEXT LIKE '1981-11-%' THEN T2.\"T-CHO\" ELSE 0 END) - SUM(CASE WHEN T2.\"Date\"::TEXT LIKE '1981-12-%' THEN T2.\"T-CHO\" ELSE 0 END)) AS DOUBLE PRECISION) / SUM(CASE WHEN T2.\"Date\"::TEXT LIKE '1981-12-%' THEN T2.\"T-CHO\" ELSE 0 END) FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T1.\"Birthday\" = '1959-02-18'",
        "reference_sample_result": [
            [
                0.06030150753768844
            ]
        ],
        "reference_column_names": [
            "?column?"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT \n    ((MAX(\"T-CHO\") FILTER (WHERE EXTRACT(MONTH FROM \"Date\") = 11) - MAX(\"T-CHO\") FILTER (WHERE EXTRACT(MONTH FROM \"Date\") = 12))::FLOAT / NULLIF(MAX(\"T-CHO\") FILTER (WHERE EXTRACT(MONTH FROM \"Date\") = 11), 0)) * 100 AS decrease_rate\nFROM \n    public.\"Laboratory\" \nWHERE \n    \"ID\" = (SELECT \"ID\" FROM public.\"Patient\" WHERE \"Birthday\" = '1959-02-18')\n    AND EXTRACT(YEAR FROM \"Date\") = 1981;",
        "normalized_output_query": "SELECT ((MAX(\"T-CHO\") FILTER (WHERE EXTRACT(MONTH FROM \"Date\") = 11) - MAX(\"T-CHO\") FILTER (WHERE EXTRACT(MONTH FROM \"Date\") = 12))::FLOAT / NULLIF(MAX(\"T-CHO\") FILTER (WHERE EXTRACT(MONTH FROM \"Date\") = 11), 0)) * 100 AS decrease_rate FROM public.\"Laboratory\" WHERE \"ID\" = (SELECT \"ID\" FROM public.\"Patient\" WHERE \"Birthday\" = '1959-02-18') AND EXTRACT(YEAR FROM \"Date\") = 1981;",
        "output_sample_result": [
            [
                5.687203791469194
            ]
        ],
        "output_column_names": [
            "decrease_rate"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.13885180240320427,
        "bleu_similarity_score": 1.1024454772680337e-231,
        "execution_accuracy": false
    },
    {
        "question": "Lists all patients by ID who were diagnosed with Behcet's and had their exams between 01/01/197 and 12/31/1997.",
        "reference_query": "SELECT \"ID\"  FROM \"Examination\" WHERE\"Examination Date\"BETWEEN '1997-01-01' AND '1997-12-31' AND \"Diagnosis\" = 'Behcet'",
        "normalized_reference_query": "SELECT \"ID\" FROM \"Examination\" WHERE\"Examination Date\"BETWEEN '1997-01-01' AND '1997-12-31' AND \"Diagnosis\" = 'Behcet'",
        "reference_sample_result": [
            [
                3390870
            ],
            [
                5552330
            ],
            [
                5601370
            ],
            [
                5661800
            ],
            [
                5668410
            ]
        ],
        "reference_column_names": [
            "ID"
        ],
        "reference_row_count": 5,
        "reference_column_count": 1,
        "output_query": "SELECT DISTINCT p.\"ID\"\nFROM public.\"Patient\" p\nJOIN public.\"Examination\" e ON p.\"ID\" = e.\"ID\"\nWHERE p.\"Diagnosis\" = 'Behcet''s'\nAND e.\"Examination Date\" BETWEEN '1970-01-01' AND '1997-12-31';",
        "normalized_output_query": "SELECT DISTINCT p.\"ID\" FROM public.\"Patient\" p JOIN public.\"Examination\" e ON p.\"ID\" = e.\"ID\" WHERE p.\"Diagnosis\" = 'Behcet''s' AND e.\"Examination Date\" BETWEEN '1970-01-01' AND '1997-12-31';",
        "output_sample_result": [],
        "output_column_names": [
            "ID"
        ],
        "output_row_count": 0,
        "output_column_count": 1,
        "sequence_similarity_score": 0.5825242718446602,
        "bleu_similarity_score": 1.2308298330855597e-231,
        "execution_accuracy": false
    },
    {
        "question": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID.",
        "reference_query": "SELECT DISTINCT \"ID\" FROM \"Laboratory\" WHERE \"Date\" BETWEEN '1987-07-06' AND '1996-01-31' AND \"GPT\" > 30 AND \"ALB\"  < 4",
        "normalized_reference_query": "SELECT DISTINCT \"ID\" FROM \"Laboratory\" WHERE \"Date\" BETWEEN '1987-07-06' AND '1996-01-31' AND \"GPT\" > 30 AND \"ALB\" < 4",
        "reference_sample_result": [
            [
                3299630
            ],
            [
                5397059
            ],
            [
                5115307
            ],
            [
                5302954
            ],
            [
                5296268
            ]
        ],
        "reference_column_names": [
            "ID"
        ],
        "reference_row_count": 63,
        "reference_column_count": 1,
        "output_query": "SELECT DISTINCT e.\"ID\"\nFROM public.\"Examination\" e\nJOIN public.\"Laboratory\" l ON e.\"ID\" = l.\"ID\"\nWHERE e.\"Examination Date\" BETWEEN '1987-07-06' AND '1996-01-31'\nAND l.\"GPT\" > 30\nAND l.\"ALB\" < 4;",
        "normalized_output_query": "SELECT DISTINCT e.\"ID\" FROM public.\"Examination\" e JOIN public.\"Laboratory\" l ON e.\"ID\" = l.\"ID\" WHERE e.\"Examination Date\" BETWEEN '1987-07-06' AND '1996-01-31' AND l.\"GPT\" > 30 AND l.\"ALB\" < 4;",
        "output_sample_result": [
            [
                1043570
            ],
            [
                460574
            ]
        ],
        "output_column_names": [
            "ID"
        ],
        "output_row_count": 2,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7539936102236422,
        "bleu_similarity_score": 0.1961887304255141,
        "execution_accuracy": false
    },
    {
        "question": "How many female patients born in 1964 were admitted to the hospital? List them by ID.",
        "reference_query": "SELECT \"ID\"  FROM \"Patient\" WHERE EXTRACT(YEAR FROM \"Birthday\") = '1964' AND \"SEX\" = 'F' AND \"Admission\" = '+'",
        "normalized_reference_query": "SELECT \"ID\" FROM \"Patient\" WHERE EXTRACT(YEAR FROM \"Birthday\") = '1964' AND \"SEX\" = 'F' AND \"Admission\" = '+'",
        "reference_sample_result": [
            [
                1061042
            ],
            [
                3046555
            ],
            [
                3420980
            ],
            [
                4904957
            ],
            [
                5093771
            ]
        ],
        "reference_column_names": [
            "ID"
        ],
        "reference_row_count": 9,
        "reference_column_count": 1,
        "output_query": "SELECT \"ID\"\nFROM public.\"Patient\"\nWHERE \"SEX\" = 'female' AND EXTRACT(YEAR FROM \"Birthday\") = 1964 AND \"Admission\" IS NOT NULL;",
        "normalized_output_query": "SELECT \"ID\" FROM public.\"Patient\" WHERE \"SEX\" = 'female' AND EXTRACT(YEAR FROM \"Birthday\") = 1964 AND \"Admission\" IS NOT NULL;",
        "output_sample_result": [],
        "output_column_names": [
            "ID"
        ],
        "output_row_count": 0,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7404255319148936,
        "bleu_similarity_score": 0.23275118953744547,
        "execution_accuracy": false
    },
    {
        "question": "What percentage of patients with a proteinuria level within the normal range have a uric acid level below the normal range?",
        "reference_query": "SELECT CAST(SUM(CASE WHEN \"UA\" <= 6.5 THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(\"ID\") FROM \"Laboratory\" WHERE \"U-PRO\" ~ '^[-]?[0-9]+(\\.[0-9]+)?$' AND \"U-PRO\"::DOUBLE PRECISION > 0 AND \"U-PRO\"::DOUBLE PRECISION < 30",
        "normalized_reference_query": "SELECT CAST(SUM(CASE WHEN \"UA\" <= 6.5 THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(\"ID\") FROM \"Laboratory\" WHERE \"U-PRO\" ~ '^[-]?[0-9]+(\\.[0-9]+)?$' AND \"U-PRO\"::DOUBLE PRECISION > 0 AND \"U-PRO\"::DOUBLE PRECISION < 30",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information about the normal range for proteinuria and uric acid levels.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information about the NORMAL RANGE FOR proteinuria AND uric acid levels.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What percentage of male patients who first presented to the hospital in 1981 were diagnosed with BEHCET?",
        "reference_query": "SELECT CAST(SUM(CASE WHEN \"Diagnosis\" = 'BEHCET' THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(\"ID\")  FROM \"Patient\" WHERE EXTRACT(YEAR FROM\"First Date\") = '1981' AND \"SEX\" = 'M'",
        "normalized_reference_query": "SELECT CAST(SUM(CASE WHEN \"Diagnosis\" = 'BEHCET' THEN 1 ELSE 0 END) AS DOUBLE PRECISION) * 100 / COUNT(\"ID\") FROM \"Patient\" WHERE EXTRACT(YEAR FROM\"First Date\") = '1981' AND \"SEX\" = 'M'",
        "reference_error": null,
        "output_query": "SELECT \n    (COUNT(CASE WHEN Diagnosis = 'BEHCET' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_of_male_patients\nFROM \n    public.\"Patient\"\nWHERE \n    SEX = 'Male' \n    AND EXTRACT(YEAR FROM \"First Date\") = 1981;",
        "normalized_output_query": "SELECT (COUNT(CASE WHEN Diagnosis = 'BEHCET' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_of_male_patients FROM public.\"Patient\" WHERE SEX = 'Male' AND EXTRACT(YEAR FROM \"First Date\") = 1981;",
        "output_error": "column \"diagnosis\" does not exist\nLINE 1: SELECT (COUNT(CASE WHEN Diagnosis = 'BEHCET' THEN 1 END) * 1...\n                                ^\nHINT:  Perhaps you meant to reference the column \"Patient.Diagnosis\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.",
        "reference_query": "SELECT DISTINCT T1.\"ID\" FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T1.\"Admission\" = '-' AND T2.\"T-BIL\"< 2.0 AND T2.\"Date\"::TEXT LIKE '1991-10-%'",
        "normalized_reference_query": "SELECT DISTINCT T1.\"ID\" FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T1.\"Admission\" = '-' AND T2.\"T-BIL\"< 2.0 AND T2.\"Date\"::TEXT LIKE '1991-10-%'",
        "reference_error": null,
        "output_query": "SELECT DISTINCT p.ID\nFROM public.\"Patient\" p\nJOIN public.\"Laboratory\" l ON p.ID = l.ID\nWHERE p.Description IS NOT NULL\nAND l.Date BETWEEN '1991-10-01' AND '1991-10-31'\nAND l.\"T-BIL\" BETWEEN 0.1 AND 1.2;",
        "normalized_output_query": "SELECT DISTINCT p.ID FROM public.\"Patient\" p JOIN public.\"Laboratory\" l ON p.ID = l.ID WHERE p.Description IS NOT NULL AND l.Date BETWEEN '1991-10-01' AND '1991-10-31' AND l.\"T-BIL\" BETWEEN 0.1 AND 1.2;",
        "output_error": "column p.id does not exist\nLINE 1: ... public.\"Patient\" p JOIN public.\"Laboratory\" l ON p.ID = l.I...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What sex is the patient who in a medical examination was diagnosed with PSS and in a laboratory examination had a blood level of C-reactive protein de 2+, createnine 1 and LDH 123?",
        "reference_query": "SELECT T1.\"SEX\" FROM \"Patient\" AS T1 INNER JOIN \"Examination\" AS T2 ON T1.\"ID\" = T2.\"ID\" INNER JOIN \"Laboratory\" AS T3 ON T3.\"ID\" = T2.\"ID\" WHERE T2.\"Diagnosis\" = 'PSS' AND T3.\"CRP\" = '2+' AND T3.\"CRE\" = 1.0 AND T3.\"LDH\" = 123",
        "normalized_reference_query": "SELECT T1.\"SEX\" FROM \"Patient\" AS T1 INNER JOIN \"Examination\" AS T2 ON T1.\"ID\" = T2.\"ID\" INNER JOIN \"Laboratory\" AS T3 ON T3.\"ID\" = T2.\"ID\" WHERE T2.\"Diagnosis\" = 'PSS' AND T3.\"CRP\" = '2+' AND T3.\"CRE\" = 1.0 AND T3.\"LDH\" = 123",
        "reference_error": null,
        "output_query": "SELECT p.SEX\nFROM public.\"Patient\" p\nJOIN public.\"Examination\" e ON p.ID = e.ID\nJOIN public.\"Laboratory\" l ON p.ID = l.ID\nWHERE e.Diagnosis = 'PSS'\n  AND l.\"CRP\" = '2+'\n  AND l.\"CRE\" = 1\n  AND l.\"LDH\" = 123;",
        "normalized_output_query": "SELECT p.SEX FROM public.\"Patient\" p JOIN public.\"Examination\" e ON p.ID = e.ID JOIN public.\"Laboratory\" l ON p.ID = l.ID WHERE e.Diagnosis = 'PSS' AND l.\"CRP\" = '2+' AND l.\"CRE\" = 1 AND l.\"LDH\" = 123;",
        "output_error": "column p.id does not exist\nLINE 1: ...public.\"Patient\" p JOIN public.\"Examination\" e ON p.ID = e.I...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE?",
        "reference_query": "SELECT AVG(T2.\"ALB\") FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T2.\"PLT\" > 400 AND T1.\"Diagnosis\" = 'SLE' AND T1.\"SEX\" = 'F'",
        "normalized_reference_query": "SELECT AVG(T2.\"ALB\") FROM \"Patient\" AS T1 INNER JOIN \"Laboratory\" AS T2 ON T1.\"ID\" = T2.\"ID\" WHERE T2.\"PLT\" > 400 AND T1.\"Diagnosis\" = 'SLE' AND T1.\"SEX\" = 'F'",
        "reference_sample_result": [
            [
                3.912307698910053
            ]
        ],
        "reference_column_names": [
            "avg"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT AVG(l.\"ALB\") AS average_albumin_level\nFROM public.\"Laboratory\" l\nJOIN public.\"Patient\" p ON l.\"ID\" = p.\"ID\"\nWHERE p.\"SEX\" = 'Female' AND l.\"PLT\" > 400 AND p.\"Diagnosis\" = 'SLE';",
        "normalized_output_query": "SELECT AVG(l.\"ALB\") AS average_albumin_level FROM public.\"Laboratory\" l JOIN public.\"Patient\" p ON l.\"ID\" = p.\"ID\" WHERE p.\"SEX\" = 'Female' AND l.\"PLT\" > 400 AND p.\"Diagnosis\" = 'SLE';",
        "output_sample_result": [
            [
                null
            ]
        ],
        "output_column_names": [
            "average_albumin_level"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.5830903790087464,
        "bleu_similarity_score": 2.3746229528862933e-78,
        "execution_accuracy": false
    },
    {
        "question": "What is the most common sign of patients with SLE disease?",
        "reference_query": "SELECT \"Symptoms\" FROM \"Examination\" WHERE \"Diagnosis\" = 'SLE' GROUP BY \"Symptoms\" ORDER BY COUNT(\"Symptoms\") DESC LIMIT 1",
        "normalized_reference_query": "SELECT \"Symptoms\" FROM \"Examination\" WHERE \"Diagnosis\" = 'SLE' GROUP BY \"Symptoms\" ORDER BY COUNT(\"Symptoms\") DESC LIMIT 1",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate a SQL query for the question because there is no information about SLE disease or specific signs/symptoms associated with it in the given tables.",
        "normalized_output_query": "The provided context IS insufficient TO generate a SQL query FOR the question because there IS NO information about SLE disease OR SPECIFIC signs/symptoms associated WITH it IN the given tables.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate a SQL query...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "When was the medical information on patient number 48473 first documented, and what disease did she have?",
        "reference_query": "SELECT\"First Date\", \"Diagnosis\" FROM \"Patient\"  WHERE \"ID\" = '48473'",
        "normalized_reference_query": "SELECT\"First Date\", \"Diagnosis\" FROM \"Patient\" WHERE \"ID\" = '48473'",
        "reference_sample_result": [
            [
                null,
                "SLE"
            ]
        ],
        "reference_column_names": [
            "First Date",
            "Diagnosis"
        ],
        "reference_row_count": 1,
        "reference_column_count": 2,
        "output_query": "SELECT \"First Date\", \"Diagnosis\"\nFROM public.\"Patient\"\nWHERE \"ID\" = 48473;",
        "normalized_output_query": "SELECT \"First Date\", \"Diagnosis\" FROM public.\"Patient\" WHERE \"ID\" = 48473;",
        "output_sample_result": [
            [
                null,
                "SLE"
            ]
        ],
        "output_column_names": [
            "First Date",
            "Diagnosis"
        ],
        "output_row_count": 1,
        "output_column_count": 2,
        "sequence_similarity_score": 0.9219858156028369,
        "bleu_similarity_score": 6.206021746903507e-78,
        "execution_accuracy": false
    },
    {
        "question": "How many female patients were given an APS diagnosis?",
        "reference_query": "SELECT COUNT(\"ID\")  FROM \"Patient\" WHERE \"SEX\" = 'F' AND \"Diagnosis\" = 'APS'",
        "normalized_reference_query": "SELECT COUNT(\"ID\") FROM \"Patient\" WHERE \"SEX\" = 'F' AND \"Diagnosis\" = 'APS'",
        "reference_sample_result": [
            [
                16
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*) AS Female_APS_Patients_Count\nFROM public.\"Patient\"\nWHERE \"SEX\" = 'Female' AND \"Diagnosis\" = 'APS';",
        "normalized_output_query": "SELECT COUNT(*) AS Female_APS_Patients_Count FROM public.\"Patient\" WHERE \"SEX\" = 'Female' AND \"Diagnosis\" = 'APS';",
        "output_sample_result": [
            [
                0
            ]
        ],
        "output_column_names": [
            "female_aps_patients_count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7513227513227513,
        "bleu_similarity_score": 5.053216933905455e-78,
        "execution_accuracy": false
    },
    {
        "question": "What's Angela Sanders's major?",
        "reference_query": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'",
        "normalized_reference_query": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no direct information available about Angela Sanders or her major in the given tables. The context does not include any reference to a table or columns that would store members' names alongside their majors.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO direct information available about Angela Sanders OR her major IN the given tables. The context does NOT INCLUDE ANY reference TO a TABLE OR columns that would store members' NAMES alongside their majors.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many students in the Student_Club are from the College of Engineering?",
        "reference_query": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'",
        "normalized_reference_query": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no table named `Student_Club` and no table that directly associates students with their colleges or majors. The `major` table contains information about majors and colleges, but there is no clear link between students and the College of Engineering. Additional context or tables linking students to their majors or colleges would be needed.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO TABLE named `Student_Club` AND NO TABLE that directly associates students WITH their colleges OR majors. The `major` TABLE CONTAINS information about majors AND colleges, but there IS NO clear LINK BETWEEN students AND the College OF Engineering. Additional context OR TABLES linking students TO their majors OR colleges would be needed.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Please list the full names of the students in the Student_Club that come from the Art and Design Department.",
        "reference_query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'",
        "normalized_reference_query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'",
        "reference_error": null,
        "output_query": "The provided context is insufficient because there is no table named `Student_Club` or any direct reference to student club membership or the Art and Design Department. The `major` and `member` tables could potentially be relevant, but without specific information linking members to the Art and Design Department, a query cannot be generated.",
        "normalized_output_query": "The provided context IS insufficient because there IS NO TABLE named `Student_Club` OR ANY direct reference TO student club membership OR the Art AND Design Department. The `major` AND `member` TABLES could potentially be relevant, but WITHOUT SPECIFIC information linking members TO the Art AND Design Department, a query cannot be generated.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient because there IS NO TAB...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many students of the Student_Club have attended the event \"Women's Soccer\"?",
        "reference_query": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'",
        "normalized_reference_query": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'",
        "reference_error": null,
        "output_query": "It can't be generated because there is no table named \"Student_Club\" in the provided context. Additionally, the \"attendance\" and \"event\" tables do not have a direct connection to identify students belonging to a specific club, nor is there a specific event name \"Women's Soccer\" mentioned in the context.",
        "normalized_output_query": "It can't be generated because there is no table named \"Student_Club\" in the provided context. Additionally, the \"attendance\" and \"event\" tables do not have a direct connection to identify students belonging to a specific club, nor is there a specific event name \"Women's Soccer\" mentioned IN the context.",
        "output_error": "syntax error at or near \"It\"\nLINE 1: It can't be generated because there is no table named \"Stude...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Among the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size?",
        "reference_query": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'",
        "normalized_reference_query": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'",
        "reference_sample_result": [
            [
                7
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*) \nFROM member \nJOIN attendance ON member.member_id = attendance.link_to_member\nJOIN event ON attendance.link_to_event = event.event_id\nWHERE event.event_name = 'Women''s Soccer' AND member.t_shirt_size = 'M';",
        "normalized_output_query": "SELECT COUNT(*) FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND member.t_shirt_size = 'M';",
        "output_sample_result": [
            [
                0
            ]
        ],
        "output_column_names": [
            "count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.4692982456140351,
        "bleu_similarity_score": 0.10564161967024562,
        "execution_accuracy": false
    },
    {
        "question": "What is the event that has the highest attendance of the students from the Student_Club?",
        "reference_query": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name ORDER BY COUNT(T2.link_to_event) DESC LIMIT 1",
        "normalized_reference_query": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name ORDER BY COUNT(T2.link_to_event) DESC LIMIT 1",
        "reference_error": null,
        "output_query": "It is not possible to generate the SQL query because the provided context does not include a table named \"Student_Club\" or any information about identifying students or members in the \"attendance\" or \"event\" tables. Additionally, there is no direct link between attendance records and event details that would specify which events are attended by students or members of a \"Student_Club.\"",
        "normalized_output_query": "It IS NOT possible TO generate the SQL query because the provided context does NOT INCLUDE a TABLE named \"Student_Club\" OR ANY information about identifying students OR members IN the \"attendance\" OR \"event\" tables. Additionally, there IS NO direct LINK BETWEEN attendance records AND event details that would specify which EVENTS ARE attended BY students OR members OF a \"Student_Club.\"",
        "output_error": "syntax error at or near \"It\"\nLINE 1: It IS NOT possible TO generate the SQL query because the pro...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Which college is the vice president of the Student_Club from?",
        "reference_query": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.\"position\" LIKE 'vice president'",
        "normalized_reference_query": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.\"position\" LIKE 'vice president'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information on the structure or data of a \"Student_Club\" table or any table that contains a record of positions such as \"vice president\" associated with a college.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information ON the STRUCTURE OR DATA OF a \"Student_Club\" TABLE OR ANY TABLE that CONTAINS a record OF positions such AS \"vice president\" associated WITH a college.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Please list the event names of all the events attended by Maya Mclean.",
        "reference_query": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'",
        "normalized_reference_query": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'",
        "reference_sample_result": [
            [
                "Women's Soccer"
            ],
            [
                "Laugh Out Loud"
            ],
            [
                "October Speaker"
            ],
            [
                "Football game"
            ],
            [
                "September Speaker"
            ]
        ],
        "reference_column_names": [
            "event_name"
        ],
        "reference_row_count": 14,
        "reference_column_count": 1,
        "output_query": "SELECT e.event_name\nFROM public.event e\nJOIN public.attendance a ON e.event_id = a.link_to_event\nJOIN public.member m ON a.link_to_member = m.member_id\nWHERE m.first_name = 'Maya' AND m.last_name = 'Mclean';",
        "normalized_output_query": "SELECT e.event_name FROM public.event e JOIN public.attendance a ON e.event_id = a.link_to_event JOIN public.member m ON a.link_to_member = m.member_id WHERE m.first_name = 'Maya' AND m.last_name = 'Mclean';",
        "output_sample_result": [
            [
                "Women's Soccer"
            ],
            [
                "Laugh Out Loud"
            ],
            [
                "October Speaker"
            ],
            [
                "Football game"
            ],
            [
                "September Speaker"
            ]
        ],
        "output_column_names": [
            "event_name"
        ],
        "output_row_count": 14,
        "output_column_count": 1,
        "sequence_similarity_score": 0.491725768321513,
        "bleu_similarity_score": 1.9910641858655524e-78,
        "execution_accuracy": false
    },
    {
        "question": "How many events of the Student_Club did Sacha Harrison attend in 2019?",
        "reference_query": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Sacha' AND T3.last_name = 'Harrison' AND SUBSTR(T1.event_date, 1, 4) = '2019'",
        "normalized_reference_query": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Sacha' AND T3.last_name = 'Harrison' AND SUBSTR(T1.event_date, 1, 4) = '2019'",
        "reference_error": null,
        "output_query": "The provided context is insufficient because there is no information about the \"Student_Club\" or the specific attendance records related to \"Sacha Harrison\" in the available tables. The tables do not contain information linking members to events with their names or specific club details.",
        "normalized_output_query": "The provided context IS insufficient because there IS NO information about the \"Student_Club\" OR the SPECIFIC attendance records related TO \"Sacha Harrison\" IN the available tables. The TABLES DO NOT contain information linking members TO EVENTS WITH their NAMES OR SPECIFIC club details.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient because there IS NO inf...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?",
        "reference_query": "SELECT T1.event_name FROM event AS T1  INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id, T1.event_name  HAVING COUNT(T2.link_to_event) > 10 EXCEPT SELECT T1.event_name  FROM event AS T1  WHERE T1.type = 'Meeting'",
        "normalized_reference_query": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id, T1.event_name HAVING COUNT(T2.link_to_event) > 10 EXCEPT SELECT T1.event_name FROM event AS T1 WHERE T1.type = 'Meeting'",
        "reference_sample_result": [
            [
                "Food Bank"
            ],
            [
                "Women's Soccer"
            ],
            [
                "October Speaker"
            ],
            [
                "Laugh Out Loud"
            ],
            [
                "Community Theater"
            ]
        ],
        "reference_column_names": [
            "event_name"
        ],
        "reference_row_count": 9,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(DISTINCT e.event_id) AS meeting_count\nFROM event e\nJOIN attendance a ON e.event_id = a.link_to_event\nGROUP BY e.event_id, e.type\nHAVING COUNT(DISTINCT a.link_to_member) > 10 AND e.type = 'meeting';",
        "normalized_output_query": "SELECT COUNT(DISTINCT e.event_id) AS meeting_count FROM event e JOIN attendance a ON e.event_id = a.link_to_event GROUP BY e.event_id, e.type HAVING COUNT(DISTINCT a.link_to_member) > 10 AND e.type = 'meeting';",
        "output_sample_result": [],
        "output_column_names": [
            "meeting_count"
        ],
        "output_row_count": 0,
        "output_column_count": 1,
        "sequence_similarity_score": 0.5796460176991151,
        "bleu_similarity_score": 6.280954832398448e-155,
        "execution_accuracy": false
    },
    {
        "question": "List all the names of events that had an attendance of over 20 students but were not fundraisers.",
        "reference_query": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id, T1.event_name HAVING COUNT(T2.link_to_event) > 20 EXCEPT SELECT T1.event_name FROM event AS T1  WHERE T1.type = 'Fundraiser'",
        "normalized_reference_query": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id, T1.event_name HAVING COUNT(T2.link_to_event) > 20 EXCEPT SELECT T1.event_name FROM event AS T1 WHERE T1.type = 'Fundraiser'",
        "reference_sample_result": [
            [
                "September Meeting"
            ],
            [
                "October Speaker"
            ],
            [
                "November Meeting"
            ],
            [
                "October Meeting"
            ],
            [
                "Yearly Kickoff"
            ]
        ],
        "reference_column_names": [
            "event_name"
        ],
        "reference_row_count": 8,
        "reference_column_count": 1,
        "output_query": "SELECT e.event_name \nFROM public.event e\nJOIN public.attendance a ON e.event_id = a.link_to_event\nWHERE e.type != 'Fundraiser'\nGROUP BY e.event_name\nHAVING COUNT(a.link_to_member) > 20;",
        "normalized_output_query": "SELECT e.event_name FROM public.event e JOIN public.attendance a ON e.event_id = a.link_to_event WHERE e.type != 'Fundraiser' GROUP BY e.event_name HAVING COUNT(a.link_to_member) > 20;",
        "output_sample_result": [
            [
                "November Speaker"
            ],
            [
                "Registration"
            ],
            [
                "September Meeting"
            ],
            [
                "October Speaker"
            ],
            [
                "November Meeting"
            ]
        ],
        "output_column_names": [
            "event_name"
        ],
        "output_row_count": 9,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6060606060606061,
        "bleu_similarity_score": 3.5503952284834947e-155,
        "execution_accuracy": false
    },
    {
        "question": "What is the average attendance of meetings in 2020?",
        "reference_query": "SELECT CAST(COUNT(T2.link_to_event) AS DOUBLE PRECISION) / COUNT(DISTINCT T2.link_to_event) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE SUBSTR(T1.event_date, 1, 4) = '2020' AND T1.type = 'Meeting'",
        "normalized_reference_query": "SELECT CAST(COUNT(T2.link_to_event) AS DOUBLE PRECISION) / COUNT(DISTINCT T2.link_to_event) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE SUBSTR(T1.event_date, 1, 4) = '2020' AND T1.type = 'Meeting'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information on how attendance is recorded in relation to events, such as the number of attendees per event or how to filter events held in 2020. Additional information or tables are needed to compute the average attendance of meetings in 2020.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information ON how attendance IS recorded IN relation TO EVENTS, such AS the number OF attendees per event OR how TO filter EVENTS held IN 2020. Additional information OR TABLES ARE needed TO compute the average attendance OF meetings IN 2020.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the most expensive item that was spent in support of club events?",
        "reference_query": "SELECT expense_description FROM expense ORDER BY cost DESC LIMIT 1",
        "normalized_reference_query": "SELECT expense_description FROM expense ORDER BY cost DESC LIMIT 1",
        "reference_sample_result": [
            [
                "Club shirts"
            ]
        ],
        "reference_column_names": [
            "expense_description"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT expense_description, MAX(cost) as max_cost\nFROM public.expense\nJOIN public.budget ON public.expense.link_to_budget = public.budget.budget_id\nWHERE public.budget.category = 'club events'\nGROUP BY expense_description\nORDER BY max_cost DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT expense_description, MAX(cost) AS max_cost FROM public.expense JOIN public.budget ON public.expense.link_to_budget = public.budget.budget_id WHERE public.budget.category = 'club events' GROUP BY expense_description ORDER BY max_cost DESC LIMIT 1;",
        "output_sample_result": [],
        "output_column_names": [
            "expense_description",
            "max_cost"
        ],
        "output_row_count": 0,
        "output_column_count": 2,
        "sequence_similarity_score": 0.3322884012539185,
        "bleu_similarity_score": 5.605572147346264e-155,
        "execution_accuracy": false
    },
    {
        "question": "How many members of the Student_Club have majored Environmental Engineering?\n",
        "reference_query": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'",
        "normalized_reference_query": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'",
        "reference_error": null,
        "output_query": "The provided context is insufficient because there is no information available about the Student_Club or its members' association with the major of Environmental Engineering. The `member` table does not contain a clear relationship with the `major` table that would allow us to determine the major of each member.",
        "normalized_output_query": "The provided context IS insufficient because there IS NO information available about the Student_Club OR its members' association WITH the major OF Environmental Engineering. The `member` TABLE does NOT contain a clear relationship WITH the `major` TABLE that would allow us TO determine the major OF EACH member.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient because there IS NO inf...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "List the full name of all the members of the Student_Club who attended the \"Laugh Out Loud\" event.",
        "reference_query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
        "normalized_reference_query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
        "reference_sample_result": [
            [
                "Luisa",
                "Guidi"
            ],
            [
                "Carlo",
                "Jacobs"
            ],
            [
                "Phillip",
                "Cullen"
            ],
            [
                "Matthew",
                "Snay"
            ],
            [
                "Adele",
                "Deleon"
            ]
        ],
        "reference_column_names": [
            "first_name",
            "last_name"
        ],
        "reference_row_count": 20,
        "reference_column_count": 2,
        "output_query": "SELECT m.first_name || ' ' || m.last_name AS full_name\nFROM attendance a\nJOIN event e ON a.link_to_event = e.event_id\nJOIN member m ON a.link_to_member = m.member_id\nWHERE e.event_name = 'Laugh Out Loud';",
        "normalized_output_query": "SELECT m.first_name || ' ' || m.last_name AS full_name FROM attendance a JOIN event e ON a.link_to_event = e.event_id JOIN member m ON a.link_to_member = m.member_id WHERE e.event_name = 'Laugh Out Loud';",
        "output_sample_result": [
            [
                "Luisa Guidi"
            ],
            [
                "Carlo Jacobs"
            ],
            [
                "Phillip Cullen"
            ],
            [
                "Matthew Snay"
            ],
            [
                "Adele Deleon"
            ]
        ],
        "output_column_names": [
            "full_name"
        ],
        "output_row_count": 20,
        "output_column_count": 1,
        "sequence_similarity_score": 0.46153846153846156,
        "bleu_similarity_score": 2.44758726848316e-78,
        "execution_accuracy": false
    },
    {
        "question": "List the last name of all the students who majored Law and Constitutional Studies. \n",
        "reference_query": "SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'",
        "normalized_reference_query": "SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'",
        "reference_error": null,
        "output_query": "The provided context is insufficient because there is no information available regarding the majors of students or a direct link between the \"major\" table and the \"member\" table that indicates what major a student is pursuing.",
        "normalized_output_query": "The provided context IS insufficient because there IS NO information available regarding the majors OF students OR a direct LINK BETWEEN the \"major\" TABLE AND the \"member\" TABLE that indicates what major a student IS pursuing.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient because there IS NO inf...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What county did Sherri Ramsey grew up?",
        "reference_query": "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey'",
        "normalized_reference_query": "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information about Sherri Ramsey or any related data in the given tables.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information about Sherri Ramsey OR ANY related DATA IN the given tables.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What college offers the major that Tyler Hewitt took?",
        "reference_query": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt'",
        "normalized_reference_query": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt'",
        "reference_sample_result": [
            [
                "College of Engineering"
            ]
        ],
        "reference_column_names": [
            "college"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT m.college\nFROM public.member mem\nJOIN public.major m ON mem.link_to_major = m.major_id\nWHERE mem.first_name = 'Tyler' AND mem.last_name = 'Hewitt';",
        "normalized_output_query": "SELECT m.college FROM public.member mem JOIN public.major m ON mem.link_to_major = m.major_id WHERE mem.first_name = 'Tyler' AND mem.last_name = 'Hewitt';",
        "output_sample_result": [
            [
                "College of Engineering"
            ]
        ],
        "output_column_names": [
            "college"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.8157894736842105,
        "bleu_similarity_score": 2.4444739250665844e-78,
        "execution_accuracy": false
    },
    {
        "question": "What is the amount of the funds that the Vice President received?",
        "reference_query": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.\"position\" = 'Vice President'",
        "normalized_reference_query": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.\"position\" = 'Vice President'",
        "reference_sample_result": [
            [
                50
            ]
        ],
        "reference_column_names": [
            "amount"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT SUM(amount) AS total_amount_received\nFROM public.income\nWHERE source = 'Vice President';",
        "normalized_output_query": "SELECT SUM(amount) AS total_amount_received FROM public.income WHERE SOURCE = 'Vice President';",
        "output_sample_result": [
            [
                null
            ]
        ],
        "output_column_names": [
            "total_amount_received"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.45614035087719296,
        "bleu_similarity_score": 3.1807534593266453e-155,
        "execution_accuracy": false
    },
    {
        "question": "How much did the Student_Club members spend on food in September Meeting?",
        "reference_query": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Food' AND SUBSTR(T1.event_date, 6, 2) = '09'",
        "normalized_reference_query": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Food' AND SUBSTR(T1.event_date, 6, 2) = '09'",
        "reference_error": null,
        "output_query": "It can't be generated because the provided context does not specify which table or column contains information about the \"Student_Club,\" \"food,\" or \"September Meeting.\" Additional details are needed to create an accurate query.",
        "normalized_output_query": "It can't be GENERATED because the provided context does NOT specify which TABLE OR COLUMN CONTAINS information about the \"Student_Club,\" \"food,\" OR \"September Meeting.\" Additional details ARE needed TO CREATE an accurate query.",
        "output_error": "syntax error at or near \"It\"\nLINE 1: It can't be GENERATED because the provided context does NOT ...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What city and state did the President of the Student_Club grow up?",
        "reference_query": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.\"position\" = 'President'",
        "normalized_reference_query": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.\"position\" = 'President'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information about the \"President of the Student_Club\" or any related details that can link to their city and state. The available tables do not contain relevant information about the Student_Club or any position related to a president.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information about the \"President of the Student_Club\" OR ANY related details that can LINK TO their city AND state. The available TABLES DO NOT contain relevant information about the Student_Club OR ANY POSITION related TO a president.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "List the full name of the Student_Club members that grew up in Illinois state.",
        "reference_query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'",
        "normalized_reference_query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'",
        "reference_sample_result": [
            [
                "Trent",
                "Smith"
            ],
            [
                "Tyler",
                "Hewitt"
            ],
            [
                "Annabella",
                "Warren"
            ]
        ],
        "reference_column_names": [
            "first_name",
            "last_name"
        ],
        "reference_row_count": 3,
        "reference_column_count": 2,
        "output_query": "SELECT first_name || ' ' || last_name AS full_name\nFROM public.member\nJOIN public.zip_code ON public.member.zip = public.zip_code.zip_code\nWHERE public.zip_code.state = 'Illinois';",
        "normalized_output_query": "SELECT first_name || ' ' || last_name AS full_name FROM public.member JOIN public.zip_code ON public.member.zip = public.zip_code.zip_code WHERE public.zip_code.state = 'Illinois';",
        "output_sample_result": [
            [
                "Trent Smith"
            ],
            [
                "Tyler Hewitt"
            ],
            [
                "Annabella Warren"
            ]
        ],
        "output_column_names": [
            "full_name"
        ],
        "output_row_count": 3,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6387096774193548,
        "bleu_similarity_score": 1.43128459386685e-231,
        "execution_accuracy": false
    },
    {
        "question": "How much did the Student_Club members spend on advertisement in September Meeting?",
        "reference_query": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
        "normalized_reference_query": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
        "reference_error": null,
        "output_query": "It can't be generated because the provided context does not include information on the \"Student_Club,\" \"advertisement,\" or \"September Meeting.\" Additionally, there is no direct relationship between expenses and specific events or categories such as advertisement or meetings.",
        "normalized_output_query": "It can't be GENERATED because the provided context does NOT INCLUDE information ON the \"Student_Club,\" \"advertisement,\" OR \"September Meeting.\" Additionally, there IS NO direct relationship BETWEEN expenses AND SPECIFIC EVENTS OR categories such AS advertisement OR meetings.",
        "output_error": "syntax error at or near \"It\"\nLINE 1: It can't be GENERATED because the provided context does NOT ...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What department offers the major that Pierce and Guidi took?",
        "reference_query": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.last_name = 'Pierce' OR T1.last_name = 'Guidi'",
        "normalized_reference_query": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.last_name = 'Pierce' OR T1.last_name = 'Guidi'",
        "reference_sample_result": [
            [
                "Civil and Environmental Engineering Department"
            ],
            [
                "Civil and Environmental Engineering Department"
            ]
        ],
        "reference_column_names": [
            "department"
        ],
        "reference_row_count": 2,
        "reference_column_count": 1,
        "output_query": "SELECT m.first_name, m.last_name, maj.department\nFROM public.member m\nJOIN public.major maj ON m.link_to_major = maj.major_id\nWHERE (m.first_name = 'Pierce' AND m.last_name = 'Guidi');",
        "normalized_output_query": "SELECT m.first_name, m.last_name, maj.department FROM public.member m JOIN public.major maj ON m.link_to_major = maj.major_id WHERE (m.first_name = 'Pierce' AND m.last_name = 'Guidi');",
        "output_sample_result": [],
        "output_column_names": [
            "first_name",
            "last_name",
            "department"
        ],
        "output_row_count": 0,
        "output_column_count": 3,
        "sequence_similarity_score": 0.7223880597014926,
        "bleu_similarity_score": 5.325148103401656e-155,
        "execution_accuracy": false
    },
    {
        "question": "What is the total budgeted amount for all category in \"October Speaker\" event?",
        "reference_query": "SELECT SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'October Speaker'",
        "normalized_reference_query": "SELECT SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'October Speaker'",
        "reference_sample_result": [
            [
                265
            ]
        ],
        "reference_column_names": [
            "sum"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT SUM(amount) AS total_budgeted_amount\nFROM public.budget\nWHERE link_to_event = (\n    SELECT event_id\n    FROM public.event\n    WHERE event_name = 'October Speaker'\n);",
        "normalized_output_query": "SELECT SUM(amount) AS total_budgeted_amount FROM public.budget WHERE link_to_event = (SELECT event_id FROM public.event WHERE event_name = 'October Speaker');",
        "output_sample_result": [
            [
                265
            ]
        ],
        "output_column_names": [
            "total_budgeted_amount"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.5578231292517006,
        "bleu_similarity_score": 5.1911242831876394e-155,
        "execution_accuracy": false
    },
    {
        "question": "Was each expense in October Meeting on October 8, 2019 approved?",
        "reference_query": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date LIKE '2019-10-08%'",
        "normalized_reference_query": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date LIKE '2019-10-08%'",
        "reference_sample_result": [
            [
                "true"
            ],
            [
                "true"
            ],
            [
                "true"
            ]
        ],
        "reference_column_names": [
            "approved"
        ],
        "reference_row_count": 3,
        "reference_column_count": 1,
        "output_query": "SELECT expense_id, expense_description, approved\nFROM public.expense\nWHERE expense_date = '2019-10-08' AND expense_description = 'October Meeting';",
        "normalized_output_query": "SELECT expense_id, expense_description, approved FROM public.expense WHERE expense_date = '2019-10-08' AND expense_description = 'October Meeting';",
        "output_sample_result": [],
        "output_column_names": [
            "expense_id",
            "expense_description",
            "approved"
        ],
        "output_row_count": 0,
        "output_column_count": 3,
        "sequence_similarity_score": 0.3492063492063492,
        "bleu_similarity_score": 1.919722803672244e-155,
        "execution_accuracy": false
    },
    {
        "question": "Calculate the total average cost that Elijah Allen spent in the events on September and October.",
        "reference_query": "SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.last_name = 'Allen' AND T1.first_name = 'Elijah' AND (SUBSTR(T2.expense_date, 6, 2) = '09' OR SUBSTR(T2.expense_date, 6, 2) = '10')",
        "normalized_reference_query": "SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.last_name = 'Allen' AND T1.first_name = 'Elijah' AND (SUBSTR(T2.expense_date, 6, 2) = '09' OR SUBSTR(T2.expense_date, 6, 2) = '10')",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the query because it does not contain information about the specific member names linked to expenses, nor does it provide a way to filter expenses by month. Additional details about member names and date filtering are needed to accurately calculate the total average cost for Elijah Allen.",
        "normalized_output_query": "The provided context IS insufficient TO generate the query because it does NOT contain information about the SPECIFIC member NAMES linked TO expenses, nor does it provide a way TO filter expenses BY month. Additional details about member NAMES AND date filtering ARE needed TO accurately calculate the total average cost FOR Elijah Allen.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the query b...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.",
        "reference_query": "SELECT SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2020' THEN T2.spent ELSE 0 END) AS num FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event",
        "normalized_reference_query": "SELECT SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2020' THEN T2.spent ELSE 0 END) AS num FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information about the year associated with the events in the `budget` table, nor a direct link between the `event` table and the `budget` table that specifies the year or the organization (e.g., \"Student_Club\") responsible for the events.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information about the YEAR associated WITH the EVENTS IN the `budget` TABLE, nor a direct LINK BETWEEN the `event` TABLE AND the `budget` TABLE that specifies the YEAR OR the ORGANIZATION (e.g., \"Student_Club\") responsible FOR the events.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Give the location for \"Spring Budget Review\".",
        "reference_query": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
        "normalized_reference_query": "SELECT LOCATION FROM event WHERE event_name = 'Spring Budget Review'",
        "reference_sample_result": [
            [
                "Conference Room BA 452"
            ]
        ],
        "reference_column_names": [
            "location"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT location \nFROM public.event \nWHERE event_name = 'Spring Budget Review';",
        "normalized_output_query": "SELECT LOCATION FROM public.event WHERE event_name = 'Spring Budget Review';",
        "output_sample_result": [
            [
                "Conference Room BA 452"
            ]
        ],
        "output_column_names": [
            "location"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.9444444444444444,
        "bleu_similarity_score": 0.5253819788848316,
        "execution_accuracy": false
    },
    {
        "question": "What was the cost for the \"Posters\" on 2019/9/4?",
        "reference_query": "SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04'",
        "normalized_reference_query": "SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04'",
        "reference_sample_result": [
            [
                67.81
            ]
        ],
        "reference_column_names": [
            "cost"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT cost \nFROM public.expense \nWHERE expense_description = 'Posters' AND expense_date = '2019/9/4';",
        "normalized_output_query": "SELECT cost FROM public.expense WHERE expense_description = 'Posters' AND expense_date = '2019/9/4';",
        "output_sample_result": [],
        "output_column_names": [
            "cost"
        ],
        "output_row_count": 0,
        "output_column_count": 1,
        "sequence_similarity_score": 0.9278350515463918,
        "bleu_similarity_score": 0.6340466277046861,
        "execution_accuracy": false
    },
    {
        "question": "With the biggest budget for the \"Food\", what was the remaining of it?",
        "reference_query": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )",
        "normalized_reference_query": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = (SELECT MAX(amount) FROM budget WHERE category = 'Food')",
        "reference_sample_result": [
            [
                22.93
            ]
        ],
        "reference_column_names": [
            "remaining"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT remaining \nFROM public.budget \nWHERE category = 'Food' \nORDER BY amount DESC \nLIMIT 1;",
        "normalized_output_query": "SELECT remaining FROM public.budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1;",
        "output_sample_result": [
            [
                22.93
            ]
        ],
        "output_column_names": [
            "remaining"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6255924170616114,
        "bleu_similarity_score": 0.18600679496559258,
        "execution_accuracy": false
    },
    {
        "question": "What was the notes of the fundraising on 2019/9/14?",
        "reference_query": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'",
        "normalized_reference_query": "SELECT notes FROM income WHERE SOURCE = 'Fundraising' AND date_received = '2019-09-14'",
        "reference_sample_result": [
            [
                "Secured donations to help pay for speaker gifts."
            ]
        ],
        "reference_column_names": [
            "notes"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT notes \nFROM public.event \nWHERE event_name = 'fundraising' AND event_date = '2019/9/14';",
        "normalized_output_query": "SELECT notes FROM public.event WHERE event_name = 'fundraising' AND event_date = '2019/9/14';",
        "output_sample_result": [],
        "output_column_names": [
            "notes"
        ],
        "output_row_count": 0,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7039106145251397,
        "bleu_similarity_score": 3.919445536306192e-78,
        "execution_accuracy": false
    },
    {
        "question": "How many majors are there in \"College of Humanities and Social Sciences\"?",
        "reference_query": "SELECT COUNT(major_name) FROM major WHERE college = 'College of Humanities and Social Sciences'",
        "normalized_reference_query": "SELECT COUNT(major_name) FROM major WHERE college = 'College of Humanities and Social Sciences'",
        "reference_sample_result": [
            [
                24
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*) AS total_majors\nFROM public.major\nWHERE college = 'College of Humanities and Social Sciences';",
        "normalized_output_query": "SELECT COUNT(*) AS total_majors FROM public.major WHERE college = 'College of Humanities and Social Sciences';",
        "output_sample_result": [
            [
                24
            ]
        ],
        "output_column_names": [
            "total_majors"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.8682926829268293,
        "bleu_similarity_score": 0.5031747626530138,
        "execution_accuracy": false
    },
    {
        "question": "Tell the hometown county for \"Adela O'Gallagher\".",
        "reference_query": "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Adela' AND T1.last_name = 'O''Gallagher'",
        "normalized_reference_query": "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Adela' AND T1.last_name = 'O''Gallagher'",
        "reference_error": null,
        "output_query": "The provided context is insufficient because there is no direct link between the \"superhero\" table, which contains the name \"Adela O'Gallagher\", and the \"zip_code\" table, which contains county information. There is no information about which table or column links a person's name to their hometown or county.",
        "normalized_output_query": "The provided context IS insufficient because there IS NO direct LINK BETWEEN the \"superhero\" TABLE, which CONTAINS the name \"Adela O'Gallagher\", AND the \"zip_code\" TABLE, which CONTAINS county information. There IS NO information about which TABLE OR COLUMN links a person's name TO their hometown OR county.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient because there IS NO dir...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "For all the budgets for \"November Meeting\", how many of them had exceeded the budget?",
        "reference_query": "SELECT COUNT(T2.event_id) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Meeting' AND T1.remaining < 0",
        "normalized_reference_query": "SELECT COUNT(T2.event_id) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Meeting' AND T1.remaining < 0",
        "reference_sample_result": [
            [
                1
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*) AS exceeded_budget_count\nFROM budget\nWHERE link_to_event = 'November Meeting' AND spent > amount;",
        "normalized_output_query": "SELECT COUNT(*) AS exceeded_budget_count FROM budget WHERE link_to_event = 'November Meeting' AND spent > amount;",
        "output_sample_result": [
            [
                0
            ]
        ],
        "output_column_names": [
            "exceeded_budget_count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.5454545454545454,
        "bleu_similarity_score": 0.11882845806508718,
        "execution_accuracy": false
    },
    {
        "question": "Provide the total number of the budget amount for \"September Speaker\" event.",
        "reference_query": "SELECT SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'September Speaker'",
        "normalized_reference_query": "SELECT SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'September Speaker'",
        "reference_sample_result": [
            [
                260
            ]
        ],
        "reference_column_names": [
            "sum"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT SUM(amount) AS total_budget_amount\nFROM public.budget\nWHERE link_to_event = (\n    SELECT event_id\n    FROM public.event\n    WHERE event_name = 'September Speaker'\n);",
        "normalized_output_query": "SELECT SUM(amount) AS total_budget_amount FROM public.budget WHERE link_to_event = (SELECT event_id FROM public.event WHERE event_name = 'September Speaker');",
        "output_sample_result": [
            [
                260
            ]
        ],
        "output_column_names": [
            "total_budget_amount"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6621621621621622,
        "bleu_similarity_score": 5.1911242831876394e-155,
        "execution_accuracy": false
    },
    {
        "question": "What is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20?",
        "reference_query": "SELECT T1.event_status FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Post Cards, Posters' AND T2.expense_date = '2019-08-20'",
        "normalized_reference_query": "SELECT T1.event_status FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Post Cards, Posters' AND T2.expense_date = '2019-08-20'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no direct relationship established between the `event` table and any table containing information about purchases or products related to \"Post Cards, Posters\" on the specified date.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO direct relationship established BETWEEN the `event` TABLE AND ANY TABLE containing information about purchases OR products related TO \"Post Cards, Posters\" ON the specified date.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What was Brent Thomason's major?",
        "reference_query": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'",
        "normalized_reference_query": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'",
        "reference_sample_result": [
            [
                "Business Education"
            ]
        ],
        "reference_column_names": [
            "major_name"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT m.major_name \nFROM member mb\nJOIN major m ON mb.link_to_major = m.major_id\nWHERE mb.first_name = 'Brent' AND mb.last_name = 'Thomason';",
        "normalized_output_query": "SELECT m.major_name FROM member mb JOIN major m ON mb.link_to_major = m.major_id WHERE mb.first_name = 'Brent' AND mb.last_name = 'Thomason';",
        "output_sample_result": [
            [
                "Business Education"
            ]
        ],
        "output_column_names": [
            "major_name"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.8716216216216216,
        "bleu_similarity_score": 3.04255347138149e-78,
        "execution_accuracy": false
    },
    {
        "question": "For all the club members from \"Business\" major, how many of them wear medium size t-shirt?",
        "reference_query": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'",
        "normalized_reference_query": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'",
        "reference_sample_result": [
            [
                1
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*) \nFROM public.member m\nJOIN public.major maj ON m.link_to_major = maj.major_id\nWHERE maj.major_name = 'Business' AND m.t_shirt_size = 'Medium';",
        "normalized_output_query": "SELECT COUNT(*) FROM public.member m JOIN public.major maj ON m.link_to_major = maj.major_id WHERE maj.major_name = 'Business' AND m.t_shirt_size = 'Medium';",
        "output_sample_result": [
            [
                1
            ]
        ],
        "output_column_names": [
            "count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.7701863354037267,
        "bleu_similarity_score": 2.4444739250665844e-78,
        "execution_accuracy": false
    },
    {
        "question": "What's Christof Nielson's zip code type?",
        "reference_query": "SELECT T2.type FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson'",
        "normalized_reference_query": "SELECT T2.type FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson'",
        "reference_error": null,
        "output_query": "The provided context does not contain information about Christof Nielson or an association between individuals and the zip_code table. Therefore, it is insufficient to generate the SQL query.",
        "normalized_output_query": "The provided context does NOT contain information about Christof Nielson OR an association BETWEEN individuals AND the zip_code table. Therefore, it IS insufficient TO generate the SQL query.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context does NOT contain information about Chri...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "State the major name for the Vice President of the club.",
        "reference_query": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.\"position\" = 'Vice President'",
        "normalized_reference_query": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.\"position\" = 'Vice President'",
        "reference_sample_result": [
            [
                "Communication Studies"
            ]
        ],
        "reference_column_names": [
            "major_name"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT major.major_name\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE member.position = 'Vice President';",
        "normalized_output_query": "SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';",
        "output_sample_result": [
            [
                "Communication Studies"
            ]
        ],
        "output_column_names": [
            "major_name"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.8060836501901141,
        "bleu_similarity_score": 6.571021352053189e-155,
        "execution_accuracy": false
    },
    {
        "question": "Where is the hometown state for \"Sacha Harrison\"?",
        "reference_query": "SELECT T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'",
        "normalized_reference_query": "SELECT T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to determine the hometown state for \"Sacha Harrison\" as there is no information or table related to individuals and their hometown states.",
        "normalized_output_query": "The provided context IS insufficient TO determine the hometown state FOR \"Sacha Harrison\" AS there IS NO information OR TABLE related TO individuals AND their hometown states.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO determine the hometo...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Which department was the President of the club in?",
        "reference_query": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.\"position\" = 'President'",
        "normalized_reference_query": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.\"position\" = 'President'",
        "reference_error": null,
        "output_query": "The provided context does not contain sufficient information to determine which department the President of the club was in. The `member` table contains a \"position\" column, but there is no information linking a \"President\" position to a specific department. Additional data would be needed to answer this question.",
        "normalized_output_query": "The provided context does NOT contain sufficient information TO determine which department the President OF the club was IN. The `member` TABLE CONTAINS a \"position\" COLUMN, but there IS NO information linking a \"President\" POSITION TO a SPECIFIC department. Additional DATA would be needed TO answer this question.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context does NOT contain sufficient information...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "State the date Connor Hilton paid his/her dues.",
        "reference_query": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'",
        "normalized_reference_query": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no direct information linking a member's name (e.g., Connor Hilton) to the payment of dues. We would need a table that associates members with their payments or dues, which is not available in the current context.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO direct information linking a member's name (e.g., Connor Hilton) TO the payment OF dues. We would need a TABLE that associates members WITH their payments OR dues, which IS NOT available IN the CURRENT context.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Who was the first one paid his/her dues? Tell the full name.",
        "reference_query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.source = 'Dues' ORDER BY T2.date_received LIMIT 1",
        "normalized_reference_query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.source = 'Dues' ORDER BY T2.date_received LIMIT 1",
        "reference_sample_result": [
            [
                "Edwardo",
                "Ing"
            ]
        ],
        "reference_column_names": [
            "first_name",
            "last_name"
        ],
        "reference_row_count": 1,
        "reference_column_count": 2,
        "output_query": "SELECT m.first_name, m.last_name\nFROM public.income i\nJOIN public.member m ON i.link_to_member = m.member_id\nORDER BY i.date_received ASC\nLIMIT 1;",
        "normalized_output_query": "SELECT m.first_name, m.last_name FROM public.income i JOIN public.member m ON i.link_to_member = m.member_id ORDER BY i.date_received ASC LIMIT 1;",
        "output_sample_result": [
            [
                "Edwardo",
                "Ing"
            ]
        ],
        "output_column_names": [
            "first_name",
            "last_name"
        ],
        "output_row_count": 1,
        "output_column_count": 2,
        "sequence_similarity_score": 0.6309148264984227,
        "bleu_similarity_score": 4.253951754115691e-155,
        "execution_accuracy": false
    },
    {
        "question": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?",
        "reference_query": "SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS DOUBLE PRECISION) / SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting'",
        "normalized_reference_query": "SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS DOUBLE PRECISION) / SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query. The context does not include information about the events named \"Yearly Kickoff\" meeting and \"October Meeting\" within the `budget` table or any related table that could help identify these specific events and their associated budgets.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query. The context does NOT INCLUDE information about the EVENTS named \"Yearly Kickoff\" meeting AND \"October Meeting\" within the `budget` TABLE OR ANY related TABLE that could help identify these SPECIFIC EVENTS AND their associated budgets.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What percentage was the budget for Parking to the total budget for the \"November Speaker\"?",
        "reference_query": "SELECT CAST(SUM(CASE WHEN T1.category = 'Parking' THEN T1.amount ELSE 0 END) AS DOUBLE PRECISION) * 100 / SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Speaker'",
        "normalized_reference_query": "SELECT CAST(SUM(CASE WHEN T1.category = 'Parking' THEN T1.amount ELSE 0 END) AS DOUBLE PRECISION) * 100 / SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Speaker'",
        "reference_sample_result": [
            [
                3.8461538461538463
            ]
        ],
        "reference_column_names": [
            "?column?"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT \n    (SUM(CASE WHEN category = 'Parking' THEN amount ELSE 0 END) * 100.0 / SUM(amount)) AS percentage_parking_budget\nFROM \n    public.budget\nWHERE \n    event_status = 'November Speaker';",
        "normalized_output_query": "SELECT (SUM(CASE WHEN category = 'Parking' THEN amount ELSE 0 END) * 100.0 / SUM(amount)) AS percentage_parking_budget FROM public.budget WHERE event_status = 'November Speaker';",
        "output_sample_result": [
            [
                null
            ]
        ],
        "output_column_names": [
            "percentage_parking_budget"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6473429951690821,
        "bleu_similarity_score": 2.4695694385901706e-78,
        "execution_accuracy": false
    },
    {
        "question": "What is the total cost of the pizzas for all the events?",
        "reference_query": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'",
        "normalized_reference_query": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information about pizzas or a related product category in the given table schemas.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information about pizzas OR a related product category IN the given TABLE schemas.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many gas stations in CZE has Premium gas?",
        "reference_query": "SELECT COUNT(\"GasStationID\") FROM gasstations WHERE \"Country\" = 'CZE' AND \"Segment\" = 'Premium'",
        "normalized_reference_query": "SELECT COUNT(\"GasStationID\") FROM gasstations WHERE \"Country\" = 'CZE' AND \"Segment\" = 'Premium'",
        "reference_error": null,
        "output_query": "It can't be generated. The provided context does not contain information about the types of gas (such as \"Premium\") available at each gas station. The context only includes tables related to gas stations and transactions, but no details about gas types.",
        "normalized_output_query": "It can't be generated. The provided context does NOT contain information about the types OF gas (such AS \"Premium\") available AT EACH gas station. The context ONLY includes TABLES related TO gas stations AND transactions, but NO details about gas types.",
        "output_error": "syntax error at or near \"It\"\nLINE 1: It can't be generated. The provided context does NOT contain...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the ratio of customers who pay in EUR against customers who pay in CZK?",
        "reference_query": "SELECT CAST(SUM(CASE WHEN \"Currency\" = 'EUR' THEN 1 ELSE 0 END) AS FLOAT) / SUM(CASE WHEN \"Currency\" = 'CZK' THEN 1 ELSE 0 END) AS ratio FROM customers",
        "normalized_reference_query": "SELECT CAST(SUM(CASE WHEN \"Currency\" = 'EUR' THEN 1 ELSE 0 END) AS FLOAT) / SUM(CASE WHEN \"Currency\" = 'CZK' THEN 1 ELSE 0 END) AS ratio FROM customers",
        "reference_sample_result": [
            [
                0.06572769953051644
            ]
        ],
        "reference_column_names": [
            "ratio"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT \n    (SELECT COUNT(*) FROM public.customers WHERE \"Currency\" = 'EUR')::FLOAT /\n    (SELECT COUNT(*) FROM public.customers WHERE \"Currency\" = 'CZK')::FLOAT AS eur_to_czk_ratio;",
        "normalized_output_query": "SELECT (SELECT COUNT(*) FROM public.customers WHERE \"Currency\" = 'EUR')::FLOAT / (SELECT COUNT(*) FROM public.customers WHERE \"Currency\" = 'CZK')::FLOAT AS eur_to_czk_ratio;",
        "output_sample_result": [
            [
                0.06572769953051644
            ]
        ],
        "output_column_names": [
            "eur_to_czk_ratio"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.4876543209876543,
        "bleu_similarity_score": 4.529377511283193e-155,
        "execution_accuracy": false
    },
    {
        "question": "In 2012, who had the least consumption in LAM?",
        "reference_query": "SELECT T1.\"CustomerID\" FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T1.\"Segment\" = 'LAM' AND SUBSTR(T2.\"Date\", 1, 4) = '2012' GROUP BY T1.\"CustomerID\" ORDER BY SUM(T2.\"Consumption\") ASC LIMIT 1",
        "normalized_reference_query": "SELECT T1.\"CustomerID\" FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T1.\"Segment\" = 'LAM' AND SUBSTR(T2.\"Date\", 1, 4) = '2012' GROUP BY T1.\"CustomerID\" ORDER BY SUM(T2.\"Consumption\") ASC LIMIT 1",
        "reference_error": null,
        "output_query": "It can't be generated. The provided context does not include information about regions or specific consumption data that can be linked to \"LAM\" for the year 2012. The `yearmonth` table includes \"CustomerID,\" \"Date,\" and \"Consumption,\" but there is no explicit mention of \"LAM\" or a method to filter by region or location.",
        "normalized_output_query": "It can't be generated. The provided context does NOT INCLUDE information about regions OR SPECIFIC consumption DATA that can be linked TO \"LAM\" FOR the YEAR 2012. The `yearmonth` TABLE includes \"CustomerID,\" \"Date,\" AND \"Consumption,\" but there IS NO explicit mention OF \"LAM\" OR a METHOD TO filter BY region OR location.",
        "output_error": "syntax error at or near \"It\"\nLINE 1: It can't be generated. The provided context does NOT INCLUDE...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What was the average monthly consumption of customers in SME for the year 2013?",
        "reference_query": "SELECT AVG(T2.\"Consumption\") / 12 FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE SUBSTR(T2.\"Date\", 1, 4) = '2013' AND T1.\"Segment\" = 'SME'",
        "normalized_reference_query": "SELECT AVG(T2.\"Consumption\") / 12 FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE SUBSTR(T2.\"Date\", 1, 4) = '2013' AND T1.\"Segment\" = 'SME'",
        "reference_error": null,
        "output_query": "SELECT AVG(y.Consumption) AS Average_Monthly_Consumption\nFROM yearmonth y\nJOIN customers c ON y.CustomerID = c.CustomerID\nWHERE c.Segment = 'SME' AND y.Date LIKE '2013%'",
        "normalized_output_query": "SELECT AVG(y.Consumption) AS Average_Monthly_Consumption FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.Segment = 'SME' AND y.Date LIKE '2013%'",
        "output_error": "column y.customerid does not exist\nLINE 1: ..._Consumption FROM yearmonth y JOIN customers c ON y.Customer...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"y.CustomerID\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Which customers, paying in CZK, consumed the most gas in 2011?",
        "reference_query": "SELECT T1.\"CustomerID\" FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T1.\"Currency\" = 'CZK' AND CAST(T2.\"Date\" AS INTEGER) BETWEEN 201101 AND 201112 GROUP BY T1.\"CustomerID\" ORDER BY SUM(T2.\"Consumption\") DESC LIMIT 1",
        "normalized_reference_query": "SELECT T1.\"CustomerID\" FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T1.\"Currency\" = 'CZK' AND CAST(T2.\"Date\" AS INTEGER) BETWEEN 201101 AND 201112 GROUP BY T1.\"CustomerID\" ORDER BY SUM(T2.\"Consumption\") DESC LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT y.CustomerID, SUM(y.Consumption) AS TotalConsumption\nFROM yearmonth y\nJOIN customers c ON y.CustomerID = c.CustomerID\nWHERE c.Currency = 'CZK' AND y.Date LIKE '2011%'\nGROUP BY y.CustomerID\nORDER BY TotalConsumption DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT y.CustomerID, SUM(y.Consumption) AS TotalConsumption FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.Currency = 'CZK' AND y.Date LIKE '2011%' GROUP BY y.CustomerID ORDER BY TotalConsumption DESC LIMIT 1;",
        "output_error": "column y.customerid does not exist\nLINE 1: ...lConsumption FROM yearmonth y JOIN customers c ON y.Customer...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"y.CustomerID\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many customers in KAM had a consumption of less than 30,000 for the year 2012?",
        "reference_query": "SELECT COUNT(*) FROM ( SELECT T2.\"CustomerID\" FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T1.\"Segment\" = 'KAM' AND SUBSTRING(T2.\"Date\", 1, 4) = '2012' GROUP BY T2.\"CustomerID\" HAVING SUM(T2.\"Consumption\") < 30000 ) AS t1",
        "normalized_reference_query": "SELECT COUNT(*) FROM (SELECT T2.\"CustomerID\" FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T1.\"Segment\" = 'KAM' AND SUBSTRING(T2.\"Date\", 1, 4) = '2012' GROUP BY T2.\"CustomerID\" HAVING SUM(T2.\"Consumption\") < 30000) AS t1",
        "reference_error": null,
        "output_query": "SELECT COUNT(DISTINCT y.CustomerID) AS CustomerCount\nFROM yearmonth y\nJOIN customers c ON y.CustomerID = c.CustomerID\nWHERE c.Segment = 'KAM' \n  AND y.Date LIKE '2012%' \n  AND y.Consumption < 30000;",
        "normalized_output_query": "SELECT COUNT(DISTINCT y.CustomerID) AS CustomerCount FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.Segment = 'KAM' AND y.Date LIKE '2012%' AND y.Consumption < 30000;",
        "output_error": "column y.customerid does not exist\nLINE 1: ...ustomerCount FROM yearmonth y JOIN customers c ON y.Customer...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"y.CustomerID\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?",
        "reference_query": "SELECT SUM(CASE WHEN T1.\"Currency\" = 'CZK' THEN T2.\"Consumption\" ELSE 0 END) - SUM(CASE WHEN T1.\"Currency\" = 'EUR' THEN T2.\"Consumption\" ELSE 0 END) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE SUBSTR(T2.\"Date\", 1, 4) = '2012'",
        "normalized_reference_query": "SELECT SUM(CASE WHEN T1.\"Currency\" = 'CZK' THEN T2.\"Consumption\" ELSE 0 END) - SUM(CASE WHEN T1.\"Currency\" = 'EUR' THEN T2.\"Consumption\" ELSE 0 END) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE SUBSTR(T2.\"Date\", 1, 4) = '2012'",
        "reference_error": null,
        "output_query": "SELECT \n    c.Currency, \n    SUM(y.Consumption) AS TotalConsumption\nFROM \n    public.yearmonth y\nJOIN \n    public.customers c ON y.CustomerID = c.CustomerID\nWHERE \n    y.Date LIKE '2012%'\nGROUP BY \n    c.Currency;",
        "normalized_output_query": "SELECT c.Currency, SUM(y.Consumption) AS TotalConsumption FROM public.yearmonth y JOIN public.customers c ON y.CustomerID = c.CustomerID WHERE y.Date LIKE '2012%' GROUP BY c.Currency;",
        "output_error": "column y.customerid does not exist\nLINE 1: ...ROM public.yearmonth y JOIN public.customers c ON y.Customer...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"y.CustomerID\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Which year recorded the most gas use paid in EUR?",
        "reference_query": "SELECT SUBSTRING(T2.\"Date\", 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T1.\"Currency\" = 'EUR' GROUP BY SUBSTRING(T2.\"Date\", 1, 4) ORDER BY SUM(T2.\"Consumption\") DESC LIMIT 1",
        "normalized_reference_query": "SELECT SUBSTRING(T2.\"Date\", 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T1.\"Currency\" = 'EUR' GROUP BY SUBSTRING(T2.\"Date\", 1, 4) ORDER BY SUM(T2.\"Consumption\") DESC LIMIT 1",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information about the currency used in transactions or any indication of whether the amounts in the \"transactions_1k\" table are in EUR. Additional context or a specific column indicating the currency is required to answer this question.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information about the currency used IN transactions OR ANY indication OF whether the amounts IN the \"transactions_1k\" TABLE ARE IN EUR. Additional context OR a SPECIFIC COLUMN indicating the currency IS required TO answer this question.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Which segment had the least consumption?",
        "reference_query": "SELECT T1.\"Segment\" FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" GROUP BY T1.\"Segment\" ORDER BY SUM(T2.\"Consumption\") ASC LIMIT 1",
        "normalized_reference_query": "SELECT T1.\"Segment\" FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" GROUP BY T1.\"Segment\" ORDER BY SUM(T2.\"Consumption\") ASC LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT c.Segment, SUM(y.Consumption) AS TotalConsumption\nFROM public.yearmonth y\nJOIN public.customers c ON y.CustomerID = c.CustomerID\nGROUP BY c.Segment\nORDER BY TotalConsumption ASC\nLIMIT 1;",
        "normalized_output_query": "SELECT c.Segment, SUM(y.Consumption) AS TotalConsumption FROM public.yearmonth y JOIN public.customers c ON y.CustomerID = c.CustomerID GROUP BY c.Segment ORDER BY TotalConsumption ASC LIMIT 1;",
        "output_error": "column y.customerid does not exist\nLINE 1: ...ROM public.yearmonth y JOIN public.customers c ON y.Customer...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"y.CustomerID\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Which year recorded the most consumption of gas paid in CZK?",
        "reference_query": "SELECT SUBSTR(T2.\"Date\", 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T1.\"Currency\" = 'CZK' GROUP BY SUBSTR(T2.\"Date\", 1, 4) ORDER BY SUM(T2.\"Consumption\") DESC LIMIT 1",
        "normalized_reference_query": "SELECT SUBSTR(T2.\"Date\", 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T1.\"Currency\" = 'CZK' GROUP BY SUBSTR(T2.\"Date\", 1, 4) ORDER BY SUM(T2.\"Consumption\") DESC LIMIT 1",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query. There is no information regarding the currency in which the gas was paid (e.g., CZK) in the available tables. Additionally, the context does not specify how to associate transactions with currency types.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query. There IS NO information regarding the currency IN which the gas was paid (e.g., CZK) IN the available tables. Additionally, the context does NOT specify how TO associate transactions WITH currency types.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What was the gas consumption peak month for SME customers in 2013?",
        "reference_query": "SELECT SUBSTR(T2.\"Date\", 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE SUBSTR(T2.\"Date\", 1, 4) = '2013' AND T1.\"Segment\" = 'SME' GROUP BY SUBSTR(T2.\"Date\", 5, 2) ORDER BY SUM(T2.\"Consumption\") DESC LIMIT 1",
        "normalized_reference_query": "SELECT SUBSTR(T2.\"Date\", 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE SUBSTR(T2.\"Date\", 1, 4) = '2013' AND T1.\"Segment\" = 'SME' GROUP BY SUBSTR(T2.\"Date\", 5, 2) ORDER BY SUM(T2.\"Consumption\") DESC LIMIT 1",
        "reference_sample_result": [
            [
                "04"
            ]
        ],
        "reference_column_names": [
            "substr"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT SUBSTRING(y.\"Date\", 1, 7) AS YearMonth, SUM(y.\"Consumption\") AS TotalConsumption\nFROM public.yearmonth y\nJOIN public.customers c ON y.\"CustomerID\" = c.\"CustomerID\"\nWHERE c.\"Segment\" = 'SME' AND SUBSTRING(y.\"Date\", 1, 4) = '2013'\nGROUP BY YearMonth\nORDER BY TotalConsumption DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT SUBSTRING(y.\"Date\", 1, 7) AS YearMonth, SUM(y.\"Consumption\") AS TotalConsumption FROM public.yearmonth y JOIN public.customers c ON y.\"CustomerID\" = c.\"CustomerID\" WHERE c.\"Segment\" = 'SME' AND SUBSTRING(y.\"Date\", 1, 4) = '2013' GROUP BY YearMonth ORDER BY TotalConsumption DESC LIMIT 1;",
        "output_sample_result": [
            [
                "201304",
                126047664.0
            ]
        ],
        "output_column_names": [
            "yearmonth",
            "totalconsumption"
        ],
        "output_row_count": 1,
        "output_column_count": 2,
        "sequence_similarity_score": 0.4,
        "bleu_similarity_score": 0.11350052389636105,
        "execution_accuracy": false
    },
    {
        "question": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?",
        "reference_query": "SELECT CAST(SUM(CASE WHEN T1.\"Segment\" = 'SME' THEN T2.\"Consumption\" ELSE 0 END) AS DOUBLE PRECISION) / COUNT(T1.\"CustomerID\") - CAST(SUM(CASE WHEN T1.\"Segment\" = 'LAM' THEN T2.\"Consumption\" ELSE 0 END) AS DOUBLE PRECISION) / COUNT(T1.\"CustomerID\") , CAST(SUM(CASE WHEN T1.\"Segment\" = 'LAM' THEN T2.\"Consumption\" ELSE 0 END) AS DOUBLE PRECISION) / COUNT(T1.\"CustomerID\") - CAST(SUM(CASE WHEN T1.\"Segment\" = 'KAM' THEN T2.\"Consumption\" ELSE 0 END) AS DOUBLE PRECISION) / COUNT(T1.\"CustomerID\") , CAST(SUM(CASE WHEN T1.\"Segment\" = 'KAM' THEN T2.\"Consumption\" ELSE 0 END) AS DOUBLE PRECISION) / COUNT(T1.\"CustomerID\") - CAST(SUM(CASE WHEN T1.\"Segment\" = 'SME' THEN T2.\"Consumption\" ELSE 0 END) AS DOUBLE PRECISION) / COUNT(T1.\"CustomerID\") FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T1.\"Currency\" = 'CZK' AND T2.\"Consumption\" = ( SELECT MIN(\"Consumption\") FROM yearmonth ) AND CAST(T2.\"Date\" AS INTEGER) BETWEEN 201301 AND 201312",
        "normalized_reference_query": "SELECT CAST(SUM(CASE WHEN T1.\"Segment\" = 'SME' THEN T2.\"Consumption\" ELSE 0 END) AS DOUBLE PRECISION) / COUNT(T1.\"CustomerID\") - CAST(SUM(CASE WHEN T1.\"Segment\" = 'LAM' THEN T2.\"Consumption\" ELSE 0 END) AS DOUBLE PRECISION) / COUNT(T1.\"CustomerID\"), CAST(SUM(CASE WHEN T1.\"Segment\" = 'LAM' THEN T2.\"Consumption\" ELSE 0 END) AS DOUBLE PRECISION) / COUNT(T1.\"CustomerID\") - CAST(SUM(CASE WHEN T1.\"Segment\" = 'KAM' THEN T2.\"Consumption\" ELSE 0 END) AS DOUBLE PRECISION) / COUNT(T1.\"CustomerID\"), CAST(SUM(CASE WHEN T1.\"Segment\" = 'KAM' THEN T2.\"Consumption\" ELSE 0 END) AS DOUBLE PRECISION) / COUNT(T1.\"CustomerID\") - CAST(SUM(CASE WHEN T1.\"Segment\" = 'SME' THEN T2.\"Consumption\" ELSE 0 END) AS DOUBLE PRECISION) / COUNT(T1.\"CustomerID\") FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T1.\"Currency\" = 'CZK' AND T2.\"Consumption\" = (SELECT MIN(\"Consumption\") FROM yearmonth) AND CAST(T2.\"Date\" AS INTEGER) BETWEEN 201301 AND 201312",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because the necessary information about the currency used for consumption payments, the segmentation of customers, and the specific consumption data for the year 2013 is not available in the given tables. The context does not include any details about currency conversion or consumption payments in CZK, nor does it specify how to identify the least amount of consumption.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because the necessary information about the currency used FOR consumption payments, the segmentation OF customers, AND the SPECIFIC consumption DATA FOR the YEAR 2013 IS NOT available IN the given tables. The context does NOT INCLUDE ANY details about currency CONVERSION OR consumption payments IN CZK, nor does it specify how TO identify the least amount OF consumption.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Which of the three segments\u2014SME, LAM and KAM\u2014has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?",
        "reference_query": "SELECT CAST((SUM(CASE WHEN T1.\"Segment\" = 'SME' AND T2.\"Date\"::TEXT LIKE '2013%' THEN T2.\"Consumption\" ELSE 0 END) - SUM(CASE WHEN T1.\"Segment\" = 'SME' AND T2.\"Date\"::TEXT LIKE '2012%' THEN T2.\"Consumption\" ELSE 0 END)) AS FLOAT) * 100 / SUM(CASE WHEN T1.\"Segment\" = 'SME' AND T2.\"Date\"::TEXT LIKE '2012%' THEN T2.\"Consumption\" ELSE 0 END), CAST(SUM(CASE WHEN T1.\"Segment\" = 'LAM' AND T2.\"Date\"::TEXT LIKE '2013%' THEN T2.\"Consumption\" ELSE 0 END) - SUM(CASE WHEN T1.\"Segment\" = 'LAM' AND T2.\"Date\"::TEXT LIKE '2012%' THEN T2.\"Consumption\" ELSE 0 END) AS FLOAT) * 100 / SUM(CASE WHEN T1.\"Segment\" = 'LAM' AND T2.\"Date\"::TEXT LIKE'2012%' THEN T2.\"Consumption\" ELSE 0 END) , CAST(SUM(CASE WHEN T1.\"Segment\" = 'KAM' AND T2.\"Date\"::TEXT LIKE '2013%' THEN T2.\"Consumption\" ELSE 0 END) - SUM(CASE WHEN T1.\"Segment\" = 'KAM' AND T2.\"Date\"::TEXT LIKE '2012%' THEN T2.\"Consumption\" ELSE 0 END) AS FLOAT) * 100 / SUM(CASE WHEN T1.\"Segment\" = 'KAM' AND T2.\"Date\"::TEXT LIKE '2012%' THEN T2.\"Consumption\" ELSE 0 END) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\"",
        "normalized_reference_query": "SELECT CAST((SUM(CASE WHEN T1.\"Segment\" = 'SME' AND T2.\"Date\"::TEXT LIKE '2013%' THEN T2.\"Consumption\" ELSE 0 END) - SUM(CASE WHEN T1.\"Segment\" = 'SME' AND T2.\"Date\"::TEXT LIKE '2012%' THEN T2.\"Consumption\" ELSE 0 END)) AS FLOAT) * 100 / SUM(CASE WHEN T1.\"Segment\" = 'SME' AND T2.\"Date\"::TEXT LIKE '2012%' THEN T2.\"Consumption\" ELSE 0 END), CAST(SUM(CASE WHEN T1.\"Segment\" = 'LAM' AND T2.\"Date\"::TEXT LIKE '2013%' THEN T2.\"Consumption\" ELSE 0 END) - SUM(CASE WHEN T1.\"Segment\" = 'LAM' AND T2.\"Date\"::TEXT LIKE '2012%' THEN T2.\"Consumption\" ELSE 0 END) AS FLOAT) * 100 / SUM(CASE WHEN T1.\"Segment\" = 'LAM' AND T2.\"Date\"::TEXT LIKE'2012%' THEN T2.\"Consumption\" ELSE 0 END), CAST(SUM(CASE WHEN T1.\"Segment\" = 'KAM' AND T2.\"Date\"::TEXT LIKE '2013%' THEN T2.\"Consumption\" ELSE 0 END) - SUM(CASE WHEN T1.\"Segment\" = 'KAM' AND T2.\"Date\"::TEXT LIKE '2012%' THEN T2.\"Consumption\" ELSE 0 END) AS FLOAT) * 100 / SUM(CASE WHEN T1.\"Segment\" = 'KAM' AND T2.\"Date\"::TEXT LIKE '2012%' THEN T2.\"Consumption\" ELSE 0 END) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\"",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information about the \"Year\" or segment types such as \"SME, LAM, and KAM\" in the tables. Additionally, there's no indication of currency in the \"yearmonth\" table to filter payments made in EUR. Therefore, I cannot generate the query based on the given context.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information about the \"Year\" OR SEGMENT types such AS \"SME, LAM, and KAM\" IN the tables. Additionally, there's NO indication OF currency IN the \"yearmonth\" TABLE TO filter payments made IN EUR. Therefore, I cannot generate the query based ON the given context.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How much did customer 6 consume in total between August and November 2013?",
        "reference_query": "SELECT SUM(\"Consumption\") FROM yearmonth WHERE \"CustomerID\" = 6 AND \"Date\" BETWEEN '201308' AND '201311'",
        "normalized_reference_query": "SELECT SUM(\"Consumption\") FROM yearmonth WHERE \"CustomerID\" = 6 AND \"Date\" BETWEEN '201308' AND '201311'",
        "reference_sample_result": [
            [
                1224.96
            ]
        ],
        "reference_column_names": [
            "sum"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT SUM(\"Consumption\") AS total_consumption\nFROM public.yearmonth\nWHERE \"CustomerID\" = 6 \n  AND \"Date\" BETWEEN '2013-08' AND '2013-11'",
        "normalized_output_query": "SELECT SUM(\"Consumption\") AS total_consumption FROM public.yearmonth WHERE \"CustomerID\" = 6 AND \"Date\" BETWEEN '2013-08' AND '2013-11'",
        "output_sample_result": [
            [
                null
            ]
        ],
        "output_column_names": [
            "total_consumption"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.8739495798319328,
        "bleu_similarity_score": 0.4333207865423752,
        "execution_accuracy": false
    },
    {
        "question": "How many more \"discount\" gas stations does the Czech Republic have compared to Slovakia?",
        "reference_query": "SELECT SUM(CASE WHEN \"Country\" = 'CZE' THEN 1 ELSE 0 END) - SUM(CASE WHEN \"Country\" = 'SVK' THEN 1 ELSE 0 END) FROM gasstations WHERE \"Segment\" = 'Discount'",
        "normalized_reference_query": "SELECT SUM(CASE WHEN \"Country\" = 'CZE' THEN 1 ELSE 0 END) - SUM(CASE WHEN \"Country\" = 'SVK' THEN 1 ELSE 0 END) FROM gasstations WHERE \"Segment\" = 'Discount'",
        "reference_error": null,
        "output_query": "SELECT \n    c1.name AS country, \n    COUNT(gs.GasStationID) AS discount_gas_stations\nFROM \n    public.gasstations gs\nJOIN \n    public.\"Country\" c1 ON gs.Country = c1.name\nWHERE \n    gs.Segment = 'discount'\n    AND (c1.name = 'Czech Republic' OR c1.name = 'Slovakia')\nGROUP BY \n    c1.name;",
        "normalized_output_query": "SELECT c1.name AS country, COUNT(gs.GasStationID) AS discount_gas_stations FROM public.gasstations gs JOIN public.\"Country\" c1 ON gs.Country = c1.name WHERE gs.Segment = 'discount' AND (c1.name = 'Czech Republic' OR c1.name = 'Slovakia') GROUP BY c1.name;",
        "output_error": "relation \"public.Country\" does not exist\nLINE 1: ...ount_gas_stations FROM public.gasstations gs JOIN public.\"Co...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How much more was customer 7 consuming in April 2013 than customer 5?",
        "reference_query": "SELECT SUM(CASE WHEN \"CustomerID\" = 7 THEN \"Consumption\" ELSE 0 END) - SUM(CASE WHEN \"CustomerID\" = 5 THEN \"Consumption\" ELSE 0 END) FROM yearmonth WHERE \"Date\" = '201304'",
        "normalized_reference_query": "SELECT SUM(CASE WHEN \"CustomerID\" = 7 THEN \"Consumption\" ELSE 0 END) - SUM(CASE WHEN \"CustomerID\" = 5 THEN \"Consumption\" ELSE 0 END) FROM yearmonth WHERE \"Date\" = '201304'",
        "reference_error": null,
        "output_query": "SELECT \n    (SELECT SUM(Consumption) FROM public.yearmonth WHERE CustomerID = 7 AND Date LIKE '2013-04%') -\n    (SELECT SUM(Consumption) FROM public.yearmonth WHERE CustomerID = 5 AND Date LIKE '2013-04%') AS Consumption_Difference",
        "normalized_output_query": "SELECT (SELECT SUM(Consumption) FROM public.yearmonth WHERE CustomerID = 7 AND Date LIKE '2013-04%') - (SELECT SUM(Consumption) FROM public.yearmonth WHERE CustomerID = 5 AND Date LIKE '2013-04%') AS Consumption_Difference",
        "output_error": "column \"consumption\" does not exist\nLINE 1: SELECT (SELECT SUM(Consumption) FROM public.yearmonth WHERE ...\n                           ^\nHINT:  Perhaps you meant to reference the column \"yearmonth.Consumption\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?",
        "reference_query": "SELECT SUM(CASE WHEN \"Currency\" = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN \"Currency\" = 'EUR' THEN 1 ELSE 0 END) FROM customers WHERE \"Segment\" = 'SME'",
        "normalized_reference_query": "SELECT SUM(CASE WHEN \"Currency\" = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN \"Currency\" = 'EUR' THEN 1 ELSE 0 END) FROM customers WHERE \"Segment\" = 'SME'",
        "reference_error": null,
        "output_query": "The provided context does not contain information on the currency used by SMEs (Small and Medium Enterprises) for payments. The \"customers\" table contains a \"Currency\" column, but there is no information linking SMEs specifically to their payment currencies. Therefore, the query cannot be generated with the given context.",
        "normalized_output_query": "The provided context does NOT contain information ON the currency used BY SMEs (Small AND Medium Enterprises) FOR payments. The \"customers\" TABLE CONTAINS a \"Currency\" COLUMN, but there IS NO information linking SMEs specifically TO their payment currencies. Therefore, the query cannot be GENERATED WITH the given context.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context does NOT contain information ON the cur...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Which LAM customer used the Euro as their currency and had the highest consumption in October 2013?",
        "reference_query": "SELECT T1.\"CustomerID\" FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T1.\"Segment\" = 'LAM' AND T2.\"Date\" = '201310' AND T1.\"Currency\" = 'EUR' GROUP BY T1.\"CustomerID\" ORDER BY SUM(T2.\"Consumption\") DESC LIMIT 1",
        "normalized_reference_query": "SELECT T1.\"CustomerID\" FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T1.\"Segment\" = 'LAM' AND T2.\"Date\" = '201310' AND T1.\"Currency\" = 'EUR' GROUP BY T1.\"CustomerID\" ORDER BY SUM(T2.\"Consumption\") DESC LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT y.CustomerID, MAX(y.Consumption) AS MaxConsumption\nFROM yearmonth y\nJOIN customers c ON y.CustomerID = c.CustomerID\nWHERE c.Segment = 'LAM'\nAND c.Currency = 'Euro'\nAND y.Date BETWEEN '2013-10-01' AND '2013-10-31'\nGROUP BY y.CustomerID\nORDER BY MaxConsumption DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT y.CustomerID, MAX(y.Consumption) AS MaxConsumption FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.Segment = 'LAM' AND c.Currency = 'Euro' AND y.Date BETWEEN '2013-10-01' AND '2013-10-31' GROUP BY y.CustomerID ORDER BY MaxConsumption DESC LIMIT 1;",
        "output_error": "column y.customerid does not exist\nLINE 1: ...xConsumption FROM yearmonth y JOIN customers c ON y.Customer...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"y.CustomerID\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Who among KAM's customers consumed the most? How much did it consume?",
        "reference_query": "SELECT T2.\"CustomerID\", SUM(T2.\"Consumption\") FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T1.\"Segment\" = 'KAM' GROUP BY T2.\"CustomerID\" ORDER BY SUM(T2.\"Consumption\") DESC LIMIT 1",
        "normalized_reference_query": "SELECT T2.\"CustomerID\", SUM(T2.\"Consumption\") FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T1.\"Segment\" = 'KAM' GROUP BY T2.\"CustomerID\" ORDER BY SUM(T2.\"Consumption\") DESC LIMIT 1",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information linking a specific customer or entity named \"KAM\" to the tables, and there is no direct relationship between customers and the \"yearmonth\" table where consumption is recorded.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information linking a SPECIFIC customer OR entity named \"KAM\" TO the TABLES, AND there IS NO direct relationship BETWEEN customers AND the \"yearmonth\" TABLE WHERE consumption IS recorded.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How much did the KAM customers consume in total in May 2013?",
        "reference_query": "SELECT SUM(T2.\"Consumption\") FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T2.\"Date\" = '201305' AND T1.\"Segment\" = 'KAM'",
        "normalized_reference_query": "SELECT SUM(T2.\"Consumption\") FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T2.\"Date\" = '201305' AND T1.\"Segment\" = 'KAM'",
        "reference_error": null,
        "output_query": "SELECT SUM(y.Consumption) AS TotalConsumption\nFROM yearmonth y\nJOIN customers c ON y.\"CustomerID\" = c.\"CustomerID\"\nWHERE c.\"Segment\" = 'KAM' AND y.\"Date\" LIKE '2013-05%'",
        "normalized_output_query": "SELECT SUM(y.Consumption) AS TotalConsumption FROM yearmonth y JOIN customers c ON y.\"CustomerID\" = c.\"CustomerID\" WHERE c.\"Segment\" = 'KAM' AND y.\"Date\" LIKE '2013-05%'",
        "output_error": "column y.consumption does not exist\nLINE 1: SELECT SUM(y.Consumption) AS TotalConsumption FROM yearmonth...\n                   ^\nHINT:  Perhaps you meant to reference the column \"y.Consumption\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many percent of LAM customer consumed more than 46.73?",
        "reference_query": "SELECT CAST(SUM(CASE WHEN T2.\"Consumption\" > 46.73 THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(T1.\"CustomerID\") FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T1.\"Segment\" = 'LAM'",
        "normalized_reference_query": "SELECT CAST(SUM(CASE WHEN T2.\"Consumption\" > 46.73 THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(T1.\"CustomerID\") FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T1.\"Segment\" = 'LAM'",
        "reference_sample_result": [
            [
                98.5267932135058
            ]
        ],
        "reference_column_names": [
            "?column?"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT \n    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM public.yearmonth ym JOIN public.customers c ON ym.\"CustomerID\" = c.\"CustomerID\" WHERE c.\"Segment\" = 'LAM')) AS percentage\nFROM \n    public.yearmonth ym\nJOIN \n    public.customers c ON ym.\"CustomerID\" = c.\"CustomerID\"\nWHERE \n    c.\"Segment\" = 'LAM' AND ym.\"Consumption\" > 46.73;",
        "normalized_output_query": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM public.yearmonth ym JOIN public.customers c ON ym.\"CustomerID\" = c.\"CustomerID\" WHERE c.\"Segment\" = 'LAM')) AS percentage FROM public.yearmonth ym JOIN public.customers c ON ym.\"CustomerID\" = c.\"CustomerID\" WHERE c.\"Segment\" = 'LAM' AND ym.\"Consumption\" > 46.73;",
        "output_sample_result": [
            [
                "98.5267932135057954"
            ]
        ],
        "output_column_names": [
            "percentage"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.3452157598499062,
        "bleu_similarity_score": 4.362712208760745e-155,
        "execution_accuracy": false
    },
    {
        "question": "Which country has more \"value for money\" gas stations? Please give a total number of \"value for money\" gas stations in each country.",
        "reference_query": "SELECT \"Country\" , ( SELECT COUNT(\"GasStationID\") FROM gasstations WHERE \"Segment\" = 'Value for money' ) FROM gasstations WHERE \"Segment\" = 'Value for money' GROUP BY \"Country\" ORDER BY COUNT(\"GasStationID\") DESC LIMIT 1",
        "normalized_reference_query": "SELECT \"Country\" , (SELECT COUNT(\"GasStationID\") FROM gasstations WHERE \"Segment\" = 'Value for money') FROM gasstations WHERE \"Segment\" = 'Value for money' GROUP BY \"Country\" ORDER BY COUNT(\"GasStationID\") DESC LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT g.Country, COUNT(*) AS total_value_for_money_gas_stations\nFROM public.gasstations g\nWHERE g.Segment = 'value for money'\nGROUP BY g.Country;",
        "normalized_output_query": "SELECT g.Country, COUNT(*) AS total_value_for_money_gas_stations FROM public.gasstations g WHERE g.Segment = 'value for money' GROUP BY g.Country;",
        "output_error": "column g.country does not exist\nLINE 1: SELECT g.Country, COUNT(*) AS total_value_for_money_gas_stat...\n               ^\nHINT:  Perhaps you meant to reference the column \"g.Country\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What percentage of KAM customers pay in euros?",
        "reference_query": "SELECT CAST(SUM(CASE WHEN \"Currency\" = 'EUR' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(\"CustomerID\") FROM customers WHERE \"Segment\" = 'KAM'",
        "normalized_reference_query": "SELECT CAST(SUM(CASE WHEN \"Currency\" = 'EUR' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(\"CustomerID\") FROM customers WHERE \"Segment\" = 'KAM'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no information available about what \"KAM customers\" refers to, nor is there any connection between customer segments and the currency they pay in within the given tables.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO information available about what \"KAM customers\" refers TO, nor IS there ANY CONNECTION BETWEEN customer segments AND the currency they pay IN within the given tables.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "In February 2012, what percentage of customers consumed more than 528.3?",
        "reference_query": "SELECT CAST(SUM(CASE WHEN \"Consumption\" > 528.3 THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(\"CustomerID\") FROM yearmonth WHERE \"Date\" = '201202'",
        "normalized_reference_query": "SELECT CAST(SUM(CASE WHEN \"Consumption\" > 528.3 THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(\"CustomerID\") FROM yearmonth WHERE \"Date\" = '201202'",
        "reference_error": null,
        "output_query": "SELECT \n    (COUNT(CASE WHEN \"Consumption\" > 528.3 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_consumed_more_than_528_3\nFROM \n    public.yearmonth\nWHERE \n    \"Date\" LIKE '2012-02%';",
        "normalized_output_query": "SELECT (COUNT(CASE WHEN \"Consumption\" > 528.3 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_consumed_more_than_528_3 FROM public.yearmonth WHERE \"Date\" LIKE '2012-02%';",
        "output_error": "division by zero\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What percentage of Slovakian gas stations are premium?",
        "reference_query": "SELECT CAST(SUM(CASE WHEN \"Segment\" = 'Premium' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(\"GasStationID\") FROM gasstations WHERE \"Country\" = 'SVK'",
        "normalized_reference_query": "SELECT CAST(SUM(CASE WHEN \"Segment\" = 'Premium' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(\"GasStationID\") FROM gasstations WHERE \"Country\" = 'SVK'",
        "reference_error": null,
        "output_query": "SELECT \n    (COUNT(CASE WHEN Segment = 'Premium' THEN 1 END)::DECIMAL / COUNT(*)) * 100 AS percentage_premium\nFROM \n    public.gasstations\nWHERE \n    Country = 'Slovakian';",
        "normalized_output_query": "SELECT (COUNT(CASE WHEN SEGMENT = 'Premium' THEN 1 END)::DECIMAL / COUNT(*)) * 100 AS percentage_premium FROM public.gasstations WHERE Country = 'Slovakian';",
        "output_error": "column \"segment\" does not exist\nLINE 1: SELECT (COUNT(CASE WHEN SEGMENT = 'Premium' THEN 1 END)::DEC...\n                                ^\nHINT:  Perhaps you meant to reference the column \"gasstations.Segment\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Which client ID consumed the most in September 2013?",
        "reference_query": "SELECT T1.\"CustomerID\" FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T2.\"Date\" = '201309' GROUP BY T1.\"CustomerID\" ORDER BY SUM(T2.\"Consumption\") DESC LIMIT 1",
        "normalized_reference_query": "SELECT T1.\"CustomerID\" FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T2.\"Date\" = '201309' GROUP BY T1.\"CustomerID\" ORDER BY SUM(T2.\"Consumption\") DESC LIMIT 1",
        "reference_sample_result": [
            [
                12459
            ]
        ],
        "reference_column_names": [
            "CustomerID"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT \"CustomerID\", SUM(\"Consumption\") as TotalConsumption\nFROM public.yearmonth\nWHERE \"Date\" LIKE '2013-09%'\nGROUP BY \"CustomerID\"\nORDER BY TotalConsumption DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT \"CustomerID\", SUM(\"Consumption\") AS TotalConsumption FROM public.yearmonth WHERE \"Date\" LIKE '2013-09%' GROUP BY \"CustomerID\" ORDER BY TotalConsumption DESC LIMIT 1;",
        "output_sample_result": [],
        "output_column_names": [
            "CustomerID",
            "totalconsumption"
        ],
        "output_row_count": 0,
        "output_column_count": 2,
        "sequence_similarity_score": 0.6133333333333333,
        "bleu_similarity_score": 5.300158258361478e-155,
        "execution_accuracy": false
    },
    {
        "question": "Which client segment consumed the least in September 2013?",
        "reference_query": "SELECT T1.\"Segment\" FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T2.\"Date\" = '201309' GROUP BY T1.\"CustomerID\", T1.\"Segment\" ORDER BY SUM(T2.\"Consumption\") ASC LIMIT 1",
        "normalized_reference_query": "SELECT T1.\"Segment\" FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T2.\"Date\" = '201309' GROUP BY T1.\"CustomerID\", T1.\"Segment\" ORDER BY SUM(T2.\"Consumption\") ASC LIMIT 1",
        "reference_sample_result": [
            [
                "KAM"
            ]
        ],
        "reference_column_names": [
            "Segment"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT c.\"Segment\", SUM(y.\"Consumption\") AS total_consumption\nFROM public.yearmonth y\nJOIN public.customers c ON y.\"CustomerID\" = c.\"CustomerID\"\nWHERE y.\"Date\" LIKE '2013-09%'\nGROUP BY c.\"Segment\"\nORDER BY total_consumption ASC\nLIMIT 1;",
        "normalized_output_query": "SELECT c.\"Segment\", SUM(y.\"Consumption\") AS total_consumption FROM public.yearmonth y JOIN public.customers c ON y.\"CustomerID\" = c.\"CustomerID\" WHERE y.\"Date\" LIKE '2013-09%' GROUP BY c.\"Segment\" ORDER BY total_consumption ASC LIMIT 1;",
        "output_sample_result": [],
        "output_column_names": [
            "Segment",
            "total_consumption"
        ],
        "output_row_count": 0,
        "output_column_count": 2,
        "sequence_similarity_score": 0.46770601336302897,
        "bleu_similarity_score": 6.8595780405242544e-155,
        "execution_accuracy": false
    },
    {
        "question": "Which SME customer consumed the least in June 2012?",
        "reference_query": "SELECT T1.\"CustomerID\" FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T2.\"Date\" = '201206' AND T1.\"Segment\" = 'SME' GROUP BY T1.\"CustomerID\" ORDER BY SUM(T2.\"Consumption\") ASC LIMIT 1",
        "normalized_reference_query": "SELECT T1.\"CustomerID\" FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T2.\"Date\" = '201206' AND T1.\"Segment\" = 'SME' GROUP BY T1.\"CustomerID\" ORDER BY SUM(T2.\"Consumption\") ASC LIMIT 1",
        "reference_sample_result": [
            [
                27338
            ]
        ],
        "reference_column_names": [
            "CustomerID"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT c.\"CustomerID\", MIN(y.\"Consumption\") AS MinConsumption\nFROM public.yearmonth y\nJOIN public.customers c ON y.\"CustomerID\" = c.\"CustomerID\"\nWHERE c.\"Segment\" = 'SME' AND y.\"Date\" LIKE '2012-06%'\nGROUP BY c.\"CustomerID\"\nORDER BY MinConsumption ASC\nLIMIT 1;",
        "normalized_output_query": "SELECT c.\"CustomerID\", MIN(y.\"Consumption\") AS MinConsumption FROM public.yearmonth y JOIN public.customers c ON y.\"CustomerID\" = c.\"CustomerID\" WHERE c.\"Segment\" = 'SME' AND y.\"Date\" LIKE '2012-06%' GROUP BY c.\"CustomerID\" ORDER BY MinConsumption ASC LIMIT 1;",
        "output_sample_result": [],
        "output_column_names": [
            "CustomerID",
            "minconsumption"
        ],
        "output_row_count": 0,
        "output_column_count": 2,
        "sequence_similarity_score": 0.44353182751540043,
        "bleu_similarity_score": 7.517774439489923e-155,
        "execution_accuracy": false
    },
    {
        "question": "What is the highest monthly consumption in the year 2012?",
        "reference_query": "SELECT SUM(\"Consumption\") FROM yearmonth WHERE SUBSTR(\"Date\", 1, 4) = '2012' GROUP BY SUBSTR(\"Date\", 5, 2) ORDER BY SUM(\"Consumption\") DESC LIMIT 1",
        "normalized_reference_query": "SELECT SUM(\"Consumption\") FROM yearmonth WHERE SUBSTR(\"Date\", 1, 4) = '2012' GROUP BY SUBSTR(\"Date\", 5, 2) ORDER BY SUM(\"Consumption\") DESC LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT MAX(Consumption) AS highest_monthly_consumption\nFROM public.yearmonth\nWHERE Date LIKE '2012%';",
        "normalized_output_query": "SELECT MAX(Consumption) AS highest_monthly_consumption FROM public.yearmonth WHERE Date LIKE '2012%';",
        "output_error": "column \"consumption\" does not exist\nLINE 1: SELECT MAX(Consumption) AS highest_monthly_consumption FROM ...\n                   ^\nHINT:  Perhaps you meant to reference the column \"yearmonth.Consumption\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the biggest monthly consumption of the customers who use euro as their currency?",
        "reference_query": "SELECT SUM(T2.\"Consumption\") / 12 AS MonthlyConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T1.\"Currency\" = 'EUR' GROUP BY T1.\"CustomerID\" ORDER BY MonthlyConsumption DESC LIMIT 1",
        "normalized_reference_query": "SELECT SUM(T2.\"Consumption\") / 12 AS MonthlyConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T1.\"Currency\" = 'EUR' GROUP BY T1.\"CustomerID\" ORDER BY MonthlyConsumption DESC LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT MAX(ym.Consumption) AS BiggestMonthlyConsumption\nFROM public.yearmonth ym\nJOIN public.customers c ON ym.CustomerID = c.CustomerID\nWHERE c.Currency = 'euro';",
        "normalized_output_query": "SELECT MAX(ym.Consumption) AS BiggestMonthlyConsumption FROM public.yearmonth ym JOIN public.customers c ON ym.CustomerID = c.CustomerID WHERE c.Currency = 'euro';",
        "output_error": "column ym.customerid does not exist\nLINE 1: ...OM public.yearmonth ym JOIN public.customers c ON ym.Custome...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"ym.CustomerID\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Please list the product description of the products consumed in September, 2013.",
        "reference_query": "SELECT T3.\"Description\" FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" INNER JOIN products AS T3 ON T1.\"ProductID\" = T3.\"ProductID\" WHERE T2.\"Date\" = '201309'",
        "normalized_reference_query": "SELECT T3.\"Description\" FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" INNER JOIN products AS T3 ON T1.\"ProductID\" = T3.\"ProductID\" WHERE T2.\"Date\" = '201309'",
        "reference_error": null,
        "output_query": "SELECT DISTINCT p.Description\nFROM public.transactions_1k t\nJOIN public.products p ON t.ProductID = p.ProductID\nWHERE t.Date >= '2013-09-01' AND t.Date <= '2013-09-30';",
        "normalized_output_query": "SELECT DISTINCT p.Description FROM public.transactions_1k t JOIN public.products p ON t.ProductID = p.ProductID WHERE t.Date >= '2013-09-01' AND t.Date <= '2013-09-30';",
        "output_error": "column t.productid does not exist\nLINE 1: ...ublic.transactions_1k t JOIN public.products p ON t.ProductI...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t.ProductID\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Please list the countries of the gas stations with transactions taken place in June, 2013.",
        "reference_query": "SELECT DISTINCT T2.\"Country\" FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.\"GasStationID\" = T2.\"GasStationID\" INNER JOIN yearmonth AS T3 ON T1.\"CustomerID\" = T3.\"CustomerID\" WHERE T3.\"Date\" = '201306'",
        "normalized_reference_query": "SELECT DISTINCT T2.\"Country\" FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.\"GasStationID\" = T2.\"GasStationID\" INNER JOIN yearmonth AS T3 ON T1.\"CustomerID\" = T3.\"CustomerID\" WHERE T3.\"Date\" = '201306'",
        "reference_error": null,
        "output_query": "SELECT DISTINCT g.Country\nFROM public.gasstations g\nJOIN public.transactions_1k t ON g.GasStationID = t.GasStationID\nWHERE t.Date BETWEEN '2013-06-01' AND '2013-06-30';",
        "normalized_output_query": "SELECT DISTINCT g.Country FROM public.gasstations g JOIN public.transactions_1k t ON g.GasStationID = t.GasStationID WHERE t.Date BETWEEN '2013-06-01' AND '2013-06-30';",
        "output_error": "column g.gasstationid does not exist\nLINE 1: ...ic.gasstations g JOIN public.transactions_1k t ON g.GasStati...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Please list the chains of the gas stations with transactions in euro.",
        "reference_query": "SELECT DISTINCT T3.\"ChainID\" FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" INNER JOIN gasstations AS T3 ON T1.\"GasStationID\" = T3.\"GasStationID\" WHERE T2.\"Currency\" = 'EUR'",
        "normalized_reference_query": "SELECT DISTINCT T3.\"ChainID\" FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" INNER JOIN gasstations AS T3 ON T1.\"GasStationID\" = T3.\"GasStationID\" WHERE T2.\"Currency\" = 'EUR'",
        "reference_error": null,
        "output_query": "SELECT DISTINCT gasstations.ChainID\nFROM gasstations\nJOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID\nWHERE transactions_1k.Price = 'euro';",
        "normalized_output_query": "SELECT DISTINCT gasstations.ChainID FROM gasstations JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID WHERE transactions_1k.Price = 'euro';",
        "output_error": "column gasstations.gasstationid does not exist\nLINE 1: ....ChainID FROM gasstations JOIN transactions_1k ON gasstation...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Please list the product description of the products bought in transactions in euro.",
        "reference_query": "SELECT DISTINCT T1.\"ProductID\", T3.\"Description\" FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" INNER JOIN products AS T3 ON T1.\"ProductID\" = T3.\"ProductID\" WHERE T2.\"Currency\" = 'EUR'",
        "normalized_reference_query": "SELECT DISTINCT T1.\"ProductID\", T3.\"Description\" FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" INNER JOIN products AS T3 ON T1.\"ProductID\" = T3.\"ProductID\" WHERE T2.\"Currency\" = 'EUR'",
        "reference_error": null,
        "output_query": "SELECT DISTINCT p.Description\nFROM public.transactions_1k t\nJOIN public.products p ON t.ProductID = p.ProductID\nJOIN public.customers c ON t.CustomerID = c.CustomerID\nWHERE c.Currency = 'Euro';",
        "normalized_output_query": "SELECT DISTINCT p.Description FROM public.transactions_1k t JOIN public.products p ON t.ProductID = p.ProductID JOIN public.customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'Euro';",
        "output_error": "column t.productid does not exist\nLINE 1: ...ublic.transactions_1k t JOIN public.products p ON t.ProductI...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t.ProductID\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the average total price of the transactions taken place in January, 2012?",
        "reference_query": "SELECT AVG(\"Amount\") FROM transactions_1k WHERE \"Date\"::TEXT LIKE '2012-01%'",
        "normalized_reference_query": "SELECT AVG(\"Amount\") FROM transactions_1k WHERE \"Date\"::TEXT LIKE '2012-01%'",
        "reference_error": null,
        "output_query": "SELECT AVG(Price) AS AveragePrice\nFROM public.transactions_1k\nWHERE Date BETWEEN '2012-01-01' AND '2012-01-31';",
        "normalized_output_query": "SELECT AVG(Price) AS AveragePrice FROM public.transactions_1k WHERE Date BETWEEN '2012-01-01' AND '2012-01-31';",
        "output_error": "column \"price\" does not exist\nLINE 1: SELECT AVG(Price) AS AveragePrice FROM public.transactions_1...\n                   ^\nHINT:  Perhaps you meant to reference the column \"transactions_1k.Price\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?",
        "reference_query": "SELECT COUNT(*) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T2.\"Currency\" = 'EUR' AND T1.\"Consumption\" > 1000.00",
        "normalized_reference_query": "SELECT COUNT(*) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T2.\"Currency\" = 'EUR' AND T1.\"Consumption\" > 1000.00",
        "reference_error": null,
        "output_query": "SELECT COUNT(DISTINCT y.CustomerID) AS CustomerCount\nFROM public.yearmonth y\nJOIN public.customers c ON y.CustomerID = c.CustomerID\nWHERE c.Currency = 'euro' AND y.Consumption > 1000;",
        "normalized_output_query": "SELECT COUNT(DISTINCT y.CustomerID) AS CustomerCount FROM public.yearmonth y JOIN public.customers c ON y.CustomerID = c.CustomerID WHERE c.Currency = 'euro' AND y.Consumption > 1000;",
        "output_error": "column y.customerid does not exist\nLINE 1: ...ROM public.yearmonth y JOIN public.customers c ON y.Customer...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"y.CustomerID\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic.",
        "reference_query": "SELECT DISTINCT T3.\"Description\" FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.\"GasStationID\" = T2.\"GasStationID\" INNER JOIN products AS T3 ON T1.\"ProductID\" = T3.\"ProductID\" WHERE T2.\"Country\" = 'CZE'",
        "normalized_reference_query": "SELECT DISTINCT T3.\"Description\" FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.\"GasStationID\" = T2.\"GasStationID\" INNER JOIN products AS T3 ON T1.\"ProductID\" = T3.\"ProductID\" WHERE T2.\"Country\" = 'CZE'",
        "reference_error": null,
        "output_query": "SELECT DISTINCT p.Description\nFROM public.transactions_1k t\nJOIN public.gasstations g ON t.GasStationID = g.GasStationID\nJOIN public.products p ON t.ProductID = p.ProductID\nWHERE g.Country = 'Czech Republic';",
        "normalized_output_query": "SELECT DISTINCT p.Description FROM public.transactions_1k t JOIN public.gasstations g ON t.GasStationID = g.GasStationID JOIN public.products p ON t.ProductID = p.ProductID WHERE g.Country = 'Czech Republic';",
        "output_error": "column t.gasstationid does not exist\nLINE 1: ...ic.transactions_1k t JOIN public.gasstations g ON t.GasStati...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.",
        "reference_query": "SELECT DISTINCT T1.\"Time\" FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.\"GasStationID\" = T2.\"GasStationID\" WHERE T2.\"ChainID\" = 11",
        "normalized_reference_query": "SELECT DISTINCT T1.\"Time\" FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.\"GasStationID\" = T2.\"GasStationID\" WHERE T2.\"ChainID\" = 11",
        "reference_error": null,
        "output_query": "SELECT DISTINCT t.Time\nFROM public.transactions_1k t\nJOIN public.gasstations g ON t.GasStationID = g.GasStationID\nWHERE g.ChainID = 11;",
        "normalized_output_query": "SELECT DISTINCT t.Time FROM public.transactions_1k t JOIN public.gasstations g ON t.GasStationID = g.GasStationID WHERE g.ChainID = 11;",
        "output_error": "column t.gasstationid does not exist\nLINE 1: ...ic.transactions_1k t JOIN public.gasstations g ON t.GasStati...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many transactions taken place in the gas station in the Czech Republic are with a price of over 1000?",
        "reference_query": "SELECT COUNT(T1.\"TransactionID\") FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.\"GasStationID\" = T2.\"GasStationID\" WHERE T2.\"Country\" = 'CZE' AND T1.\"Price\" > 1000",
        "normalized_reference_query": "SELECT COUNT(T1.\"TransactionID\") FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.\"GasStationID\" = T2.\"GasStationID\" WHERE T2.\"Country\" = 'CZE' AND T1.\"Price\" > 1000",
        "reference_error": null,
        "output_query": "SELECT COUNT(*)\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE g.Country = 'Czech Republic' AND t.Price > 1000;",
        "normalized_output_query": "SELECT COUNT(*) FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'Czech Republic' AND t.Price > 1000;",
        "output_error": "column t.gasstationid does not exist\nLINE 1: ...T(*) FROM transactions_1k t JOIN gasstations g ON t.GasStati...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?",
        "reference_query": "SELECT COUNT(T1.\"TransactionID\") FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.\"GasStationID\" = T2.\"GasStationID\" WHERE T2.\"Country\" = 'CZE' AND EXTRACT(YEAR FROM T1.\"Date\") >= '2012'",
        "normalized_reference_query": "SELECT COUNT(T1.\"TransactionID\") FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.\"GasStationID\" = T2.\"GasStationID\" WHERE T2.\"Country\" = 'CZE' AND EXTRACT(YEAR FROM T1.\"Date\") >= '2012'",
        "reference_error": null,
        "output_query": "SELECT COUNT(*) \nFROM public.transactions_1k t\nJOIN public.gasstations g ON t.GasStationID = g.GasStationID\nWHERE g.Country = 'Czech Republic' AND t.Date > '2012-01-01';",
        "normalized_output_query": "SELECT COUNT(*) FROM public.transactions_1k t JOIN public.gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'Czech Republic' AND t.Date > '2012-01-01';",
        "output_error": "column t.gasstationid does not exist\nLINE 1: ...ic.transactions_1k t JOIN public.gasstations g ON t.GasStati...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What is the average total price of the transactions taken place in gas stations in the Czech Republic?",
        "reference_query": "SELECT AVG(T1.\"Price\") FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.\"GasStationID\" = T2.\"GasStationID\" WHERE T2.\"Country\" = 'CZE'",
        "normalized_reference_query": "SELECT AVG(T1.\"Price\") FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.\"GasStationID\" = T2.\"GasStationID\" WHERE T2.\"Country\" = 'CZE'",
        "reference_error": null,
        "output_query": "SELECT AVG(Amount * Price) AS average_total_price\nFROM public.transactions_1k t\nJOIN public.gasstations g ON t.GasStationID = g.GasStationID\nWHERE g.Country = 'Czech Republic';",
        "normalized_output_query": "SELECT AVG(Amount * Price) AS average_total_price FROM public.transactions_1k t JOIN public.gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'Czech Republic';",
        "output_error": "column t.gasstationid does not exist\nLINE 1: ...ic.transactions_1k t JOIN public.gasstations g ON t.GasStati...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "For the customers who paid in the euro, what is their average total price of the transactions?",
        "reference_query": "SELECT AVG(T1.\"Price\") FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.\"GasStationID\" = T2.\"GasStationID\" INNER JOIN customers AS T3 ON T1.\"CustomerID\" = T3.\"CustomerID\" WHERE T3.\"Currency\" = 'EUR'",
        "normalized_reference_query": "SELECT AVG(T1.\"Price\") FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.\"GasStationID\" = T2.\"GasStationID\" INNER JOIN customers AS T3 ON T1.\"CustomerID\" = T3.\"CustomerID\" WHERE T3.\"Currency\" = 'EUR'",
        "reference_error": null,
        "output_query": "SELECT AVG(t.TotalPrice) AS AverageTotalPrice\nFROM (\n    SELECT c.CustomerID, SUM(t.Price) AS TotalPrice\n    FROM public.customers c\n    JOIN public.transactions_1k t ON c.CustomerID = t.CustomerID\n    WHERE c.Currency = 'euro'\n    GROUP BY c.CustomerID\n) AS t;",
        "normalized_output_query": "SELECT AVG(t.TotalPrice) AS AverageTotalPrice FROM (SELECT c.CustomerID, SUM(t.Price) AS TotalPrice FROM public.customers c JOIN public.transactions_1k t ON c.CustomerID = t.CustomerID WHERE c.Currency = 'euro' GROUP BY c.CustomerID) AS t;",
        "output_error": "column c.customerid does not exist\nLINE 1: ...blic.customers c JOIN public.transactions_1k t ON c.Customer...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"c.CustomerID\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Which customer paid the most in 2012/8/25?",
        "reference_query": "SELECT \"CustomerID\" FROM transactions_1k WHERE \"Date\" = '2012-08-25' GROUP BY \"CustomerID\" ORDER BY SUM(\"Price\") DESC LIMIT 1",
        "normalized_reference_query": "SELECT \"CustomerID\" FROM transactions_1k WHERE \"Date\" = '2012-08-25' GROUP BY \"CustomerID\" ORDER BY SUM(\"Price\") DESC LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT t.CustomerID, SUM(t.Amount * t.Price) AS TotalSpent\nFROM public.transactions_1k t\nWHERE t.Date = '2012-08-25'\nGROUP BY t.CustomerID\nORDER BY TotalSpent DESC\nLIMIT 1;",
        "normalized_output_query": "SELECT t.CustomerID, SUM(t.Amount * t.Price) AS TotalSpent FROM public.transactions_1k t WHERE t.Date = '2012-08-25' GROUP BY t.CustomerID ORDER BY TotalSpent DESC LIMIT 1;",
        "output_error": "column t.customerid does not exist\nLINE 1: SELECT t.CustomerID, SUM(t.Amount * t.Price) AS TotalSpent F...\n               ^\nHINT:  Perhaps you meant to reference the column \"t.CustomerID\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "Which country's gas station had the first paid cusomer in 2012/8/25?",
        "reference_query": "SELECT T2.\"Country\" FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.\"GasStationID\" = T2.\"GasStationID\" WHERE T1.\"Date\" = '2012-08-25' ORDER BY T1.\"Time\" DESC LIMIT 1",
        "normalized_reference_query": "SELECT T2.\"Country\" FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.\"GasStationID\" = T2.\"GasStationID\" WHERE T1.\"Date\" = '2012-08-25' ORDER BY T1.\"Time\" DESC LIMIT 1",
        "reference_error": null,
        "output_query": "SELECT c.name AS CountryName\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nJOIN \"Country\" c ON g.Country = c.id\nWHERE t.Date = '2012-08-25'\nORDER BY t.Time\nLIMIT 1;",
        "normalized_output_query": "SELECT c.name AS CountryName FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN \"Country\" c ON g.Country = c.id WHERE t.Date = '2012-08-25' ORDER BY t.Time LIMIT 1;",
        "output_error": "column t.gasstationid does not exist\nLINE 1: ...Name FROM transactions_1k t JOIN gasstations g ON t.GasStati...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?",
        "reference_query": "SELECT DISTINCT T3.\"Currency\" FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.\"GasStationID\" = T2.\"GasStationID\" INNER JOIN customers AS T3 ON T1.\"CustomerID\" = T3.\"CustomerID\" WHERE T1.\"Date\" = '2012-08-24' AND T1.\"Time\" = '16:25:00'",
        "normalized_reference_query": "SELECT DISTINCT T3.\"Currency\" FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.\"GasStationID\" = T2.\"GasStationID\" INNER JOIN customers AS T3 ON T1.\"CustomerID\" = T3.\"CustomerID\" WHERE T1.\"Date\" = '2012-08-24' AND T1.\"Time\" = '16:25:00'",
        "reference_error": null,
        "output_query": "SELECT c.Currency \nFROM public.transactions_1k t\nJOIN public.customers c ON t.CustomerID = c.CustomerID\nWHERE t.Date = '2012-08-24' AND t.Time = '16:25:00';",
        "normalized_output_query": "SELECT c.Currency FROM public.transactions_1k t JOIN public.customers c ON t.CustomerID = c.CustomerID WHERE t.Date = '2012-08-24' AND t.Time = '16:25:00';",
        "output_error": "column t.customerid does not exist\nLINE 1: ...blic.transactions_1k t JOIN public.customers c ON t.Customer...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t.CustomerID\".\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What segment did the customer have at 2012/8/23 21:20:00?",
        "reference_query": "SELECT T2.\"Segment\" FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T1.\"Date\" = '2012-08-23' AND T1.\"Time\" = '21:20:00'",
        "normalized_reference_query": "SELECT T2.\"Segment\" FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T1.\"Date\" = '2012-08-23' AND T1.\"Time\" = '21:20:00'",
        "reference_error": null,
        "output_query": "The provided context is insufficient to generate the SQL query because there is no direct relationship or timestamp information linking the \"customers\" table with the \"transactions_1k\" table, which contains date and time information.",
        "normalized_output_query": "The provided context IS insufficient TO generate the SQL query because there IS NO direct relationship OR timestamp information linking the \"customers\" TABLE WITH the \"transactions_1k\" TABLE, which CONTAINS date AND TIME information.",
        "output_error": "syntax error at or near \"The\"\nLINE 1: The provided context IS insufficient TO generate the SQL que...\n        ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "How many transactions were paid in CZK in the morning of 2012/8/26?",
        "reference_query": "SELECT COUNT(T1.\"TransactionID\") FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T1.\"Date\" = '2012-08-26' AND T1.\"Time\" < '13:00:00' AND T2.\"Currency\" = 'CZK'",
        "normalized_reference_query": "SELECT COUNT(T1.\"TransactionID\") FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" WHERE T1.\"Date\" = '2012-08-26' AND T1.\"Time\" < '13:00:00' AND T2.\"Currency\" = 'CZK'",
        "reference_sample_result": [
            [
                68
            ]
        ],
        "reference_column_names": [
            "count"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT COUNT(*) \nFROM public.transactions_1k t\nJOIN public.customers c ON t.\"CustomerID\" = c.\"CustomerID\"\nWHERE t.\"Date\" = '2012-08-26' \nAND t.\"Time\" < '12:00:00'\nAND c.\"Currency\" = 'CZK';",
        "normalized_output_query": "SELECT COUNT(*) FROM public.transactions_1k t JOIN public.customers c ON t.\"CustomerID\" = c.\"CustomerID\" WHERE t.\"Date\" = '2012-08-26' AND t.\"Time\" < '12:00:00' AND c.\"Currency\" = 'CZK';",
        "output_sample_result": [
            [
                60
            ]
        ],
        "output_column_names": [
            "count"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.8244274809160306,
        "bleu_similarity_score": 2.272540691926962e-78,
        "execution_accuracy": false
    },
    {
        "question": "For the earliest customer, what segment did he/she have?",
        "reference_query": "SELECT T2.\"Segment\" FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" ORDER BY \"Date\" ASC LIMIT 1",
        "normalized_reference_query": "SELECT T2.\"Segment\" FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.\"CustomerID\" = T2.\"CustomerID\" ORDER BY \"Date\" ASC LIMIT 1",
        "reference_sample_result": [
            [
                "KAM"
            ]
        ],
        "reference_column_names": [
            "Segment"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT c.\"Segment\"\nFROM public.customers c\nJOIN (\n    SELECT \"CustomerID\"\n    FROM public.yearmonth\n    ORDER BY \"Date\" ASC\n    LIMIT 1\n) earliest_customer ON c.\"CustomerID\" = earliest_customer.\"CustomerID\"",
        "normalized_output_query": "SELECT c.\"Segment\" FROM public.customers c JOIN (SELECT \"CustomerID\" FROM public.yearmonth ORDER BY \"Date\" ASC LIMIT 1) earliest_customer ON c.\"CustomerID\" = earliest_customer.\"CustomerID\"",
        "output_sample_result": [
            [
                "KAM"
            ]
        ],
        "output_column_names": [
            "Segment"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.50920245398773,
        "bleu_similarity_score": 0.20217803037339238,
        "execution_accuracy": false
    },
    {
        "question": "For the deal happened at 2012/8/24 12:42:00, which country was it?",
        "reference_query": "SELECT T2.\"Country\" FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.\"GasStationID\" = T2.\"GasStationID\" WHERE T1.\"Date\" = '2012-08-24' AND T1.\"Time\" = '12:42:00'",
        "normalized_reference_query": "SELECT T2.\"Country\" FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.\"GasStationID\" = T2.\"GasStationID\" WHERE T1.\"Date\" = '2012-08-24' AND T1.\"Time\" = '12:42:00'",
        "reference_error": null,
        "output_query": "SELECT g.Country\nFROM public.transactions_1k t\nJOIN public.gasstations g ON t.GasStationID = g.GasStationID\nWHERE t.Date = '2012-08-24' AND t.Time = '12:42:00';",
        "normalized_output_query": "SELECT g.Country FROM public.transactions_1k t JOIN public.gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-24' AND t.Time = '12:42:00';",
        "output_error": "column t.gasstationid does not exist\nLINE 1: ...ic.transactions_1k t JOIN public.gasstations g ON t.GasStati...\n                                                             ^\n",
        "sequence_similarity_score": null,
        "bleu_similarity_score": null,
        "execution_accuracy": false
    },
    {
        "question": "What was the product id of the transaction happened at 2012/8/23 21:20:00?",
        "reference_query": "SELECT T1.\"ProductID\" FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.\"GasStationID\" = T2.\"GasStationID\" WHERE T1.\"Date\" = '2012-08-23' AND T1.\"Time\" = '21:20:00'",
        "normalized_reference_query": "SELECT T1.\"ProductID\" FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.\"GasStationID\" = T2.\"GasStationID\" WHERE T1.\"Date\" = '2012-08-23' AND T1.\"Time\" = '21:20:00'",
        "reference_sample_result": [
            [
                2
            ]
        ],
        "reference_column_names": [
            "ProductID"
        ],
        "reference_row_count": 1,
        "reference_column_count": 1,
        "output_query": "SELECT \"ProductID\" \nFROM public.transactions_1k \nWHERE \"Date\" = '2012-08-23' AND \"Time\" = '21:20:00';",
        "normalized_output_query": "SELECT \"ProductID\" FROM public.transactions_1k WHERE \"Date\" = '2012-08-23' AND \"Time\" = '21:20:00';",
        "output_sample_result": [
            [
                2
            ]
        ],
        "output_column_names": [
            "ProductID"
        ],
        "output_row_count": 1,
        "output_column_count": 1,
        "sequence_similarity_score": 0.6618181818181819,
        "bleu_similarity_score": 1.5671889429154857e-78,
        "execution_accuracy": false
    }
]