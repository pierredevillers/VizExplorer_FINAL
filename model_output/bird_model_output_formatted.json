{
    "0": "SELECT MAX(\"Percent (%) Eligible Free (K-12)\") AS highest_eligible_free_rate\nFROM public.frpm\nWHERE \"County Name\" = 'Alameda'\t----- bird -----\tcalifornia_schools",
    "1": "SELECT \"School Name\", \"Percent (%) Eligible Free (Ages 5-17)\"\nFROM public.frpm\nWHERE \"School Type\" = 'Continuation'\nORDER BY \"Percent (%) Eligible Free (Ages 5-17)\" ASC\nLIMIT 3;\t----- bird -----\tcalifornia_schools",
    "2": "SELECT s.Zip\nFROM public.schools s\nJOIN public.frpm f ON s.CDSCode = f.CDSCode\nWHERE f.\"County Name\" = 'Fresno' AND f.\"District Name\" = 'Fresno County Office of Education' AND f.\"Charter School (Y/N)\" = 1;\t----- bird -----\tcalifornia_schools",
    "3": "WITH MaxFRPM AS (\n    SELECT \"CDSCode\", MAX(\"FRPM Count (K-12)\") AS MaxFRPMCount\n    FROM public.frpm\n    GROUP BY \"CDSCode\"\n)\nSELECT s.\"MailStreet\"\nFROM public.schools s\nJOIN MaxFRPM f ON s.\"CDSCode\" = f.\"CDSCode\"\nORDER BY f.MaxFRPMCount DESC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "4": "SELECT Phone \nFROM public.schools \nWHERE Charter = 1 AND FundingType = 'Direct' AND OpenDate > '2000-01-01';\t----- bird -----\tcalifornia_schools",
    "5": "SELECT COUNT(*)\nFROM public.satscores s\nJOIN public.schools sc ON s.cds = sc.\"CDSCode\"\nWHERE s.\"AvgScrMath\" > 400 AND sc.\"Virtual\" = 'Yes';\t----- bird -----\tcalifornia_schools",
    "6": "SELECT s.\"School\", s.\"District\", s.\"County\"\nFROM public.schools s\nJOIN public.satscores ss ON s.\"CDSCode\" = ss.cds\nWHERE ss.\"NumTstTakr\" > 500 AND s.\"Magnet\" = 1;\t----- bird -----\tcalifornia_schools",
    "7": "SELECT s.Phone\nFROM public.satscores ss\nJOIN public.schools s ON ss.cds = s.CDSCode\nORDER BY ss.\"NumGE1500\" DESC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "8": "SELECT s.sname, s.NumTstTakr\nFROM public.satscores s\nJOIN public.frpm f ON s.cds = f.\"CDSCode\"\nWHERE f.\"FRPM Count (K-12)\" = (\n    SELECT MAX(\"FRPM Count (K-12)\")\n    FROM public.frpm\n)\t----- bird -----\tcalifornia_schools",
    "9": "SELECT COUNT(DISTINCT s.\"CDSCode\") AS charter_funded_school_count\nFROM public.satscores sat\nJOIN public.schools s ON sat.cds = s.\"CDSCode\"\nWHERE sat.\"AvgScrMath\" > 560 \nAND s.\"FundingType\" = 'Directly funded'\nAND s.\"Charter\" = 1;\t----- bird -----\tcalifornia_schools",
    "10": "WITH highest_avg_read_school AS (\n    SELECT cds, MAX(AvgScrRead) as MaxAvgScrRead\n    FROM public.satscores\n    GROUP BY cds\n    ORDER BY MaxAvgScrRead DESC\n    LIMIT 1\n)\nSELECT f.\"FRPM Count (Ages 5-17)\"\nFROM public.frpm f\nJOIN highest_avg_read_school h ON f.\"CDSCode\" = h.cds;\t----- bird -----\tcalifornia_schools",
    "11": "SELECT \"CDSCode\" \nFROM public.frpm \nWHERE \"Enrollment (K-12)\" > 500;\t----- bird -----\tcalifornia_schools",
    "12": "SELECT MAX(f.\"Percent (%) Eligible Free (Ages 5-17)\") AS highest_eligible_free_rate\nFROM public.satscores s\nJOIN public.frpm f ON s.cds = f.\"CDSCode\"\nWHERE (s.\"NumGE1500\"::FLOAT / s.\"NumTstTakr\") > 0.3;\t----- bird -----\tcalifornia_schools",
    "13": "The provided context is insufficient to generate the SQL query because there is no column that directly indicates the \"SAT excellence rate\" in the given tables. We would need a clear definition or column that represents the \"SAT excellence rate\" to proceed.\t----- bird -----\tcalifornia_schools",
    "14": "SELECT \"NCESSchool\", \"Enrollment (Ages 5-17)\"\nFROM public.frpm\nORDER BY \"Enrollment (Ages 5-17)\" DESC\nLIMIT 5;\t----- bird -----\tcalifornia_schools",
    "15": "The provided context is insufficient to generate the SQL query because there is no information about which districts are considered \"active.\" Additionally, there is no direct link between district activity status and the SAT scores in the given tables.\t----- bird -----\tcalifornia_schools",
    "16": "SELECT COUNT(*)\nFROM public.satscores\nWHERE \"dname\" = 'Alameda' AND \"NumTstTakr\" < 100;\t----- bird -----\tcalifornia_schools",
    "17": "SELECT s.\"School\", s.\"CharterNum\", sat.\"AvgScrWrite\"\nFROM public.schools s\nJOIN public.satscores sat ON s.\"CDSCode\" = sat.\"cds\"\nWHERE sat.\"AvgScrWrite\" > 499\nORDER BY sat.\"AvgScrWrite\" DESC;\t----- bird -----\tcalifornia_schools",
    "18": "SELECT COUNT(*)\nFROM public.satscores AS s\nJOIN public.schools AS sch ON s.cds = sch.\"CDSCode\"\nWHERE sch.County = 'Fresno' AND sch.FundingType = 'Directly Funded' AND s.\"NumTstTakr\" <= 250;\t----- bird -----\tcalifornia_schools",
    "19": "SELECT s.Phone\nFROM public.satscores sat\nJOIN public.schools s ON sat.cds = s.\"CDSCode\"\nORDER BY sat.\"AvgScrMath\" DESC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "20": "SELECT COUNT(*) \nFROM public.frpm \nWHERE \"County Name\" = 'Amador' \nAND \"Low Grade\" = '9' \nAND \"High Grade\" = '12';\t----- bird -----\tcalifornia_schools",
    "21": "SELECT COUNT(*)\nFROM public.frpm\nWHERE \"County Name\" = 'Los Angeles'\n  AND \"Free Meal Count (K-12)\" > 500\n  AND \"FRPM Count (K-12)\" < 700;\t----- bird -----\tcalifornia_schools",
    "22": "SELECT s.School, ss.NumTstTakr\nFROM public.schools s\nJOIN public.satscores ss ON s.CDSCode = ss.cds\nWHERE s.County = 'Contra Costa'\nORDER BY ss.NumTstTakr DESC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "23": "SELECT \n    s.\"School\" AS school_name,\n    s.\"Street\" AS street_address,\n    s.\"City\" AS city,\n    s.\"Zip\" AS zip\nFROM \n    public.schools s\nJOIN \n    public.frpm f ON s.\"CDSCode\" = f.\"CDSCode\"\nWHERE \n    ABS(f.\"Enrollment (K-12)\" - f.\"Enrollment (Ages 5-17)\") > 30;\t----- bird -----\tcalifornia_schools",
    "24": "SELECT s.School\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.\"CDSCode\"\nJOIN satscores ss ON s.CDSCode = ss.cds\nWHERE f.\"Percent (%) Eligible Free (K-12)\" > 0.1\nAND ss.\"NumGE1500\" > 0;\t----- bird -----\tcalifornia_schools",
    "25": "SELECT s.School, s.FundingType\nFROM public.schools s\nJOIN public.satscores sat ON s.CDSCode = sat.cds\nWHERE s.County = 'Riverside' \nGROUP BY s.School, s.FundingType\nHAVING AVG(sat.\"AvgScrMath\") > 400;\t----- bird -----\tcalifornia_schools",
    "26": "The provided context is insufficient because it does not include details on how to identify high schools within the given tables, nor does it directly relate schools to their communication addresses. Additionally, it does not specify how to filter by ages 15-17 in relation to free or reduced price meals. The necessary tables and relationships to derive the required information are not fully provided.\t----- bird -----\tcalifornia_schools",
    "27": "SELECT \n    sch.School AS school_name, \n    sat.AvgScrWrite AS average_score_writing, \n    sch.Phone AS communication_number\nFROM \n    public.schools sch\nJOIN \n    public.satscores sat ON sch.CDSCode = sat.cds\nWHERE \n    (sch.OpenDate > '1991-12-31' OR sch.ClosedDate < '2000-01-01')\t----- bird -----\tcalifornia_schools",
    "28": "WITH enrollment_difference AS (\n    SELECT \n        s.\"School\",\n        s.\"DOCType\",\n        (f.\"Enrollment (K-12)\" - f.\"Enrollment (Ages 5-17)\") AS enrollment_diff\n    FROM \n        public.frpm f\n    JOIN \n        public.schools s ON f.\"CDSCode\" = s.\"CDSCode\"\n    WHERE \n        s.\"FundingType\" = 'Locally Funded'\n),\naverage_difference AS (\n    SELECT \n        AVG(enrollment_diff) AS avg_diff\n    FROM \n        enrollment_difference\n)\nSELECT \n    ed.\"School\",\n    ed.\"DOCType\"\nFROM \n    enrollment_difference ed,\n    average_difference ad\nWHERE \n    ed.enrollment_diff > ad.avg_diff;\t----- bird -----\tcalifornia_schools",
    "29": "SELECT s.\"OpenDate\"\nFROM public.schools s\nJOIN public.frpm f ON s.\"CDSCode\" = f.\"CDSCode\"\nWHERE f.\"Low Grade\" = '1' AND f.\"High Grade\" = '12'\nORDER BY f.\"Enrollment (K-12)\" DESC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "30": "The provided context is insufficient to generate the SQL query because there is no information about enrollment numbers for students in grades 1 through 12 at the city level in the given tables.\t----- bird -----\tcalifornia_schools",
    "31": "SELECT \"School Name\", \"Enrollment (K-12)\", \"Percent (%) Eligible Free (K-12)\"\nFROM public.frpm\nORDER BY \"Enrollment (K-12)\" DESC\nLIMIT 2 OFFSET 9\t----- bird -----\tcalifornia_schools",
    "32": "The provided context is insufficient because there is no information about an \"ownership code\" in the available tables. Therefore, the query cannot be generated.\t----- bird -----\tcalifornia_schools",
    "33": "SELECT s.School, s.Website\nFROM public.frpm f\nJOIN public.schools s ON f.CDSCode = s.CDSCode\nWHERE f.\"Free Meal Count (Ages 5-17)\" BETWEEN 1900 AND 2000;\t----- bird -----\tcalifornia_schools",
    "34": "The provided context does not contain information about a school run by Kacey Gibson or any direct link between school administrators and the free rate for students. Therefore, it is not possible to generate the SQL query needed to answer the question based on the given context.\t----- bird -----\tcalifornia_schools",
    "35": "SELECT s.\"AdmEmail1\"\nFROM public.schools s\nJOIN public.frpm f ON s.\"CDSCode\" = f.\"CDSCode\"\nWHERE s.\"Charter\" = 1\nORDER BY f.\"Enrollment (K-12)\" ASC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "36": "SELECT s.\"AdmFName1\", s.\"AdmLName1\"\nFROM public.satscores ss\nJOIN public.schools s ON ss.cds = s.\"CDSCode\"\nWHERE ss.\"NumGE1500\" = (\n    SELECT MAX(\"NumGE1500\") FROM public.satscores\n)\t----- bird -----\tcalifornia_schools",
    "37": "The provided context is insufficient because there is no column explicitly named \"excellence rate\" or similar in the available tables. Therefore, I cannot generate the required SQL query to find the school with the lowest excellence rate and its complete address.\t----- bird -----\tcalifornia_schools",
    "38": "SELECT s.Website\nFROM public.satscores ss\nJOIN public.schools s ON ss.cds = s.CDSCode\nWHERE ss.dname = 'Los Angeles'\nAND ss.\"NumTstTakr\" BETWEEN 2000 AND 3000;\t----- bird -----\tcalifornia_schools",
    "39": "SELECT AVG(s.NumTstTakr) AS average_test_takers\nFROM public.satscores s\nJOIN public.schools sch ON s.cds = sch.CDSCode\nWHERE sch.County = 'Fresno'\nAND sch.OpenDate BETWEEN '1980-01-01' AND '1980-12-31';\t----- bird -----\tcalifornia_schools",
    "40": "SELECT s.Phone\nFROM public.satscores sa\nJOIN public.schools s ON sa.cds = s.\"CDSCode\"\nWHERE sa.dname = 'Fresno Unified'\nORDER BY sa.\"AvgScrRead\" ASC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "41": "SELECT s.School\nFROM public.satscores sa\nJOIN public.schools s ON sa.cds = s.CDSCode\nWHERE s.Virtual = 'Yes'\nAND sa.rtype = 'School'\nORDER BY sa.AvgScrRead DESC\nLIMIT 5;\t----- bird -----\tcalifornia_schools",
    "42": "SELECT s.\"Educational Option Type\"\nFROM public.satscores sat\nJOIN public.frpm f ON sat.cds = f.\"CDSCode\"\nORDER BY sat.\"AvgScrMath\" DESC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "43": "SELECT s.cname AS county, s.sname AS school_name, s.\"AvgScrMath\" AS average_math_score\nFROM public.satscores s\nWHERE (s.\"AvgScrRead\" + s.\"AvgScrMath\" + s.\"AvgScrWrite\") = (\n    SELECT MIN(\"AvgScrRead\" + \"AvgScrMath\" + \"AvgScrWrite\")\n    FROM public.satscores\n)\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "44": "SELECT s.City, AVG(sat.AvgScrWrite) AS AverageWritingScore\nFROM public.satscores sat\nJOIN public.schools s ON sat.cds = s.CDSCode\nWHERE sat.NumTstTakr = (\n    SELECT MAX(NumTstTakr)\n    FROM public.satscores\n    WHERE NumGE1500 >= 1500\n)\nGROUP BY s.City;\t----- bird -----\tcalifornia_schools",
    "45": "The provided context does not contain information about the management of schools, specifically by someone named Ricci Ulrich. Therefore, it is not possible to generate the SQL query to answer the question based on the given data.\t----- bird -----\tcalifornia_schools",
    "46": "SELECT School, \"Enrollment (K-12)\"\nFROM public.frpm\nWHERE \"School Type\" = 'State Special Schools'\nORDER BY \"Enrollment (K-12)\" DESC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "47": "SELECT EXTRACT(MONTH FROM \"OpenDate\") AS month, \n       COUNT(*) / 12.0 AS average_number_of_schools\nFROM public.schools\nWHERE \"County\" = 'Alameda'\n  AND \"District\" = 'Elementary School District'\n  AND EXTRACT(YEAR FROM \"OpenDate\") = 1980\nGROUP BY EXTRACT(MONTH FROM \"OpenDate\");\t----- bird -----\tcalifornia_schools",
    "48": "SELECT \n    (SUM(CASE WHEN \"District Type\" = 'Unified School District' AND \"County Name\" = 'Orange' THEN 1 ELSE 0 END) * 1.0 /\n    NULLIF(SUM(CASE WHEN \"District Type\" = 'Elementary School District' AND \"County Name\" = 'Orange' THEN 1 ELSE 0 END), 0)) AS unified_to_elementary_ratio\nFROM public.frpm;\t----- bird -----\tcalifornia_schools",
    "49": "SELECT County, School, ClosedDate\nFROM public.schools\nWHERE ClosedDate IS NOT NULL\nORDER BY County, ClosedDate;\t----- bird -----\tcalifornia_schools",
    "50": "SELECT COUNT(DISTINCT a.account_id)\nFROM public.account a\nJOIN public.district d ON a.district_id = d.district_id\nWHERE a.frequency = 'issuance after transaction' AND d.A2 = 'East Bohemia'\t----- bird -----\tfinancial",
    "51": "It can't be generated. The provided context does not include information on regions or their relation to Prague. The tables given do not have a column that specifies the region or location of the accounts.\t----- bird -----\tfinancial",
    "52": "The provided context is insufficient to generate a SQL query for the question because there is no table containing unemployment data or related information for the years 1995 and 1996.\t----- bird -----\tfinancial",
    "53": "It can't be generated because the provided context does not include any table or column related to salaries or any specific information about gender-based salaries in districts.\t----- bird -----\tfinancial",
    "54": "It can't be generated because the provided context does not include any information about the region \"North Bohemia\" or salary information for customers. The tables available do not have relevant columns to determine customer location specifically in North Bohemia or their salary details.\t----- bird -----\tfinancial",
    "55": "The provided context is insufficient to generate the SQL query. The available tables do not contain information about salaries or how to calculate an average salary. Additionally, the tables do not have a direct link between account numbers and client genders.\t----- bird -----\tfinancial",
    "56": "The provided context is insufficient to generate the SQL query because there is no information about the salary of clients in any of the tables. The \"income\" table provides amounts received, but it is not linked to clients or accounts, nor is there an indication that it represents a salary.\t----- bird -----\tfinancial",
    "57": "The provided context is insufficient to generate the SQL query because there is no information or column in the given tables that directly relates to customers being \"Owner\" or choosing a \"statement of weekly issuance.\"\t----- bird -----\tfinancial",
    "58": "SELECT c.client_id\nFROM public.client c\nJOIN public.disp d ON c.client_id = d.client_id\nJOIN public.account a ON d.account_id = a.account_id\nWHERE d.type = 'DISPONENT' AND a.frequency = 'statement of issuance after transaction';\t----- bird -----\tfinancial",
    "59": "SELECT a.account_id, l.amount, a.frequency\nFROM public.loan l\nJOIN public.account a ON l.account_id = a.account_id\nWHERE EXTRACT(YEAR FROM l.date) = 1997\nAND l.status = 'approved'\nAND a.frequency = 'weekly'\nORDER BY l.amount ASC\nLIMIT 1;\t----- bird -----\tfinancial",
    "60": "SELECT l.account_id, l.amount\nFROM public.loan l\nJOIN public.account a ON l.account_id = a.account_id\nWHERE l.duration > 12\nAND EXTRACT(YEAR FROM a.date) = 1993\nORDER BY l.amount DESC\nLIMIT 1;\t----- bird -----\tfinancial",
    "61": "SELECT COUNT(DISTINCT c.client_id) AS female_customers_count\nFROM public.client c\nJOIN public.account a ON c.district_id = a.district_id\nWHERE c.gender = 'female'\nAND c.birth_date < '1950-01-01'\nAND c.district_id = (SELECT district_id FROM public.district WHERE name = 'Sokolov');\t----- bird -----\tfinancial",
    "62": "SELECT account_id, MIN(date) as earliest_date\nFROM public.account\nWHERE date >= '1995-01-01' AND date < '1996-01-01'\nGROUP BY account_id\nORDER BY earliest_date\nLIMIT 1;\t----- bird -----\tfinancial",
    "63": "SELECT DISTINCT a.account_id\nFROM public.account a\nJOIN public.loan l ON a.account_id = l.account_id\nWHERE a.date < '1997-01-01' AND l.amount > 3000;\t----- bird -----\tfinancial",
    "64": "SELECT client.client_id\nFROM client\nJOIN card ON client.client_id = card.disp_id\nWHERE card.issued = '1994-03-03';\t----- bird -----\tfinancial",
    "65": "SELECT a.date AS account_opened_date\nFROM public.transactions_1k t\nJOIN public.account a ON t.CustomerID = a.account_id\nWHERE t.Amount = 840 AND t.Date = '1998-10-14';\t----- bird -----\tfinancial",
    "66": "SELECT d.district_id\nFROM public.loan l\nJOIN public.account a ON l.account_id = a.account_id\nJOIN public.district d ON a.district_id = d.district_id\nWHERE l.date = '1994-08-25' AND l.status = 'approved';\t----- bird -----\tfinancial",
    "67": "SELECT MAX(t.Amount) AS max_transaction_amount\nFROM public.transactions_1k t\nJOIN public.card c ON t.CardID = c.card_id\nWHERE c.issued = '1996-10-21';\t----- bird -----\tfinancial",
    "68": "The provided context is insufficient to generate the SQL query because there is no information about the salary or income associated with a branch. The tables do not have columns that relate account districts to income amounts to determine which branch has the highest average salary.\t----- bird -----\tfinancial",
    "69": "SELECT t1.\"Amount\"\nFROM public.transactions_1k t1\nJOIN public.loan l ON t1.\"CustomerID\" = l.account_id\nJOIN (\n    SELECT account_id, MIN(date) as account_open_date\n    FROM public.account\n    GROUP BY account_id\n) a ON l.account_id = a.account_id\nWHERE l.amount = (\n    SELECT MAX(amount)\n    FROM public.loan\n)\nAND t1.\"Date\" = (\n    SELECT MIN(t2.\"Date\")\n    FROM public.transactions_1k t2\n    WHERE t2.\"CustomerID\" = t1.\"CustomerID\" AND t2.\"Date\" >= a.account_open_date\n)\nLIMIT 1;\t----- bird -----\tfinancial",
    "70": "It can't be generated.\t----- bird -----\tfinancial",
    "71": "SELECT d.disp_id\nFROM public.transactions_1k t\nJOIN public.card c ON t.CardID = c.card_id\nJOIN public.disp d ON c.disp_id = d.disp_id\nWHERE t.Amount = 5100 AND t.Date = '1998-09-02';\t----- bird -----\tfinancial",
    "72": "Error running intermediate SQL: You need to connect to a database first by running vn.connect_to_snowflake(), vn.connect_to_postgres(), similar function, or manually set vn.run_sql\t----- bird -----\tfinancial",
    "73": "SELECT d.*\nFROM public.client c\nJOIN public.account a ON c.district_id = a.district_id\nJOIN public.district d ON a.district_id = d.district_id\nWHERE c.gender = 'female' AND c.birth_date = '1976-01-29';\t----- bird -----\tfinancial",
    "74": "SELECT c.birth_date\nFROM public.loan l\nJOIN public.account a ON l.account_id = a.account_id\nJOIN public.client c ON a.district_id = c.district_id\nWHERE l.amount = 98832 AND l.date = '1996-01-03';\t----- bird -----\tfinancial",
    "75": "SELECT a.account_id\nFROM public.account a\nJOIN public.client c ON a.district_id = c.district_id\nWHERE c.district_id = (\n    SELECT district_id\n    FROM public.client\n    WHERE district_id IN (\n        SELECT district_id\n        FROM public.client\n        WHERE district_id = (SELECT district_id FROM public.client WHERE district_id = (SELECT MIN(district_id) FROM public.client WHERE district_id IS NOT NULL))\n    )\n) \nORDER BY a.date\nLIMIT 1;\t----- bird -----\tfinancial",
    "76": "The provided context is insufficient to generate the SQL query because there is no information about branch locations or how to determine which branch is located in the south Bohemia with the biggest number of inhabitants. The necessary data, such as a table linking branches to locations or additional geographical information, is missing.\t----- bird -----\tfinancial",
    "77": "The provided context is insufficient to answer the question because there are no tables or columns that provide information about account balances over time. We have the `loan`, `account`, and `client` tables, but there is no data related to account balances or transactions that would allow us to calculate the increase rate in account balance.\t----- bird -----\tfinancial",
    "78": "SELECT \n    (SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) / SUM(amount) * 100) AS percentage_fully_paid\nFROM \n    public.loan;\t----- bird -----\tfinancial",
    "79": "SELECT \n    (COUNT(CASE WHEN status = 'running' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_running\nFROM \n    public.loan\nWHERE \n    amount < 100000;\t----- bird -----\tfinancial",
    "80": "SELECT a.account_id, d.A2 AS district_name, d.A3 AS district_region\nFROM public.account a\nJOIN public.district d ON a.district_id = d.district_id\nWHERE a.date >= '1993-01-01' AND a.date <= '1993-12-31'\nAND a.frequency = 'issued_after_transaction';\t----- bird -----\tfinancial",
    "81": "SELECT a.account_id, a.frequency\nFROM public.account a\nJOIN public.district d ON a.district_id = d.district_id\nWHERE d.A2 = 'east Bohemia'\nAND a.date BETWEEN '1995-01-01' AND '2000-12-31';\t----- bird -----\tfinancial",
    "82": "The provided context does not include information on how to connect the `account` table with a location such as 'Prachatice'. Therefore, it is not possible to generate a SQL query to answer the question with the given context.\t----- bird -----\tfinancial",
    "83": "The provided context is insufficient to generate the SQL query because there is no information in the given table schemas that links loan IDs directly to any specific region information. The \"district\" table is likely relevant, but there is no clear connection between its columns and a \"region\" or a specific way to determine the district name or region based on the loan ID.\t----- bird -----\tfinancial",
    "84": "SELECT a.account_id, d.district_id, d.A2 AS region\nFROM public.loan l\nJOIN public.account a ON l.account_id = a.account_id\nJOIN public.district d ON a.district_id = d.district_id\nWHERE l.amount > 300000;\t----- bird -----\tfinancial",
    "85": "SELECT l.loan_id, d.A2 AS district_name, d.A10 AS average_salary\nFROM public.loan l\nJOIN public.account a ON l.account_id = a.account_id\nJOIN public.district d ON a.district_id = d.district_id\nWHERE l.duration = 60;\t----- bird -----\tfinancial",
    "86": "The provided context is insufficient to generate the SQL query because there is no information about the unemployment rate or how it changed from 1995 to 1996 in the given tables.\t----- bird -----\tfinancial",
    "87": "SELECT \n    (COUNT(a.account_id) FILTER (WHERE d.A3 = 'Decin')::FLOAT / COUNT(a.account_id) * 100) AS percentage_decin\nFROM \n    public.account a\nJOIN \n    public.district d ON a.district_id = d.district_id\nWHERE \n    EXTRACT(YEAR FROM a.date) = 1993;\t----- bird -----\tfinancial",
    "88": "SELECT account_id \nFROM public.account \nWHERE frequency = 'monthly';\t----- bird -----\tfinancial",
    "89": "SELECT d.district_id, COUNT(c.client_id) AS female_account_holders\nFROM public.client c\nJOIN public.account a ON c.district_id = a.district_id\nJOIN public.district d ON a.district_id = d.district_id\nWHERE c.gender = 'female'\nGROUP BY d.district_id\nORDER BY female_account_holders DESC\nLIMIT 9;\t----- bird -----\tfinancial",
    "90": "It can't be generated because the provided context does not include any table or columns that clearly indicate a record of withdrawals, nor is there a direct relationship between transactions and district names. Additionally, the context does not specify which transactions are non-credit card withdrawals.\t----- bird -----\tfinancial",
    "91": "It can't be generated because the provided context does not contain any information about the region or location of account holders, such as \"South Bohemia\". The tables provided do not include any geographical data related to account holders.\t----- bird -----\tfinancial",
    "92": "The provided context is insufficient to generate a SQL query to answer the question. The \"loan\" table contains information about loans including their status, but there is no direct link or column indicating which loans are \"active.\" Additionally, the \"district\" table is separate and does not have a direct relationship with the \"loan\" table in the given schema. More information is needed on how to determine if a loan is active and how to associate loans with districts.\t----- bird -----\tfinancial",
    "93": "SELECT AVG(l.amount) AS average_loan_amount\nFROM public.loan l\nJOIN public.client c ON l.account_id = c.client_id\nWHERE c.gender = 'male';\t----- bird -----\tfinancial",
    "94": "The provided context is insufficient to generate the SQL query because there is no information on unemployment rates in any of the tables.\t----- bird -----\tfinancial",
    "95": "The provided context is insufficient because there is no information related to branches or crimes committed in 1996 in the available tables. The context only includes tables related to accounts, SAT scores, loans, transactions, yearmonth data, members, zip codes, income, majors, and votes.\t----- bird -----\tfinancial",
    "96": "The provided context is insufficient to generate the SQL query. The available tables do not contain information about account balances or withdrawals. Additionally, there is no direct link between card transactions and account balances in the provided schema.\t----- bird -----\tfinancial",
    "97": "SELECT COUNT(DISTINCT l.account_id) AS num_loans\nFROM public.loan l\nJOIN public.account a ON l.account_id = a.account_id\nWHERE l.date BETWEEN '1995-01-01' AND '1997-12-31'\n  AND l.amount >= 250000\n  AND a.frequency = 'monthly'\n  AND l.status = 'approved';\t----- bird -----\tfinancial",
    "98": "The provided context is insufficient to generate the SQL query because there is no information about \"Branch location 1\" or any column in the tables that corresponds to branch locations.\t----- bird -----\tfinancial",
    "99": "The provided context is insufficient to generate the SQL query because there is no information given about crimes, branches, or how they relate to clients in the available tables.\t----- bird -----\tfinancial",
    "100": "SELECT bond_type, COUNT(*) AS bond_count\nFROM public.bond\nGROUP BY bond_type\nORDER BY bond_count DESC\nLIMIT 1;\t----- bird -----\ttoxicology",
    "101": "The provided context is insufficient to generate the SQL query because it does not include any information about whether a molecule is carcinogenic or non-carcinogenic. Additional data or context is needed to identify non-carcinogenic molecules.\t----- bird -----\ttoxicology",
    "102": "SELECT AVG(oxygen_count) AS average_oxygen_atoms\nFROM (\n    SELECT m.molecule_id, COUNT(a.atom_id) AS oxygen_count\n    FROM molecule m\n    JOIN atom a ON m.molecule_id = a.molecule_id\n    JOIN bond b ON m.molecule_id = b.molecule_id\n    WHERE a.element = 'O' AND b.bond_type = 'single'\n    GROUP BY m.molecule_id\n) AS oxygen_counts;\t----- bird -----\ttoxicology",
    "103": "The provided context is insufficient to generate the SQL query because there is no information on which molecules are carcinogenic, and there is no explicit mention of single bonds in the tables.\t----- bird -----\ttoxicology",
    "104": "The provided context does not contain information regarding whether a molecule is carcinogenic or non-carcinogenic. Therefore, it is insufficient to generate a SQL query to answer the question.\t----- bird -----\ttoxicology",
    "105": "The provided context is insufficient to generate the SQL query because there is no information regarding molecules being carcinogenic or any related column in the given tables.\t----- bird -----\ttoxicology",
    "106": "SELECT \n    (CAST(COUNT(DISTINCT a.atom_id) AS FLOAT) / CAST(COUNT(DISTINCT b.molecule_id) AS FLOAT)) * 100 AS percentage_of_carbon\nFROM \n    bond b\nJOIN \n    atom a ON b.molecule_id = a.molecule_id\nWHERE \n    b.bond_type = 'double' AND a.element = 'C';\t----- bird -----\ttoxicology",
    "107": "SELECT COUNT(*) FROM public.bond WHERE bond_type = 'triple';\t----- bird -----\ttoxicology",
    "108": "SELECT COUNT(*) \nFROM atom \nWHERE element != 'bromine';\t----- bird -----\ttoxicology",
    "109": "The provided context is insufficient to generate the SQL query because there is no information or column in the given tables that indicates whether a molecule is carcinogenic or not.\t----- bird -----\ttoxicology",
    "110": "SELECT DISTINCT m.molecule_id\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE a.element = 'carbon';\t----- bird -----\ttoxicology",
    "111": "SELECT DISTINCT a.element\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id\nWHERE c.bond_id = 'TR004_8_9';\t----- bird -----\ttoxicology",
    "112": "SELECT DISTINCT a.element\nFROM atom a\nJOIN bond b ON a.molecule_id = b.molecule_id\nWHERE b.bond_type = 'double';\t----- bird -----\ttoxicology",
    "113": "SELECT m.label, COUNT(*) AS count\nFROM public.atom a\nJOIN public.molecule m ON a.molecule_id = m.molecule_id\nWHERE a.element = 'hydrogen'\nGROUP BY m.label\nORDER BY count DESC\nLIMIT 1;\t----- bird -----\ttoxicology",
    "114": "SELECT DISTINCT b.bond_type\nFROM public.atom a\nJOIN public.connected c ON a.atom_id = c.atom_id\nJOIN public.bond b ON c.bond_id = b.bond_id\nWHERE a.element = 'Chlorine';\t----- bird -----\ttoxicology",
    "115": "SELECT c.atom_id, c.atom_id2\nFROM public.connected c\nJOIN public.bond b ON c.bond_id = b.bond_id\nWHERE b.bond_type = 'single';\t----- bird -----\ttoxicology",
    "116": "The provided context is insufficient to generate the query. To determine which atoms are connected in non-carcinogenic type molecules, we would need additional information about which molecules are considered non-carcinogenic. This information is not present in the given tables.\t----- bird -----\ttoxicology",
    "117": "The provided context is insufficient to generate the SQL query because there is no information about which molecules are non-carcinogenic. Additional data or criteria are needed to identify non-carcinogenic molecules within the tables.\t----- bird -----\ttoxicology",
    "118": "SELECT b.bond_type\nFROM connected c\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE (c.atom_id = 'TR004_8' AND c.atom_id2 = 'TR004_20')\n   OR (c.atom_id = 'TR004_20' AND c.atom_id2 = 'TR004_8');\t----- bird -----\ttoxicology",
    "119": "SELECT DISTINCT m.label\nFROM molecule m\nWHERE m.molecule_id NOT IN (\n    SELECT a.molecule_id\n    FROM atom a\n    WHERE a.element = 'tin'\n);\t----- bird -----\ttoxicology",
    "120": "SELECT COUNT(DISTINCT a.atom_id) AS count_of_atoms\nFROM atom a\nJOIN bond b ON a.molecule_id = b.molecule_id\nWHERE a.element IN ('iodine', 'sulfur') AND b.bond_type = 'single';\t----- bird -----\ttoxicology",
    "121": "SELECT c.atom_id, c.atom_id2\nFROM public.connected c\nJOIN public.bond b ON c.bond_id = b.bond_id\nWHERE b.bond_type = 'triple';\t----- bird -----\ttoxicology",
    "122": "SELECT a.atom_id\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id2\nWHERE a.molecule_id = 'TR181';\t----- bird -----\ttoxicology",
    "123": "SELECT \n    (COUNT(DISTINCT m.molecule_id) FILTER(WHERE a.atom_id IS NULL) * 100.0 / COUNT(DISTINCT m.molecule_id)) AS percentage_without_fluorine\nFROM \n    molecule m\nLEFT JOIN \n    atom a ON m.molecule_id = a.molecule_id AND a.element = 'Fluorine'\nJOIN \n    bond b ON m.molecule_id = b.molecule_id AND b.bond_type = 'carcinogenic'\t----- bird -----\ttoxicology",
    "124": "The provided context is insufficient to determine the percentage of carcinogenic molecules in triple type bonds. There is no information or column in the given tables that indicates whether a molecule is carcinogenic or not.\t----- bird -----\ttoxicology",
    "125": "The provided context is insufficient to generate the SQL query because there is no information on toxicology or any related data in the context. The available tables do not contain any columns or data related to toxicology.\t----- bird -----\ttoxicology",
    "126": "SELECT a.atom_id, a.element\nFROM atom a\nJOIN bond b ON a.molecule_id = b.molecule_id\nJOIN connected c ON b.bond_id = c.bond_id\nWHERE b.bond_id = 'TR001_2_6' AND b.molecule_id = \n    (SELECT molecule_id FROM molecule WHERE label = 'TR001');\t----- bird -----\ttoxicology",
    "127": "It can't be generated because there is no information in the provided context that indicates whether a molecule is carcinogenic or not.\t----- bird -----\ttoxicology",
    "128": "SELECT atom_id, atom_id2\nFROM public.connected\nWHERE bond_id = 'TR000_2_5';\t----- bird -----\ttoxicology",
    "129": "SELECT bond_id\nFROM public.connected\nWHERE atom_id2 = 'TR000_2';\t----- bird -----\ttoxicology",
    "130": "SELECT m.label\nFROM public.molecule m\nJOIN public.bond b ON m.molecule_id = b.molecule_id\nWHERE b.bond_type = 'double'\nGROUP BY m.label\nORDER BY m.label\nLIMIT 5;\t----- bird -----\ttoxicology",
    "131": "WITH double_bonds AS (\n    SELECT COUNT(*) AS double_bond_count\n    FROM bond\n    WHERE bond_type = 'double'\n    AND molecule_id = 'TR008'\n),\ntotal_bonds AS (\n    SELECT COUNT(*) AS total_bond_count\n    FROM bond\n    WHERE molecule_id = 'TR008'\n)\nSELECT \n    (CAST(double_bond_count AS DECIMAL) / total_bond_count) * 100 AS double_bond_percentage\nFROM double_bonds, total_bonds;\t----- bird -----\ttoxicology",
    "132": "It is not possible to generate the SQL query because the provided context does not include any information about which molecules are carcinogenic.\t----- bird -----\ttoxicology",
    "133": "SELECT \n    (COUNT(a.atom_id) FILTER (WHERE a.element = 'H')::FLOAT / COUNT(a.atom_id)::FLOAT) * 100 AS hydrogen_percentage\nFROM \n    molecule m\nJOIN \n    atom a ON m.molecule_id = a.molecule_id\nWHERE \n    m.label = 'TR206';\t----- bird -----\ttoxicology",
    "134": "SELECT DISTINCT b.bond_type\nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nWHERE m.label = 'TR000';\t----- bird -----\ttoxicology",
    "135": "SELECT a.element, m.label\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE m.label = 'TR060';\t----- bird -----\ttoxicology",
    "136": "SELECT bond_type, COUNT(*) as bond_count\nFROM bond\nWHERE molecule_id = 'TR010'\nGROUP BY bond_type\nORDER BY bond_count DESC\nLIMIT 1;\t----- bird -----\ttoxicology",
    "137": "The provided context is insufficient to generate the SQL query because there is no information about whether a molecule is carcinogenic or not in the given tables.\t----- bird -----\ttoxicology",
    "138": "SELECT bond_id\nFROM bond\nWHERE molecule_id = 'TR006'\nORDER BY bond_id\nLIMIT 2;\t----- bird -----\ttoxicology",
    "139": "SELECT COUNT(b.bond_id) AS bond_count\nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN atom a ON (c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id)\nWHERE m.label = 'TR009' AND a.atom_id = '12';\t----- bird -----\ttoxicology",
    "140": "It can't be generated. The provided context does not include any information about whether molecules are carcinogenic.\t----- bird -----\ttoxicology",
    "141": "SELECT \n    b.bond_type,\n    a1.element AS atom1,\n    a2.element AS atom2\nFROM \n    bond b\nJOIN \n    connected c ON b.bond_id = c.bond_id\nJOIN \n    atom a1 ON c.atom_id = a1.atom_id\nJOIN \n    atom a2 ON c.atom_id2 = a2.atom_id\nWHERE \n    b.bond_id = 'TR001_6_9';\t----- bird -----\ttoxicology",
    "142": "SELECT m.molecule_id, m.label\nFROM public.atom a\nJOIN public.molecule m ON a.molecule_id = m.molecule_id\nWHERE a.atom_id = 'TR001_10';\t----- bird -----\ttoxicology",
    "143": "SELECT COUNT(DISTINCT m.molecule_id) AS num_molecules_with_triple_bond\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nWHERE b.bond_type = 'triple';\t----- bird -----\ttoxicology",
    "144": "SELECT COUNT(*) AS connection_count\nFROM public.connected\nWHERE atom_id = '19' OR atom_id2 = '19';\t----- bird -----\ttoxicology",
    "145": "SELECT a.element\nFROM public.atom a\nJOIN public.molecule m ON a.molecule_id = m.molecule_id\nWHERE m.label = 'TR004';\t----- bird -----\ttoxicology",
    "146": "The provided context is insufficient to determine whether a molecule is carcinogenic or not. The tables given do not contain any information related to the carcinogenicity of molecules.\t----- bird -----\ttoxicology",
    "147": "The provided context is insufficient to generate the query because there is no information regarding which molecules are carcinogenic. Additional data or a table specifying carcinogenic molecules is required.\t----- bird -----\ttoxicology",
    "148": "SELECT b.bond_id\nFROM bond b\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN atom a1 ON c.atom_id = a1.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE (a1.element = 'Phosphorus' AND a2.element = 'Nitrogen')\n   OR (a1.element = 'Nitrogen' AND a2.element = 'Phosphorus');\t----- bird -----\ttoxicology",
    "149": "The provided context is insufficient to determine if the molecule with the most double bonds is carcinogenic. The tables do not contain any information about the carcinogenic properties of molecules. Additional data or context about the carcinogenic properties of molecules would be necessary to answer this question.\t----- bird -----\ttoxicology",
    "150": "The provided context does not contain specific information about what constitutes \"incredibly powerful foils\" for cards. Therefore, it's not possible to generate a SQL query to answer this question without additional context or criteria for what makes a foil \"incredibly powerful\".\t----- bird -----\tcard_games",
    "151": "SELECT * \nFROM public.cards\nWHERE \"isFullArt\" = 1 AND \"hasFoil\" = 0;\t----- bird -----\tcard_games",
    "152": "SELECT name \nFROM public.cards \nWHERE faceConvertedManaCost > convertedManaCost;\t----- bird -----\tcard_games",
    "153": "SELECT name \nFROM public.cards \nWHERE frameVersion = '2015' AND edhrecRank < 100;\t----- bird -----\tcard_games",
    "154": "SELECT c.*\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.rarity = 'mythic' AND l.format = 'gladiator' AND l.status = 'banned';\t----- bird -----\tcard_games",
    "155": "SELECT c.name, l.status\nFROM public.cards c\nJOIN public.legalities l ON c.uuid = l.uuid\nWHERE c.type LIKE '%Artifact%'\n  AND c.layout NOT IN ('split', 'flip', 'transform', 'modal_dfc', 'meld', 'adventure', 'saga', 'leveler', 'class', 'planes')\n  AND l.format = 'Vintage';\t----- bird -----\tcard_games",
    "156": "The provided context is insufficient to generate the query. The tables provided do not have a direct relation or column that indicates a power is \"unknown,\" nor is there a clear indication of how to determine cards that are legal for the \"commander\" format. Additionally, the relationship between card IDs and power is not established in the given tables.\t----- bird -----\tcard_games",
    "157": "SELECT c.name, r.text AS ruling_text\nFROM public.cards c\nJOIN public.rulings r ON c.uuid = r.uuid\nWHERE c.artist = 'Stephen Daniel';\t----- bird -----\tcard_games",
    "158": "SELECT r.*\nFROM public.rulings r\nJOIN public.cards c ON r.uuid = c.uuid\nWHERE c.name = 'Sublime Epiphany' AND c.number = '74s';\t----- bird -----\tcard_games",
    "159": "SELECT c.name AS card_name, c.artist, c.isPromo, COUNT(r.id) AS ruling_count\nFROM cards c\nJOIN rulings r ON c.uuid = r.uuid\nGROUP BY c.name, c.artist, c.isPromo\nORDER BY ruling_count DESC\nLIMIT 1;\t----- bird -----\tcard_games",
    "160": "SELECT st.language\nFROM public.cards c\nJOIN public.set_translations st ON c.\"setCode\" = st.\"setCode\"\nWHERE c.name = 'Annul' AND c.number = '29';\t----- bird -----\tcard_games",
    "161": "SELECT c.name \nFROM public.cards c\nJOIN public.foreign_data fd ON c.uuid = fd.uuid\nWHERE fd.language = 'Japanese';\t----- bird -----\tcard_games",
    "162": "SELECT \n    (COUNT(*) FILTER (WHERE availability LIKE '%Chinese Simplified%')::FLOAT / COUNT(*)) * 100 AS percentage_chinese_simplified\nFROM \n    public.cards;\t----- bird -----\tcard_games",
    "163": "SELECT s.name AS set_name, st.language, COUNT(c.id) AS total_cards\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nJOIN cards c ON s.code = c.setCode\nWHERE st.language = 'Italian'\nGROUP BY s.name, st.language;\t----- bird -----\tcard_games",
    "164": "SELECT COUNT(DISTINCT type) AS card_types_count\nFROM public.cards\nWHERE artist = 'Aaron Boyd';\t----- bird -----\tcard_games",
    "165": "SELECT keywords \nFROM public.cards \nWHERE name = 'Angel of Mercy';\t----- bird -----\tcard_games",
    "166": "Error running intermediate SQL: You need to connect to a database first by running vn.connect_to_snowflake(), vn.connect_to_postgres(), similar function, or manually set vn.run_sql\t----- bird -----\tcard_games",
    "167": "SELECT \"promoTypes\" \nFROM public.cards \nWHERE name = 'Duress';\t----- bird -----\tcard_games",
    "168": "SELECT borderColor FROM public.cards WHERE name = 'Ancestor''s Chosen';\t----- bird -----\tcard_games",
    "169": "SELECT \"originalType\" \nFROM public.cards \nWHERE name = 'Ancestor''s Chosen';\t----- bird -----\tcard_games",
    "170": "SELECT DISTINCT st.language\nFROM public.cards c\nJOIN public.sets s ON c.\"setCode\" = s.code\nJOIN public.set_translations st ON s.code = st.\"setCode\"\nWHERE c.name = 'Angel of Mercy';\t----- bird -----\tcard_games",
    "171": "SELECT COUNT(DISTINCT l.uuid) \nFROM public.legalities l\nJOIN public.cards c ON l.uuid = c.uuid\nWHERE l.status = 'restricted' AND c.text IS NOT NULL;\t----- bird -----\tcard_games",
    "172": "SELECT r.text\nFROM public.rulings r\nJOIN public.cards c ON r.uuid = c.uuid\nWHERE c.name = 'Condemn';\t----- bird -----\tcard_games",
    "173": "SELECT COUNT(DISTINCT l.uuid) AS restricted_card_count\nFROM public.legalities l\nJOIN public.cards c ON l.uuid = c.uuid\nWHERE l.status = 'restricted' AND c.\"isStarter\" = 1;\t----- bird -----\tcard_games",
    "174": "The provided context is insufficient to determine the status of the card \"Cloudchaser Eagle\" as there is no direct relationship or linking information between the `cards` table and the `status` table.\t----- bird -----\tcard_games",
    "175": "SELECT type FROM public.cards WHERE name = 'Benalish Knight';\t----- bird -----\tcard_games",
    "176": "SELECT text \nFROM public.rulings \nWHERE uuid = (SELECT uuid FROM public.cards WHERE \"asciiName\" = 'Benalish Knight');\t----- bird -----\tcard_games",
    "177": "SELECT DISTINCT artist \nFROM public.cards \nWHERE \"asciiName\" = 'Phyrexian';\t----- bird -----\tcard_games",
    "178": "The provided context does not specify a column that indicates whether a card is borderless. Therefore, it is not possible to generate a SQL query to determine the percentage of borderless cards.\t----- bird -----\tcard_games",
    "179": "The provided context is insufficient to generate the SQL query because there is no information about the language in which the cards were illustrated. There is also no column indicating the language of the illustration in the given tables.\t----- bird -----\tcard_games",
    "180": "The provided context is insufficient to generate the SQL query because there is no information about the language in which the cards are illustrated or any indication of borderless cards in the tables. The `cards` table does have a `borderColor` column, but it does not specifically denote \"borderless\" cards, and there is no direct linkage to the `foreign_data` table to identify illustrations in Russian. Additional context or tables are needed to establish these connections.\t----- bird -----\tcard_games",
    "181": "The provided context is insufficient to generate the SQL query because there is no direct information about which cards are Story Spotlight cards or how to identify them in the given tables. Additionally, there is no direct link between card languages and Story Spotlight attributes in the tables provided.\t----- bird -----\tcard_games",
    "182": "SELECT COUNT(*) \nFROM public.cards \nWHERE toughness = '99';\t----- bird -----\tcard_games",
    "183": "SELECT name \nFROM public.cards \nWHERE artist = 'Aaron Boyd';\t----- bird -----\tcard_games",
    "184": "SELECT COUNT(*) \nFROM public.cards \nWHERE \"borderColor\" = 'black' \nAND \"availability\" = 'mtgo'\nAND \"availability\" NOT LIKE '%paper%'\nAND \"availability\" NOT LIKE '%arena%'\nAND \"availability\" NOT LIKE '%mtgo,arena%'\nAND \"availability\" NOT LIKE '%paper,arena%'\nAND \"availability\" NOT LIKE '%paper,mtgo%'\nAND \"availability\" NOT LIKE '%paper,mtgo,arena%';\t----- bird -----\tcard_games",
    "185": "SELECT id FROM public.cards WHERE \"convertedManaCost\" = 0;\t----- bird -----\tcard_games",
    "186": "SELECT DISTINCT layout\nFROM public.cards\nWHERE keywords LIKE '%flying%'\t----- bird -----\tcard_games",
    "187": "SELECT COUNT(*)\nFROM public.cards\nWHERE \"originalType\" = 'Summon - Angel' \nAND subtypes IS NOT NULL \nAND subtypes <> 'Angel';\t----- bird -----\tcard_games",
    "188": "The provided context does not have sufficient information to determine which foiled cards are incredibly powerful when paired with non-foiled cards. The context includes the `cards` table with a `hasFoil` column indicating if a card has a foil version, but it does not include any criteria or attributes to evaluate whether a card is \"incredibly powerful\" when paired with another card. Additional information or context is required to generate the desired SQL query.\t----- bird -----\tcard_games",
    "189": "SELECT id \nFROM public.cards \nWHERE \"duelDeck\" = 'a';\t----- bird -----\tcard_games",
    "190": "SELECT edhrecRank \nFROM public.cards \nWHERE \"frameVersion\" = '2015';\t----- bird -----\tcard_games",
    "191": "SELECT DISTINCT artist \nFROM public.cards \nWHERE availability LIKE '%Chinese Simplified%'\t----- bird -----\tcard_games",
    "192": "The provided context is insufficient to generate the query because it doesn't contain any columns related to the availability format (such as paper) or the language of the cards in the available tables.\t----- bird -----\tcard_games",
    "193": "The provided context does not contain sufficient information to generate a SQL query to answer the question about banned cards with a white border. The context does not include any information about banned cards.\t----- bird -----\tcard_games",
    "194": "SELECT c.uuid, fd.language\nFROM public.cards c\nJOIN public.legalities l ON c.uuid = l.uuid\nJOIN public.foreign_data fd ON c.uuid = fd.uuid\nWHERE l.format = 'Legacy';\t----- bird -----\tcard_games",
    "195": "The provided context does not contain information about the ruling of \"Beacon of Immortality.\" The `rulings` table seems relevant, but without specific knowledge that \"Beacon of Immortality\" is included in the `text` or `uuid` columns, a direct query cannot be generated. \n\nTo proceed, we would need to know how \"Beacon of Immortality\" is referenced within the `rulings` table.\t----- bird -----\tcard_games",
    "196": "SELECT COUNT(DISTINCT c.uuid) AS card_count, l.status\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.\"frameVersion\" = 'future'\nGROUP BY l.status;\t----- bird -----\tcard_games",
    "197": "SELECT c.name, cl.colour\nFROM public.cards c\nJOIN public.colour cl ON c.id = cl.id\nWHERE c.setCode = 'OGW';\t----- bird -----\tcard_games",
    "198": "SELECT c.name AS card_name, st.language\nFROM cards c\nJOIN set_translations st ON c.setCode = st.setCode\nWHERE c.setCode = '10E' AND c.convertedManaCost = 5;\t----- bird -----\tcard_games",
    "199": "SELECT c.name, r.date AS ruling_date\nFROM public.cards c\nJOIN public.rulings r ON c.uuid = r.uuid\nWHERE c.\"originalType\" = 'Creature - Elf';\t----- bird -----\tcard_games",
    "200": "SELECT \"DisplayName\", \"Reputation\"\nFROM public.users\nWHERE \"DisplayName\" IN ('Harlan', 'Jarrod Dixon')\nORDER BY \"Reputation\" DESC;\t----- bird -----\tcodebase_community",
    "201": "SELECT \"DisplayName\"\nFROM public.users\nWHERE EXTRACT(YEAR FROM \"CreationDate\") = 2011;\t----- bird -----\tcodebase_community",
    "202": "SELECT COUNT(*) \nFROM public.users \nWHERE \"LastAccessDate\" > '2014-09-01';\t----- bird -----\tcodebase_community",
    "203": "SELECT \"DisplayName\"\nFROM public.users\nORDER BY \"Views\" DESC\nLIMIT 1;\t----- bird -----\tcodebase_community",
    "204": "SELECT COUNT(*) \nFROM public.users \nWHERE UpVotes > 100 AND DownVotes > 1;\t----- bird -----\tcodebase_community",
    "205": "SELECT COUNT(*) \nFROM public.users \nWHERE Views > 10 AND CreationDate > '2013-12-31';\t----- bird -----\tcodebase_community",
    "206": "SELECT COUNT(*)\nFROM public.posts p\nJOIN public.users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'csgillespie';\t----- bird -----\tcodebase_community",
    "207": "SELECT p.Title \nFROM public.posts p\nJOIN public.users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'csgillespie';\t----- bird -----\tcodebase_community",
    "208": "SELECT \"OwnerDisplayName\"\nFROM public.posts\nWHERE \"Title\" = 'Eliciting priors from experts';\t----- bird -----\tcodebase_community",
    "209": "SELECT Title \nFROM public.posts \nWHERE OwnerDisplayName = 'csgillespie' \nORDER BY ViewCount DESC \nLIMIT 1;\t----- bird -----\tcodebase_community",
    "210": "SELECT u.DisplayName\nFROM public.posts p\nJOIN public.users u ON p.OwnerUserId = u.Id\nORDER BY p.Score DESC\nLIMIT 1;\t----- bird -----\tcodebase_community",
    "211": "SELECT SUM(CommentCount) AS TotalComments\nFROM posts\nWHERE OwnerDisplayName = 'csgillespie';\t----- bird -----\tcodebase_community",
    "212": "SELECT MAX(AnswerCount) AS MostAnswers\nFROM posts\nWHERE OwnerDisplayName = 'csgillespie';\t----- bird -----\tcodebase_community",
    "213": "SELECT p.\"LastEditorDisplayName\"\nFROM public.posts p\nWHERE p.\"Title\" = 'Examples for teaching: Correlation does not mean causation';\t----- bird -----\tcodebase_community",
    "214": "SELECT COUNT(*) AS root_post_count\nFROM posts\nWHERE OwnerDisplayName = 'csgillespie' AND ParentId IS NULL;\t----- bird -----\tcodebase_community",
    "215": "It seems that the context provided does not define what constitutes a \"well-finished\" post. To generate the SQL query, we need a specific criterion for what makes a post well-finished, such as a high score, a certain number of views, or another measurable attribute. Without this information, the query cannot be accurately generated. Please provide the specific criteria for a \"well-finished\" post.\t----- bird -----\tcodebase_community",
    "216": "The provided context is insufficient to generate the SQL query. The available tables do not include a direct way to determine if a user is an \"elder user\". Additional information or criteria defining \"elder user\" is needed to construct the query.\t----- bird -----\tcodebase_community",
    "217": "The provided context does not contain information about the location of the owner of a post. Therefore, it can't be generated.\t----- bird -----\tcodebase_community",
    "218": "SELECT p.Body\nFROM posts p\nJOIN tags t ON p.Id = t.ExcerptPostId\nWHERE t.TagName = 'bayesian';\t----- bird -----\tcodebase_community",
    "219": "SELECT p.Body\nFROM public.tags t\nJOIN public.posts p ON t.ExcerptPostId = p.Id\nORDER BY t.Count DESC\nLIMIT 1;\t----- bird -----\tcodebase_community",
    "220": "The provided context is insufficient because the necessary information to link a user display name, such as \"csgillespie\", to a user ID is missing. The query would require joining the `users` table with the `badges` table using the `UserId`, but there is no direct reference to display names in the badges context provided.\t----- bird -----\tcodebase_community",
    "221": "SELECT b.Name\nFROM badges b\nJOIN posts p ON b.UserId = p.OwnerUserId\nWHERE p.OwnerDisplayName = 'csgillespie';\t----- bird -----\tcodebase_community",
    "222": "The provided context does not include information about the relationship between user names such as \"csgillespie\" and the \"UserId\" in the badges table. Therefore, it is not possible to generate the SQL query to answer the question.\t----- bird -----\tcodebase_community",
    "223": "SELECT u.DisplayName\nFROM public.users u\nJOIN (\n    SELECT UserId, COUNT(*) AS BadgeCount\n    FROM public.badges\n    GROUP BY UserId\n    ORDER BY BadgeCount DESC\n    LIMIT 1\n) AS b ON u.Id = b.UserId;\t----- bird -----\tcodebase_community",
    "224": "SELECT AVG(p.\"Score\") AS average_score\nFROM public.posts p\nJOIN public.users u ON p.\"OwnerUserId\" = u.\"Id\"\nWHERE u.\"DisplayName\" = 'csgillespie';\t----- bird -----\tcodebase_community",
    "225": "SELECT AVG(badge_count) AS average_badges\nFROM (\n    SELECT u.Id, COUNT(b.Id) AS badge_count\n    FROM public.users u\n    JOIN public.badges b ON u.Id = b.UserId\n    WHERE u.Views > 200\n    GROUP BY u.Id\n) AS user_badge_counts;\t----- bird -----\tcodebase_community",
    "226": "The provided context is insufficient to generate the SQL query because there is no definition of what constitutes an \"elder user\" in the given tables. We need additional information or criteria to determine which users are considered elder users, such as a specific age range or account creation date threshold.\t----- bird -----\tcodebase_community",
    "227": "SELECT COUNT(*) AS vote_count\nFROM votes\nWHERE UserId = 58 AND CreationDate = '2010-07-19';\t----- bird -----\tcodebase_community",
    "228": "SELECT \"CreationDate\", COUNT(*) as vote_count\nFROM public.votes\nGROUP BY \"CreationDate\"\nORDER BY vote_count DESC\nLIMIT 1;\t----- bird -----\tcodebase_community",
    "229": "SELECT COUNT(*) \nFROM public.badges \nWHERE \"Name\" = 'Revival';\t----- bird -----\tcodebase_community",
    "230": "SELECT p.Title\nFROM public.posts p\nJOIN public.comments c ON p.Id = c.PostId\nWHERE c.Score = (SELECT MAX(Score) FROM public.comments);\t----- bird -----\tcodebase_community",
    "231": "SELECT p.Id, p.ViewCount, p.CommentCount\nFROM public.posts p\nWHERE p.ViewCount = 1910;\t----- bird -----\tcodebase_community",
    "232": "SELECT p.FavoriteCount\nFROM posts p\nJOIN comments c ON p.Id = c.PostId\nWHERE c.UserId = 3025\n  AND c.CreationDate = '2014-04-23 20:29:39';\t----- bird -----\tcodebase_community",
    "233": "SELECT c.\"Text\"\nFROM public.comments c\nJOIN public.posts p ON c.\"PostId\" = p.\"Id\"\nWHERE p.\"ParentId\" = 107829\nLIMIT 1;\t----- bird -----\tcodebase_community",
    "234": "The provided context is insufficient to determine whether the post was well-finished. The context does not define what qualifies a post as \"well-finished\" and there is no specific column or criteria provided to evaluate this. Additional information or criteria for what constitutes a \"well-finished\" post is needed.\t----- bird -----\tcodebase_community",
    "235": "SELECT u.Reputation\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Id = 65041;\t----- bird -----\tcodebase_community",
    "236": "SELECT COUNT(*) AS post_count\nFROM public.posts\nJOIN public.users ON posts.OwnerUserId = users.Id\nWHERE users.DisplayName = 'Tiago Pasqualini';\t----- bird -----\tcodebase_community",
    "237": "SELECT u.DisplayName\nFROM votes v\nJOIN users u ON v.UserId = u.Id\nWHERE v.Id = 6347;\t----- bird -----\tcodebase_community",
    "238": "SELECT COUNT(*) AS NumberOfVotes\nFROM votes\nWHERE PostId IN (\n    SELECT Id\n    FROM posts\n    WHERE Title LIKE '%data visualization%'\n);\t----- bird -----\tcodebase_community",
    "239": "SELECT b.Name \nFROM public.users u\nJOIN public.badges b ON u.Id = b.UserId\nWHERE u.DisplayName = 'DatEpicCoderGuyWhoPrograms';\t----- bird -----\tcodebase_community",
    "240": "SELECT \n    (SELECT COUNT(*) FROM posts WHERE OwnerUserId = 24) AS PostCount,\n    (SELECT COUNT(*) FROM votes WHERE UserId = 24) AS VoteCount\t----- bird -----\tcodebase_community",
    "241": "SELECT \"ViewCount\"\nFROM public.posts\nWHERE \"Title\" = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';\t----- bird -----\tcodebase_community",
    "242": "SELECT * FROM public.comments WHERE \"Score\" = 17;\t----- bird -----\tcodebase_community",
    "243": "SELECT \"DisplayName\" \nFROM public.users \nWHERE \"WebsiteUrl\" = 'http://stackoverflow.com';\t----- bird -----\tcodebase_community",
    "244": "SELECT b.Name\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE u.DisplayName = 'SilentGhost';\t----- bird -----\tcodebase_community",
    "245": "SELECT UserDisplayName \nFROM public.comments \nWHERE Text = 'thank you user93!';\t----- bird -----\tcodebase_community",
    "246": "SELECT *\nFROM public.comments\nWHERE \"UserDisplayName\" = 'A Lion.'\t----- bird -----\tcodebase_community",
    "247": "SELECT u.DisplayName, u.Reputation\nFROM public.users u\nJOIN public.posts p ON u.Id = p.OwnerUserId\nWHERE p.Title = 'Understanding what Dassault iSight is doing?';\t----- bird -----\tcodebase_community",
    "248": "SELECT c.*\nFROM public.comments c\nJOIN public.posts p ON c.PostId = p.Id\nWHERE p.Title = 'How does gentle boosting differ from AdaBoost?'\t----- bird -----\tcodebase_community",
    "249": "SELECT u.DisplayName\nFROM users u\nJOIN badges b ON u.Id = b.UserId\nWHERE b.Name = 'Necromancer'\nLIMIT 10;\t----- bird -----\tcodebase_community",
    "250": "SELECT sp.power_name\nFROM public.superhero sh\nJOIN public.hero_power hp ON sh.id = hp.hero_id\nJOIN public.superpower sp ON hp.power_id = sp.id\nWHERE sh.superhero_name = '3-D Man';\t----- bird -----\tsuperhero",
    "251": "SELECT COUNT(DISTINCT hero_id) AS superhero_count\nFROM public.hero_power\nJOIN public.superpower ON hero_power.power_id = superpower.id\nWHERE superpower.power_name = 'Super Strength';\t----- bird -----\tsuperhero",
    "252": "SELECT COUNT(DISTINCT s.id) AS num_superheroes\nFROM public.superhero s\nJOIN public.hero_power hp ON s.id = hp.hero_id\nJOIN public.superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Super Strength' AND s.height_cm > 200;\t----- bird -----\tsuperhero",
    "253": "SELECT sh.full_name\nFROM public.superhero sh\nJOIN public.hero_power hp ON sh.id = hp.hero_id\nGROUP BY sh.id, sh.full_name\nHAVING COUNT(hp.power_id) > 15;\t----- bird -----\tsuperhero",
    "254": "SELECT COUNT(*) \nFROM public.superhero\nWHERE eye_colour_id = (\n    SELECT id \n    FROM public.colour\n    WHERE colour = 'blue'\n);\t----- bird -----\tsuperhero",
    "255": "SELECT c.colour\nFROM public.superhero s\nJOIN public.colour c ON s.skin_colour_id = c.id\nWHERE s.superhero_name = 'Apocalypse';\t----- bird -----\tsuperhero",
    "256": "Error running intermediate SQL: You need to connect to a database first by running vn.connect_to_snowflake(), vn.connect_to_postgres(), similar function, or manually set vn.run_sql\t----- bird -----\tsuperhero",
    "257": "SELECT s.superhero_name\nFROM public.superhero s\nJOIN public.colour ec ON s.eye_colour_id = ec.id\nJOIN public.colour hc ON s.hair_colour_id = hc.id\nWHERE ec.colour = 'blue' AND hc.colour = 'blond';\t----- bird -----\tsuperhero",
    "258": "SELECT COUNT(*) \nFROM public.superhero \nJOIN public.publisher ON public.superhero.publisher_id = public.publisher.id \nWHERE public.publisher.publisher_name = 'Marvel Comics';\t----- bird -----\tsuperhero",
    "259": "SELECT superhero_name, height_cm\nFROM public.superhero\nWHERE publisher_id = (SELECT id FROM public.publisher WHERE publisher_name = 'Marvel Comics')\nORDER BY height_cm DESC;\t----- bird -----\tsuperhero",
    "260": "SELECT p.publisher_name\nFROM public.superhero s\nJOIN public.publisher p ON s.publisher_id = p.id\nWHERE s.superhero_name = 'Sauron';\t----- bird -----\tsuperhero",
    "261": "SELECT c.colour AS eye_color, COUNT(*) AS superhero_count\nFROM public.superhero s\nJOIN public.colour c ON s.eye_colour_id = c.id\nJOIN public.publisher p ON s.publisher_id = p.id\nWHERE p.name = 'Marvel Comics'\nGROUP BY c.colour\nORDER BY superhero_count DESC;\t----- bird -----\tsuperhero",
    "262": "SELECT AVG(height_cm) AS average_height\nFROM public.superhero\nWHERE publisher_id = (SELECT id FROM public.publisher WHERE name = 'Marvel Comics');\t----- bird -----\tsuperhero",
    "263": "SELECT s.superhero_name\nFROM public.superhero s\nJOIN public.hero_power hp ON s.id = hp.hero_id\nJOIN public.superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Super Strength' AND s.publisher_id = (\n    SELECT id FROM public.superhero WHERE superhero_name = 'Marvel Comics'\n);\t----- bird -----\tsuperhero",
    "264": "SELECT COUNT(*) \nFROM public.superhero\nWHERE publisher_id = (SELECT id FROM public.publisher WHERE publisher_name = 'DC Comics');\t----- bird -----\tsuperhero",
    "265": "The provided context is insufficient to generate the SQL query because there is no information about the speed attribute of superheroes, and how to associate it with the publisher. The tables related to superheroes don't contain any specific attribute indicating speed that could be used to determine the slowest superhero.\t----- bird -----\tsuperhero",
    "266": "SELECT COUNT(*) AS gold_eyed_superheroes_count\nFROM public.superhero\nJOIN public.colour ON public.superhero.eye_colour_id = public.colour.id\nJOIN public.publisher ON public.superhero.publisher_id = public.publisher.id\nWHERE public.colour.colour = 'Gold' AND public.publisher.publisher_name = 'Marvel Comics';\t----- bird -----\tsuperhero",
    "267": "SELECT publisher.publisher_name\nFROM superhero\nJOIN publisher ON superhero.publisher_id = publisher.id\nWHERE superhero.superhero_name = 'Blue Beetle II';\t----- bird -----\tsuperhero",
    "268": "SELECT COUNT(*) \nFROM public.superhero s\nJOIN public.colour c ON s.hair_colour_id = c.id\nWHERE c.colour = 'Blonde';\t----- bird -----\tsuperhero",
    "269": "The provided context is insufficient to determine who the dumbest superhero is, as it does not contain information about the intelligence or attributes related to intelligence of superheroes.\t----- bird -----\tsuperhero",
    "270": "SELECT race.race\nFROM superhero\nJOIN race ON superhero.race_id = race.id\nWHERE superhero.superhero_name = 'Copycat';\t----- bird -----\tsuperhero",
    "271": "SELECT s.superhero_name\nFROM public.superhero s\nJOIN public.hero_attribute ha ON s.id = ha.hero_id\nJOIN public.attribute a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'durability' AND ha.attribute_value < 50;\t----- bird -----\tsuperhero",
    "272": "SELECT s.superhero_name\nFROM public.superhero s\nJOIN public.hero_power hp ON s.id = hp.hero_id\nJOIN public.superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Death Touch';\t----- bird -----\tsuperhero",
    "273": "SELECT COUNT(*) \nFROM public.superhero AS s\nJOIN public.hero_attribute AS ha ON s.id = ha.hero_id\nJOIN public.gender AS g ON s.gender_id = g.id\nWHERE g.gender = 'Female' AND ha.attribute_id = (SELECT id FROM public.hero_attribute WHERE attribute_id = 'strength') AND ha.attribute_value = 100;\t----- bird -----\tsuperhero",
    "274": "SELECT s.superhero_name\nFROM public.superhero s\nJOIN public.hero_power hp ON s.id = hp.hero_id\nGROUP BY s.superhero_name\nORDER BY COUNT(hp.power_id) DESC\nLIMIT 1;\t----- bird -----\tsuperhero",
    "275": "SELECT COUNT(*) AS vampire_superheroes_count\nFROM public.superhero\nJOIN public.hero_attribute ON public.superhero.id = public.hero_attribute.hero_id\nWHERE public.hero_attribute.attribute_id = (\n    SELECT id FROM public.superpower WHERE power_name = 'vampire'\n);\t----- bird -----\tsuperhero",
    "276": "SELECT \n    (COUNT(*) FILTER (WHERE alignment_id = (SELECT id FROM public.alignment WHERE alignment_name = 'neutral')) * 100.0 / COUNT(*)) AS percentage_self_interest,\n    COUNT(*) FILTER (WHERE alignment_id = (SELECT id FROM public.alignment WHERE alignment_name = 'neutral') AND publisher_id = (SELECT id FROM public.publisher WHERE publisher_name = 'Marvel Comics')) AS marvel_neutral_superheroes\nFROM \n    public.superhero;\t----- bird -----\tsuperhero",
    "277": "SELECT \n    (SELECT publisher_name FROM public.publisher WHERE id = dc_publisher_id) AS publisher_dc,\n    (SELECT COUNT(*) FROM public.superhero WHERE publisher_id = dc_publisher_id) AS count_dc,\n    (SELECT publisher_name FROM public.publisher WHERE id = marvel_publisher_id) AS publisher_marvel,\n    (SELECT COUNT(*) FROM public.superhero WHERE publisher_id = marvel_publisher_id) AS count_marvel,\n    ABS((SELECT COUNT(*) FROM public.superhero WHERE publisher_id = dc_publisher_id) - \n        (SELECT COUNT(*) FROM public.superhero WHERE publisher_id = marvel_publisher_id)) AS difference\nFROM\n    (SELECT id AS dc_publisher_id FROM public.publisher WHERE publisher_name = 'DC Comics') AS dc_table,\n    (SELECT id AS marvel_publisher_id FROM public.publisher WHERE publisher_name = 'Marvel Comics') AS marvel_table;\t----- bird -----\tsuperhero",
    "278": "SELECT id FROM public.publisher WHERE publisher_name = 'Star Trek';\t----- bird -----\tsuperhero",
    "279": "SELECT AVG(attribute_value) AS average_attribute_value\nFROM public.hero_attribute;\t----- bird -----\tsuperhero",
    "280": "SELECT COUNT(*) AS total_superheroes_without_full_name\nFROM public.superhero\nWHERE full_name IS NULL OR full_name = '';\t----- bird -----\tsuperhero",
    "281": "SELECT c.colour AS eye_colour\nFROM public.superhero s\nJOIN public.colour c ON s.eye_colour_id = c.id\nWHERE s.id = 75;\t----- bird -----\tsuperhero",
    "282": "SELECT sp.power_name\nFROM public.superpower sp\nJOIN public.hero_power hp ON sp.id = hp.power_id\nJOIN public.superhero sh ON hp.hero_id = sh.id\nWHERE sh.superhero_name = 'Deathlok';\t----- bird -----\tsuperhero",
    "283": "SELECT AVG(weight_kg) AS average_weight_of_female_superheroes\nFROM public.superhero\nJOIN public.gender ON public.superhero.gender_id = public.gender.id\nWHERE public.gender.gender = 'Female';\t----- bird -----\tsuperhero",
    "284": "SELECT DISTINCT sp.power_name\nFROM superhero sh\nJOIN hero_power hp ON sh.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nJOIN gender g ON sh.gender_id = g.id\nWHERE g.gender = 'Male'\nLIMIT 5;\t----- bird -----\tsuperhero",
    "285": "SELECT DISTINCT s.superhero_name\nFROM public.superhero s\nJOIN public.hero_attribute ha ON s.id = ha.hero_id\nWHERE ha.attribute_id = (\n    SELECT id \n    FROM public.hero_attribute \n    WHERE attribute_value = 'alien'\n)\t----- bird -----\tsuperhero",
    "286": "SELECT superhero_name \nFROM public.superhero\nWHERE height_cm BETWEEN 170 AND 190\nAND eye_colour_id IS NULL;\t----- bird -----\tsuperhero",
    "287": "SELECT sp.power_name\nFROM public.hero_power hp\nJOIN public.superpower sp ON hp.power_id = sp.id\nWHERE hp.hero_id = 56;\t----- bird -----\tsuperhero",
    "288": "SELECT full_name\nFROM public.superhero\nWHERE race_id = (\n    SELECT id\n    FROM public.race\n    WHERE race_name = 'Demi-God'\n)\nLIMIT 5;\t----- bird -----\tsuperhero",
    "289": "SELECT COUNT(*) \nFROM public.superhero \nWHERE alignment_id = (SELECT id FROM public.alignment WHERE alignment = 'bad');\t----- bird -----\tsuperhero",
    "290": "SELECT r.race\nFROM public.superhero AS s\nJOIN public.race AS r ON s.race_id = r.id\nWHERE s.weight_kg = 169;\t----- bird -----\tsuperhero",
    "291": "SELECT c.colour AS hair_colour\nFROM public.superhero s\nJOIN public.colour c ON s.hair_colour_id = c.id\nJOIN public.race r ON s.race_id = r.id\nWHERE s.height_cm = 185 AND r.race = 'Human';\t----- bird -----\tsuperhero",
    "292": "SELECT c.colour AS eye_colour\nFROM public.superhero s\nJOIN public.colour c ON s.eye_colour_id = c.id\nORDER BY s.weight_kg DESC\nLIMIT 1;\t----- bird -----\tsuperhero",
    "293": "SELECT \n    (COUNT(*) FILTER (WHERE publisher_id = (SELECT id FROM public.superhero WHERE superhero_name = 'Marvel Comics'))::decimal / COUNT(*)) * 100 AS marvel_percentage \nFROM \n    public.superhero\nWHERE \n    height_cm BETWEEN 150 AND 180;\t----- bird -----\tsuperhero",
    "294": "SELECT s.superhero_name\nFROM public.superhero s\nJOIN public.gender g ON s.gender_id = g.id\nWHERE g.gender = 'Male'\nAND s.weight_kg > (\n    SELECT 0.79 * AVG(weight_kg)\n    FROM public.superhero\n)\t----- bird -----\tsuperhero",
    "295": "SELECT sp.power_name, COUNT(*) as power_count\nFROM hero_power hp\nJOIN superpower sp ON hp.power_id = sp.id\nGROUP BY sp.power_name\nORDER BY power_count DESC\nLIMIT 1;\t----- bird -----\tsuperhero",
    "296": "SELECT ha.attribute_value\nFROM public.hero_attribute ha\nJOIN public.superhero s ON ha.hero_id = s.id\nWHERE s.superhero_name = 'Abomination';\t----- bird -----\tsuperhero",
    "297": "SELECT sp.power_name\nFROM public.hero_power hp\nJOIN public.superpower sp ON hp.power_id = sp.id\nWHERE hp.hero_id = 1;\t----- bird -----\tsuperhero",
    "298": "SELECT COUNT(DISTINCT h.hero_id) AS hero_count\nFROM hero_power h\nJOIN superpower s ON h.power_id = s.id\nWHERE s.power_name = 'Stealth';\t----- bird -----\tsuperhero",
    "299": "SELECT s.full_name\nFROM public.superhero s\nJOIN public.hero_attribute ha ON s.id = ha.hero_id\nJOIN public.attribute a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'strength'\nORDER BY ha.attribute_value DESC\nLIMIT 1;\t----- bird -----\tsuperhero",
    "300": "SELECT d.driverRef\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 20 AND q.q1 IS NOT NULL AND q.q2 IS NULL;\t----- bird -----\tformula_1",
    "301": "SELECT d.surname \nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 19\nORDER BY q.q2 \nLIMIT 1;\t----- bird -----\tformula_1",
    "302": "SELECT DISTINCT r.year\nFROM races r\nJOIN circuits c ON r.\"circuitId\" = c.\"circuitId\"\nWHERE c.location = 'Shanghai';\t----- bird -----\tformula_1",
    "303": "SELECT url \nFROM public.circuits \nWHERE name = 'Circuit de Barcelona-Catalunya';\t----- bird -----\tformula_1",
    "304": "SELECT r.name\nFROM public.races r\nJOIN public.circuits c ON r.\"circuitId\" = c.\"circuitId\"\nWHERE c.country = 'Germany';\t----- bird -----\tformula_1",
    "305": "SELECT c.circuitId, c.name, c.location, c.country\nFROM constructors con\nJOIN qualifying q ON con.constructorId = q.constructorId\nJOIN races r ON q.raceId = r.raceId\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE con.name = 'Renault';\t----- bird -----\tformula_1",
    "306": "The provided context is insufficient to determine which races are held outside Asia and Europe. There is no information on the location or continent of the circuits in the given tables. Therefore, it is not possible to generate the SQL query.\t----- bird -----\tformula_1",
    "307": "SELECT r.name AS race_name\nFROM public.races r\nJOIN public.circuits c ON r.\"circuitId\" = c.\"circuitId\"\nWHERE c.country = 'Spain';\t----- bird -----\tformula_1",
    "308": "SELECT c.lat, c.lng\nFROM public.circuits c\nJOIN public.races r ON c.\"circuitId\" = r.\"circuitId\"\nWHERE r.name = 'Australian Grand Prix';\t----- bird -----\tformula_1",
    "309": "SELECT * \nFROM public.races\nJOIN public.circuits ON races.\"circuitId\" = circuits.\"circuitId\"\nWHERE circuits.name = 'Sepang International Circuit';\t----- bird -----\tformula_1",
    "310": "SELECT r.\"time\"\nFROM public.races r\nJOIN public.circuits c ON r.\"circuitId\" = c.\"circuitId\"\nWHERE c.name = 'Sepang International Circuit';\t----- bird -----\tformula_1",
    "311": "The provided context is insufficient to generate the SQL query because there is no information about the coordinates or location details for circuits or specific races like the Abu Dhabi Grand Prix in the given tables.\t----- bird -----\tformula_1",
    "312": "SELECT c.nationality\nFROM constructorResults cr\nJOIN constructors c ON cr.constructorId = c.constructorId\nWHERE cr.raceId = 24 AND cr.points = 1;\t----- bird -----\tformula_1",
    "313": "SELECT q1 \nFROM public.qualifying q\nJOIN public.drivers d ON q.driverId = d.driverId\nWHERE d.forename = 'Bruno' AND d.surname = 'Senna' AND q.raceId = 354;\t----- bird -----\tformula_1",
    "314": "SELECT d.nationality\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 355 AND q.q2 = '0:01:40';\t----- bird -----\tformula_1",
    "315": "SELECT d.number\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 903 AND q.q3 = '0:01:54';\t----- bird -----\tformula_1",
    "316": "SELECT COUNT(*) AS not_finished_drivers_count\nFROM results r\nJOIN races ra ON r.raceId = ra.raceId\nWHERE ra.name = 'Bahrain Grand Prix' AND ra.year = 2007 AND r.position IS NULL;\t----- bird -----\tformula_1",
    "317": "SELECT s.*\nFROM races r\nJOIN seasons s ON r.year = s.year\nWHERE r.raceId = 901;\t----- bird -----\tformula_1",
    "318": "SELECT COUNT(DISTINCT driverId) AS drivers_finished\nFROM results\nWHERE raceId = (\n    SELECT raceId\n    FROM races\n    WHERE date = '2015-11-29'\n);\t----- bird -----\tformula_1",
    "319": "SELECT d.forename, d.surname, d.dob\nFROM public.results r\nJOIN public.drivers d ON r.driverId = d.driverId\nWHERE r.raceId = 592 AND r.position IS NOT NULL\nORDER BY d.dob ASC\nLIMIT 1;\t----- bird -----\tformula_1",
    "320": "SELECT d.url\nFROM public.\"lapTimes\" lt\nJOIN public.drivers d ON lt.driverId = d.driverId\nWHERE lt.raceId = 161 AND lt.time = '0:01:27';\t----- bird -----\tformula_1",
    "321": "SELECT d.nationality\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nWHERE r.raceId = 933\nORDER BY r.fastestLapSpeed DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "322": "SELECT c.location, c.lat, c.lng \nFROM public.circuits c\nJOIN public.races r ON c.circuitId = r.\"circuitId\"\nWHERE r.name = 'Malaysian Grand Prix';\t----- bird -----\tformula_1",
    "323": "SELECT c.url \nFROM public.\"constructorResults\" cr\nJOIN public.constructors c ON cr.constructorId = c.constructorId\nWHERE cr.raceId = 9\nORDER BY cr.points DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "324": "```sql\nSELECT q1 \nFROM public.qualifying \nWHERE \"driverId\" = (SELECT DISTINCT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driverId\" = (SELECT \"driverId\" FROM public.qualifying WHERE \"driver\t----- bird -----\tformula_1",
    "325": "SELECT d.nationality \nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.q2 = '0:01:15' AND q.raceId = 347;\t----- bird -----\tformula_1",
    "326": "SELECT d.code\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 45 AND q.q3 = '0:01:33';\t----- bird -----\tformula_1",
    "327": "The provided context is insufficient to generate the SQL query because it does not contain any information about Bruce McLaren or any driver names associated with driver IDs.\t----- bird -----\tformula_1",
    "328": "SELECT d.forename, d.surname\nFROM results r\nJOIN races ra ON r.raceId = ra.raceId\nJOIN drivers d ON r.driverId = d.driverId\nWHERE ra.year = 2006 AND ra.name = 'San Marino Grand Prix' AND r.positionOrder = 2;\t----- bird -----\tformula_1",
    "329": "SELECT s.*\nFROM races r\nJOIN seasons s ON r.year = s.year\nWHERE r.raceId = 901;\t----- bird -----\tformula_1",
    "330": "SELECT COUNT(DISTINCT d.\"driverId\") AS non_finishers\nFROM public.results r\nJOIN public.races ra ON r.\"raceId\" = ra.\"raceId\"\nJOIN public.drivers d ON r.\"driverId\" = d.\"driverId\"\nWHERE ra.\"date\" = '2015-11-29' AND r.\"statusId\" != 1;\t----- bird -----\tformula_1",
    "331": "SELECT d.forename, d.surname, d.dob\nFROM public.results r\nJOIN public.drivers d ON r.driverId = d.driverId\nWHERE r.raceId = 872\nORDER BY d.dob DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "332": "SELECT d.forename, d.surname\nFROM public.\"lapTimes\" lt\nJOIN public.drivers d ON lt.\"driverId\" = d.\"driverId\"\nWHERE lt.\"raceId\" = 348\nORDER BY lt.milliseconds ASC\nLIMIT 1;\t----- bird -----\tformula_1",
    "333": "SELECT d.nationality\nFROM public.results r\nJOIN public.drivers d ON r.driverId = d.driverId\nWHERE r.fastestLapSpeed = (\n    SELECT MAX(CAST(fastestLapSpeed AS FLOAT))\n    FROM public.results\n)\nLIMIT 1;\t----- bird -----\tformula_1",
    "334": "The provided context is insufficient to generate the SQL query. The context does not provide information to directly link Paul di Resta's driverId or any specific details about the fastest lap speed for his races. Additionally, the context does not specify which columns or tables contain information about the fastest lap speed necessary to calculate the percentage difference.\t----- bird -----\tformula_1",
    "335": "SELECT d.driverId, d.forename, d.surname, \n       COUNT(CASE WHEN r.positionText = 'Finished' THEN 1 END)::FLOAT / COUNT(*) AS completion_rate\nFROM races ra\nJOIN results r ON ra.raceId = r.raceId\nJOIN drivers d ON r.driverId = d.driverId\nWHERE ra.date = '1983-07-16'\nGROUP BY d.driverId, d.forename, d.surname;\t----- bird -----\tformula_1",
    "336": "SELECT MIN(year) AS first_singapore_gp_year\nFROM races\nWHERE name ILIKE '%Singapore Grand Prix%';\t----- bird -----\tformula_1",
    "337": "SELECT name \nFROM public.races \nWHERE year = 2005 \nORDER BY name DESC;\t----- bird -----\tformula_1",
    "338": "WITH earliest_date AS (\n    SELECT MIN(date) AS min_date\n    FROM public.races\n),\nearliest_races AS (\n    SELECT name\n    FROM public.races\n    WHERE date = (SELECT min_date FROM earliest_date)\n)\nSELECT name\nFROM earliest_races;\t----- bird -----\tformula_1",
    "339": "SELECT name, date\nFROM public.races\nWHERE year = 1999\nORDER BY round DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "340": "SELECT year, COUNT(*) AS number_of_races\nFROM public.races\nGROUP BY year\nORDER BY number_of_races DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "341": "SELECT DISTINCT r1.name \nFROM public.races r1\nWHERE r1.year = 2017\nAND r1.name NOT IN (\n    SELECT r2.name \n    FROM public.races r2 \n    WHERE r2.year = 2000\n);\t----- bird -----\tformula_1",
    "342": "SELECT c.country, c.name AS circuit_name, c.location\nFROM races r\nJOIN circuits c ON r.\"circuitId\" = c.\"circuitId\"\nWHERE r.name = 'European Grand Prix'\nORDER BY r.year, r.round\nLIMIT 1;\t----- bird -----\tformula_1",
    "343": "The provided context is insufficient to generate the SQL query because there is no information about the circuits, including circuit names like \"Brands Hatch,\" in the given tables.\t----- bird -----\tformula_1",
    "344": "SELECT COUNT(DISTINCT r.year) AS number_of_seasons\nFROM races r\nJOIN circuits c ON r.\"circuitId\" = c.\"circuitId\"\nWHERE c.name = 'Silverstone Circuit' AND r.name ILIKE '%United Kingdom Grand Prix%';\t----- bird -----\tformula_1",
    "345": "SELECT d.forename, d.surname\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nJOIN races ra ON r.raceId = ra.raceId\nWHERE ra.year = 2010 AND ra.name = 'Singapore Grand Prix'\nORDER BY r.positionOrder;\t----- bird -----\tformula_1",
    "346": "SELECT d.forename, d.surname, MAX(ds.points) as max_points\nFROM public.\"driverStandings\" ds\nJOIN public.drivers d ON ds.driverId = d.driverId\nGROUP BY d.forename, d.surname\nORDER BY max_points DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "347": "SELECT d.forename, d.surname, ds.points\nFROM driverStandings ds\nJOIN races r ON ds.raceId = r.raceId\nJOIN drivers d ON ds.driverId = d.driverId\nWHERE r.year = 2017 AND r.name = 'Chinese Grand Prix'\nORDER BY ds.points DESC\nLIMIT 3;\t----- bird -----\tformula_1",
    "348": "SELECT d.forename, d.surname, r.name AS race_name, lt.time\nFROM public.\"lapTimes\" lt\nJOIN public.drivers d ON lt.driverId = d.driverId\nJOIN public.races r ON lt.raceId = r.raceId\nWHERE lt.milliseconds = (SELECT MIN(milliseconds) FROM public.\"lapTimes\");\t----- bird -----\tformula_1",
    "349": "The provided context is insufficient because the tables given do not contain data about driver names or the specific race names. Therefore, it is not possible to directly generate a SQL query to get the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix without additional information linking driver names to `driverId` and race names to `raceId`.\t----- bird -----\tformula_1",
    "350": "SELECT player_api_id, MAX(overall_rating) AS highest_overall_rating\nFROM public.\"Player_Attributes\"\nGROUP BY player_api_id\nORDER BY highest_overall_rating DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "351": "SELECT player_name, height\nFROM public.\"Player\"\nORDER BY height DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "352": "SELECT preferred_foot \nFROM public.\"Player_Attributes\" \nORDER BY potential ASC \nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "353": "SELECT COUNT(*) \nFROM public.\"Player_Attributes\" \nWHERE overall_rating BETWEEN 60 AND 65 \nAND preferred_foot = 'Right' \nAND attacking_work_rate = 'High' \nAND defensive_work_rate = 'Low';\t----- bird -----\teuropean_football_2",
    "354": "SELECT player_api_id \nFROM public.\"Player_Attributes\" \nORDER BY crossing DESC \nLIMIT 5;\t----- bird -----\teuropean_football_2",
    "355": "SELECT l.name, SUM(m.home_team_goal + m.away_team_goal) AS total_goals\nFROM public.\"Match\" m\nJOIN public.\"League\" l ON m.league_id = l.id\nWHERE m.season = '2016'\nGROUP BY l.name\nORDER BY total_goals DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "356": "SELECT t.team_long_name AS home_team, COUNT(m.id) AS losses\nFROM public.\"Match\" m\nJOIN public.\"Team\" t ON m.home_team_api_id = t.team_api_id\nWHERE m.season = '2016' AND m.home_team_goal < m.away_team_goal\nGROUP BY t.team_long_name\nORDER BY losses ASC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "357": "SELECT P.player_name, SUM(PA.penalties) AS total_penalties\nFROM public.\"Player\" P\nJOIN public.\"Player_Attributes\" PA ON P.player_api_id = PA.player_api_id\nGROUP BY P.player_name\nORDER BY total_penalties DESC\nLIMIT 10;\t----- bird -----\teuropean_football_2",
    "358": "SELECT T.team_long_name AS away_team, COUNT(*) AS wins\nFROM public.\"Match\" M\nJOIN public.\"League\" L ON M.league_id = L.id\nJOIN public.\"Team\" T ON M.away_team_api_id = T.team_api_id\nWHERE L.name = 'Scotland Premier League' AND M.season = '2010/2011' AND M.away_team_goal > M.home_team_goal\nGROUP BY T.team_long_name\nORDER BY wins DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "359": "SELECT t.team_long_name, ta.\"buildUpPlaySpeed\"\nFROM \"Team_Attributes\" ta\nJOIN \"Team\" t ON ta.team_api_id = t.team_api_id\nORDER BY ta.\"buildUpPlaySpeed\" DESC\nLIMIT 4;\t----- bird -----\teuropean_football_2",
    "360": "SELECT l.name, COUNT(*) AS draw_count\nFROM public.\"Match\" m\nJOIN public.\"League\" l ON m.league_id = l.id\nWHERE m.season = '2016'\nAND m.home_team_goal = m.away_team_goal\nGROUP BY l.name\nORDER BY draw_count DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "361": "SELECT \n    P.player_name,\n    EXTRACT(YEAR FROM AGE(PA.date::date, P.birthday::date)) AS age\nFROM \n    public.\"Player\" P\nJOIN \n    public.\"Player_Attributes\" PA ON P.player_api_id = PA.player_api_id\nWHERE \n    PA.sprint_speed >= 97\n    AND PA.date BETWEEN '2013-01-01' AND '2015-12-31';\t----- bird -----\teuropean_football_2",
    "362": "SELECT l.name AS league_name, COUNT(m.id) AS total_matches\nFROM public.\"League\" l\nJOIN public.\"Match\" m ON l.id = m.league_id\nGROUP BY l.name\nORDER BY total_matches DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "363": "SELECT AVG(height) AS average_height\nFROM public.\"Player\"\nWHERE birthday BETWEEN '1990-01-01' AND '1995-12-31';\t----- bird -----\teuropean_football_2",
    "364": "WITH PlayerAverageRating AS (\n    SELECT \n        player_api_id,\n        AVG(overall_rating) AS avg_rating\n    FROM \n        public.\"Player_Attributes\"\n    WHERE \n        date LIKE '2010%'\n    GROUP BY \n        player_api_id\n),\nHighestAboveAverage AS (\n    SELECT \n        player_api_id,\n        overall_rating,\n        avg_rating\n    FROM \n        public.\"Player_Attributes\" pa\n    JOIN \n        PlayerAverageRating par ON pa.player_api_id = par.player_api_id\n    WHERE \n        pa.date LIKE '2010%' AND overall_rating > avg_rating\n)\nSELECT \n    player_api_id\nFROM \n    HighestAboveAverage\nORDER BY \n    overall_rating DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "365": "SELECT DISTINCT team_fifa_api_id \nFROM public.\"Team_Attributes\"\nWHERE \"buildUpPlaySpeed\" > 50 AND \"buildUpPlaySpeed\" < 60;\t----- bird -----\teuropean_football_2",
    "366": "SELECT t.team_long_name\nFROM public.\"Team_Attributes\" ta\nJOIN public.\"Team\" t ON ta.team_fifa_api_id = t.team_fifa_api_id\nWHERE ta.date LIKE '2012%' AND ta.\"buildUpPlayPassing\" > (\n    SELECT AVG(\"buildUpPlayPassing\")\n    FROM public.\"Team_Attributes\"\n    WHERE date LIKE '2012%'\n)\t----- bird -----\teuropean_football_2",
    "367": "SELECT \n    (COUNT(CASE WHEN preferred_foot = 'left' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_left_foot\nFROM \n    public.\"Player_Attributes\" pa\nJOIN \n    public.\"Player\" p ON pa.player_api_id = p.player_api_id\nWHERE \n    SUBSTRING(p.birthday, 1, 4)::INT BETWEEN 1987 AND 1992;\t----- bird -----\teuropean_football_2",
    "368": "SELECT l.name AS league_name, SUM(m.home_team_goal + m.away_team_goal) AS total_goals\nFROM public.\"League\" l\nJOIN public.\"Match\" m ON l.id = m.league_id\nGROUP BY l.name\nORDER BY total_goals ASC\nLIMIT 5;\t----- bird -----\teuropean_football_2",
    "369": "The provided context is insufficient to generate the SQL query as there is no table that contains information about a person named Ahmed Samir Farag or associates a person with long-shots.\t----- bird -----\teuropean_football_2",
    "370": "SELECT p.player_name\nFROM public.\"Player\" p\nJOIN public.\"Player_Attributes\" pa ON p.player_api_id = pa.player_api_id\nWHERE p.height > 180\nGROUP BY p.player_name\nORDER BY AVG(pa.heading_accuracy) DESC\nLIMIT 10;\t----- bird -----\teuropean_football_2",
    "371": "SELECT T.team_long_name, TA.chanceCreationPassing\nFROM public.\"Team_Attributes\" TA\nJOIN public.\"Team\" T ON TA.team_api_id = T.team_api_id\nWHERE TA.\"buildUpPlayDribblingClass\" = 'Normal'\n  AND TA.\"date\" LIKE '2014%'\n  AND TA.\"chanceCreationPassing\" < (\n    SELECT AVG(\"chanceCreationPassing\")\n    FROM public.\"Team_Attributes\"\n    WHERE \"date\" LIKE '2014%'\n  )\nORDER BY TA.\"chanceCreationPassing\" DESC;\t----- bird -----\teuropean_football_2",
    "372": "SELECT l.name\nFROM public.\"League\" l\nJOIN public.\"Match\" m ON l.id = m.league_id\nWHERE m.season = '2009/2010'\nGROUP BY l.name\nHAVING AVG(m.home_team_goal) > AVG(m.away_team_goal);\t----- bird -----\teuropean_football_2",
    "373": "SELECT team_short_name \nFROM public.\"Team\" \nWHERE team_long_name = 'Queens Park Rangers';\t----- bird -----\teuropean_football_2",
    "374": "SELECT player_name\nFROM public.\"Player\"\nWHERE birthday LIKE '1970-10-%';\t----- bird -----\teuropean_football_2",
    "375": "SELECT pa.attacking_work_rate\nFROM public.\"Player\" p\nJOIN public.\"Player_Attributes\" pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Franco Zennaro';\t----- bird -----\teuropean_football_2",
    "376": "The provided context does not contain information about \"freedom of movement\" specifically related to a team or any metric that can be directly mapped to it. Therefore, it is not possible to generate a SQL query to answer the question based on the given context.\t----- bird -----\teuropean_football_2",
    "377": "SELECT pa.finishing \nFROM public.\"Player\" p\nJOIN public.\"Player_Attributes\" pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Francois Affolter' AND pa.date = '2014-09-18';\t----- bird -----\teuropean_football_2",
    "378": "SELECT pa.overall_rating\nFROM public.\"Player\" p\nJOIN public.\"Player_Attributes\" pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Gabriel Tamas' AND pa.date LIKE '2011%';\t----- bird -----\teuropean_football_2",
    "379": "SELECT COUNT(*) \nFROM public.\"Match\" m\nJOIN public.\"League\" l ON m.league_id = l.id\nWHERE m.season = '2015/2016' \nAND l.name = 'Scotland Premier League';\t----- bird -----\teuropean_football_2",
    "380": "SELECT pa.preferred_foot \nFROM public.\"Player_Attributes\" pa\nJOIN public.\"Player\" p ON pa.player_api_id = p.player_api_id\nORDER BY p.birthday DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "381": "SELECT player_name\nFROM public.\"Player\" p\nJOIN public.\"Player_Attributes\" pa ON p.player_api_id = pa.player_api_id\nWHERE pa.potential = (SELECT MAX(potential) FROM public.\"Player_Attributes\");\t----- bird -----\teuropean_football_2",
    "382": "SELECT COUNT(DISTINCT pa.player_api_id) AS left_footed_players_under_130\nFROM public.\"Player_Attributes\" pa\nJOIN public.\"Player\" p ON pa.player_api_id = p.player_api_id\nWHERE p.weight < 130 AND pa.preferred_foot = 'left';\t----- bird -----\teuropean_football_2",
    "383": "SELECT T.team_short_name\nFROM public.\"Team\" T\nJOIN public.\"Team_Attributes\" TA ON T.team_api_id = TA.team_api_id\nWHERE TA.\"chanceCreationPassingClass\" = 'Risky';\t----- bird -----\teuropean_football_2",
    "384": "The provided context is insufficient to generate the SQL query because there is no information about the player \"David Wilson\" in the given tables. To retrieve the defensive work rate, we need to know the `player_api_id` or `player_fifa_api_id` of David Wilson, which would allow us to join the `Player` and `Player_Attributes` tables.\t----- bird -----\teuropean_football_2",
    "385": "SELECT p.birthday\nFROM public.\"Player_Attributes\" pa\nJOIN public.\"Player\" p ON pa.player_api_id = p.player_api_id\nORDER BY pa.overall_rating DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "386": "SELECT l.name \nFROM public.\"League\" l\nJOIN public.\"Country\" c ON l.country_id = c.id\nWHERE c.name = 'Netherlands';\t----- bird -----\teuropean_football_2",
    "387": "SELECT AVG(home_team_goal) AS average_home_team_goal\nFROM public.\"Match\" m\nJOIN public.\"League\" l ON m.league_id = l.id\nWHERE m.season = '2010/2011'\nAND l.name = 'Poland';\t----- bird -----\teuropean_football_2",
    "388": "The provided context is insufficient to generate the SQL query to answer this question. The context does not include instructions or data to calculate the height of each player and compare it. Additionally, it lacks details on how to link the player attributes to the player for calculating the average finishing rate based on the height.\t----- bird -----\teuropean_football_2",
    "389": "SELECT player_name \nFROM public.\"Player\" \nWHERE height > 180;\t----- bird -----\teuropean_football_2",
    "390": "SELECT COUNT(*) \nFROM public.\"Player\" \nWHERE birthday > '1990-12-31';\t----- bird -----\teuropean_football_2",
    "391": "SELECT COUNT(*) \nFROM public.\"Player\"\nWHERE player_name LIKE 'Adam%' AND weight > 170;\t----- bird -----\teuropean_football_2",
    "392": "SELECT DISTINCT p.player_name\nFROM public.\"Player_Attributes\" pa\nJOIN public.\"Player\" p ON pa.player_api_id = p.player_api_id\nWHERE pa.overall_rating > 80\nAND pa.date BETWEEN '2008-01-01' AND '2010-12-31';\t----- bird -----\teuropean_football_2",
    "393": "The provided context does not contain information about specific players like Aaron Doran. Therefore, it is not possible to generate a SQL query to find Aaron Doran's potential score. The context lacks specific data on player names and their corresponding scores.\t----- bird -----\teuropean_football_2",
    "394": "SELECT player_name \nFROM public.\"Player\" p\nJOIN public.\"Player_Attributes\" pa ON p.player_api_id = pa.player_api_id\nWHERE pa.preferred_foot = 'left';\t----- bird -----\teuropean_football_2",
    "395": "SELECT t.team_long_name\nFROM public.\"Team\" t\nJOIN public.\"Team_Attributes\" ta ON t.team_api_id = ta.team_api_id\nWHERE ta.\"buildUpPlaySpeedClass\" = 'fast';\t----- bird -----\teuropean_football_2",
    "396": "SELECT t.team_long_name, ta.\"buildUpPlayPassingClass\"\nFROM public.\"Team\" t\nJOIN public.\"Team_Attributes\" ta ON t.team_fifa_api_id = ta.team_fifa_api_id\nWHERE t.team_short_name = 'CLB';\t----- bird -----\teuropean_football_2",
    "397": "SELECT T.team_short_name \nFROM public.\"Team_Attributes\" TA\nJOIN public.\"Team\" T ON TA.team_api_id = T.team_api_id\nWHERE TA.\"buildUpPlayPassing\" > 70;\t----- bird -----\teuropean_football_2",
    "398": "SELECT AVG(overall_rating) AS average_overall_rating\nFROM public.\"Player_Attributes\" pa\nJOIN public.\"Player\" p ON pa.player_api_id = p.player_api_id\nWHERE p.height > 170\nAND pa.date BETWEEN '2010-01-01' AND '2015-12-31';\t----- bird -----\teuropean_football_2",
    "399": "SELECT player_name, height \nFROM public.\"Player\" \nWHERE height = (SELECT MIN(height) FROM public.\"Player\");\t----- bird -----\teuropean_football_2",
    "400": "The provided context is insufficient to generate a SQL query because it does not provide information on distinguishing between in-patient and outpatient records. The \"Patient\" table does not have a column that specifies whether a patient is in-patient or outpatient, and no other table in the provided schema contains this information.\t----- bird -----\tthrombosis_prediction",
    "401": "SELECT \n    (COUNT(*) FILTER (WHERE \"SEX\" = 'female' AND \"Birthday\" > '1930-12-31')::FLOAT / COUNT(*)) * 100 AS percentage_female_born_after_1930\nFROM \n    public.\"Patient\";\t----- bird -----\tthrombosis_prediction",
    "402": "SELECT \n    (COUNT(CASE WHEN \"Admission\" = 'inpatient' THEN 1 END)::FLOAT / COUNT(*)) * 100 AS percent_inpatient\nFROM \n    public.\"Patient\"\nWHERE \n    EXTRACT(YEAR FROM \"Birthday\") BETWEEN 1930 AND 1940;\t----- bird -----\tthrombosis_prediction",
    "403": "SELECT \n    SUM(CASE WHEN \"Admission\" = 'outpatient' THEN 1 ELSE 0 END) * 1.0 /\n    NULLIF(SUM(CASE WHEN \"Admission\" = 'inpatient' THEN 1 ELSE 0 END), 0) AS outpatient_to_inpatient_ratio\nFROM \n    public.\"Patient\" \nWHERE \n    \"Diagnosis\" = 'SLE';\t----- bird -----\tthrombosis_prediction",
    "404": "SELECT p.Diagnosis, l.Date\nFROM public.\"Patient\" p\nJOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\nWHERE p.\"ID\" = 30609;\t----- bird -----\tthrombosis_prediction",
    "405": "SELECT \n    p.SEX, \n    p.Birthday, \n    e.\"Examination Date\", \n    e.Symptoms\nFROM \n    public.\"Patient\" p\nJOIN \n    public.\"Examination\" e ON p.\"ID\" = e.\"ID\"\nWHERE \n    p.\"ID\" = 163109;\t----- bird -----\tthrombosis_prediction",
    "406": "SELECT p.\"ID\", p.\"SEX\", p.\"Birthday\"\nFROM public.\"Patient\" p\nJOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\nWHERE l.\"LDH\" > 250 OR l.\"LDH\" < 140;\t----- bird -----\tthrombosis_prediction",
    "407": "The provided context is insufficient to generate the SQL query because there is no information about how the \"degree of coagulation\" is represented in the tables. There are columns related to examinations and laboratory tests, but it's unclear which one indicates a positive degree of coagulation.\t----- bird -----\tthrombosis_prediction",
    "408": "SELECT p.\"ID\", p.\"SEX\", p.\"Diagnosis\"\nFROM public.\"Patient\" p\nJOIN public.\"Examination\" e ON p.\"ID\" = e.\"ID\"\nWHERE e.\"Thrombosis\" = 3;\t----- bird -----\tthrombosis_prediction",
    "409": "SELECT p.\"ID\", p.\"SEX\", p.\"Birthday\", l.\"T-CHO\"\nFROM public.\"Patient\" p\nJOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\nWHERE EXTRACT(YEAR FROM p.\"Birthday\") = 1937\nAND (l.\"T-CHO\" < 125 OR l.\"T-CHO\" > 200);\t----- bird -----\tthrombosis_prediction",
    "410": "SELECT p.\"ID\", p.\"SEX\", p.\"Diagnosis\"\nFROM public.\"Patient\" p\nJOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\nWHERE l.\"ALB\" < 3.5;\t----- bird -----\tthrombosis_prediction",
    "411": "SELECT \n    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM public.\"Patient\" p WHERE p.\"SEX\" = 'Female')) AS percentage_of_female_patients_out_of_range\nFROM \n    public.\"Patient\" p\nJOIN \n    public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\nWHERE \n    p.\"SEX\" = 'Female' AND (l.\"TP\" < 6.4 OR l.\"TP\" > 8.3);\t----- bird -----\tthrombosis_prediction",
    "412": "SELECT AVG(e.\"aCL IgG\") AS average_aCL_IgG\nFROM public.\"Examination\" e\nJOIN public.\"Patient\" p ON e.\"ID\" = p.\"ID\"\nWHERE p.\"Admission\" = 'In-Patient' \nAND EXTRACT(YEAR FROM AGE(p.\"Birthday\")) >= 50;\t----- bird -----\tthrombosis_prediction",
    "413": "SELECT COUNT(*) \nFROM public.\"Patient\"\nWHERE SEX = 'Female' \nAND \"First Date\" BETWEEN '1997-01-01' AND '1997-12-31'\nAND \"Admission\" = 'Outpatient Clinic Immediately Followed'\t----- bird -----\tthrombosis_prediction",
    "414": "SELECT MIN(EXTRACT(YEAR FROM AGE(\"First Date\", \"Birthday\"))) AS youngest_age\nFROM public.\"Patient\";\t----- bird -----\tthrombosis_prediction",
    "415": "SELECT COUNT(DISTINCT p.\"ID\") AS female_patients_with_serious_thrombosis\nFROM public.\"Examination\" e\nJOIN public.\"Patient\" p ON e.\"ID\" = p.\"ID\"\nWHERE e.\"Thrombosis\" = (SELECT MAX(\"Thrombosis\") FROM public.\"Examination\" WHERE EXTRACT(YEAR FROM \"Examination Date\") = 1997)\nAND EXTRACT(YEAR FROM e.\"Examination Date\") = 1997\nAND p.\"SEX\" = 'Female';\t----- bird -----\tthrombosis_prediction",
    "416": "SELECT MAX(age) - MIN(age) AS age_gap\nFROM (\n    SELECT EXTRACT(YEAR FROM AGE(l.\"Date\", p.\"Birthday\")) AS age\n    FROM public.\"Laboratory\" l\n    JOIN public.\"Patient\" p ON l.\"ID\" = p.\"ID\"\n    WHERE l.\"TG\" BETWEEN 150 AND 199\n) AS patient_ages;\t----- bird -----\tthrombosis_prediction",
    "417": "SELECT e.\"Symptoms\", e.\"Diagnosis\"\nFROM public.\"Examination\" e\nJOIN public.\"Patient\" p ON e.\"ID\" = p.\"ID\"\nORDER BY p.\"Birthday\" DESC\nLIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "418": "SELECT AVG(monthly_count) AS average_male_patients_per_month\nFROM (\n    SELECT EXTRACT(MONTH FROM l.\"Date\") AS month, COUNT(DISTINCT l.\"ID\") AS monthly_count\n    FROM public.\"Laboratory\" l\n    JOIN public.\"Patient\" p ON l.\"ID\" = p.\"ID\"\n    WHERE p.\"SEX\" = 'Male' AND l.\"Date\" BETWEEN '1998-01-01' AND '1998-12-31'\n    GROUP BY EXTRACT(MONTH FROM l.\"Date\")\n) AS monthly_counts;\t----- bird -----\tthrombosis_prediction",
    "419": "SELECT \n    p.\"ID\",\n    l.\"Date\" AS \"Laboratory Work Date\",\n    EXTRACT(YEAR FROM AGE(p.\"First Date\", p.\"Birthday\")) AS \"Age at First Date\"\nFROM \n    public.\"Patient\" p\nJOIN \n    public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\nWHERE \n    p.\"Diagnosis\" = 'SJS'\nORDER BY \n    p.\"Birthday\" ASC, l.\"Date\" DESC\nLIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "420": "SELECT \n    (SELECT COUNT(*) FROM public.\"Patient\" p\n     JOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\n     WHERE p.\"SEX\" = 'Male' AND (l.\"UA\" < 3.5 OR l.\"UA\" > 7.2))::FLOAT /\n    NULLIF((SELECT COUNT(*) FROM public.\"Patient\" p\n     JOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\n     WHERE p.\"SEX\" = 'Female' AND (l.\"UA\" < 2.6 OR l.\"UA\" > 6.0)), 0) AS male_to_female_ratio\t----- bird -----\tthrombosis_prediction",
    "421": "SELECT COUNT(DISTINCT p.\"ID\") AS num_patients\nFROM public.\"Patient\" p\nLEFT JOIN public.\"Examination\" e ON p.\"ID\" = e.\"ID\" AND e.\"Examination Date\" <= p.\"First Date\" + INTERVAL '1 year'\nWHERE e.\"ID\" IS NULL;\t----- bird -----\tthrombosis_prediction",
    "422": "The provided context does not include the necessary information to determine the age of the patients at the time of their examination. Specifically, we need the birth date of the patients and the examination date to calculate if they were underage (typically under 18). Therefore, it is not possible to generate the SQL query without additional context on how to define \"underage\" based on the given tables.\t----- bird -----\tthrombosis_prediction",
    "423": "SELECT COUNT(DISTINCT p.\"ID\") AS male_patients_with_elevated_bilirubin\nFROM public.\"Patient\" p\nJOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\nWHERE p.\"SEX\" = 'Male' AND l.\"T-BIL\" > 1.2;\t----- bird -----\tthrombosis_prediction",
    "424": "SELECT p.\"Diagnosis\", COUNT(*) AS diagnosis_count\nFROM public.\"Patient\" p\nJOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\nWHERE l.\"Date\" BETWEEN '1985-01-01' AND '1995-12-31'\nGROUP BY p.\"Diagnosis\"\nORDER BY diagnosis_count DESC\nLIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "425": "SELECT AVG(EXTRACT(YEAR FROM AGE('1999-01-01', p.\"Birthday\"))) AS average_age\nFROM public.\"Patient\" p\nJOIN public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\"\nWHERE l.\"Date\" BETWEEN '1991-10-01' AND '1991-10-31';\t----- bird -----\tthrombosis_prediction",
    "426": "SELECT \n    EXTRACT(YEAR FROM AGE(e.\"Examination Date\", p.\"Birthday\")) AS age_at_examination,\n    l.\"HGB\" AS hemoglobin_count,\n    e.\"Diagnosis\"\nFROM \n    public.\"Patient\" p\nJOIN \n    public.\"Examination\" e ON p.\"ID\" = e.\"ID\"\nJOIN \n    public.\"Laboratory\" l ON p.\"ID\" = l.\"ID\" AND e.\"Examination Date\" = l.\"Date\"\nORDER BY \n    l.\"HGB\" DESC\nLIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "427": "SELECT \"ANA\" \nFROM public.\"Examination\" \nWHERE \"ID\" = 3605340 AND \"Examination Date\" = '1996-12-02';\t----- bird -----\tthrombosis_prediction",
    "428": "SELECT \"T-CHO\"\nFROM public.\"Laboratory\"\nWHERE \"ID\" = 2927464 AND \"Date\" = '1995-09-04';\t----- bird -----\tthrombosis_prediction",
    "429": "SELECT p.\"SEX\"\nFROM public.\"Patient\" p\nWHERE p.\"Diagnosis\" = 'AORTITIS'\nORDER BY p.\"First Date\" ASC\nLIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "430": "SELECT e.\"aCL IgG\", e.\"aCL IgM\", e.\"aCL IgA\"\nFROM public.\"Examination\" e\nJOIN public.\"Patient\" p ON e.\"ID\" = p.\"ID\"\nWHERE p.\"Diagnosis\" = 'SLE' AND p.\"First Date\" = '1994-02-19' AND e.\"Examination Date\" = '1993-11-12';\t----- bird -----\tthrombosis_prediction",
    "431": "SELECT p.SEX\nFROM public.\"Patient\" p\nJOIN public.\"Laboratory\" l ON p.ID = l.ID\nWHERE l.\"GPT\" = 9 AND l.\"Date\" = '1992-06-12';\t----- bird -----\tthrombosis_prediction",
    "432": "SELECT EXTRACT(YEAR FROM AGE(l.\"Date\", p.\"Birthday\")) AS age_at_test\nFROM public.\"Laboratory\" l\nJOIN public.\"Patient\" p ON l.\"ID\" = p.\"ID\"\nWHERE l.\"UA\" = 8.4 AND l.\"Date\" = '1991-10-21';\t----- bird -----\tthrombosis_prediction",
    "433": "SELECT COUNT(*) AS total_tests\nFROM public.\"Laboratory\" l\nJOIN public.\"Patient\" p ON l.\"ID\" = p.\"ID\"\nWHERE p.\"First Date\" = '1991-06-13'\n  AND p.\"Diagnosis\" = 'SJS'\n  AND EXTRACT(YEAR FROM l.\"Date\") = 1995;\t----- bird -----\tthrombosis_prediction",
    "434": "SELECT \"Description\" \nFROM public.\"Patient\" \nWHERE \"ID\" = (\n    SELECT \"ID\" \n    FROM public.\"Examination\" \n    WHERE \"Diagnosis\" = 'SLE' \n    AND \"Examination Date\" = '1997-01-27'\n)\t----- bird -----\tthrombosis_prediction",
    "435": "SELECT e.Symptoms\nFROM public.\"Patient\" p\nJOIN public.\"Examination\" e ON p.ID = e.ID\nWHERE p.Birthday = '1959-03-01' AND e.\"Examination Date\" = '1993-09-27';\t----- bird -----\tthrombosis_prediction",
    "436": "SELECT \n    ((MAX(\"T-CHO\") FILTER (WHERE EXTRACT(MONTH FROM \"Date\") = 11) - MAX(\"T-CHO\") FILTER (WHERE EXTRACT(MONTH FROM \"Date\") = 12))::FLOAT / NULLIF(MAX(\"T-CHO\") FILTER (WHERE EXTRACT(MONTH FROM \"Date\") = 11), 0)) * 100 AS decrease_rate\nFROM \n    public.\"Laboratory\" \nWHERE \n    \"ID\" = (SELECT \"ID\" FROM public.\"Patient\" WHERE \"Birthday\" = '1959-02-18')\n    AND EXTRACT(YEAR FROM \"Date\") = 1981;\t----- bird -----\tthrombosis_prediction",
    "437": "SELECT DISTINCT p.\"ID\"\nFROM public.\"Patient\" p\nJOIN public.\"Examination\" e ON p.\"ID\" = e.\"ID\"\nWHERE p.\"Diagnosis\" = 'Behcet''s'\nAND e.\"Examination Date\" BETWEEN '1970-01-01' AND '1997-12-31';\t----- bird -----\tthrombosis_prediction",
    "438": "SELECT DISTINCT e.\"ID\"\nFROM public.\"Examination\" e\nJOIN public.\"Laboratory\" l ON e.\"ID\" = l.\"ID\"\nWHERE e.\"Examination Date\" BETWEEN '1987-07-06' AND '1996-01-31'\nAND l.\"GPT\" > 30\nAND l.\"ALB\" < 4;\t----- bird -----\tthrombosis_prediction",
    "439": "SELECT \"ID\"\nFROM public.\"Patient\"\nWHERE \"SEX\" = 'female' AND EXTRACT(YEAR FROM \"Birthday\") = 1964 AND \"Admission\" IS NOT NULL;\t----- bird -----\tthrombosis_prediction",
    "440": "The provided context is insufficient to generate the SQL query because the degree of thrombosis level is not specified in the table definitions, and the specific string indicating \"S\" for ANA pattern is not provided. Additionally, the calculation for \"anti-Cardiolip in antibody (IgM) 20% higher than average\" requires knowledge of the average value which is not directly available in the context.\t----- bird -----\tthrombosis_prediction",
    "441": "The provided context is insufficient to generate the SQL query because there is no information about the normal range for proteinuria and uric acid levels.\t----- bird -----\tthrombosis_prediction",
    "442": "SELECT \n    (COUNT(CASE WHEN Diagnosis = 'BEHCET' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_of_male_patients\nFROM \n    public.\"Patient\"\nWHERE \n    SEX = 'Male' \n    AND EXTRACT(YEAR FROM \"First Date\") = 1981;\t----- bird -----\tthrombosis_prediction",
    "443": "SELECT DISTINCT p.ID\nFROM public.\"Patient\" p\nJOIN public.\"Laboratory\" l ON p.ID = l.ID\nWHERE p.Description IS NOT NULL\nAND l.Date BETWEEN '1991-10-01' AND '1991-10-31'\nAND l.\"T-BIL\" BETWEEN 0.1 AND 1.2;\t----- bird -----\tthrombosis_prediction",
    "444": "SELECT COUNT(DISTINCT e.ID) \nFROM public.\"Examination\" e\nJOIN public.\"Patient\" p ON e.ID = p.ID\nWHERE e.\"ANA Pattern\" != 'P'\nAND p.\"SEX\" = 'female'\nAND p.\"Birthday\" BETWEEN '1980-01-01' AND '1989-12-31';\t----- bird -----\tthrombosis_prediction",
    "445": "SELECT p.SEX\nFROM public.\"Patient\" p\nJOIN public.\"Examination\" e ON p.ID = e.ID\nJOIN public.\"Laboratory\" l ON p.ID = l.ID\nWHERE e.Diagnosis = 'PSS'\n  AND l.\"CRP\" = '2+'\n  AND l.\"CRE\" = 1\n  AND l.\"LDH\" = 123;\t----- bird -----\tthrombosis_prediction",
    "446": "SELECT AVG(l.\"ALB\") AS average_albumin_level\nFROM public.\"Laboratory\" l\nJOIN public.\"Patient\" p ON l.\"ID\" = p.\"ID\"\nWHERE p.\"SEX\" = 'Female' AND l.\"PLT\" > 400 AND p.\"Diagnosis\" = 'SLE';\t----- bird -----\tthrombosis_prediction",
    "447": "The provided context is insufficient to generate a SQL query for the question because there is no information about SLE disease or specific signs/symptoms associated with it in the given tables.\t----- bird -----\tthrombosis_prediction",
    "448": "SELECT \"First Date\", \"Diagnosis\"\nFROM public.\"Patient\"\nWHERE \"ID\" = 48473;\t----- bird -----\tthrombosis_prediction",
    "449": "SELECT COUNT(*) AS Female_APS_Patients_Count\nFROM public.\"Patient\"\nWHERE \"SEX\" = 'Female' AND \"Diagnosis\" = 'APS';\t----- bird -----\tthrombosis_prediction",
    "450": "The provided context is insufficient to generate the SQL query because there is no direct information available about Angela Sanders or her major in the given tables. The context does not include any reference to a table or columns that would store members' names alongside their majors.\t----- bird -----\tstudent_club",
    "451": "The provided context is insufficient to generate the SQL query because there is no table named `Student_Club` and no table that directly associates students with their colleges or majors. The `major` table contains information about majors and colleges, but there is no clear link between students and the College of Engineering. Additional context or tables linking students to their majors or colleges would be needed.\t----- bird -----\tstudent_club",
    "452": "The provided context is insufficient because there is no table named `Student_Club` or any direct reference to student club membership or the Art and Design Department. The `major` and `member` tables could potentially be relevant, but without specific information linking members to the Art and Design Department, a query cannot be generated.\t----- bird -----\tstudent_club",
    "453": "It can't be generated because there is no table named \"Student_Club\" in the provided context. Additionally, the \"attendance\" and \"event\" tables do not have a direct connection to identify students belonging to a specific club, nor is there a specific event name \"Women's Soccer\" mentioned in the context.\t----- bird -----\tstudent_club",
    "454": "SELECT m.phone\nFROM public.attendance a\nJOIN public.member m ON a.link_to_member = m.member_id\nJOIN public.event e ON a.link_to_event = e.event_id\nWHERE e.event_name = 'Women''s Soccer';\t----- bird -----\tstudent_club",
    "455": "SELECT COUNT(*) \nFROM member \nJOIN attendance ON member.member_id = attendance.link_to_member\nJOIN event ON attendance.link_to_event = event.event_id\nWHERE event.event_name = 'Women''s Soccer' AND member.t_shirt_size = 'M';\t----- bird -----\tstudent_club",
    "456": "It is not possible to generate the SQL query because the provided context does not include a table named \"Student_Club\" or any information about identifying students or members in the \"attendance\" or \"event\" tables. Additionally, there is no direct link between attendance records and event details that would specify which events are attended by students or members of a \"Student_Club.\"\t----- bird -----\tstudent_club",
    "457": "The provided context is insufficient to generate the SQL query because there is no information on the structure or data of a \"Student_Club\" table or any table that contains a record of positions such as \"vice president\" associated with a college.\t----- bird -----\tstudent_club",
    "458": "SELECT e.event_name\nFROM public.event e\nJOIN public.attendance a ON e.event_id = a.link_to_event\nJOIN public.member m ON a.link_to_member = m.member_id\nWHERE m.first_name = 'Maya' AND m.last_name = 'Mclean';\t----- bird -----\tstudent_club",
    "459": "The provided context is insufficient because there is no information about the \"Student_Club\" or the specific attendance records related to \"Sacha Harrison\" in the available tables. The tables do not contain information linking members to events with their names or specific club details.\t----- bird -----\tstudent_club",
    "460": "SELECT COUNT(DISTINCT e.event_id) AS meeting_count\nFROM event e\nJOIN attendance a ON e.event_id = a.link_to_event\nGROUP BY e.event_id, e.type\nHAVING COUNT(DISTINCT a.link_to_member) > 10 AND e.type = 'meeting';\t----- bird -----\tstudent_club",
    "461": "SELECT e.event_name \nFROM public.event e\nJOIN public.attendance a ON e.event_id = a.link_to_event\nWHERE e.type != 'Fundraiser'\nGROUP BY e.event_name\nHAVING COUNT(a.link_to_member) > 20;\t----- bird -----\tstudent_club",
    "462": "The provided context is insufficient to generate the SQL query because there is no information on how attendance is recorded in relation to events, such as the number of attendees per event or how to filter events held in 2020. Additional information or tables are needed to compute the average attendance of meetings in 2020.\t----- bird -----\tstudent_club",
    "463": "SELECT expense_description, MAX(cost) as max_cost\nFROM public.expense\nJOIN public.budget ON public.expense.link_to_budget = public.budget.budget_id\nWHERE public.budget.category = 'club events'\nGROUP BY expense_description\nORDER BY max_cost DESC\nLIMIT 1;\t----- bird -----\tstudent_club",
    "464": "The provided context is insufficient because there is no information available about the Student_Club or its members' association with the major of Environmental Engineering. The `member` table does not contain a clear relationship with the `major` table that would allow us to determine the major of each member.\t----- bird -----\tstudent_club",
    "465": "SELECT m.first_name || ' ' || m.last_name AS full_name\nFROM attendance a\nJOIN event e ON a.link_to_event = e.event_id\nJOIN member m ON a.link_to_member = m.member_id\nWHERE e.event_name = 'Laugh Out Loud';\t----- bird -----\tstudent_club",
    "466": "The provided context is insufficient because there is no information available regarding the majors of students or a direct link between the \"major\" table and the \"member\" table that indicates what major a student is pursuing.\t----- bird -----\tstudent_club",
    "467": "The provided context is insufficient to generate the SQL query because there is no information about Sherri Ramsey or any related data in the given tables.\t----- bird -----\tstudent_club",
    "468": "SELECT m.college\nFROM public.member mem\nJOIN public.major m ON mem.link_to_major = m.major_id\nWHERE mem.first_name = 'Tyler' AND mem.last_name = 'Hewitt';\t----- bird -----\tstudent_club",
    "469": "SELECT SUM(amount) AS total_amount_received\nFROM public.income\nWHERE source = 'Vice President';\t----- bird -----\tstudent_club",
    "470": "It can't be generated because the provided context does not specify which table or column contains information about the \"Student_Club,\" \"food,\" or \"September Meeting.\" Additional details are needed to create an accurate query.\t----- bird -----\tstudent_club",
    "471": "The provided context is insufficient to generate the SQL query because there is no information about the \"President of the Student_Club\" or any related details that can link to their city and state. The available tables do not contain relevant information about the Student_Club or any position related to a president.\t----- bird -----\tstudent_club",
    "472": "SELECT first_name || ' ' || last_name AS full_name\nFROM public.member\nJOIN public.zip_code ON public.member.zip = public.zip_code.zip_code\nWHERE public.zip_code.state = 'Illinois';\t----- bird -----\tstudent_club",
    "473": "It can't be generated because the provided context does not include information on the \"Student_Club,\" \"advertisement,\" or \"September Meeting.\" Additionally, there is no direct relationship between expenses and specific events or categories such as advertisement or meetings.\t----- bird -----\tstudent_club",
    "474": "SELECT m.first_name, m.last_name, maj.department\nFROM public.member m\nJOIN public.major maj ON m.link_to_major = maj.major_id\nWHERE (m.first_name = 'Pierce' AND m.last_name = 'Guidi');\t----- bird -----\tstudent_club",
    "475": "SELECT SUM(amount) AS total_budgeted_amount\nFROM public.budget\nWHERE link_to_event = (\n    SELECT event_id\n    FROM public.event\n    WHERE event_name = 'October Speaker'\n);\t----- bird -----\tstudent_club",
    "476": "SELECT expense_id, expense_description, approved\nFROM public.expense\nWHERE expense_date = '2019-10-08' AND expense_description = 'October Meeting';\t----- bird -----\tstudent_club",
    "477": "The provided context is insufficient to generate the query because it does not contain information about the specific member names linked to expenses, nor does it provide a way to filter expenses by month. Additional details about member names and date filtering are needed to accurately calculate the total average cost for Elijah Allen.\t----- bird -----\tstudent_club",
    "478": "The provided context is insufficient to generate the SQL query because there is no information about the year associated with the events in the `budget` table, nor a direct link between the `event` table and the `budget` table that specifies the year or the organization (e.g., \"Student_Club\") responsible for the events.\t----- bird -----\tstudent_club",
    "479": "SELECT location \nFROM public.event \nWHERE event_name = 'Spring Budget Review';\t----- bird -----\tstudent_club",
    "480": "SELECT cost \nFROM public.expense \nWHERE expense_description = 'Posters' AND expense_date = '2019/9/4';\t----- bird -----\tstudent_club",
    "481": "SELECT remaining \nFROM public.budget \nWHERE category = 'Food' \nORDER BY amount DESC \nLIMIT 1;\t----- bird -----\tstudent_club",
    "482": "SELECT notes \nFROM public.event \nWHERE event_name = 'fundraising' AND event_date = '2019/9/14';\t----- bird -----\tstudent_club",
    "483": "SELECT COUNT(*) AS total_majors\nFROM public.major\nWHERE college = 'College of Humanities and Social Sciences';\t----- bird -----\tstudent_club",
    "484": "SELECT phone \nFROM public.member \nWHERE first_name = 'Carlo' AND last_name = 'Jacobs';\t----- bird -----\tstudent_club",
    "485": "The provided context is insufficient because there is no direct link between the \"superhero\" table, which contains the name \"Adela O'Gallagher\", and the \"zip_code\" table, which contains county information. There is no information about which table or column links a person's name to their hometown or county.\t----- bird -----\tstudent_club",
    "486": "SELECT COUNT(*) AS exceeded_budget_count\nFROM budget\nWHERE link_to_event = 'November Meeting' AND spent > amount;\t----- bird -----\tstudent_club",
    "487": "SELECT SUM(amount) AS total_budget_amount\nFROM public.budget\nWHERE link_to_event = (\n    SELECT event_id\n    FROM public.event\n    WHERE event_name = 'September Speaker'\n);\t----- bird -----\tstudent_club",
    "488": "The provided context is insufficient to generate the SQL query because there is no direct relationship established between the `event` table and any table containing information about purchases or products related to \"Post Cards, Posters\" on the specified date.\t----- bird -----\tstudent_club",
    "489": "SELECT m.major_name \nFROM member mb\nJOIN major m ON mb.link_to_major = m.major_id\nWHERE mb.first_name = 'Brent' AND mb.last_name = 'Thomason';\t----- bird -----\tstudent_club",
    "490": "SELECT COUNT(*) \nFROM public.member m\nJOIN public.major maj ON m.link_to_major = maj.major_id\nWHERE maj.major_name = 'Business' AND m.t_shirt_size = 'Medium';\t----- bird -----\tstudent_club",
    "491": "The provided context does not contain information about Christof Nielson or an association between individuals and the zip_code table. Therefore, it is insufficient to generate the SQL query.\t----- bird -----\tstudent_club",
    "492": "SELECT major.major_name\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE member.position = 'Vice President';\t----- bird -----\tstudent_club",
    "493": "The provided context is insufficient to determine the hometown state for \"Sacha Harrison\" as there is no information or table related to individuals and their hometown states.\t----- bird -----\tstudent_club",
    "494": "The provided context does not contain sufficient information to determine which department the President of the club was in. The `member` table contains a \"position\" column, but there is no information linking a \"President\" position to a specific department. Additional data would be needed to answer this question.\t----- bird -----\tstudent_club",
    "495": "The provided context is insufficient to generate the SQL query because there is no direct information linking a member's name (e.g., Connor Hilton) to the payment of dues. We would need a table that associates members with their payments or dues, which is not available in the current context.\t----- bird -----\tstudent_club",
    "496": "SELECT m.first_name, m.last_name\nFROM public.income i\nJOIN public.member m ON i.link_to_member = m.member_id\nORDER BY i.date_received ASC\nLIMIT 1;\t----- bird -----\tstudent_club",
    "497": "The provided context is insufficient to generate the SQL query. The context does not include information about the events named \"Yearly Kickoff\" meeting and \"October Meeting\" within the `budget` table or any related table that could help identify these specific events and their associated budgets.\t----- bird -----\tstudent_club",
    "498": "SELECT \n    (SUM(CASE WHEN category = 'Parking' THEN amount ELSE 0 END) * 100.0 / SUM(amount)) AS percentage_parking_budget\nFROM \n    public.budget\nWHERE \n    event_status = 'November Speaker';\t----- bird -----\tstudent_club",
    "499": "The provided context is insufficient to generate the SQL query because there is no information about pizzas or a related product category in the given table schemas.\t----- bird -----\tstudent_club",
    "500": "It can't be generated. The provided context does not contain information about the types of gas (such as \"Premium\") available at each gas station. The context only includes tables related to gas stations and transactions, but no details about gas types.\t----- bird -----\tdebit_card_specializing",
    "501": "SELECT \n    (SELECT COUNT(*) FROM public.customers WHERE \"Currency\" = 'EUR')::FLOAT /\n    (SELECT COUNT(*) FROM public.customers WHERE \"Currency\" = 'CZK')::FLOAT AS eur_to_czk_ratio;\t----- bird -----\tdebit_card_specializing",
    "502": "It can't be generated. The provided context does not include information about regions or specific consumption data that can be linked to \"LAM\" for the year 2012. The `yearmonth` table includes \"CustomerID,\" \"Date,\" and \"Consumption,\" but there is no explicit mention of \"LAM\" or a method to filter by region or location.\t----- bird -----\tdebit_card_specializing",
    "503": "SELECT AVG(y.Consumption) AS Average_Monthly_Consumption\nFROM yearmonth y\nJOIN customers c ON y.CustomerID = c.CustomerID\nWHERE c.Segment = 'SME' AND y.Date LIKE '2013%'\t----- bird -----\tdebit_card_specializing",
    "504": "SELECT y.CustomerID, SUM(y.Consumption) AS TotalConsumption\nFROM yearmonth y\nJOIN customers c ON y.CustomerID = c.CustomerID\nWHERE c.Currency = 'CZK' AND y.Date LIKE '2011%'\nGROUP BY y.CustomerID\nORDER BY TotalConsumption DESC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "505": "SELECT COUNT(DISTINCT y.CustomerID) AS CustomerCount\nFROM yearmonth y\nJOIN customers c ON y.CustomerID = c.CustomerID\nWHERE c.Segment = 'KAM' \n  AND y.Date LIKE '2012%' \n  AND y.Consumption < 30000;\t----- bird -----\tdebit_card_specializing",
    "506": "SELECT \n    c.Currency, \n    SUM(y.Consumption) AS TotalConsumption\nFROM \n    public.yearmonth y\nJOIN \n    public.customers c ON y.CustomerID = c.CustomerID\nWHERE \n    y.Date LIKE '2012%'\nGROUP BY \n    c.Currency;\t----- bird -----\tdebit_card_specializing",
    "507": "The provided context is insufficient to generate the SQL query because there is no information about the currency used in transactions or any indication of whether the amounts in the \"transactions_1k\" table are in EUR. Additional context or a specific column indicating the currency is required to answer this question.\t----- bird -----\tdebit_card_specializing",
    "508": "SELECT c.Segment, SUM(y.Consumption) AS TotalConsumption\nFROM public.yearmonth y\nJOIN public.customers c ON y.CustomerID = c.CustomerID\nGROUP BY c.Segment\nORDER BY TotalConsumption ASC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "509": "The provided context is insufficient to generate the SQL query. There is no information regarding the currency in which the gas was paid (e.g., CZK) in the available tables. Additionally, the context does not specify how to associate transactions with currency types.\t----- bird -----\tdebit_card_specializing",
    "510": "SELECT SUBSTRING(y.\"Date\", 1, 7) AS YearMonth, SUM(y.\"Consumption\") AS TotalConsumption\nFROM public.yearmonth y\nJOIN public.customers c ON y.\"CustomerID\" = c.\"CustomerID\"\nWHERE c.\"Segment\" = 'SME' AND SUBSTRING(y.\"Date\", 1, 4) = '2013'\nGROUP BY YearMonth\nORDER BY TotalConsumption DESC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "511": "The provided context is insufficient to generate the SQL query because the necessary information about the currency used for consumption payments, the segmentation of customers, and the specific consumption data for the year 2013 is not available in the given tables. The context does not include any details about currency conversion or consumption payments in CZK, nor does it specify how to identify the least amount of consumption.\t----- bird -----\tdebit_card_specializing",
    "512": "The provided context is insufficient to generate the SQL query because there is no information about the \"Year\" or segment types such as \"SME, LAM, and KAM\" in the tables. Additionally, there's no indication of currency in the \"yearmonth\" table to filter payments made in EUR. Therefore, I cannot generate the query based on the given context.\t----- bird -----\tdebit_card_specializing",
    "513": "SELECT SUM(\"Consumption\") AS total_consumption\nFROM public.yearmonth\nWHERE \"CustomerID\" = 6 \n  AND \"Date\" BETWEEN '2013-08' AND '2013-11'\t----- bird -----\tdebit_card_specializing",
    "514": "SELECT \n    c1.name AS country, \n    COUNT(gs.GasStationID) AS discount_gas_stations\nFROM \n    public.gasstations gs\nJOIN \n    public.\"Country\" c1 ON gs.Country = c1.name\nWHERE \n    gs.Segment = 'discount'\n    AND (c1.name = 'Czech Republic' OR c1.name = 'Slovakia')\nGROUP BY \n    c1.name;\t----- bird -----\tdebit_card_specializing",
    "515": "SELECT \n    (SELECT SUM(Consumption) FROM public.yearmonth WHERE CustomerID = 7 AND Date LIKE '2013-04%') -\n    (SELECT SUM(Consumption) FROM public.yearmonth WHERE CustomerID = 5 AND Date LIKE '2013-04%') AS Consumption_Difference\t----- bird -----\tdebit_card_specializing",
    "516": "The provided context does not contain information on the currency used by SMEs (Small and Medium Enterprises) for payments. The \"customers\" table contains a \"Currency\" column, but there is no information linking SMEs specifically to their payment currencies. Therefore, the query cannot be generated with the given context.\t----- bird -----\tdebit_card_specializing",
    "517": "SELECT y.CustomerID, MAX(y.Consumption) AS MaxConsumption\nFROM yearmonth y\nJOIN customers c ON y.CustomerID = c.CustomerID\nWHERE c.Segment = 'LAM'\nAND c.Currency = 'Euro'\nAND y.Date BETWEEN '2013-10-01' AND '2013-10-31'\nGROUP BY y.CustomerID\nORDER BY MaxConsumption DESC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "518": "The provided context is insufficient to generate the SQL query because there is no information linking a specific customer or entity named \"KAM\" to the tables, and there is no direct relationship between customers and the \"yearmonth\" table where consumption is recorded.\t----- bird -----\tdebit_card_specializing",
    "519": "SELECT SUM(y.Consumption) AS TotalConsumption\nFROM yearmonth y\nJOIN customers c ON y.\"CustomerID\" = c.\"CustomerID\"\nWHERE c.\"Segment\" = 'KAM' AND y.\"Date\" LIKE '2013-05%'\t----- bird -----\tdebit_card_specializing",
    "520": "SELECT \n    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM public.yearmonth ym JOIN public.customers c ON ym.\"CustomerID\" = c.\"CustomerID\" WHERE c.\"Segment\" = 'LAM')) AS percentage\nFROM \n    public.yearmonth ym\nJOIN \n    public.customers c ON ym.\"CustomerID\" = c.\"CustomerID\"\nWHERE \n    c.\"Segment\" = 'LAM' AND ym.\"Consumption\" > 46.73;\t----- bird -----\tdebit_card_specializing",
    "521": "SELECT g.Country, COUNT(*) AS total_value_for_money_gas_stations\nFROM public.gasstations g\nWHERE g.Segment = 'value for money'\nGROUP BY g.Country;\t----- bird -----\tdebit_card_specializing",
    "522": "The provided context is insufficient to generate the SQL query because there is no information available about what \"KAM customers\" refers to, nor is there any connection between customer segments and the currency they pay in within the given tables.\t----- bird -----\tdebit_card_specializing",
    "523": "SELECT \n    (COUNT(CASE WHEN \"Consumption\" > 528.3 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_consumed_more_than_528_3\nFROM \n    public.yearmonth\nWHERE \n    \"Date\" LIKE '2012-02%';\t----- bird -----\tdebit_card_specializing",
    "524": "SELECT \n    (COUNT(CASE WHEN Segment = 'Premium' THEN 1 END)::DECIMAL / COUNT(*)) * 100 AS percentage_premium\nFROM \n    public.gasstations\nWHERE \n    Country = 'Slovakian';\t----- bird -----\tdebit_card_specializing",
    "525": "SELECT \"CustomerID\", SUM(\"Consumption\") as TotalConsumption\nFROM public.yearmonth\nWHERE \"Date\" LIKE '2013-09%'\nGROUP BY \"CustomerID\"\nORDER BY TotalConsumption DESC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "526": "SELECT c.\"Segment\", SUM(y.\"Consumption\") AS total_consumption\nFROM public.yearmonth y\nJOIN public.customers c ON y.\"CustomerID\" = c.\"CustomerID\"\nWHERE y.\"Date\" LIKE '2013-09%'\nGROUP BY c.\"Segment\"\nORDER BY total_consumption ASC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "527": "SELECT c.\"CustomerID\", MIN(y.\"Consumption\") AS MinConsumption\nFROM public.yearmonth y\nJOIN public.customers c ON y.\"CustomerID\" = c.\"CustomerID\"\nWHERE c.\"Segment\" = 'SME' AND y.\"Date\" LIKE '2012-06%'\nGROUP BY c.\"CustomerID\"\nORDER BY MinConsumption ASC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "528": "SELECT MAX(Consumption) AS highest_monthly_consumption\nFROM public.yearmonth\nWHERE Date LIKE '2012%';\t----- bird -----\tdebit_card_specializing",
    "529": "SELECT MAX(ym.Consumption) AS BiggestMonthlyConsumption\nFROM public.yearmonth ym\nJOIN public.customers c ON ym.CustomerID = c.CustomerID\nWHERE c.Currency = 'euro';\t----- bird -----\tdebit_card_specializing",
    "530": "SELECT DISTINCT p.Description\nFROM public.transactions_1k t\nJOIN public.products p ON t.ProductID = p.ProductID\nWHERE t.Date >= '2013-09-01' AND t.Date <= '2013-09-30';\t----- bird -----\tdebit_card_specializing",
    "531": "SELECT DISTINCT g.Country\nFROM public.gasstations g\nJOIN public.transactions_1k t ON g.GasStationID = t.GasStationID\nWHERE t.Date BETWEEN '2013-06-01' AND '2013-06-30';\t----- bird -----\tdebit_card_specializing",
    "532": "SELECT DISTINCT gasstations.ChainID\nFROM gasstations\nJOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID\nWHERE transactions_1k.Price = 'euro';\t----- bird -----\tdebit_card_specializing",
    "533": "SELECT DISTINCT p.Description\nFROM public.transactions_1k t\nJOIN public.products p ON t.ProductID = p.ProductID\nJOIN public.customers c ON t.CustomerID = c.CustomerID\nWHERE c.Currency = 'Euro';\t----- bird -----\tdebit_card_specializing",
    "534": "SELECT AVG(Price) AS AveragePrice\nFROM public.transactions_1k\nWHERE Date BETWEEN '2012-01-01' AND '2012-01-31';\t----- bird -----\tdebit_card_specializing",
    "535": "SELECT COUNT(DISTINCT y.CustomerID) AS CustomerCount\nFROM public.yearmonth y\nJOIN public.customers c ON y.CustomerID = c.CustomerID\nWHERE c.Currency = 'euro' AND y.Consumption > 1000;\t----- bird -----\tdebit_card_specializing",
    "536": "SELECT DISTINCT p.Description\nFROM public.transactions_1k t\nJOIN public.gasstations g ON t.GasStationID = g.GasStationID\nJOIN public.products p ON t.ProductID = p.ProductID\nWHERE g.Country = 'Czech Republic';\t----- bird -----\tdebit_card_specializing",
    "537": "SELECT DISTINCT t.Time\nFROM public.transactions_1k t\nJOIN public.gasstations g ON t.GasStationID = g.GasStationID\nWHERE g.ChainID = 11;\t----- bird -----\tdebit_card_specializing",
    "538": "SELECT COUNT(*)\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE g.Country = 'Czech Republic' AND t.Price > 1000;\t----- bird -----\tdebit_card_specializing",
    "539": "SELECT COUNT(*) \nFROM public.transactions_1k t\nJOIN public.gasstations g ON t.GasStationID = g.GasStationID\nWHERE g.Country = 'Czech Republic' AND t.Date > '2012-01-01';\t----- bird -----\tdebit_card_specializing",
    "540": "SELECT AVG(Amount * Price) AS average_total_price\nFROM public.transactions_1k t\nJOIN public.gasstations g ON t.GasStationID = g.GasStationID\nWHERE g.Country = 'Czech Republic';\t----- bird -----\tdebit_card_specializing",
    "541": "SELECT AVG(t.TotalPrice) AS AverageTotalPrice\nFROM (\n    SELECT c.CustomerID, SUM(t.Price) AS TotalPrice\n    FROM public.customers c\n    JOIN public.transactions_1k t ON c.CustomerID = t.CustomerID\n    WHERE c.Currency = 'euro'\n    GROUP BY c.CustomerID\n) AS t;\t----- bird -----\tdebit_card_specializing",
    "542": "SELECT t.CustomerID, SUM(t.Amount * t.Price) AS TotalSpent\nFROM public.transactions_1k t\nWHERE t.Date = '2012-08-25'\nGROUP BY t.CustomerID\nORDER BY TotalSpent DESC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "543": "SELECT c.name AS CountryName\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nJOIN \"Country\" c ON g.Country = c.id\nWHERE t.Date = '2012-08-25'\nORDER BY t.Time\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "544": "SELECT c.Currency \nFROM public.transactions_1k t\nJOIN public.customers c ON t.CustomerID = c.CustomerID\nWHERE t.Date = '2012-08-24' AND t.Time = '16:25:00';\t----- bird -----\tdebit_card_specializing",
    "545": "The provided context is insufficient to generate the SQL query because there is no direct relationship or timestamp information linking the \"customers\" table with the \"transactions_1k\" table, which contains date and time information.\t----- bird -----\tdebit_card_specializing",
    "546": "SELECT COUNT(*) \nFROM public.transactions_1k t\nJOIN public.customers c ON t.\"CustomerID\" = c.\"CustomerID\"\nWHERE t.\"Date\" = '2012-08-26' \nAND t.\"Time\" < '12:00:00'\nAND c.\"Currency\" = 'CZK';\t----- bird -----\tdebit_card_specializing",
    "547": "SELECT c.\"Segment\"\nFROM public.customers c\nJOIN (\n    SELECT \"CustomerID\"\n    FROM public.yearmonth\n    ORDER BY \"Date\" ASC\n    LIMIT 1\n) earliest_customer ON c.\"CustomerID\" = earliest_customer.\"CustomerID\"\t----- bird -----\tdebit_card_specializing",
    "548": "SELECT g.Country\nFROM public.transactions_1k t\nJOIN public.gasstations g ON t.GasStationID = g.GasStationID\nWHERE t.Date = '2012-08-24' AND t.Time = '12:42:00';\t----- bird -----\tdebit_card_specializing",
    "549": "SELECT \"ProductID\" \nFROM public.transactions_1k \nWHERE \"Date\" = '2012-08-23' AND \"Time\" = '21:20:00';\t----- bird -----\tdebit_card_specializing"
}